
16_Sending_Complex_Data_With_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e48  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  080081c0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e24  20000078  08008234  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001e9c  08008234  00021e9c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026099  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047d0  00000000  00000000  00046141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b0  00000000  00000000  0004a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002118  00000000  00000000  0004cbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c1b  00000000  00000000  0004ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020705  00000000  00000000  000548fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef881  00000000  00000000  00075000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00164881  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b6c  00000000  00000000  001648d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007f70 	.word	0x08007f70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007f70 	.word	0x08007f70

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000534:	f023 0218 	bic.w	r2, r3, #24
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
TaskHandle_t hum_task_handle, press_task_handle, receiver_handle;

QueueHandle_t xQueue;

int main (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8

	HAL_Init ();
 800058a:	f000 fcbb 	bl	8000f04 <HAL_Init>
	SystemClock_Config ();
 800058e:	f000 f8ab 	bl	80006e8 <SystemClock_Config>
	MX_GPIO_Init ();
 8000592:	f000 f993 	bl	80008bc <MX_GPIO_Init>
	MX_LPUART1_UART_Init ();
 8000596:	f000 f91d 	bl	80007d4 <MX_LPUART1_UART_Init>
	MX_USB_PCD_Init ();
 800059a:	f000 f967 	bl	800086c <MX_USB_PCD_Init>

//	Create queue to hold a maximum of 3 structures.
	xQueue = xQueueCreate(3, sizeof(Data_t));
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	2003      	movs	r0, #3
 80005a4:	f004 f9e6 	bl	8004974 <xQueueGenericCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0x6c>)
 80005ac:	6013      	str	r3, [r2, #0]

	xTaskCreate(ReceiverTask,
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <main+0x70>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	490f      	ldr	r1, [pc, #60]	; (80005f8 <main+0x74>)
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x78>)
 80005be:	f004 fe7c 	bl	80052ba <xTaskCreate>
	            100,
	            NULL,
	            1,
	            &receiver_handle);

	xTaskCreate(SenderTask,
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <main+0x7c>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x80>)
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	490e      	ldr	r1, [pc, #56]	; (8000608 <main+0x84>)
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0x88>)
 80005d2:	f004 fe72 	bl	80052ba <xTaskCreate>
	            100,
	            (void *)&(xStructToSend[0]),
	            2,
	            &hum_task_handle);

	xTaskCreate(SenderTask,
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x7c>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <main+0x8c>)
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	490c      	ldr	r1, [pc, #48]	; (8000614 <main+0x90>)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x88>)
 80005e6:	f004 fe68 	bl	80052ba <xTaskCreate>
	            100,
	            (void *)&(xStructToSend[1]),
	            2,
	            &hum_task_handle);

	vTaskStartScheduler();
 80005ea:	f004 ffc1 	bl	8005570 <vTaskStartScheduler>

	while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x6a>
 80005f0:	20000428 	.word	0x20000428
 80005f4:	20000424 	.word	0x20000424
 80005f8:	08007f88 	.word	0x08007f88
 80005fc:	08000659 	.word	0x08000659
 8000600:	20000420 	.word	0x20000420
 8000604:	0800804c 	.word	0x0800804c
 8000608:	08007f98 	.word	0x08007f98
 800060c:	08000619 	.word	0x08000619
 8000610:	0800804e 	.word	0x0800804e
 8000614:	08007fb0 	.word	0x08007fb0

08000618 <SenderTask>:
	}

}

void SenderTask(void *pvParameters)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	BaseType_t qStatus;

	//	Enter blocked state for 200ms for space to become available in the queue each
	//	time the queue is full
	const TickType_t wait_time = pdMS_TO_TICKS(200);
 8000620:	23c8      	movs	r3, #200	; 0xc8
 8000622:	613b      	str	r3, [r7, #16]
	while(1)
	{
		qStatus = xQueueSend(xQueue, pvParameters, wait_time);
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SenderTask+0x38>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	f004 f9ff 	bl	8004a30 <xQueueGenericSend>
 8000632:	60f8      	str	r0, [r7, #12]
		if(qStatus != pdPASS)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d0f4      	beq.n	8000624 <SenderTask+0xc>
		{
//			Do Something ...
			for(uint32_t i = 0; i < 100000; i++) {}
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e002      	b.n	8000646 <SenderTask+0x2e>
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4a02      	ldr	r2, [pc, #8]	; (8000654 <SenderTask+0x3c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d9f8      	bls.n	8000640 <SenderTask+0x28>
		qStatus = xQueueSend(xQueue, pvParameters, wait_time);
 800064e:	e7e9      	b.n	8000624 <SenderTask+0xc>
 8000650:	20000428 	.word	0x20000428
 8000654:	0001869f 	.word	0x0001869f

08000658 <ReceiverTask>:
	}

}

void ReceiverTask(void *pvParameters)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

	BaseType_t qStatus;

	while(1)
	{
		qStatus = xQueueReceive(xQueue, &xReceivedStructure, 0);
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <ReceiverTask+0x58>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	4913      	ldr	r1, [pc, #76]	; (80006b4 <ReceiverTask+0x5c>)
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fb7b 	bl	8004d64 <xQueueReceive>
 800066e:	60b8      	str	r0, [r7, #8]

		if(qStatus != pdPASS)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d00a      	beq.n	800068c <ReceiverTask+0x34>
		{
			for(uint32_t i = 0; i < 100000; i++) {}
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	e002      	b.n	8000682 <ReceiverTask+0x2a>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <ReceiverTask+0x60>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d9f8      	bls.n	800067c <ReceiverTask+0x24>
 800068a:	e7e9      	b.n	8000660 <ReceiverTask+0x8>
		}
		else {
			if(xReceivedStructure.sDataSource == humidity_sensor)
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <ReceiverTask+0x5c>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d106      	bne.n	80006a2 <ReceiverTask+0x4a>
			{
				printf("Humidity sensor value = %d \n\r", xReceivedStructure.ucValue);
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <ReceiverTask+0x5c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4808      	ldr	r0, [pc, #32]	; (80006bc <ReceiverTask+0x64>)
 800069c:	f006 fdfc 	bl	8007298 <iprintf>
 80006a0:	e7de      	b.n	8000660 <ReceiverTask+0x8>
			}
			else
			{
				printf("Pressure sensor value = %d \n\r", xReceivedStructure.ucValue);
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <ReceiverTask+0x5c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <ReceiverTask+0x68>)
 80006aa:	f006 fdf5 	bl	8007298 <iprintf>
		qStatus = xQueueReceive(xQueue, &xReceivedStructure, 0);
 80006ae:	e7d7      	b.n	8000660 <ReceiverTask+0x8>
 80006b0:	20000428 	.word	0x20000428
 80006b4:	2000041c 	.word	0x2000041c
 80006b8:	0001869f 	.word	0x0001869f
 80006bc:	08007fc8 	.word	0x08007fc8
 80006c0:	08007fe8 	.word	0x08007fe8

080006c4 <__io_putchar>:
		}
	}
}

int __io_putchar (int ch)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit (&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	2201      	movs	r2, #1
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <__io_putchar+0x20>)
 80006d6:	f003 f9c5 	bl	8003a64 <HAL_UART_Transmit>
	return ch;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000094 	.word	0x20000094

080006e8 <SystemClock_Config>:

void SystemClock_Config (void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09a      	sub	sp, #104	; 0x68
 80006ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2248      	movs	r2, #72	; 0x48
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fd31 	bl	800715e <memset>
		{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
		{ 0 };

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800070e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800071c:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800071e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f023 0303 	bic.w	r3, r3, #3
 8000728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 8000732:	f001 f83d 	bl	80017b0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fef4 	bl	8000524 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <SystemClock_Config+0xe8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <SystemClock_Config+0xe8>)
 8000746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <SystemClock_Config+0xe8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000758:	2327      	movs	r3, #39	; 0x27
 800075a:	623b      	str	r3, [r7, #32]
	        | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
	        | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000774:	2300      	movs	r3, #0
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fc05 	bl	8001f94 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xac>
	{
		Error_Handler ();
 8000790:	f000 f8fe 	bl	8000990 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000794:	236f      	movs	r3, #111	; 0x6f
 8000796:	607b      	str	r3, [r7, #4]
	        | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
	        | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000798:	2302      	movs	r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 ff61 	bl	800267c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xdc>
	{
		Error_Handler ();
 80007c0:	f000 f8e6 	bl	8000990 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 80007c4:	f002 fd4e 	bl	8003264 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c8:	bf00      	nop
 80007ca:	3768      	adds	r7, #104	; 0x68
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58000400 	.word	0x58000400

080007d4 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_LPUART1_UART_Init+0x94>)
 80007dc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init (&hlpuart1) != HAL_OK)
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 800081e:	f003 f8d1 	bl	80039c4 <HAL_UART_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler ();
 8000828:	f000 f8b2 	bl	8000990 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold (&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 800082c:	2100      	movs	r1, #0
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000830:	f003 fdc2 	bl	80043b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_LPUART1_UART_Init+0x6a>
	        != HAL_OK)
	{
		Error_Handler ();
 800083a:	f000 f8a9 	bl	8000990 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold (&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 800083e:	2100      	movs	r1, #0
 8000840:	4808      	ldr	r0, [pc, #32]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000842:	f003 fdf7 	bl	8004434 <HAL_UARTEx_SetRxFifoThreshold>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_LPUART1_UART_Init+0x7c>
	        != HAL_OK)
	{
		Error_Handler ();
 800084c:	f000 f8a0 	bl	8000990 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode (&hlpuart1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_LPUART1_UART_Init+0x90>)
 8000852:	f003 fd78 	bl	8004346 <HAL_UARTEx_DisableFifoMode>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler ();
 800085c:	f000 f898 	bl	8000990 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000094 	.word	0x20000094
 8000868:	40008000 	.word	0x40008000

0800086c <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <MX_USB_PCD_Init+0x4c>)
 8000874:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 8000878:	2208      	movs	r2, #8
 800087a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 800087e:	2202      	movs	r2, #2
 8000880:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 8000884:	2202      	movs	r2, #2
 8000886:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init (&hpcd_USB_FS) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_USB_PCD_Init+0x48>)
 80008a2:	f000 fde3 	bl	800146c <HAL_PCD_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USB_PCD_Init+0x44>
	{
		Error_Handler ();
 80008ac:	f000 f870 	bl	8000990 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000124 	.word	0x20000124
 80008b8:	40006800 	.word	0x40006800

080008bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
		{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	2004      	movs	r0, #4
 80008d2:	f7ff fe3d 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fe3a 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	2002      	movs	r0, #2
 80008de:	f7ff fe37 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	2008      	movs	r0, #8
 80008e4:	f7ff fe34 	bl	8000550 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2123      	movs	r1, #35	; 0x23
 80008ec:	481c      	ldr	r0, [pc, #112]	; (8000960 <MX_GPIO_Init+0xa4>)
 80008ee:	f000 fda5 	bl	800143c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	2310      	movs	r3, #16
 80008f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_GPIO_Init+0xa8>)
 8000904:	f000 fc2a 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8000908:	2323      	movs	r3, #35	; 0x23
 800090a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <MX_GPIO_Init+0xa4>)
 800091e:	f000 fc1d 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8000922:	2303      	movs	r3, #3
 8000924:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (GPIOD, &GPIO_InitStruct);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_GPIO_Init+0xac>)
 8000934:	f000 fc12 	bl	800115c <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8000938:	23c0      	movs	r3, #192	; 0xc0
 800093a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000948:	2307      	movs	r3, #7
 800094a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_GPIO_Init+0xa4>)
 8000952:	f000 fc03 	bl	800115c <HAL_GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	48000400 	.word	0x48000400
 8000964:	48000800 	.word	0x48000800
 8000968:	48000c00 	.word	0x48000c00

0800096c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick ();
 800097e:	f000 fae1 	bl	8000f44 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40012c00 	.word	0x40012c00

08000990 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>

0800099a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f0:	68fb      	ldr	r3, [r7, #12]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	210f      	movs	r1, #15
 8000a42:	f06f 0001 	mvn.w	r0, #1
 8000a46:	f000 fb61 	bl	800110c <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000a52:	463b      	mov	r3, r7
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 febb 	bl	80017d0 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000a5a:	f000 fefb 	bl	8001854 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09c      	sub	sp, #112	; 0x70
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2250      	movs	r2, #80	; 0x50
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f006 fb68 	bl	800715e <memset>
  if(huart->Instance==LPUART1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d124      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fa67 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab0:	f7ff ff6e 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ffa2 	bl	80009fe <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff ff6d 	bl	800099a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f000 fb3d 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3770      	adds	r7, #112	; 0x70
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40008000 	.word	0x40008000

08000af0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09c      	sub	sp, #112	; 0x70
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2250      	movs	r2, #80	; 0x50
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fb24 	bl	800715e <memset>
  if(hpcd->Instance==USB)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <HAL_PCD_MspInit+0xa8>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d136      	bne.n	8000b8e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b26:	2318      	movs	r3, #24
 8000b28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b40:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fa13 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000b58:	f7ff ff1a 	bl	8000990 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f7ff ff1c 	bl	800099a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b74:	230a      	movs	r3, #10
 8000b76:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 faeb 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b86:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b8a:	f7ff ff1f 	bl	80009cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3770      	adds	r7, #112	; 0x70
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40006800 	.word	0x40006800

08000b9c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2019      	movs	r0, #25
 8000be6:	f000 fa91 	bl	800110c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bea:	2019      	movs	r0, #25
 8000bec:	f000 faa8 	bl	8001140 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bf4:	f7ff ffd2 	bl	8000b9c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0208 	add.w	r2, r7, #8
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 ff26 	bl	8002a54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c08:	f001 ff0e 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8000c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <HAL_InitTick+0x8c>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_InitTick+0x90>)
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_InitTick+0x94>)
 8000c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_InitTick+0x90>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_InitTick+0x90>)
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_InitTick+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_InitTick+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <HAL_InitTick+0x90>)
 8000c3e:	f002 fc28 	bl	8003492 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_InitTick+0x90>)
 8000c4a:	f002 fc83 	bl	8003554 <HAL_TIM_Base_Start_IT>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3730      	adds	r7, #48	; 0x30
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	431bde83 	.word	0x431bde83
 8000c60:	2000042c 	.word	0x2000042c
 8000c64:	40012c00 	.word	0x40012c00

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c9a:	f002 fca9 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000042c 	.word	0x2000042c

08000ca8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00a      	b.n	8000cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cba:	f3af 8000 	nop.w
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf0      	blt.n	8000cba <_read+0x12>
	}

return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e009      	b.n	8000d08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fce1 	bl	80006c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf1      	blt.n	8000cf4 <_write+0x12>
	}
	return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_close>:

int _close(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d42:	605a      	str	r2, [r3, #4]
	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_isatty>:

int _isatty(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f006 f8a2 	bl	8006efc <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20030000 	.word	0x20030000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000478 	.word	0x20000478
 8000dec:	20001ea0 	.word	0x20001ea0

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <SystemInit+0x98>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <SystemInit+0x98>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <SystemInit+0x9c>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3a:	f023 0305 	bic.w	r3, r3, #5
 8000e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <SystemInit+0xa0>)
 8000e5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <SystemInit+0xa0>)
 8000e64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	faf6fefb 	.word	0xfaf6fefb
 8000e90:	22041000 	.word	0x22041000

08000e94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e98:	3304      	adds	r3, #4

08000e9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e9e:	d3f9      	bcc.n	8000e94 <CopyDataInit>
  bx lr
 8000ea0:	4770      	bx	lr

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ea2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ea4:	3004      	adds	r0, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ea6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>
  bx lr
 8000eaa:	4770      	bx	lr

08000eac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000eae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb0:	f7ff ff9e 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopForever+0x8>)
 8000eb6:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <LoopForever+0xc>)
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <LoopForever+0x10>)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f7ff ffed 	bl	8000e9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoopForever+0x14>)
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <LoopForever+0x18>)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f7ff ffee 	bl	8000ea6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopForever+0x1c>)
 8000ecc:	490b      	ldr	r1, [pc, #44]	; (8000efc <LoopForever+0x20>)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f7ff ffe9 	bl	8000ea6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed4:	f006 f90e 	bl	80070f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ed8:	f7ff fb54 	bl	8000584 <main>

08000edc <LoopForever>:

LoopForever:
  b LoopForever
 8000edc:	e7fe      	b.n	8000edc <LoopForever>
 8000ede:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ee0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	20000078 	.word	0x20000078
 8000eec:	080081c0 	.word	0x080081c0
  INIT_BSS _sbss, _ebss
 8000ef0:	20000078 	.word	0x20000078
 8000ef4:	20001e9c 	.word	0x20001e9c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ef8:	20030000 	.word	0x20030000
 8000efc:	20030000 	.word	0x20030000

08000f00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_Init+0x3c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_Init+0x3c>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f8eb 	bl	80010f6 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f20:	200f      	movs	r0, #15
 8000f22:	f7ff fe55 	bl	8000bd0 <HAL_InitTick>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	e001      	b.n	8000f36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f32:	f7ff fd7d 	bl	8000a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58004000 	.word	0x58004000

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000000c 	.word	0x2000000c
 8000f68:	2000047c 	.word	0x2000047c

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000047c 	.word	0x2000047c

08000f84 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTickPrio+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff4c 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111a:	f7ff ff63 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 800111e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff ffb3 	bl	8001090 <NVIC_EncodePriority>
 800112a:	4602      	mov	r2, r0
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff82 	bl	800103c <__NVIC_SetPriority>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff56 	bl	8001000 <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e14c      	b.n	8001406 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 813e 	beq.w	8001400 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d005      	beq.n	800119c <HAL_GPIO_Init+0x40>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 0201 	and.w	r2, r3, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b03      	cmp	r3, #3
 8001208:	d017      	beq.n	800123a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d123      	bne.n	800128e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	6939      	ldr	r1, [r7, #16]
 800128a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0203 	and.w	r2, r3, #3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8098 	beq.w	8001400 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fa:	d019      	beq.n	8001330 <HAL_GPIO_Init+0x1d4>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a4a      	ldr	r2, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x2cc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x1d0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a49      	ldr	r2, [pc, #292]	; (800142c <HAL_GPIO_Init+0x2d0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1cc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2d4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1c8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a47      	ldr	r2, [pc, #284]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1c4>
 800131c:	2304      	movs	r3, #4
 800131e:	e008      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001320:	2307      	movs	r3, #7
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001324:	2303      	movs	r3, #3
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001342:	4938      	ldr	r1, [pc, #224]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001374:	4a30      	ldr	r2, [pc, #192]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139e:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_GPIO_Init+0x2dc>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f aeab 	bne.w	800116c <HAL_GPIO_Init+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	48001000 	.word	0x48001000
 8001438:	58000800 	.word	0x58000800

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001458:	e002      	b.n	8001460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af06      	add	r7, sp, #24
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0dd      	b.n	800163a <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fb2c 	bl	8000af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f84e 	bl	800454c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e04d      	b.n	8001552 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3305      	adds	r3, #5
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	3304      	adds	r3, #4
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	b298      	uxth	r0, r3
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	333a      	adds	r3, #58	; 0x3a
 80014f6:	4602      	mov	r2, r0
 80014f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	3307      	adds	r3, #7
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	333c      	adds	r3, #60	; 0x3c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	3340      	adds	r3, #64	; 0x40
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	3344      	adds	r3, #68	; 0x44
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	3301      	adds	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3ac      	bcc.n	80014b6 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e044      	b.n	80015ec <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3b5      	bcc.n	8001562 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	687e      	ldr	r6, [r7, #4]
 80015fe:	466d      	mov	r5, sp
 8001600:	f106 0410 	add.w	r4, r6, #16
 8001604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800160c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001610:	1d33      	adds	r3, r6, #4
 8001612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f002 ffb4 	bl	8004582 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f805 	bl	8001642 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001642 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001666:	b29b      	uxth	r3, r3
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800167a:	b29b      	uxth	r3, r3
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LL_EXTI_EnableIT_0_31+0x24>)
 80016a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016a6:	4905      	ldr	r1, [pc, #20]	; (80016bc <LL_EXTI_EnableIT_0_31+0x24>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	58000800 	.word	0x58000800

080016c0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <LL_EXTI_DisableIT_0_31+0x28>)
 80016ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4905      	ldr	r1, [pc, #20]	; (80016e8 <LL_EXTI_DisableIT_0_31+0x28>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	58000800 	.word	0x58000800

080016ec <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80016f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4905      	ldr	r1, [pc, #20]	; (8001714 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001700:	4013      	ands	r3, r2
 8001702:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	58000800 	.word	0x58000800

08001718 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4904      	ldr	r1, [pc, #16]	; (8001738 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]

}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	58000800 	.word	0x58000800

0800173c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	43db      	mvns	r3, r3
 800174c:	4904      	ldr	r1, [pc, #16]	; (8001760 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800174e:	4013      	ands	r3, r2
 8001750:	600b      	str	r3, [r1, #0]

}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	58000800 	.word	0x58000800

08001764 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	58000800 	.word	0x58000800

08001788 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	43db      	mvns	r3, r3
 8001798:	4904      	ldr	r1, [pc, #16]	; (80017ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800179a:	4013      	ands	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	58000800 	.word	0x58000800

080017b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	58000400 	.word	0x58000400

080017d0 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_PWR_ConfigPVD+0x80>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 020e 	bic.w	r2, r3, #14
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	491a      	ldr	r1, [pc, #104]	; (8001850 <HAL_PWR_ConfigPVD+0x80>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80017ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017ee:	f7ff ff67 	bl	80016c0 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80017f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017f6:	f7ff ff79 	bl	80016ec <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80017fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017fe:	f7ff ffc3 	bl	8001788 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001802:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001806:	f7ff ff99 	bl	800173c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001816:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800181a:	f7ff ff3d 	bl	8001698 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800182a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800182e:	f7ff ff73 	bl	8001718 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800183e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001842:	f7ff ff8f 	bl	8001764 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	58000400 	.word	0x58000400

08001854 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_PWR_EnablePVD+0x1c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_PWR_EnablePVD+0x1c>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6053      	str	r3, [r2, #4]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	58000400 	.word	0x58000400

08001874 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_PWREx_GetVoltageRange+0x18>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	58000400 	.word	0x58000400

08001890 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018a2:	d101      	bne.n	80018a8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001902:	d101      	bne.n	8001908 <LL_RCC_HSE_IsReady+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_RCC_HSE_IsReady+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001962:	d101      	bne.n	8001968 <LL_RCC_HSI_IsReady+0x18>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <LL_RCC_HSI_IsReady+0x1a>
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d101      	bne.n	80019fa <LL_RCC_HSI48_IsReady+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_RCC_HSI48_IsReady+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d101      	bne.n	8001aa6 <LL_RCC_LSE_IsReady+0x18>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_RCC_LSE_IsReady+0x1a>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d101      	bne.n	8001b0e <LL_RCC_LSI1_IsReady+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_RCC_LSI1_IsReady+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d101      	bne.n	8001b76 <LL_RCC_LSI2_IsReady+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_RCC_LSI2_IsReady+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d101      	bne.n	8001c02 <LL_RCC_MSI_IsReady+0x16>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_RCC_MSI_IsReady+0x18>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2bb0      	cmp	r3, #176	; 0xb0
 8001c4c:	d901      	bls.n	8001c52 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c4e:	23b0      	movs	r3, #176	; 0xb0
 8001c50:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 0203 	bic.w	r2, r3, #3
 8001c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d2e:	f023 020f 	bic.w	r2, r3, #15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2c:	6013      	str	r3, [r2, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e68:	d101      	bne.n	8001e6e <LL_RCC_PLL_IsReady+0x18>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_RCC_PLL_IsReady+0x1a>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0303 	and.w	r3, r3, #3
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d101      	bne.n	8001ef4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f14:	d101      	bne.n	8001f1a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3a:	d101      	bne.n	8001f40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f5e:	d101      	bne.n	8001f64 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f82:	d101      	bne.n	8001f88 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b08d      	sub	sp, #52	; 0x34
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e363      	b.n	800266e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 808d 	beq.w	80020ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb4:	f7ff fe7d 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 8001fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fba:	f7ff ff83 	bl	8001ec4 <LL_RCC_PLL_GetMainSource>
 8001fbe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3e>
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	2b0c      	cmp	r3, #12
 8001fca:	d147      	bne.n	800205c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d144      	bne.n	800205c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e347      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001fe2:	f7ff fe28 	bl	8001c36 <LL_RCC_MSI_GetRange>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	429c      	cmp	r4, r3
 8001fea:	d914      	bls.n	8002016 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fd61 	bl	8002ab8 <RCC_SetFlashLatencyFromMSIRange>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e336      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fe02 	bl	8001c0e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fe26 	bl	8001c60 <LL_RCC_MSI_SetCalibTrimming>
 8002014:	e013      	b.n	800203e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fdf7 	bl	8001c0e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe1b 	bl	8001c60 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fd42 	bl	8002ab8 <RCC_SetFlashLatencyFromMSIRange>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e317      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800203e:	f000 fcc9 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002042:	4603      	mov	r3, r0
 8002044:	4aa4      	ldr	r2, [pc, #656]	; (80022d8 <HAL_RCC_OscConfig+0x344>)
 8002046:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002048:	4ba4      	ldr	r3, [pc, #656]	; (80022dc <HAL_RCC_OscConfig+0x348>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fdbf 	bl	8000bd0 <HAL_InitTick>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d039      	beq.n	80020cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e308      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01e      	beq.n	80020a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002064:	f7ff fda4 	bl	8001bb0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002068:	f7fe ff80 	bl	8000f6c <HAL_GetTick>
 800206c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002070:	f7fe ff7c 	bl	8000f6c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e2f5      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002082:	f7ff fdb3 	bl	8001bec <LL_RCC_MSI_IsReady>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f1      	beq.n	8002070 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fdbc 	bl	8001c0e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fde0 	bl	8001c60 <LL_RCC_MSI_SetCalibTrimming>
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a2:	f7ff fd94 	bl	8001bce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a6:	f7fe ff61 	bl	8000f6c <HAL_GetTick>
 80020aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ae:	f7fe ff5d 	bl	8000f6c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e2d6      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020c0:	f7ff fd94 	bl	8001bec <LL_RCC_MSI_IsReady>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f1      	bne.n	80020ae <HAL_RCC_OscConfig+0x11a>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d047      	beq.n	800216a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	f7ff fdea 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 80020de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e0:	f7ff fef0 	bl	8001ec4 <LL_RCC_PLL_GetMainSource>
 80020e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x164>
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d134      	bne.n	800216a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e2b4      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0x180>
 800210e:	f7ff fbd1 	bl	80018b4 <LL_RCC_HSE_Enable>
 8002112:	e001      	b.n	8002118 <HAL_RCC_OscConfig+0x184>
 8002114:	f7ff fbdd 	bl	80018d2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d012      	beq.n	8002146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe ff24 	bl	8000f6c <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe ff20 	bl	8000f6c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e299      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800213a:	f7ff fbd9 	bl	80018f0 <LL_RCC_HSE_IsReady>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f1      	beq.n	8002128 <HAL_RCC_OscConfig+0x194>
 8002144:	e011      	b.n	800216a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe ff11 	bl	8000f6c <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214e:	f7fe ff0d 	bl	8000f6c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e286      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002160:	f7ff fbc6 	bl	80018f0 <LL_RCC_HSE_IsReady>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f1      	bne.n	800214e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d04c      	beq.n	8002210 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	f7ff fd9c 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 800217a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217c:	f7ff fea2 	bl	8001ec4 <LL_RCC_PLL_GetMainSource>
 8002180:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x200>
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d10e      	bne.n	80021ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e266      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fbe5 	bl	8001974 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021aa:	e031      	b.n	8002210 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d019      	beq.n	80021e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	f7ff fbae 	bl	8001914 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fed8 	bl	8000f6c <HAL_GetTick>
 80021bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe fed4 	bl	8000f6c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e24d      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021d2:	f7ff fbbd 	bl	8001950 <LL_RCC_HSI_IsReady>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fbc7 	bl	8001974 <LL_RCC_HSI_SetCalibTrimming>
 80021e6:	e013      	b.n	8002210 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e8:	f7ff fba3 	bl	8001932 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe febe 	bl	8000f6c <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7fe feba 	bl	8000f6c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e233      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002206:	f7ff fba3 	bl	8001950 <LL_RCC_HSI_IsReady>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f1      	bne.n	80021f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a3 	beq.w	8002370 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d076      	beq.n	8002320 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d046      	beq.n	80022cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800223e:	f7ff fc5a 	bl	8001af6 <LL_RCC_LSI1_IsReady>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d113      	bne.n	8002270 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002248:	f7ff fc33 	bl	8001ab2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800224c:	f7fe fe8e 	bl	8000f6c <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002254:	f7fe fe8a 	bl	8000f6c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e203      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002266:	f7ff fc46 	bl	8001af6 <LL_RCC_LSI1_IsReady>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f1      	beq.n	8002254 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002270:	f7ff fc53 	bl	8001b1a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fe7a 	bl	8000f6c <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800227c:	f7fe fe76 	bl	8000f6c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b03      	cmp	r3, #3
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1ef      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800228e:	f7ff fc66 	bl	8001b5e <LL_RCC_LSI2_IsReady>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f1      	beq.n	800227c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fc70 	bl	8001b82 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022a2:	f7ff fc17 	bl	8001ad4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fe61 	bl	8000f6c <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022ae:	f7fe fe5d 	bl	8000f6c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1d6      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022c0:	f7ff fc19 	bl	8001af6 <LL_RCC_LSI1_IsReady>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f1      	bne.n	80022ae <HAL_RCC_OscConfig+0x31a>
 80022ca:	e051      	b.n	8002370 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022cc:	f7ff fbf1 	bl	8001ab2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fe4c 	bl	8000f6c <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022d6:	e00c      	b.n	80022f2 <HAL_RCC_OscConfig+0x35e>
 80022d8:	20000004 	.word	0x20000004
 80022dc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022e0:	f7fe fe44 	bl	8000f6c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1bd      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022f2:	f7ff fc00 	bl	8001af6 <LL_RCC_LSI1_IsReady>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f1      	beq.n	80022e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022fc:	f7ff fc1e 	bl	8001b3c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002302:	f7fe fe33 	bl	8000f6c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1ac      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002314:	f7ff fc23 	bl	8001b5e <LL_RCC_LSI2_IsReady>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f1      	bne.n	8002302 <HAL_RCC_OscConfig+0x36e>
 800231e:	e027      	b.n	8002370 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002320:	f7ff fc0c 	bl	8001b3c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe fe22 	bl	8000f6c <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800232c:	f7fe fe1e 	bl	8000f6c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e197      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800233e:	f7ff fc0e 	bl	8001b5e <LL_RCC_LSI2_IsReady>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f1      	bne.n	800232c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002348:	f7ff fbc4 	bl	8001ad4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fe0e 	bl	8000f6c <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002354:	f7fe fe0a 	bl	8000f6c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e183      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002366:	f7ff fbc6 	bl	8001af6 <LL_RCC_LSI1_IsReady>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f1      	bne.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05b      	beq.n	8002434 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4ba7      	ldr	r3, [pc, #668]	; (800261c <HAL_RCC_OscConfig+0x688>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d114      	bne.n	80023b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002388:	f7ff fa12 	bl	80017b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238c:	f7fe fdee 	bl	8000f6c <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002394:	f7fe fdea 	bl	8000f6c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e163      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a6:	4b9d      	ldr	r3, [pc, #628]	; (800261c <HAL_RCC_OscConfig+0x688>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0x42c>
 80023ba:	f7ff fb24 	bl	8001a06 <LL_RCC_LSE_Enable>
 80023be:	e00c      	b.n	80023da <HAL_RCC_OscConfig+0x446>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d104      	bne.n	80023d2 <HAL_RCC_OscConfig+0x43e>
 80023c8:	f7ff fb3f 	bl	8001a4a <LL_RCC_LSE_EnableBypass>
 80023cc:	f7ff fb1b 	bl	8001a06 <LL_RCC_LSE_Enable>
 80023d0:	e003      	b.n	80023da <HAL_RCC_OscConfig+0x446>
 80023d2:	f7ff fb29 	bl	8001a28 <LL_RCC_LSE_Disable>
 80023d6:	f7ff fb49 	bl	8001a6c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d014      	beq.n	800240c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe fdc3 	bl	8000f6c <HAL_GetTick>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fdbf 	bl	8000f6c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e136      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002400:	f7ff fb45 	bl	8001a8e <LL_RCC_LSE_IsReady>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ef      	beq.n	80023ea <HAL_RCC_OscConfig+0x456>
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fdae 	bl	8000f6c <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fdaa 	bl	8000f6c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e121      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800242a:	f7ff fb30 	bl	8001a8e <LL_RCC_LSE_IsReady>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ef      	bne.n	8002414 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d02c      	beq.n	800249a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d014      	beq.n	8002472 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002448:	f7ff faa9 	bl	800199e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe fd8e 	bl	8000f6c <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002454:	f7fe fd8a 	bl	8000f6c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e103      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002466:	f7ff fabc 	bl	80019e2 <LL_RCC_HSI48_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f1      	beq.n	8002454 <HAL_RCC_OscConfig+0x4c0>
 8002470:	e013      	b.n	800249a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002472:	f7ff faa5 	bl	80019c0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fd79 	bl	8000f6c <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247e:	f7fe fd75 	bl	8000f6c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0ee      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002490:	f7ff faa7 	bl	80019e2 <LL_RCC_HSI48_IsReady>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f1      	bne.n	800247e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80e4 	beq.w	800266c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a4:	f7ff fc05 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 80024a8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	f040 80b4 	bne.w	8002624 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d123      	bne.n	8002512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d11c      	bne.n	8002512 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d114      	bne.n	8002512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10d      	bne.n	8002512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d05d      	beq.n	80025ce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d058      	beq.n	80025ca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0a1      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800252a:	f7ff fc85 	bl	8001e38 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800252e:	f7fe fd1d 	bl	8000f6c <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fd19 	bl	8000f6c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e092      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ef      	bne.n	8002536 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x68c>)
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800256e:	0212      	lsls	r2, r2, #8
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002582:	430a      	orrs	r2, r1
 8002584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800258c:	f7ff fc45 	bl	8001e1a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a0:	f7fe fce4 	bl	8000f6c <HAL_GetTick>
 80025a4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fce0 	bl	8000f6c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e059      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ef      	beq.n	80025a8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	e050      	b.n	800266c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e04f      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d147      	bne.n	800266c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025dc:	f7ff fc1d 	bl	8001e1a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f0:	f7fe fcbc 	bl	8000f6c <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fcb8 	bl	8000f6c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e031      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x664>
 8002618:	e028      	b.n	800266c <HAL_RCC_OscConfig+0x6d8>
 800261a:	bf00      	nop
 800261c:	58000400 	.word	0x58000400
 8002620:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d01e      	beq.n	8002668 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	f7ff fc05 	bl	8001e38 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fc9d 	bl	8000f6c <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fc99 	bl	8000f6c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e012      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ef      	bne.n	8002636 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_OscConfig+0x6e4>)
 8002662:	4013      	ands	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
 8002666:	e001      	b.n	800266c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3734      	adds	r7, #52	; 0x34
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	eefefffc 	.word	0xeefefffc

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e12d      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b98      	ldr	r3, [pc, #608]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d91b      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b95      	ldr	r3, [pc, #596]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4993      	ldr	r1, [pc, #588]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ae:	f7fe fc5d 	bl	8000f6c <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026b6:	f7fe fc59 	bl	8000f6c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e111      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	4b8a      	ldr	r3, [pc, #552]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff faef 	bl	8001cca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fc3e 	bl	8000f6c <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026f4:	f7fe fc3a 	bl	8000f6c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0f2      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002706:	f7ff fbe9 	bl	8001edc <LL_RCC_IsActiveFlag_HPRE>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f1      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d016      	beq.n	800274a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fae6 	bl	8001cf2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002726:	f7fe fc21 	bl	8000f6c <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800272e:	f7fe fc1d 	bl	8000f6c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0d5      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002740:	f7ff fbde 	bl	8001f00 <LL_RCC_IsActiveFlag_C2HPRE>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f1      	beq.n	800272e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fadf 	bl	8001d1e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002760:	f7fe fc04 	bl	8000f6c <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002768:	f7fe fc00 	bl	8000f6c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0b8      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800277a:	f7ff fbd4 	bl	8001f26 <LL_RCC_IsActiveFlag_SHDHPRE>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f1      	beq.n	8002768 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d016      	beq.n	80027be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fad9 	bl	8001d4c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800279a:	f7fe fbe7 	bl	8000f6c <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027a2:	f7fe fbe3 	bl	8000f6c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e09b      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027b4:	f7ff fbca 	bl	8001f4c <LL_RCC_IsActiveFlag_PPRE1>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f1      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff facf 	bl	8001d74 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fbc9 	bl	8000f6c <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027de:	f7fe fbc5 	bl	8000f6c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e07d      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027f0:	f7ff fbbe 	bl	8001f70 <LL_RCC_IsActiveFlag_PPRE2>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f1      	beq.n	80027de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d043      	beq.n	800288e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d106      	bne.n	800281c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800280e:	f7ff f86f 	bl	80018f0 <LL_RCC_HSE_IsReady>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11e      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e067      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002824:	f7ff fb17 	bl	8001e56 <LL_RCC_PLL_IsReady>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d113      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e05c      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800283a:	f7ff f9d7 	bl	8001bec <LL_RCC_MSI_IsReady>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e051      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002848:	f7ff f882 	bl	8001950 <LL_RCC_HSI_IsReady>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e04a      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fa15 	bl	8001c8a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fe fb84 	bl	8000f6c <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fb80 	bl	8000f6c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e036      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	f7ff fa18 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 8002882:	4602      	mov	r2, r0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	429a      	cmp	r2, r3
 800288c:	d1ec      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d21b      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 0207 	bic.w	r2, r3, #7
 80028a4:	4913      	ldr	r1, [pc, #76]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7fe fb5e 	bl	8000f6c <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028b4:	f7fe fb5a 	bl	8000f6c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e012      	b.n	80028ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x278>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1ef      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028d4:	f000 f87e 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 80028d8:	4603      	mov	r3, r0
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_RCC_ClockConfig+0x27c>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028de:	f7fe fb51 	bl	8000f84 <HAL_GetTickPrio>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe f973 	bl	8000bd0 <HAL_InitTick>
 80028ea:	4603      	mov	r3, r0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58004000 	.word	0x58004000
 80028f8:	20000004 	.word	0x20000004

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002902:	f7ff f9d6 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 8002906:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800290e:	f7ff f992 	bl	8001c36 <LL_RCC_MSI_GetRange>
 8002912:	4603      	mov	r3, r0
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e04b      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d102      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e045      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b08      	cmp	r3, #8
 8002934:	d10a      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002936:	f7fe ffab 	bl	8001890 <LL_RCC_HSE_IsEnabledDiv2>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d102      	bne.n	8002946 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e03a      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002946:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e037      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800294c:	f7ff faba 	bl	8001ec4 <LL_RCC_PLL_GetMainSource>
 8002950:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d003      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x64>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d003      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x6a>
 800295e:	e00d      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002962:	60bb      	str	r3, [r7, #8]
        break;
 8002964:	e015      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002966:	f7fe ff93 	bl	8001890 <LL_RCC_HSE_IsEnabledDiv2>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d102      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002972:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002974:	e00d      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002978:	60bb      	str	r3, [r7, #8]
        break;
 800297a:	e00a      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800297c:	f7ff f95b 	bl	8001c36 <LL_RCC_MSI_GetRange>
 8002980:	4603      	mov	r3, r0
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800298a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298e:	60bb      	str	r3, [r7, #8]
        break;
 8002990:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002992:	f7ff fa72 	bl	8001e7a <LL_RCC_PLL_GetN>
 8002996:	4602      	mov	r2, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	fb03 f402 	mul.w	r4, r3, r2
 800299e:	f7ff fa85 	bl	8001eac <LL_RCC_PLL_GetDivider>
 80029a2:	4603      	mov	r3, r0
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	3301      	adds	r3, #1
 80029a8:	fbb4 f4f3 	udiv	r4, r4, r3
 80029ac:	f7ff fa72 	bl	8001e94 <LL_RCC_PLL_GetR>
 80029b0:	4603      	mov	r3, r0
 80029b2:	0f5b      	lsrs	r3, r3, #29
 80029b4:	3301      	adds	r3, #1
 80029b6:	fbb4 f3f3 	udiv	r3, r4, r3
 80029ba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029bc:	68fb      	ldr	r3, [r7, #12]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	080080b0 	.word	0x080080b0
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	01e84800 	.word	0x01e84800

080029d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d4:	b598      	push	{r3, r4, r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029d8:	f7ff ff90 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80029dc:	4604      	mov	r4, r0
 80029de:	f7ff f9dd 	bl	8001d9c <LL_RCC_GetAHBPrescaler>
 80029e2:	4603      	mov	r3, r0
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd98      	pop	{r3, r4, r7, pc}
 80029f8:	08008050 	.word	0x08008050

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b598      	push	{r3, r4, r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a00:	f7ff ffe8 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4604      	mov	r4, r0
 8002a06:	f7ff f9f0 	bl	8001dea <LL_RCC_GetAPB1Prescaler>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd98      	pop	{r3, r4, r7, pc}
 8002a24:	08008090 	.word	0x08008090

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b598      	push	{r3, r4, r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a2c:	f7ff ffd2 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002a30:	4604      	mov	r4, r0
 8002a32:	f7ff f9e6 	bl	8001e02 <LL_RCC_GetAPB2Prescaler>
 8002a36:	4603      	mov	r3, r0
 8002a38:	0adb      	lsrs	r3, r3, #11
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd98      	pop	{r3, r4, r7, pc}
 8002a50:	08008090 	.word	0x08008090

08002a54 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	226f      	movs	r2, #111	; 0x6f
 8002a62:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002a64:	f7ff f925 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002a6e:	f7ff f995 	bl	8001d9c <LL_RCC_GetAHBPrescaler>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002a78:	f7ff f9b7 	bl	8001dea <LL_RCC_GetAPB1Prescaler>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002a82:	f7ff f9be 	bl	8001e02 <LL_RCC_GetAPB2Prescaler>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002a8c:	f7ff f992 	bl	8001db4 <LL_C2_RCC_GetAHBPrescaler>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002a96:	f7ff f99a 	bl	8001dce <LL_RCC_GetAHB4Prescaler>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCC_GetClockConfig+0x60>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0207 	and.w	r2, r3, #7
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	601a      	str	r2, [r3, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	58004000 	.word	0x58004000

08002ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ac4:	d903      	bls.n	8002ace <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e007      	b.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ade:	f7ff f976 	bl	8001dce <LL_RCC_GetAHB4Prescaler>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9c      	lsrs	r4, r3, #18
 8002b02:	f7fe feb7 	bl	8001874 <HAL_PWREx_GetVoltageRange>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f000 f80c 	bl	8002b28 <RCC_SetFlashLatency>
 8002b10:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	080080b0 	.word	0x080080b0
 8002b20:	08008050 	.word	0x08008050
 8002b24:	431bde83 	.word	0x431bde83

08002b28 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b093      	sub	sp, #76	; 0x4c
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <RCC_SetFlashLatency+0xe8>)
 8002b34:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b3e:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <RCC_SetFlashLatency+0xec>)
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b4a:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <RCC_SetFlashLatency+0xf0>)
 8002b4c:	f107 040c 	add.w	r4, r7, #12
 8002b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b56:	2300      	movs	r3, #0
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b60:	d11a      	bne.n	8002b98 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	643b      	str	r3, [r7, #64]	; 0x40
 8002b66:	e013      	b.n	8002b90 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3348      	adds	r3, #72	; 0x48
 8002b6e:	443b      	add	r3, r7
 8002b70:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d807      	bhi.n	8002b8a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	3348      	adds	r3, #72	; 0x48
 8002b80:	443b      	add	r3, r7
 8002b82:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b86:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b88:	e020      	b.n	8002bcc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d9e8      	bls.n	8002b68 <RCC_SetFlashLatency+0x40>
 8002b96:	e019      	b.n	8002bcc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9c:	e013      	b.n	8002bc6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3348      	adds	r3, #72	; 0x48
 8002ba4:	443b      	add	r3, r7
 8002ba6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d807      	bhi.n	8002bc0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3348      	adds	r3, #72	; 0x48
 8002bb6:	443b      	add	r3, r7
 8002bb8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bbe:	e005      	b.n	8002bcc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d9e8      	bls.n	8002b9e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <RCC_SetFlashLatency+0xf4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 0207 	bic.w	r2, r3, #7
 8002bd4:	4911      	ldr	r1, [pc, #68]	; (8002c1c <RCC_SetFlashLatency+0xf4>)
 8002bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bdc:	f7fe f9c6 	bl	8000f6c <HAL_GetTick>
 8002be0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002be2:	e008      	b.n	8002bf6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002be4:	f7fe f9c2 	bl	8000f6c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e007      	b.n	8002c06 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <RCC_SetFlashLatency+0xf4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1ef      	bne.n	8002be4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	374c      	adds	r7, #76	; 0x4c
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	08008008 	.word	0x08008008
 8002c14:	08008018 	.word	0x08008018
 8002c18:	08008024 	.word	0x08008024
 8002c1c:	58004000 	.word	0x58004000

08002c20 <LL_RCC_LSE_IsEnabled>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <LL_RCC_LSE_IsEnabled+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_RCC_LSE_IsEnabled+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_LSE_IsReady>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d101      	bne.n	8002c5c <LL_RCC_LSE_IsReady+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_RCC_LSE_IsReady+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_SetRFWKPClockSource>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_SetSMPSClockSource>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f023 0203 	bic.w	r2, r3, #3
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_SetSMPSPrescaler>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_SetUSARTClockSource>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_SetLPUARTClockSource>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_SetI2CClockSource>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d72:	43db      	mvns	r3, r3
 8002d74:	401a      	ands	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_SetLPTIMClockSource>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_RCC_SetSAIClockSource>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_SetRNGClockSource>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_SetCLK48ClockSource>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_RCC_SetUSBClockSource>:
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ffe3 	bl	8002e20 <LL_RCC_SetCLK48ClockSource>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <LL_RCC_SetADCClockSource>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_SetRTCClockSource>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_RCC_GetRTCClockSource>:
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_ForceBackupDomainReset>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_PLLSAI1_Enable>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_PLLSAI1_Disable>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f48:	6013      	str	r3, [r2, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f66:	d101      	bne.n	8002f6c <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d034      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f9c:	d021      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fa2:	d81b      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fae:	d815      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb8:	d110      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fca:	e00d      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f94d 	bl	8003270 <RCCEx_PLLSAI1_ConfigNP>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
        break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fee8 	bl	8002dc8 <LL_RCC_SetSAIClockSource>
 8002ff8:	e001      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
 8002ffc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003006:	2b00      	cmp	r3, #0
 8003008:	d046      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800300a:	f7ff ff56 	bl	8002eba <LL_RCC_GetRTCClockSource>
 800300e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	429a      	cmp	r2, r3
 8003018:	d03c      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800301a:	f7fe fbc9 	bl	80017b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff30 	bl	8002e8e <LL_RCC_SetRTCClockSource>
 800302e:	e02e      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800303a:	f7ff ff4b 	bl	8002ed4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800303e:	f7ff ff5a 	bl	8002ef6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800305a:	f7ff fde1 	bl	8002c20 <LL_RCC_LSE_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d114      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003064:	f7fd ff82 	bl	8000f6c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800306a:	e00b      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd ff7e 	bl	8000f6c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d902      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	77fb      	strb	r3, [r7, #31]
              break;
 8003082:	e004      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003084:	f7ff fdde 	bl	8002c44 <LL_RCC_LSE_IsReady>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d1ee      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800308e:	7ffb      	ldrb	r3, [r7, #31]
 8003090:	77bb      	strb	r3, [r7, #30]
 8003092:	e001      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	7ffb      	ldrb	r3, [r7, #31]
 8003096:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe2a 	bl	8002d02 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fe35 	bl	8002d2e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe5d 	bl	8002d94 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fe52 	bl	8002d94 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe2a 	bl	8002d5a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fe1f 	bl	8002d5a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d022      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fe8d 	bl	8002e4c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313a:	d107      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003154:	d10b      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f8e3 	bl	8003326 <RCCEx_PLLSAI1_ConfigNQ>
 8003160:	4603      	mov	r3, r0
 8003162:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003164:	7ffb      	ldrb	r3, [r7, #31]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02b      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318c:	d003      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fe2a 	bl	8002df4 <LL_RCC_SetRNGClockSource>
 80031a0:	e00a      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7ff fe21 	bl	8002df4 <LL_RCC_SetRNGClockSource>
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fe34 	bl	8002e20 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031c0:	d107      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d022      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fe3d 	bl	8002e62 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f0:	d107      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320a:	d10b      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f8e3 	bl	80033dc <RCCEx_PLLSAI1_ConfigNR>
 8003216:	4603      	mov	r3, r0
 8003218:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800321a:	7ffb      	ldrb	r3, [r7, #31]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003220:	7ffb      	ldrb	r3, [r7, #31]
 8003222:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fd26 	bl	8002c86 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fd45 	bl	8002cda <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd2c 	bl	8002cb2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800325a:	7fbb      	ldrb	r3, [r7, #30]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003268:	f7ff fcfe 	bl	8002c68 <LL_RCC_MSI_EnablePLLMode>
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}

08003270 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800327c:	f7ff fe5b 	bl	8002f36 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003280:	f7fd fe74 	bl	8000f6c <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003286:	e009      	b.n	800329c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003288:	f7fd fe70 	bl	8000f6c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d902      	bls.n	800329c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	73fb      	strb	r3, [r7, #15]
      break;
 800329a:	e004      	b.n	80032a6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800329c:	f7ff fe5a 	bl	8002f54 <LL_RCC_PLLSAI1_IsReady>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d137      	bne.n	800331c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c0:	4313      	orrs	r3, r2
 80032c2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d6:	4313      	orrs	r3, r2
 80032d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032da:	f7ff fe1d 	bl	8002f18 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032de:	f7fd fe45 	bl	8000f6c <HAL_GetTick>
 80032e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032e4:	e009      	b.n	80032fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e6:	f7fd fe41 	bl	8000f6c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d902      	bls.n	80032fa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	73fb      	strb	r3, [r7, #15]
        break;
 80032f8:	e004      	b.n	8003304 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032fa:	f7ff fe2b 	bl	8002f54 <LL_RCC_PLLSAI1_IsReady>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d1f0      	bne.n	80032e6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003332:	f7ff fe00 	bl	8002f36 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003336:	f7fd fe19 	bl	8000f6c <HAL_GetTick>
 800333a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800333c:	e009      	b.n	8003352 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800333e:	f7fd fe15 	bl	8000f6c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d902      	bls.n	8003352 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e004      	b.n	800335c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003352:	f7ff fdff 	bl	8002f54 <LL_RCC_PLLSAI1_IsReady>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d137      	bne.n	80033d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003376:	4313      	orrs	r3, r2
 8003378:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338c:	4313      	orrs	r3, r2
 800338e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003390:	f7ff fdc2 	bl	8002f18 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fd fdea 	bl	8000f6c <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800339c:	f7fd fde6 	bl	8000f6c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
        break;
 80033ae:	e004      	b.n	80033ba <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033b0:	f7ff fdd0 	bl	8002f54 <LL_RCC_PLLSAI1_IsReady>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d1f0      	bne.n	800339c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ce:	4313      	orrs	r3, r2
 80033d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033e8:	f7ff fda5 	bl	8002f36 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033ec:	f7fd fdbe 	bl	8000f6c <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033f2:	e009      	b.n	8003408 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f4:	f7fd fdba 	bl	8000f6c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	73fb      	strb	r3, [r7, #15]
      break;
 8003406:	e004      	b.n	8003412 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003408:	f7ff fda4 	bl	8002f54 <LL_RCC_PLLSAI1_IsReady>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d137      	bne.n	8003488 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342c:	4313      	orrs	r3, r2
 800342e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003442:	4313      	orrs	r3, r2
 8003444:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003446:	f7ff fd67 	bl	8002f18 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344a:	f7fd fd8f 	bl	8000f6c <HAL_GetTick>
 800344e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003450:	e009      	b.n	8003466 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003452:	f7fd fd8b 	bl	8000f6c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d902      	bls.n	8003466 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	73fb      	strb	r3, [r7, #15]
        break;
 8003464:	e004      	b.n	8003470 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003466:	f7ff fd75 	bl	8002f54 <LL_RCC_PLLSAI1_IsReady>
 800346a:	4603      	mov	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d1f0      	bne.n	8003452 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003484:	4313      	orrs	r3, r2
 8003486:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e049      	b.n	8003538 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f841 	bl	8003540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f000 f9d5 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e036      	b.n	80035da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_TIM_Base_Start_IT+0x94>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x44>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d115      	bne.n	80035c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_TIM_Base_Start_IT+0x98>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d015      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0x82>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d011      	beq.n	80035d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c2:	e008      	b.n	80035d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e000      	b.n	80035d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	00010007 	.word	0x00010007

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f905 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8f7 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f908 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8db 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8cd 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8de 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8b1 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8a3 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8b4 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f887 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f879 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f88a 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0201 	mvn.w	r2, #1
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd f8fc 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8de 	bl	800395c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ae:	d10e      	bne.n	80037ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8d1 	bl	8003970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d10e      	bne.n	80037fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f838 	bl	800386a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b20      	cmp	r3, #32
 8003806:	d10e      	bne.n	8003826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b20      	cmp	r3, #32
 8003814:	d107      	bne.n	8003826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f06f 0220 	mvn.w	r2, #32
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f891 	bl	8003948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a2a      	ldr	r2, [pc, #168]	; (800393c <TIM_Base_SetConfig+0xbc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x20>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a21      	ldr	r2, [pc, #132]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_Base_SetConfig+0x52>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d007      	beq.n	80038d2 <TIM_Base_SetConfig+0x52>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_Base_SetConfig+0x52>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <TIM_Base_SetConfig+0xc4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d108      	bne.n	80038e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0c      	ldr	r2, [pc, #48]	; (800393c <TIM_Base_SetConfig+0xbc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0xa0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0xa0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <TIM_Base_SetConfig+0xc4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40014400 	.word	0x40014400
 8003944:	40014800 	.word	0x40014800

08003948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_RCC_GetUSARTClockSource>:
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003990:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4013      	ands	r3, r2
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_RCC_GetLPUARTClockSource>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4013      	ands	r3, r2
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e042      	b.n	8003a5c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd f83d 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2224      	movs	r2, #36	; 0x24
 80039f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8c2 	bl	8003b90 <UART_SetConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fadc 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb63 	bl	8004120 <UART_CheckIdleState>
 8003a5a:	4603      	mov	r3, r0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	f040 8083 	bne.w	8003b86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Transmit+0x28>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e07b      	b.n	8003b88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Transmit+0x3a>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e074      	b.n	8003b88 <HAL_UART_Transmit+0x124>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2221      	movs	r2, #33	; 0x21
 8003ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fa59 	bl	8000f6c <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d108      	bne.n	8003ae8 <HAL_UART_Transmit+0x84>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003af8:	e02c      	b.n	8003b54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fb56 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e039      	b.n	8003b88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e007      	b.n	8003b42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1cc      	bne.n	8003afa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fb23 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e006      	b.n	8003b88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b94:	b08c      	sub	sp, #48	; 0x30
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4baf      	ldr	r3, [pc, #700]	; (8003e7c <UART_SetConfig+0x2ec>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4aa4      	ldr	r2, [pc, #656]	; (8003e80 <UART_SetConfig+0x2f0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f023 010f 	bic.w	r1, r3, #15
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a95      	ldr	r2, [pc, #596]	; (8003e84 <UART_SetConfig+0x2f4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d125      	bne.n	8003c80 <UART_SetConfig+0xf0>
 8003c34:	2003      	movs	r0, #3
 8003c36:	f7ff fea5 	bl	8003984 <LL_RCC_GetUSARTClockSource>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d81b      	bhi.n	8003c78 <UART_SetConfig+0xe8>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0xb8>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c59 	.word	0x08003c59
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c71 	.word	0x08003c71
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e042      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003c60:	2302      	movs	r3, #2
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e03e      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e03a      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003c70:	2308      	movs	r3, #8
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e036      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e032      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7e      	ldr	r2, [pc, #504]	; (8003e80 <UART_SetConfig+0x2f0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d12a      	bne.n	8003ce0 <UART_SetConfig+0x150>
 8003c8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003c8e:	f7ff fe89 	bl	80039a4 <LL_RCC_GetLPUARTClockSource>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c98:	d01a      	beq.n	8003cd0 <UART_SetConfig+0x140>
 8003c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c9e:	d81b      	bhi.n	8003cd8 <UART_SetConfig+0x148>
 8003ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca4:	d00c      	beq.n	8003cc0 <UART_SetConfig+0x130>
 8003ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003caa:	d815      	bhi.n	8003cd8 <UART_SetConfig+0x148>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <UART_SetConfig+0x128>
 8003cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb4:	d008      	beq.n	8003cc8 <UART_SetConfig+0x138>
 8003cb6:	e00f      	b.n	8003cd8 <UART_SetConfig+0x148>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e012      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e00e      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cce:	e00a      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd6:	e006      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cde:	e002      	b.n	8003ce6 <UART_SetConfig+0x156>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <UART_SetConfig+0x2f0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f040 8097 	bne.w	8003e20 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d823      	bhi.n	8003d42 <UART_SetConfig+0x1b2>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0x170>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d33 	.word	0x08003d33
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d43 	.word	0x08003d43
 8003d1c:	08003d43 	.word	0x08003d43
 8003d20:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d24:	f7fe fe6a 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8003d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d2a:	e010      	b.n	8003d4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b56      	ldr	r3, [pc, #344]	; (8003e88 <UART_SetConfig+0x2f8>)
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d30:	e00d      	b.n	8003d4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fde3 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d38:	e009      	b.n	8003d4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d40:	e005      	b.n	8003d4e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 812a 	beq.w	8003faa <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4a4c      	ldr	r2, [pc, #304]	; (8003e8c <UART_SetConfig+0x2fc>)
 8003d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d60:	461a      	mov	r2, r3
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d305      	bcc.n	8003d86 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d903      	bls.n	8003d8e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d8c:	e10d      	b.n	8003faa <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2200      	movs	r2, #0
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	60fa      	str	r2, [r7, #12]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	4a3c      	ldr	r2, [pc, #240]	; (8003e8c <UART_SetConfig+0x2fc>)
 8003d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2200      	movs	r2, #0
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003db0:	f7fc fa36 	bl	8000220 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	020b      	lsls	r3, r1, #8
 8003dc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dca:	0202      	lsls	r2, r0, #8
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	6849      	ldr	r1, [r1, #4]
 8003dd0:	0849      	lsrs	r1, r1, #1
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	eb12 0804 	adds.w	r8, r2, r4
 8003ddc:	eb43 0905 	adc.w	r9, r3, r5
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	469a      	mov	sl, r3
 8003de8:	4693      	mov	fp, r2
 8003dea:	4652      	mov	r2, sl
 8003dec:	465b      	mov	r3, fp
 8003dee:	4640      	mov	r0, r8
 8003df0:	4649      	mov	r1, r9
 8003df2:	f7fc fa15 	bl	8000220 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d308      	bcc.n	8003e18 <UART_SetConfig+0x288>
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0c:	d204      	bcs.n	8003e18 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a3a      	ldr	r2, [r7, #32]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e0c8      	b.n	8003faa <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e1e:	e0c4      	b.n	8003faa <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e28:	d16d      	bne.n	8003f06 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	2b07      	cmp	r3, #7
 8003e32:	d82d      	bhi.n	8003e90 <UART_SetConfig+0x300>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x2ac>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e5d 	.word	0x08003e5d
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e91 	.word	0x08003e91
 8003e48:	08003e6b 	.word	0x08003e6b
 8003e4c:	08003e91 	.word	0x08003e91
 8003e50:	08003e91 	.word	0x08003e91
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7fe fde4 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e62:	e01b      	b.n	8003e9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <UART_SetConfig+0x2f8>)
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e68:	e018      	b.n	8003e9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7fe fd47 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e70:	e014      	b.n	8003e9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e78:	e010      	b.n	8003e9c <UART_SetConfig+0x30c>
 8003e7a:	bf00      	nop
 8003e7c:	cfff69f3 	.word	0xcfff69f3
 8003e80:	40008000 	.word	0x40008000
 8003e84:	40013800 	.word	0x40013800
 8003e88:	00f42400 	.word	0x00f42400
 8003e8c:	080080f0 	.word	0x080080f0
      default:
        pclk = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8083 	beq.w	8003faa <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	4a4a      	ldr	r2, [pc, #296]	; (8003fd4 <UART_SetConfig+0x444>)
 8003eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb6:	005a      	lsls	r2, r3, #1
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	441a      	add	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d916      	bls.n	8003efe <UART_SetConfig+0x36e>
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed6:	d212      	bcs.n	8003efe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f023 030f 	bic.w	r3, r3, #15
 8003ee0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	8bfb      	ldrh	r3, [r7, #30]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	8bfa      	ldrh	r2, [r7, #30]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e055      	b.n	8003faa <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f04:	e051      	b.n	8003faa <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2b07      	cmp	r3, #7
 8003f0e:	d822      	bhi.n	8003f56 <UART_SetConfig+0x3c6>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <UART_SetConfig+0x388>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f39 	.word	0x08003f39
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f47 	.word	0x08003f47
 8003f28:	08003f57 	.word	0x08003f57
 8003f2c:	08003f57 	.word	0x08003f57
 8003f30:	08003f57 	.word	0x08003f57
 8003f34:	08003f4f 	.word	0x08003f4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe fd76 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f3e:	e010      	b.n	8003f62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <UART_SetConfig+0x448>)
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f44:	e00d      	b.n	8003f62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7fe fcd9 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8003f4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f4c:	e009      	b.n	8003f62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f54:	e005      	b.n	8003f62 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f60:	bf00      	nop
    }

    if (pclk != 0U)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d020      	beq.n	8003faa <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <UART_SetConfig+0x444>)
 8003f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f72:	461a      	mov	r2, r3
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	441a      	add	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d908      	bls.n	8003fa4 <UART_SetConfig+0x414>
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d204      	bcs.n	8003fa4 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	e002      	b.n	8003faa <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003fc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3730      	adds	r7, #48	; 0x30
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd4:	080080f0 	.word	0x080080f0
 8003fd8:	00f42400 	.word	0x00f42400

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040da:	d10a      	bne.n	80040f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af02      	add	r7, sp, #8
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004130:	f7fc ff1c 	bl	8000f6c <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d10e      	bne.n	8004162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f82f 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e025      	b.n	80041ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d10e      	bne.n	800418e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f819 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e00f      	b.n	80041ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b09c      	sub	sp, #112	; 0x70
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	e0a9      	b.n	800431c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	f000 80a5 	beq.w	800431c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fc fecb 	bl	8000f6c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80041e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d140      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041fc:	667b      	str	r3, [r7, #100]	; 0x64
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004208:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800420c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e6      	bne.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	663b      	str	r3, [r7, #96]	; 0x60
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800423a:	64ba      	str	r2, [r7, #72]	; 0x48
 800423c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e069      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d051      	beq.n	800431c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004286:	d149      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
 80042b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	613b      	str	r3, [r7, #16]
   return(result);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	66bb      	str	r3, [r7, #104]	; 0x68
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042e4:	623a      	str	r2, [r7, #32]
 80042e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e010      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	429a      	cmp	r2, r3
 8004338:	f43f af46 	beq.w	80041c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3770      	adds	r7, #112	; 0x70
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_UARTEx_DisableFifoMode+0x16>
 8004358:	2302      	movs	r3, #2
 800435a:	e027      	b.n	80043ac <HAL_UARTEx_DisableFifoMode+0x66>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800438a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e02d      	b.n	800442c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f84f 	bl	80044b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004448:	2302      	movs	r3, #2
 800444a:	e02d      	b.n	80044a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f811 	bl	80044b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d108      	bne.n	80044d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044d0:	e031      	b.n	8004536 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044d2:	2308      	movs	r3, #8
 80044d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044d6:	2308      	movs	r3, #8
 80044d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	0e5b      	lsrs	r3, r3, #25
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	0f5b      	lsrs	r3, r3, #29
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	7b3a      	ldrb	r2, [r7, #12]
 80044fe:	4911      	ldr	r1, [pc, #68]	; (8004544 <UARTEx_SetNbDataToProcess+0x94>)
 8004500:	5c8a      	ldrb	r2, [r1, r2]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004506:	7b3a      	ldrb	r2, [r7, #12]
 8004508:	490f      	ldr	r1, [pc, #60]	; (8004548 <UARTEx_SetNbDataToProcess+0x98>)
 800450a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800450c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	7b7a      	ldrb	r2, [r7, #13]
 800451c:	4909      	ldr	r1, [pc, #36]	; (8004544 <UARTEx_SetNbDataToProcess+0x94>)
 800451e:	5c8a      	ldrb	r2, [r1, r2]
 8004520:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004524:	7b7a      	ldrb	r2, [r7, #13]
 8004526:	4908      	ldr	r1, [pc, #32]	; (8004548 <UARTEx_SetNbDataToProcess+0x98>)
 8004528:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800452a:	fb93 f3f2 	sdiv	r3, r3, r2
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	08008108 	.word	0x08008108
 8004548:	08008110 	.word	0x08008110

0800454c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004554:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004558:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	b29b      	uxth	r3, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	b29b      	uxth	r3, r3
 800456a:	4013      	ands	r3, r2
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004582:	b084      	sub	sp, #16
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	f107 0014 	add.w	r0, r7, #20
 8004590:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	b004      	add	sp, #16
 80045c2:	4770      	bx	lr

080045c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <SysTick_Handler+0x1c>)
 80045ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045cc:	f001 fc2c 	bl	8005e28 <xTaskGetSchedulerState>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045d6:	f002 fa17 	bl	8006a08 <xPortSysTickHandler>
  }
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	e000e010 	.word	0xe000e010

080045e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a07      	ldr	r2, [pc, #28]	; (8004610 <vApplicationGetIdleTaskMemory+0x2c>)
 80045f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a06      	ldr	r2, [pc, #24]	; (8004614 <vApplicationGetIdleTaskMemory+0x30>)
 80045fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000480 	.word	0x20000480
 8004614:	2000053c 	.word	0x2000053c

08004618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a07      	ldr	r2, [pc, #28]	; (8004644 <vApplicationGetTimerTaskMemory+0x2c>)
 8004628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a06      	ldr	r2, [pc, #24]	; (8004648 <vApplicationGetTimerTaskMemory+0x30>)
 800462e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	2000073c 	.word	0x2000073c
 8004648:	200007f8 	.word	0x200007f8

0800464c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f103 0208 	add.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f103 0208 	add.w	r2, r3, #8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f103 0208 	add.w	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d103      	bne.n	800470e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e00c      	b.n	8004728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3308      	adds	r3, #8
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e002      	b.n	800471c <vListInsert+0x2e>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d2f6      	bcs.n	8004716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6892      	ldr	r2, [r2, #8]
 8004776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d103      	bne.n	8004794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1e5a      	subs	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047de:	f002 f881 	bl	80068e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	3b01      	subs	r3, #1
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	441a      	add	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	22ff      	movs	r2, #255	; 0xff
 8004822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22ff      	movs	r2, #255	; 0xff
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d114      	bne.n	800485e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01a      	beq.n	8004872 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3310      	adds	r3, #16
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f92f 	bl	8005aa4 <xTaskRemoveFromEventList>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <xQueueGenericReset+0xcc>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	e009      	b.n	8004872 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3310      	adds	r3, #16
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fef2 	bl	800464c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff feed 	bl	800464c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004872:	f002 f867 	bl	8006944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <xQueueGenericCreateStatic+0x52>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <xQueueGenericCreateStatic+0x56>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <xQueueGenericCreateStatic+0x58>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	623b      	str	r3, [r7, #32]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <xQueueGenericCreateStatic+0x7e>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <xQueueGenericCreateStatic+0x82>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <xQueueGenericCreateStatic+0x84>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	61fb      	str	r3, [r7, #28]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004922:	2350      	movs	r3, #80	; 0x50
 8004924:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b50      	cmp	r3, #80	; 0x50
 800492a:	d00a      	beq.n	8004942 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	61bb      	str	r3, [r7, #24]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004942:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004956:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f83f 	bl	80049e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800496c:	4618      	mov	r0, r3
 800496e:	3730      	adds	r7, #48	; 0x30
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	613b      	str	r3, [r7, #16]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3350      	adds	r3, #80	; 0x50
 80049ac:	4618      	mov	r0, r3
 80049ae:	f002 f8bb 	bl	8006b28 <pvPortMalloc>
 80049b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d011      	beq.n	80049de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3350      	adds	r3, #80	; 0x50
 80049c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049cc:	79fa      	ldrb	r2, [r7, #7]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f805 	bl	80049e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049de:	69bb      	ldr	r3, [r7, #24]
	}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a16:	2101      	movs	r1, #1
 8004a18:	69b8      	ldr	r0, [r7, #24]
 8004a1a:	f7ff fecb 	bl	80047b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08e      	sub	sp, #56	; 0x38
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueGenericSend+0x32>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <xQueueGenericSend+0x40>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <xQueueGenericSend+0x44>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <xQueueGenericSend+0x46>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <xQueueGenericSend+0x60>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSend+0x6e>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericSend+0x72>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericSend+0x74>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericSend+0x8e>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004abe:	f001 f9b3 	bl	8005e28 <xTaskGetSchedulerState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xQueueGenericSend+0x9e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericSend+0xa2>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericSend+0xa4>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <xQueueGenericSend+0xbe>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	61fb      	str	r3, [r7, #28]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aee:	f001 fef9 	bl	80068e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <xQueueGenericSend+0xd4>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d129      	bne.n	8004b58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0a:	f000 fa0b 	bl	8004f24 <prvCopyDataToQueue>
 8004b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	3324      	adds	r3, #36	; 0x24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 ffc1 	bl	8005aa4 <xTaskRemoveFromEventList>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b28:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <xQueueGenericSend+0x1f8>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e00a      	b.n	8004b50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <xQueueGenericSend+0x1f8>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b50:	f001 fef8 	bl	8006944 <vPortExitCritical>
				return pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e063      	b.n	8004c20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b5e:	f001 fef1 	bl	8006944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e05c      	b.n	8004c20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fffb 	bl	8005b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b7a:	f001 fee3 	bl	8006944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b7e:	f000 fd67 	bl	8005650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b82:	f001 feaf 	bl	80068e4 <vPortEnterCritical>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d103      	bne.n	8004b9c <xQueueGenericSend+0x16c>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba2:	b25b      	sxtb	r3, r3
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d103      	bne.n	8004bb2 <xQueueGenericSend+0x182>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb2:	f001 fec7 	bl	8006944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb6:	1d3a      	adds	r2, r7, #4
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 ffea 	bl	8005b98 <xTaskCheckForTimeOut>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d124      	bne.n	8004c14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bcc:	f000 faa2 	bl	8005114 <prvIsQueueFull>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	3310      	adds	r3, #16
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 ff10 	bl	8005a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be6:	f000 fa2d 	bl	8005044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bea:	f000 fd3f 	bl	800566c <xTaskResumeAll>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f af7c 	bne.w	8004aee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <xQueueGenericSend+0x1f8>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	e772      	b.n	8004aee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0a:	f000 fa1b 	bl	8005044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c0e:	f000 fd2d 	bl	800566c <xTaskResumeAll>
 8004c12:	e76c      	b.n	8004aee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c16:	f000 fa15 	bl	8005044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c1a:	f000 fd27 	bl	800566c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3738      	adds	r7, #56	; 0x38
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <xQueueGenericSendFromISR+0x3c>
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <xQueueGenericSendFromISR+0x40>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <xQueueGenericSendFromISR+0x42>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSendFromISR+0x6a>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSendFromISR+0x6e>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSendFromISR+0x70>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	623b      	str	r3, [r7, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cb6:	f001 fef7 	bl	8006aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cba:	f3ef 8211 	mrs	r2, BASEPRI
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	61fa      	str	r2, [r7, #28]
 8004cd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <xQueueGenericSendFromISR+0xbc>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d12f      	bne.n	8004d48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cfe:	f000 f911 	bl	8004f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d112      	bne.n	8004d32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fec3 	bl	8005aa4 <xTaskRemoveFromEventList>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e007      	b.n	8004d42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d36:	3301      	adds	r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	b25a      	sxtb	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d42:	2301      	movs	r3, #1
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d46:	e001      	b.n	8004d4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3740      	adds	r7, #64	; 0x40
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	; 0x30
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <xQueueReceive+0x30>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	623b      	str	r3, [r7, #32]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <xQueueReceive+0x3e>
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <xQueueReceive+0x42>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <xQueueReceive+0x44>
 8004da6:	2300      	movs	r3, #0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xQueueReceive+0x5e>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61fb      	str	r3, [r7, #28]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dc2:	f001 f831 	bl	8005e28 <xTaskGetSchedulerState>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <xQueueReceive+0x6e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueReceive+0x72>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueReceive+0x74>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueReceive+0x8e>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	61bb      	str	r3, [r7, #24]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004df2:	f001 fd77 	bl	80068e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01f      	beq.n	8004e42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e06:	f000 f8f7 	bl	8004ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1e5a      	subs	r2, r3, #1
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00f      	beq.n	8004e3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fe40 	bl	8005aa4 <xTaskRemoveFromEventList>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e2a:	4b3d      	ldr	r3, [pc, #244]	; (8004f20 <xQueueReceive+0x1bc>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e3a:	f001 fd83 	bl	8006944 <vPortExitCritical>
				return pdPASS;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e069      	b.n	8004f16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e48:	f001 fd7c 	bl	8006944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e062      	b.n	8004f16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e56:	f107 0310 	add.w	r3, r7, #16
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fe86 	bl	8005b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e64:	f001 fd6e 	bl	8006944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e68:	f000 fbf2 	bl	8005650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e6c:	f001 fd3a 	bl	80068e4 <vPortEnterCritical>
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e76:	b25b      	sxtb	r3, r3
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d103      	bne.n	8004e86 <xQueueReceive+0x122>
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d103      	bne.n	8004e9c <xQueueReceive+0x138>
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	f001 fd52 	bl	8006944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea0:	1d3a      	adds	r2, r7, #4
 8004ea2:	f107 0310 	add.w	r3, r7, #16
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fe75 	bl	8005b98 <xTaskCheckForTimeOut>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d123      	bne.n	8004efc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb6:	f000 f917 	bl	80050e8 <prvIsQueueEmpty>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d017      	beq.n	8004ef0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	3324      	adds	r3, #36	; 0x24
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fd9b 	bl	8005a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed0:	f000 f8b8 	bl	8005044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ed4:	f000 fbca 	bl	800566c <xTaskResumeAll>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d189      	bne.n	8004df2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <xQueueReceive+0x1bc>)
 8004ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	e780      	b.n	8004df2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef2:	f000 f8a7 	bl	8005044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef6:	f000 fbb9 	bl	800566c <xTaskResumeAll>
 8004efa:	e77a      	b.n	8004df2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f000 f8a1 	bl	8005044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f02:	f000 fbb3 	bl	800566c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f08:	f000 f8ee 	bl	80050e8 <prvIsQueueEmpty>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f43f af6f 	beq.w	8004df2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3730      	adds	r7, #48	; 0x30
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d14d      	bne.n	8004fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 ff88 	bl	8005e64 <xTaskPriorityDisinherit>
 8004f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	e043      	b.n	8004fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d119      	bne.n	8004f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6858      	ldr	r0, [r3, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	f002 f8e7 	bl	8007142 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	441a      	add	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d32b      	bcc.n	8004fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e026      	b.n	8004fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68d8      	ldr	r0, [r3, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	f002 f8cd 	bl	8007142 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	425b      	negs	r3, r3
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d207      	bcs.n	8004fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	425b      	negs	r3, r3
 8004fce:	441a      	add	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d105      	bne.n	8004fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fee:	697b      	ldr	r3, [r7, #20]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	429a      	cmp	r2, r3
 8005022:	d303      	bcc.n	800502c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68d9      	ldr	r1, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	461a      	mov	r2, r3
 8005036:	6838      	ldr	r0, [r7, #0]
 8005038:	f002 f883 	bl	8007142 <memcpy>
	}
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800504c:	f001 fc4a 	bl	80068e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005058:	e011      	b.n	800507e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d012      	beq.n	8005088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fd1c 	bl	8005aa4 <xTaskRemoveFromEventList>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005072:	f000 fdf3 	bl	8005c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	3b01      	subs	r3, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800507e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	dce9      	bgt.n	800505a <prvUnlockQueue+0x16>
 8005086:	e000      	b.n	800508a <prvUnlockQueue+0x46>
					break;
 8005088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	22ff      	movs	r2, #255	; 0xff
 800508e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005092:	f001 fc57 	bl	8006944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005096:	f001 fc25 	bl	80068e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a2:	e011      	b.n	80050c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d012      	beq.n	80050d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3310      	adds	r3, #16
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fcf7 	bl	8005aa4 <xTaskRemoveFromEventList>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050bc:	f000 fdce 	bl	8005c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050c0:	7bbb      	ldrb	r3, [r7, #14]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dce9      	bgt.n	80050a4 <prvUnlockQueue+0x60>
 80050d0:	e000      	b.n	80050d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	22ff      	movs	r2, #255	; 0xff
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050dc:	f001 fc32 	bl	8006944 <vPortExitCritical>
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f0:	f001 fbf8 	bl	80068e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e001      	b.n	8005106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fc1d 	bl	8006944 <vPortExitCritical>

	return xReturn;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800511c:	f001 fbe2 	bl	80068e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	429a      	cmp	r2, r3
 800512a:	d102      	bne.n	8005132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e001      	b.n	8005136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005136:	f001 fc05 	bl	8006944 <vPortExitCritical>

	return xReturn;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e014      	b.n	800517e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005154:	4a0f      	ldr	r2, [pc, #60]	; (8005194 <vQueueAddToRegistry+0x50>)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005160:	490c      	ldr	r1, [pc, #48]	; (8005194 <vQueueAddToRegistry+0x50>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <vQueueAddToRegistry+0x50>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005176:	e006      	b.n	8005186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b07      	cmp	r3, #7
 8005182:	d9e7      	bls.n	8005154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000bf8 	.word	0x20000bf8

08005198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051a8:	f001 fb9c 	bl	80068e4 <vPortEnterCritical>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d103      	bne.n	80051c2 <vQueueWaitForMessageRestricted+0x2a>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d103      	bne.n	80051d8 <vQueueWaitForMessageRestricted+0x40>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	f001 fbb4 	bl	8006944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3324      	adds	r3, #36	; 0x24
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fc2d 	bl	8005a4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051f2:	6978      	ldr	r0, [r7, #20]
 80051f4:	f7ff ff26 	bl	8005044 <prvUnlockQueue>
	}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	; 0x38
 8005204:	af04      	add	r7, sp, #16
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	623b      	str	r3, [r7, #32]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xTaskCreateStatic+0x46>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61fb      	str	r3, [r7, #28]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005246:	23bc      	movs	r3, #188	; 0xbc
 8005248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2bbc      	cmp	r3, #188	; 0xbc
 800524e:	d00a      	beq.n	8005266 <xTaskCreateStatic+0x66>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	61bb      	str	r3, [r7, #24]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01e      	beq.n	80052ac <xTaskCreateStatic+0xac>
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2202      	movs	r2, #2
 8005282:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005286:	2300      	movs	r3, #0
 8005288:	9303      	str	r3, [sp, #12]
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9302      	str	r3, [sp, #8]
 800528e:	f107 0314 	add.w	r3, r7, #20
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f850 	bl	8005344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052a6:	f000 f8f3 	bl	8005490 <prvAddNewTaskToReadyList>
 80052aa:	e001      	b.n	80052b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052b0:	697b      	ldr	r3, [r7, #20]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	; 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08c      	sub	sp, #48	; 0x30
 80052be:	af04      	add	r7, sp, #16
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fc2a 	bl	8006b28 <pvPortMalloc>
 80052d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052dc:	20bc      	movs	r0, #188	; 0xbc
 80052de:	f001 fc23 	bl	8006b28 <pvPortMalloc>
 80052e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
 80052f0:	e005      	b.n	80052fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f001 fce4 	bl	8006cc0 <vPortFree>
 80052f8:	e001      	b.n	80052fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	2300      	movs	r3, #0
 8005310:	9303      	str	r3, [sp, #12]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	9302      	str	r3, [sp, #8]
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f80e 	bl	8005344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005328:	69f8      	ldr	r0, [r7, #28]
 800532a:	f000 f8b1 	bl	8005490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800532e:	2301      	movs	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e002      	b.n	800533a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
 8005338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800533a:	69bb      	ldr	r3, [r7, #24]
	}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	461a      	mov	r2, r3
 800535c:	21a5      	movs	r1, #165	; 0xa5
 800535e:	f001 fefe 	bl	800715e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800536c:	3b01      	subs	r3, #1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01f      	beq.n	80053e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e012      	b.n	80053ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	7819      	ldrb	r1, [r3, #0]
 80053b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	3334      	adds	r3, #52	; 0x34
 80053b8:	460a      	mov	r2, r1
 80053ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b0f      	cmp	r3, #15
 80053d2:	d9e9      	bls.n	80053a8 <prvInitialiseNewTask+0x64>
 80053d4:	e000      	b.n	80053d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80053d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e0:	e003      	b.n	80053ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b37      	cmp	r3, #55	; 0x37
 80053ee:	d901      	bls.n	80053f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053f0:	2337      	movs	r3, #55	; 0x37
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f93e 	bl	800468c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff f939 	bl	800468c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	3354      	adds	r3, #84	; 0x54
 8005444:	2260      	movs	r2, #96	; 0x60
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fe88 	bl	800715e <memset>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <prvInitialiseNewTask+0x140>)
 8005452:	659a      	str	r2, [r3, #88]	; 0x58
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <prvInitialiseNewTask+0x144>)
 8005458:	65da      	str	r2, [r3, #92]	; 0x5c
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	4a0b      	ldr	r2, [pc, #44]	; (800548c <prvInitialiseNewTask+0x148>)
 800545e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	69b8      	ldr	r0, [r7, #24]
 8005466:	f001 f90d 	bl	8006684 <pxPortInitialiseStack>
 800546a:	4602      	mov	r2, r0
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547c:	bf00      	nop
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	08008138 	.word	0x08008138
 8005488:	08008158 	.word	0x08008158
 800548c:	08008118 	.word	0x08008118

08005490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005498:	f001 fa24 	bl	80068e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 80054a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054a6:	4b2c      	ldr	r3, [pc, #176]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054b4:	4b27      	ldr	r3, [pc, #156]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d110      	bne.n	80054de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054bc:	f000 fbf2 	bl	8005ca4 <prvInitialiseTaskLists>
 80054c0:	e00d      	b.n	80054de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054c2:	4b26      	ldr	r3, [pc, #152]	; (800555c <prvAddNewTaskToReadyList+0xcc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d802      	bhi.n	80054de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054de:	4b20      	ldr	r3, [pc, #128]	; (8005560 <prvAddNewTaskToReadyList+0xd0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <prvAddNewTaskToReadyList+0xd0>)
 80054e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <prvAddNewTaskToReadyList+0xd0>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <prvAddNewTaskToReadyList+0xd4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d903      	bls.n	8005504 <prvAddNewTaskToReadyList+0x74>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <prvAddNewTaskToReadyList+0xd4>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <prvAddNewTaskToReadyList+0xd8>)
 8005512:	441a      	add	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7ff f8c3 	bl	80046a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005520:	f001 fa10 	bl	8006944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005524:	4b0d      	ldr	r3, [pc, #52]	; (800555c <prvAddNewTaskToReadyList+0xcc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	429a      	cmp	r2, r3
 8005538:	d207      	bcs.n	800554a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <prvAddNewTaskToReadyList+0xdc>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	2000110c 	.word	0x2000110c
 8005558:	20000c38 	.word	0x20000c38
 800555c:	20001118 	.word	0x20001118
 8005560:	20001128 	.word	0x20001128
 8005564:	20001114 	.word	0x20001114
 8005568:	20000c3c 	.word	0x20000c3c
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800557e:	463a      	mov	r2, r7
 8005580:	1d39      	adds	r1, r7, #4
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff f82c 	bl	80045e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	9202      	str	r2, [sp, #8]
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	2300      	movs	r3, #0
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	460a      	mov	r2, r1
 800559e:	4924      	ldr	r1, [pc, #144]	; (8005630 <vTaskStartScheduler+0xc0>)
 80055a0:	4824      	ldr	r0, [pc, #144]	; (8005634 <vTaskStartScheduler+0xc4>)
 80055a2:	f7ff fe2d 	bl	8005200 <xTaskCreateStatic>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4a23      	ldr	r2, [pc, #140]	; (8005638 <vTaskStartScheduler+0xc8>)
 80055aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <vTaskStartScheduler+0xc8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055b4:	2301      	movs	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e001      	b.n	80055be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055c4:	f000 fd10 	bl	8005fe8 <xTimerCreateTimerTask>
 80055c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d11b      	bne.n	8005608 <vTaskStartScheduler+0x98>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055e4:	4b15      	ldr	r3, [pc, #84]	; (800563c <vTaskStartScheduler+0xcc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3354      	adds	r3, #84	; 0x54
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <vTaskStartScheduler+0xd0>)
 80055ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <vTaskStartScheduler+0xd4>)
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <vTaskStartScheduler+0xd8>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <vTaskStartScheduler+0xdc>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005602:	f001 f8cd 	bl	80067a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005606:	e00e      	b.n	8005626 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d10a      	bne.n	8005626 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <vTaskStartScheduler+0xb4>
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	08008034 	.word	0x08008034
 8005634:	08005c75 	.word	0x08005c75
 8005638:	20001130 	.word	0x20001130
 800563c:	20000c38 	.word	0x20000c38
 8005640:	20000014 	.word	0x20000014
 8005644:	2000112c 	.word	0x2000112c
 8005648:	20001118 	.word	0x20001118
 800564c:	20001110 	.word	0x20001110

08005650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <vTaskSuspendAll+0x18>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a03      	ldr	r2, [pc, #12]	; (8005668 <vTaskSuspendAll+0x18>)
 800565c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20001134 	.word	0x20001134

0800566c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800567a:	4b42      	ldr	r3, [pc, #264]	; (8005784 <xTaskResumeAll+0x118>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xTaskResumeAll+0x2c>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	603b      	str	r3, [r7, #0]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005698:	f001 f924 	bl	80068e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800569c:	4b39      	ldr	r3, [pc, #228]	; (8005784 <xTaskResumeAll+0x118>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4a38      	ldr	r2, [pc, #224]	; (8005784 <xTaskResumeAll+0x118>)
 80056a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a6:	4b37      	ldr	r3, [pc, #220]	; (8005784 <xTaskResumeAll+0x118>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d162      	bne.n	8005774 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056ae:	4b36      	ldr	r3, [pc, #216]	; (8005788 <xTaskResumeAll+0x11c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d05e      	beq.n	8005774 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056b6:	e02f      	b.n	8005718 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <xTaskResumeAll+0x120>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3318      	adds	r3, #24
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff f84b 	bl	8004760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff f846 	bl	8004760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <xTaskResumeAll+0x124>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d903      	bls.n	80056e8 <xTaskResumeAll+0x7c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <xTaskResumeAll+0x124>)
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4a27      	ldr	r2, [pc, #156]	; (8005794 <xTaskResumeAll+0x128>)
 80056f6:	441a      	add	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f7fe ffd1 	bl	80046a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	4b23      	ldr	r3, [pc, #140]	; (8005798 <xTaskResumeAll+0x12c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <xTaskResumeAll+0x130>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005718:	4b1c      	ldr	r3, [pc, #112]	; (800578c <xTaskResumeAll+0x120>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1cb      	bne.n	80056b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005726:	f000 fb5f 	bl	8005de8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <xTaskResumeAll+0x134>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005736:	f000 f847 	bl	80057c8 <xTaskIncrementTick>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005740:	4b16      	ldr	r3, [pc, #88]	; (800579c <xTaskResumeAll+0x130>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3b01      	subs	r3, #1
 800574a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f1      	bne.n	8005736 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <xTaskResumeAll+0x134>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <xTaskResumeAll+0x130>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <xTaskResumeAll+0x138>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005774:	f001 f8e6 	bl	8006944 <vPortExitCritical>

	return xAlreadyYielded;
 8005778:	68bb      	ldr	r3, [r7, #8]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20001134 	.word	0x20001134
 8005788:	2000110c 	.word	0x2000110c
 800578c:	200010cc 	.word	0x200010cc
 8005790:	20001114 	.word	0x20001114
 8005794:	20000c3c 	.word	0x20000c3c
 8005798:	20000c38 	.word	0x20000c38
 800579c:	20001120 	.word	0x20001120
 80057a0:	2000111c 	.word	0x2000111c
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <xTaskGetTickCount+0x1c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057b4:	687b      	ldr	r3, [r7, #4]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20001110 	.word	0x20001110

080057c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d2:	4b4f      	ldr	r3, [pc, #316]	; (8005910 <xTaskIncrementTick+0x148>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 808f 	bne.w	80058fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057dc:	4b4d      	ldr	r3, [pc, #308]	; (8005914 <xTaskIncrementTick+0x14c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057e4:	4a4b      	ldr	r2, [pc, #300]	; (8005914 <xTaskIncrementTick+0x14c>)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d120      	bne.n	8005832 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057f0:	4b49      	ldr	r3, [pc, #292]	; (8005918 <xTaskIncrementTick+0x150>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <xTaskIncrementTick+0x48>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	603b      	str	r3, [r7, #0]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <xTaskIncrementTick+0x46>
 8005810:	4b41      	ldr	r3, [pc, #260]	; (8005918 <xTaskIncrementTick+0x150>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <xTaskIncrementTick+0x154>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3f      	ldr	r2, [pc, #252]	; (8005918 <xTaskIncrementTick+0x150>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4a3f      	ldr	r2, [pc, #252]	; (800591c <xTaskIncrementTick+0x154>)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <xTaskIncrementTick+0x158>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3301      	adds	r3, #1
 800582a:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <xTaskIncrementTick+0x158>)
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	f000 fadb 	bl	8005de8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005832:	4b3c      	ldr	r3, [pc, #240]	; (8005924 <xTaskIncrementTick+0x15c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d349      	bcc.n	80058d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583c:	4b36      	ldr	r3, [pc, #216]	; (8005918 <xTaskIncrementTick+0x150>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005846:	4b37      	ldr	r3, [pc, #220]	; (8005924 <xTaskIncrementTick+0x15c>)
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	601a      	str	r2, [r3, #0]
					break;
 800584e:	e03f      	b.n	80058d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005850:	4b31      	ldr	r3, [pc, #196]	; (8005918 <xTaskIncrementTick+0x150>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d203      	bcs.n	8005870 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005868:	4a2e      	ldr	r2, [pc, #184]	; (8005924 <xTaskIncrementTick+0x15c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800586e:	e02f      	b.n	80058d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe ff73 	bl	8004760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3318      	adds	r3, #24
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe ff6a 	bl	8004760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <xTaskIncrementTick+0x160>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d903      	bls.n	80058a0 <xTaskIncrementTick+0xd8>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <xTaskIncrementTick+0x160>)
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <xTaskIncrementTick+0x164>)
 80058ae:	441a      	add	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f7fe fef5 	bl	80046a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <xTaskIncrementTick+0x168>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3b8      	bcc.n	800583c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ce:	e7b5      	b.n	800583c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058d0:	4b17      	ldr	r3, [pc, #92]	; (8005930 <xTaskIncrementTick+0x168>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d6:	4915      	ldr	r1, [pc, #84]	; (800592c <xTaskIncrementTick+0x164>)
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d901      	bls.n	80058ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <xTaskIncrementTick+0x16c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e004      	b.n	8005904 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <xTaskIncrementTick+0x170>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	4a0d      	ldr	r2, [pc, #52]	; (8005938 <xTaskIncrementTick+0x170>)
 8005902:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005904:	697b      	ldr	r3, [r7, #20]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20001134 	.word	0x20001134
 8005914:	20001110 	.word	0x20001110
 8005918:	200010c4 	.word	0x200010c4
 800591c:	200010c8 	.word	0x200010c8
 8005920:	20001124 	.word	0x20001124
 8005924:	2000112c 	.word	0x2000112c
 8005928:	20001114 	.word	0x20001114
 800592c:	20000c3c 	.word	0x20000c3c
 8005930:	20000c38 	.word	0x20000c38
 8005934:	20001120 	.word	0x20001120
 8005938:	2000111c 	.word	0x2000111c

0800593c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005942:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <vTaskSwitchContext+0xb0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800594a:	4b29      	ldr	r3, [pc, #164]	; (80059f0 <vTaskSwitchContext+0xb4>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005950:	e046      	b.n	80059e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005952:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <vTaskSwitchContext+0xb4>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005958:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <vTaskSwitchContext+0xb8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e010      	b.n	8005982 <vTaskSwitchContext+0x46>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <vTaskSwitchContext+0x40>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	607b      	str	r3, [r7, #4]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <vTaskSwitchContext+0x3e>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3b01      	subs	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	491d      	ldr	r1, [pc, #116]	; (80059f8 <vTaskSwitchContext+0xbc>)
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0e4      	beq.n	8005960 <vTaskSwitchContext+0x24>
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <vTaskSwitchContext+0xbc>)
 80059a2:	4413      	add	r3, r2
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	605a      	str	r2, [r3, #4]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	3308      	adds	r3, #8
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d104      	bne.n	80059c6 <vTaskSwitchContext+0x8a>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a0b      	ldr	r2, [pc, #44]	; (80059fc <vTaskSwitchContext+0xc0>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <vTaskSwitchContext+0xb8>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <vTaskSwitchContext+0xc0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3354      	adds	r3, #84	; 0x54
 80059dc:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <vTaskSwitchContext+0xc4>)
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20001134 	.word	0x20001134
 80059f0:	20001120 	.word	0x20001120
 80059f4:	20001114 	.word	0x20001114
 80059f8:	20000c3c 	.word	0x20000c3c
 80059fc:	20000c38 	.word	0x20000c38
 8005a00:	20000014 	.word	0x20000014

08005a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60fb      	str	r3, [r7, #12]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <vTaskPlaceOnEventList+0x44>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3318      	adds	r3, #24
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fe fe5b 	bl	80046ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a38:	2101      	movs	r1, #1
 8005a3a:	6838      	ldr	r0, [r7, #0]
 8005a3c:	f000 fa80 	bl	8005f40 <prvAddCurrentTaskToDelayedList>
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000c38 	.word	0x20000c38

08005a4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	617b      	str	r3, [r7, #20]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3318      	adds	r3, #24
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7fe fe12 	bl	80046a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	68b8      	ldr	r0, [r7, #8]
 8005a92:	f000 fa55 	bl	8005f40 <prvAddCurrentTaskToDelayedList>
	}
 8005a96:	bf00      	nop
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000c38 	.word	0x20000c38

08005aa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60fb      	str	r3, [r7, #12]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	3318      	adds	r3, #24
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fe43 	bl	8004760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <xTaskRemoveFromEventList+0xb0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11d      	bne.n	8005b1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fe3a 	bl	8004760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <xTaskRemoveFromEventList+0xb4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d903      	bls.n	8005b00 <xTaskRemoveFromEventList+0x5c>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <xTaskRemoveFromEventList+0xb4>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <xTaskRemoveFromEventList+0xb8>)
 8005b0e:	441a      	add	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe fdc5 	bl	80046a6 <vListInsertEnd>
 8005b1c:	e005      	b.n	8005b2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3318      	adds	r3, #24
 8005b22:	4619      	mov	r1, r3
 8005b24:	480e      	ldr	r0, [pc, #56]	; (8005b60 <xTaskRemoveFromEventList+0xbc>)
 8005b26:	f7fe fdbe 	bl	80046a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <xTaskRemoveFromEventList+0xc0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d905      	bls.n	8005b44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <xTaskRemoveFromEventList+0xc4>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e001      	b.n	8005b48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b48:	697b      	ldr	r3, [r7, #20]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20001134 	.word	0x20001134
 8005b58:	20001114 	.word	0x20001114
 8005b5c:	20000c3c 	.word	0x20000c3c
 8005b60:	200010cc 	.word	0x200010cc
 8005b64:	20000c38 	.word	0x20000c38
 8005b68:	20001120 	.word	0x20001120

08005b6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <vTaskInternalSetTimeOutState+0x24>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <vTaskInternalSetTimeOutState+0x28>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	605a      	str	r2, [r3, #4]
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20001124 	.word	0x20001124
 8005b94:	20001110 	.word	0x20001110

08005b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	613b      	str	r3, [r7, #16]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005bda:	f000 fe83 	bl	80068e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bde:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <xTaskCheckForTimeOut+0xbc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d102      	bne.n	8005bfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e023      	b.n	8005c46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <xTaskCheckForTimeOut+0xc0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d007      	beq.n	8005c1a <xTaskCheckForTimeOut+0x82>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e015      	b.n	8005c46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d20b      	bcs.n	8005c3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff9b 	bl	8005b6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e004      	b.n	8005c46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c42:	2301      	movs	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c46:	f000 fe7d 	bl	8006944 <vPortExitCritical>

	return xReturn;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20001110 	.word	0x20001110
 8005c58:	20001124 	.word	0x20001124

08005c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <vTaskMissedYield+0x14>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20001120 	.word	0x20001120

08005c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c7c:	f000 f852 	bl	8005d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <prvIdleTask+0x28>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d9f9      	bls.n	8005c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <prvIdleTask+0x2c>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c98:	e7f0      	b.n	8005c7c <prvIdleTask+0x8>
 8005c9a:	bf00      	nop
 8005c9c:	20000c3c 	.word	0x20000c3c
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	e00c      	b.n	8005cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4a12      	ldr	r2, [pc, #72]	; (8005d04 <prvInitialiseTaskLists+0x60>)
 8005cbc:	4413      	add	r3, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fcc4 	bl	800464c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b37      	cmp	r3, #55	; 0x37
 8005cce:	d9ef      	bls.n	8005cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cd0:	480d      	ldr	r0, [pc, #52]	; (8005d08 <prvInitialiseTaskLists+0x64>)
 8005cd2:	f7fe fcbb 	bl	800464c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cd6:	480d      	ldr	r0, [pc, #52]	; (8005d0c <prvInitialiseTaskLists+0x68>)
 8005cd8:	f7fe fcb8 	bl	800464c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cdc:	480c      	ldr	r0, [pc, #48]	; (8005d10 <prvInitialiseTaskLists+0x6c>)
 8005cde:	f7fe fcb5 	bl	800464c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ce2:	480c      	ldr	r0, [pc, #48]	; (8005d14 <prvInitialiseTaskLists+0x70>)
 8005ce4:	f7fe fcb2 	bl	800464c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ce8:	480b      	ldr	r0, [pc, #44]	; (8005d18 <prvInitialiseTaskLists+0x74>)
 8005cea:	f7fe fcaf 	bl	800464c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvInitialiseTaskLists+0x78>)
 8005cf0:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <prvInitialiseTaskLists+0x64>)
 8005cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvInitialiseTaskLists+0x7c>)
 8005cf6:	4a05      	ldr	r2, [pc, #20]	; (8005d0c <prvInitialiseTaskLists+0x68>)
 8005cf8:	601a      	str	r2, [r3, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000c3c 	.word	0x20000c3c
 8005d08:	2000109c 	.word	0x2000109c
 8005d0c:	200010b0 	.word	0x200010b0
 8005d10:	200010cc 	.word	0x200010cc
 8005d14:	200010e0 	.word	0x200010e0
 8005d18:	200010f8 	.word	0x200010f8
 8005d1c:	200010c4 	.word	0x200010c4
 8005d20:	200010c8 	.word	0x200010c8

08005d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d2a:	e019      	b.n	8005d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d2c:	f000 fdda 	bl	80068e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <prvCheckTasksWaitingTermination+0x50>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe fd0f 	bl	8004760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d42:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <prvCheckTasksWaitingTermination+0x54>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <prvCheckTasksWaitingTermination+0x54>)
 8005d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <prvCheckTasksWaitingTermination+0x58>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <prvCheckTasksWaitingTermination+0x58>)
 8005d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d56:	f000 fdf5 	bl	8006944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f810 	bl	8005d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <prvCheckTasksWaitingTermination+0x58>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e1      	bne.n	8005d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200010e0 	.word	0x200010e0
 8005d78:	2000110c 	.word	0x2000110c
 8005d7c:	200010f4 	.word	0x200010f4

08005d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3354      	adds	r3, #84	; 0x54
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 faa9 	bl	80072e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 ff8d 	bl	8006cc0 <vPortFree>
				vPortFree( pxTCB );
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 ff8a 	bl	8006cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dac:	e018      	b.n	8005de0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d103      	bne.n	8005dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 ff81 	bl	8006cc0 <vPortFree>
	}
 8005dbe:	e00f      	b.n	8005de0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d00a      	beq.n	8005de0 <prvDeleteTCB+0x60>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	60fb      	str	r3, [r7, #12]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <prvDeleteTCB+0x5e>
	}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <prvResetNextTaskUnblockTime+0x38>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <prvResetNextTaskUnblockTime+0x3c>)
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e00:	e008      	b.n	8005e14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <prvResetNextTaskUnblockTime+0x38>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <prvResetNextTaskUnblockTime+0x3c>)
 8005e12:	6013      	str	r3, [r2, #0]
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	200010c4 	.word	0x200010c4
 8005e24:	2000112c 	.word	0x2000112c

08005e28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <xTaskGetSchedulerState+0x34>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e36:	2301      	movs	r3, #1
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	e008      	b.n	8005e4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <xTaskGetSchedulerState+0x38>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e44:	2302      	movs	r3, #2
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	e001      	b.n	8005e4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e4e:	687b      	ldr	r3, [r7, #4]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20001118 	.word	0x20001118
 8005e60:	20001134 	.word	0x20001134

08005e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d056      	beq.n	8005f28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <xTaskPriorityDisinherit+0xd0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d00a      	beq.n	8005e9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60bb      	str	r3, [r7, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d02c      	beq.n	8005f28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d128      	bne.n	8005f28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc40 	bl	8004760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <xTaskPriorityDisinherit+0xd4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d903      	bls.n	8005f08 <xTaskPriorityDisinherit+0xa4>
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4a0c      	ldr	r2, [pc, #48]	; (8005f38 <xTaskPriorityDisinherit+0xd4>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <xTaskPriorityDisinherit+0xd8>)
 8005f16:	441a      	add	r2, r3
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f7fe fbc1 	bl	80046a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f28:	697b      	ldr	r3, [r7, #20]
	}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000c38 	.word	0x20000c38
 8005f38:	20001114 	.word	0x20001114
 8005f3c:	20000c3c 	.word	0x20000c3c

08005f40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f4a:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe fc02 	bl	8004760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d10a      	bne.n	8005f7a <prvAddCurrentTaskToDelayedList+0x3a>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4819      	ldr	r0, [pc, #100]	; (8005fd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f74:	f7fe fb97 	bl	80046a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f78:	e026      	b.n	8005fc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f82:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d209      	bcs.n	8005fa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe fba5 	bl	80046ee <vListInsert>
}
 8005fa4:	e010      	b.n	8005fc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7fe fb9b 	bl	80046ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d202      	bcs.n	8005fc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fc2:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6013      	str	r3, [r2, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20001110 	.word	0x20001110
 8005fd4:	20000c38 	.word	0x20000c38
 8005fd8:	200010f8 	.word	0x200010f8
 8005fdc:	200010c8 	.word	0x200010c8
 8005fe0:	200010c4 	.word	0x200010c4
 8005fe4:	2000112c 	.word	0x2000112c

08005fe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ff2:	f000 fb07 	bl	8006604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <xTimerCreateTimerTask+0x80>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d021      	beq.n	8006042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006006:	1d3a      	adds	r2, r7, #4
 8006008:	f107 0108 	add.w	r1, r7, #8
 800600c:	f107 030c 	add.w	r3, r7, #12
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe fb01 	bl	8004618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	9202      	str	r2, [sp, #8]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	2302      	movs	r3, #2
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	460a      	mov	r2, r1
 8006028:	4910      	ldr	r1, [pc, #64]	; (800606c <xTimerCreateTimerTask+0x84>)
 800602a:	4811      	ldr	r0, [pc, #68]	; (8006070 <xTimerCreateTimerTask+0x88>)
 800602c:	f7ff f8e8 	bl	8005200 <xTaskCreateStatic>
 8006030:	4603      	mov	r3, r0
 8006032:	4a10      	ldr	r2, [pc, #64]	; (8006074 <xTimerCreateTimerTask+0x8c>)
 8006034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <xTimerCreateTimerTask+0x8c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800603e:	2301      	movs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	613b      	str	r3, [r7, #16]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800605e:	697b      	ldr	r3, [r7, #20]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20001168 	.word	0x20001168
 800606c:	0800803c 	.word	0x0800803c
 8006070:	080061ad 	.word	0x080061ad
 8006074:	2000116c 	.word	0x2000116c

08006078 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	623b      	str	r3, [r7, #32]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <xTimerGenericCommand+0x98>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02a      	beq.n	8006104 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b05      	cmp	r3, #5
 80060be:	dc18      	bgt.n	80060f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060c0:	f7ff feb2 	bl	8005e28 <xTaskGetSchedulerState>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d109      	bne.n	80060de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060ca:	4b11      	ldr	r3, [pc, #68]	; (8006110 <xTimerGenericCommand+0x98>)
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f107 0110 	add.w	r1, r7, #16
 80060d2:	2300      	movs	r3, #0
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	f7fe fcab 	bl	8004a30 <xQueueGenericSend>
 80060da:	6278      	str	r0, [r7, #36]	; 0x24
 80060dc:	e012      	b.n	8006104 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <xTimerGenericCommand+0x98>)
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f107 0110 	add.w	r1, r7, #16
 80060e6:	2300      	movs	r3, #0
 80060e8:	2200      	movs	r2, #0
 80060ea:	f7fe fca1 	bl	8004a30 <xQueueGenericSend>
 80060ee:	6278      	str	r0, [r7, #36]	; 0x24
 80060f0:	e008      	b.n	8006104 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <xTimerGenericCommand+0x98>)
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f107 0110 	add.w	r1, r7, #16
 80060fa:	2300      	movs	r3, #0
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	f7fe fd95 	bl	8004c2c <xQueueGenericSendFromISR>
 8006102:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	; 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20001168 	.word	0x20001168

08006114 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af02      	add	r7, sp, #8
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800611e:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <prvProcessExpiredTimer+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3304      	adds	r3, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe fb17 	bl	8004760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	18d1      	adds	r1, r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	6978      	ldr	r0, [r7, #20]
 800614e:	f000 f8d1 	bl	80062f4 <prvInsertTimerInActiveList>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01f      	beq.n	8006198 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006158:	2300      	movs	r3, #0
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	2100      	movs	r1, #0
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f7ff ff88 	bl	8006078 <xTimerGenericCommand>
 8006168:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d113      	bne.n	8006198 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	b2da      	uxtb	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	6978      	ldr	r0, [r7, #20]
 800619e:	4798      	blx	r3
}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20001160 	.word	0x20001160

080061ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f857 	bl	800626c <prvGetNextExpireTime>
 80061be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4619      	mov	r1, r3
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f803 	bl	80061d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061ca:	f000 f8d5 	bl	8006378 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061ce:	e7f1      	b.n	80061b4 <prvTimerTask+0x8>

080061d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061da:	f7ff fa39 	bl	8005650 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f866 	bl	80062b4 <prvSampleTimeNow>
 80061e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d130      	bne.n	8006252 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <prvProcessTimerOrBlockTask+0x3c>
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d806      	bhi.n	800620c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061fe:	f7ff fa35 	bl	800566c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff85 	bl	8006114 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800620a:	e024      	b.n	8006256 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <prvProcessTimerOrBlockTask+0x90>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <prvProcessTimerOrBlockTask+0x50>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <prvProcessTimerOrBlockTask+0x52>
 8006220:	2300      	movs	r3, #0
 8006222:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006224:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <prvProcessTimerOrBlockTask+0x94>)
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	f7fe ffb1 	bl	8005198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006236:	f7ff fa19 	bl	800566c <xTaskResumeAll>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006240:	4b09      	ldr	r3, [pc, #36]	; (8006268 <prvProcessTimerOrBlockTask+0x98>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
}
 8006250:	e001      	b.n	8006256 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006252:	f7ff fa0b 	bl	800566c <xTaskResumeAll>
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20001164 	.word	0x20001164
 8006264:	20001168 	.word	0x20001168
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <prvGetNextExpireTime+0x44>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <prvGetNextExpireTime+0x16>
 800627e:	2201      	movs	r2, #1
 8006280:	e000      	b.n	8006284 <prvGetNextExpireTime+0x18>
 8006282:	2200      	movs	r2, #0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <prvGetNextExpireTime+0x44>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e001      	b.n	80062a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062a0:	68fb      	ldr	r3, [r7, #12]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20001160 	.word	0x20001160

080062b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062bc:	f7ff fa74 	bl	80057a8 <xTaskGetTickCount>
 80062c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <prvSampleTimeNow+0x3c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d205      	bcs.n	80062d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062cc:	f000 f936 	bl	800653c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e002      	b.n	80062de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062de:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <prvSampleTimeNow+0x3c>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062e4:	68fb      	ldr	r3, [r7, #12]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20001170 	.word	0x20001170

080062f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d812      	bhi.n	8006340 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	429a      	cmp	r2, r3
 8006326:	d302      	bcc.n	800632e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e01b      	b.n	8006366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <prvInsertTimerInActiveList+0x7c>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fe f9d8 	bl	80046ee <vListInsert>
 800633e:	e012      	b.n	8006366 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d206      	bcs.n	8006356 <prvInsertTimerInActiveList+0x62>
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d302      	bcc.n	8006356 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006350:	2301      	movs	r3, #1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e007      	b.n	8006366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006356:	4b07      	ldr	r3, [pc, #28]	; (8006374 <prvInsertTimerInActiveList+0x80>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3304      	adds	r3, #4
 800635e:	4619      	mov	r1, r3
 8006360:	4610      	mov	r0, r2
 8006362:	f7fe f9c4 	bl	80046ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006366:	697b      	ldr	r3, [r7, #20]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20001164 	.word	0x20001164
 8006374:	20001160 	.word	0x20001160

08006378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08e      	sub	sp, #56	; 0x38
 800637c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800637e:	e0ca      	b.n	8006516 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	da18      	bge.n	80063b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	3304      	adds	r3, #4
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	61fb      	str	r3, [r7, #28]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ae:	6850      	ldr	r0, [r2, #4]
 80063b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b2:	6892      	ldr	r2, [r2, #8]
 80063b4:	4611      	mov	r1, r2
 80063b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f2c0 80aa 	blt.w	8006514 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe f9c5 	bl	8004760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063d6:	463b      	mov	r3, r7
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff ff6b 	bl	80062b4 <prvSampleTimeNow>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	f200 8097 	bhi.w	8006516 <prvProcessReceivedCommands+0x19e>
 80063e8:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <prvProcessReceivedCommands+0x78>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006419 	.word	0x08006419
 80063fc:	0800648d 	.word	0x0800648d
 8006400:	080064a1 	.word	0x080064a1
 8006404:	080064eb 	.word	0x080064eb
 8006408:	08006419 	.word	0x08006419
 800640c:	08006419 	.word	0x08006419
 8006410:	0800648d 	.word	0x0800648d
 8006414:	080064a1 	.word	0x080064a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	18d1      	adds	r1, r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006438:	f7ff ff5c 	bl	80062f4 <prvInsertTimerInActiveList>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d069      	beq.n	8006516 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006448:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05e      	beq.n	8006516 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	441a      	add	r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	2100      	movs	r1, #0
 8006468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646a:	f7ff fe05 	bl	8006078 <xTimerGenericCommand>
 800646e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d14f      	bne.n	8006516 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	61bb      	str	r3, [r7, #24]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800649e:	e03a      	b.n	8006516 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	617b      	str	r3, [r7, #20]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	18d1      	adds	r1, r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e4:	f7ff ff06 	bl	80062f4 <prvInsertTimerInActiveList>
					break;
 80064e8:	e015      	b.n	8006516 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fa:	f000 fbe1 	bl	8006cc0 <vPortFree>
 80064fe:	e00a      	b.n	8006516 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006512:	e000      	b.n	8006516 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006514:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006516:	4b08      	ldr	r3, [pc, #32]	; (8006538 <prvProcessReceivedCommands+0x1c0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	1d39      	adds	r1, r7, #4
 800651c:	2200      	movs	r2, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe fc20 	bl	8004d64 <xQueueReceive>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	f47f af2a 	bne.w	8006380 <prvProcessReceivedCommands+0x8>
	}
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	3730      	adds	r7, #48	; 0x30
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20001168 	.word	0x20001168

0800653c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006542:	e048      	b.n	80065d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <prvSwitchTimerLists+0xc0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b2b      	ldr	r3, [pc, #172]	; (80065fc <prvSwitchTimerLists+0xc0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe f8ff 	bl	8004760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d02e      	beq.n	80065d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d90e      	bls.n	80065a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006596:	4b19      	ldr	r3, [pc, #100]	; (80065fc <prvSwitchTimerLists+0xc0>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe f8a4 	bl	80046ee <vListInsert>
 80065a6:	e016      	b.n	80065d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fd60 	bl	8006078 <xTimerGenericCommand>
 80065b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	603b      	str	r3, [r7, #0]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <prvSwitchTimerLists+0xc0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1b1      	bne.n	8006544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <prvSwitchTimerLists+0xc0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <prvSwitchTimerLists+0xc4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a04      	ldr	r2, [pc, #16]	; (80065fc <prvSwitchTimerLists+0xc0>)
 80065ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ee:	4a04      	ldr	r2, [pc, #16]	; (8006600 <prvSwitchTimerLists+0xc4>)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6013      	str	r3, [r2, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20001160 	.word	0x20001160
 8006600:	20001164 	.word	0x20001164

08006604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800660a:	f000 f96b 	bl	80068e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800660e:	4b15      	ldr	r3, [pc, #84]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d120      	bne.n	8006658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006616:	4814      	ldr	r0, [pc, #80]	; (8006668 <prvCheckForValidListAndQueue+0x64>)
 8006618:	f7fe f818 	bl	800464c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800661c:	4813      	ldr	r0, [pc, #76]	; (800666c <prvCheckForValidListAndQueue+0x68>)
 800661e:	f7fe f815 	bl	800464c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <prvCheckForValidListAndQueue+0x6c>)
 8006624:	4a10      	ldr	r2, [pc, #64]	; (8006668 <prvCheckForValidListAndQueue+0x64>)
 8006626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <prvCheckForValidListAndQueue+0x70>)
 800662a:	4a10      	ldr	r2, [pc, #64]	; (800666c <prvCheckForValidListAndQueue+0x68>)
 800662c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800662e:	2300      	movs	r3, #0
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <prvCheckForValidListAndQueue+0x74>)
 8006634:	4a11      	ldr	r2, [pc, #68]	; (800667c <prvCheckForValidListAndQueue+0x78>)
 8006636:	2110      	movs	r1, #16
 8006638:	200a      	movs	r0, #10
 800663a:	f7fe f923 	bl	8004884 <xQueueGenericCreateStatic>
 800663e:	4603      	mov	r3, r0
 8006640:	4a08      	ldr	r2, [pc, #32]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 8006642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	490b      	ldr	r1, [pc, #44]	; (8006680 <prvCheckForValidListAndQueue+0x7c>)
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fd76 	bl	8005144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006658:	f000 f974 	bl	8006944 <vPortExitCritical>
}
 800665c:	bf00      	nop
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20001168 	.word	0x20001168
 8006668:	20001138 	.word	0x20001138
 800666c:	2000114c 	.word	0x2000114c
 8006670:	20001160 	.word	0x20001160
 8006674:	20001164 	.word	0x20001164
 8006678:	20001214 	.word	0x20001214
 800667c:	20001174 	.word	0x20001174
 8006680:	08008044 	.word	0x08008044

08006684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3b04      	subs	r3, #4
 8006694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800669c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f023 0201 	bic.w	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b04      	subs	r3, #4
 80066b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b4:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <pxPortInitialiseStack+0x64>)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b14      	subs	r3, #20
 80066be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3b04      	subs	r3, #4
 80066ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f06f 0202 	mvn.w	r2, #2
 80066d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3b20      	subs	r3, #32
 80066d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066da:	68fb      	ldr	r3, [r7, #12]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	080066ed 	.word	0x080066ed

080066ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066f6:	4b12      	ldr	r3, [pc, #72]	; (8006740 <prvTaskExitError+0x54>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d00a      	beq.n	8006716 <prvTaskExitError+0x2a>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <prvTaskExitError+0x28>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	60bb      	str	r3, [r7, #8]
}
 8006728:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800672a:	bf00      	nop
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0fc      	beq.n	800672c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20000010 	.word	0x20000010
	...

08006750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <pxCurrentTCBConst2>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	f380 8809 	msr	PSP, r0
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	4770      	bx	lr
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst2>:
 8006770:	20000c38 	.word	0x20000c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop

08006778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006778:	4808      	ldr	r0, [pc, #32]	; (800679c <prvPortStartFirstTask+0x24>)
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	6800      	ldr	r0, [r0, #0]
 800677e:	f380 8808 	msr	MSP, r0
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8814 	msr	CONTROL, r0
 800678a:	b662      	cpsie	i
 800678c:	b661      	cpsie	f
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	df00      	svc	0
 8006798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800679a:	bf00      	nop
 800679c:	e000ed08 	.word	0xe000ed08

080067a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067a6:	4b46      	ldr	r3, [pc, #280]	; (80068c0 <xPortStartScheduler+0x120>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a46      	ldr	r2, [pc, #280]	; (80068c4 <xPortStartScheduler+0x124>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10a      	bne.n	80067c6 <xPortStartScheduler+0x26>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067c6:	4b3e      	ldr	r3, [pc, #248]	; (80068c0 <xPortStartScheduler+0x120>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a3f      	ldr	r2, [pc, #252]	; (80068c8 <xPortStartScheduler+0x128>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10a      	bne.n	80067e6 <xPortStartScheduler+0x46>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60fb      	str	r3, [r7, #12]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067e6:	4b39      	ldr	r3, [pc, #228]	; (80068cc <xPortStartScheduler+0x12c>)
 80067e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	22ff      	movs	r2, #255	; 0xff
 80067f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <xPortStartScheduler+0x130>)
 800680c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <xPortStartScheduler+0x134>)
 8006810:	2207      	movs	r2, #7
 8006812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006814:	e009      	b.n	800682a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006816:	4b2f      	ldr	r3, [pc, #188]	; (80068d4 <xPortStartScheduler+0x134>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3b01      	subs	r3, #1
 800681c:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <xPortStartScheduler+0x134>)
 800681e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	b2db      	uxtb	r3, r3
 8006828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d0ef      	beq.n	8006816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006836:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <xPortStartScheduler+0x134>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1c3 0307 	rsb	r3, r3, #7
 800683e:	2b04      	cmp	r3, #4
 8006840:	d00a      	beq.n	8006858 <xPortStartScheduler+0xb8>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60bb      	str	r3, [r7, #8]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006858:	4b1e      	ldr	r3, [pc, #120]	; (80068d4 <xPortStartScheduler+0x134>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <xPortStartScheduler+0x134>)
 8006860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <xPortStartScheduler+0x134>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800686a:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <xPortStartScheduler+0x134>)
 800686c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006876:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <xPortStartScheduler+0x138>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <xPortStartScheduler+0x138>)
 800687c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <xPortStartScheduler+0x138>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <xPortStartScheduler+0x138>)
 8006888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800688c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800688e:	f000 f8dd 	bl	8006a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006892:	4b12      	ldr	r3, [pc, #72]	; (80068dc <xPortStartScheduler+0x13c>)
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006898:	f000 f8fc 	bl	8006a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800689c:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <xPortStartScheduler+0x140>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0f      	ldr	r2, [pc, #60]	; (80068e0 <xPortStartScheduler+0x140>)
 80068a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068a8:	f7ff ff66 	bl	8006778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068ac:	f7ff f846 	bl	800593c <vTaskSwitchContext>
	prvTaskExitError();
 80068b0:	f7ff ff1c 	bl	80066ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	e000ed00 	.word	0xe000ed00
 80068c4:	410fc271 	.word	0x410fc271
 80068c8:	410fc270 	.word	0x410fc270
 80068cc:	e000e400 	.word	0xe000e400
 80068d0:	20001264 	.word	0x20001264
 80068d4:	20001268 	.word	0x20001268
 80068d8:	e000ed20 	.word	0xe000ed20
 80068dc:	20000010 	.word	0x20000010
 80068e0:	e000ef34 	.word	0xe000ef34

080068e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	607b      	str	r3, [r7, #4]
}
 80068fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068fe:	4b0f      	ldr	r3, [pc, #60]	; (800693c <vPortEnterCritical+0x58>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a0d      	ldr	r2, [pc, #52]	; (800693c <vPortEnterCritical+0x58>)
 8006906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006908:	4b0c      	ldr	r3, [pc, #48]	; (800693c <vPortEnterCritical+0x58>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10f      	bne.n	8006930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <vPortEnterCritical+0x5c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <vPortEnterCritical+0x4c>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	603b      	str	r3, [r7, #0]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <vPortEnterCritical+0x4a>
	}
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20000010 	.word	0x20000010
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800694a:	4b12      	ldr	r3, [pc, #72]	; (8006994 <vPortExitCritical+0x50>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <vPortExitCritical+0x24>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	607b      	str	r3, [r7, #4]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <vPortExitCritical+0x50>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3b01      	subs	r3, #1
 800696e:	4a09      	ldr	r2, [pc, #36]	; (8006994 <vPortExitCritical+0x50>)
 8006970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <vPortExitCritical+0x50>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d105      	bne.n	8006986 <vPortExitCritical+0x42>
 800697a:	2300      	movs	r3, #0
 800697c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f383 8811 	msr	BASEPRI, r3
}
 8006984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000010 	.word	0x20000010
	...

080069a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069a0:	f3ef 8009 	mrs	r0, PSP
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <pxCurrentTCBConst>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f01e 0f10 	tst.w	lr, #16
 80069b0:	bf08      	it	eq
 80069b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069c4:	f380 8811 	msr	BASEPRI, r0
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f7fe ffb4 	bl	800593c <vTaskSwitchContext>
 80069d4:	f04f 0000 	mov.w	r0, #0
 80069d8:	f380 8811 	msr	BASEPRI, r0
 80069dc:	bc09      	pop	{r0, r3}
 80069de:	6819      	ldr	r1, [r3, #0]
 80069e0:	6808      	ldr	r0, [r1, #0]
 80069e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e6:	f01e 0f10 	tst.w	lr, #16
 80069ea:	bf08      	it	eq
 80069ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069f0:	f380 8809 	msr	PSP, r0
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst>:
 8006a00:	20000c38 	.word	0x20000c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a22:	f7fe fed1 	bl	80057c8 <xTaskIncrementTick>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <xPortSysTickHandler+0x40>)
 8006a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <vPortSetupTimerInterrupt+0x34>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <vPortSetupTimerInterrupt+0x38>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <vPortSetupTimerInterrupt+0x3c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <vPortSetupTimerInterrupt+0x40>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	099b      	lsrs	r3, r3, #6
 8006a68:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <vPortSetupTimerInterrupt+0x44>)
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <vPortSetupTimerInterrupt+0x34>)
 8006a70:	2207      	movs	r2, #7
 8006a72:	601a      	str	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	e000e010 	.word	0xe000e010
 8006a84:	e000e018 	.word	0xe000e018
 8006a88:	20000004 	.word	0x20000004
 8006a8c:	10624dd3 	.word	0x10624dd3
 8006a90:	e000e014 	.word	0xe000e014

08006a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006aa4 <vPortEnableVFP+0x10>
 8006a98:	6801      	ldr	r1, [r0, #0]
 8006a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a9e:	6001      	str	r1, [r0, #0]
 8006aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006aa2:	bf00      	nop
 8006aa4:	e000ed88 	.word	0xe000ed88

08006aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d914      	bls.n	8006ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <vPortValidateInterruptPriority+0x70>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ac4:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <vPortValidateInterruptPriority+0x74>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	7afa      	ldrb	r2, [r7, #11]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d20a      	bcs.n	8006ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <vPortValidateInterruptPriority+0x78>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006aec:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <vPortValidateInterruptPriority+0x7c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d90a      	bls.n	8006b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	603b      	str	r3, [r7, #0]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <vPortValidateInterruptPriority+0x60>
	}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	e000e3f0 	.word	0xe000e3f0
 8006b1c:	20001264 	.word	0x20001264
 8006b20:	e000ed0c 	.word	0xe000ed0c
 8006b24:	20001268 	.word	0x20001268

08006b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b34:	f7fe fd8c 	bl	8005650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b38:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <pvPortMalloc+0x180>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b40:	f000 f920 	bl	8006d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b44:	4b59      	ldr	r3, [pc, #356]	; (8006cac <pvPortMalloc+0x184>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 8093 	bne.w	8006c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01d      	beq.n	8006b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b58:	2208      	movs	r2, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d014      	beq.n	8006b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f023 0307 	bic.w	r3, r3, #7
 8006b70:	3308      	adds	r3, #8
 8006b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <pvPortMalloc+0x6c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	617b      	str	r3, [r7, #20]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d06e      	beq.n	8006c78 <pvPortMalloc+0x150>
 8006b9a:	4b45      	ldr	r3, [pc, #276]	; (8006cb0 <pvPortMalloc+0x188>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d869      	bhi.n	8006c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ba4:	4b43      	ldr	r3, [pc, #268]	; (8006cb4 <pvPortMalloc+0x18c>)
 8006ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ba8:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <pvPortMalloc+0x18c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bae:	e004      	b.n	8006bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d903      	bls.n	8006bcc <pvPortMalloc+0xa4>
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f1      	bne.n	8006bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bcc:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <pvPortMalloc+0x180>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d050      	beq.n	8006c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2208      	movs	r2, #8
 8006bdc:	4413      	add	r3, r2
 8006bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d91f      	bls.n	8006c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <pvPortMalloc+0xf8>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	613b      	str	r3, [r7, #16]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	1ad2      	subs	r2, r2, r3
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c32:	69b8      	ldr	r0, [r7, #24]
 8006c34:	f000 f908 	bl	8006e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c38:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <pvPortMalloc+0x188>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <pvPortMalloc+0x188>)
 8006c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c46:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <pvPortMalloc+0x188>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b1b      	ldr	r3, [pc, #108]	; (8006cb8 <pvPortMalloc+0x190>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d203      	bcs.n	8006c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c52:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <pvPortMalloc+0x188>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a18      	ldr	r2, [pc, #96]	; (8006cb8 <pvPortMalloc+0x190>)
 8006c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <pvPortMalloc+0x184>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c6e:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <pvPortMalloc+0x194>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <pvPortMalloc+0x194>)
 8006c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c78:	f7fe fcf8 	bl	800566c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <pvPortMalloc+0x174>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	60fb      	str	r3, [r7, #12]
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <pvPortMalloc+0x172>
	return pvReturn;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20001e74 	.word	0x20001e74
 8006cac:	20001e88 	.word	0x20001e88
 8006cb0:	20001e78 	.word	0x20001e78
 8006cb4:	20001e6c 	.word	0x20001e6c
 8006cb8:	20001e7c 	.word	0x20001e7c
 8006cbc:	20001e80 	.word	0x20001e80

08006cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04d      	beq.n	8006d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	425b      	negs	r3, r3
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4413      	add	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	4b24      	ldr	r3, [pc, #144]	; (8006d78 <vPortFree+0xb8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <vPortFree+0x44>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	60fb      	str	r3, [r7, #12]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <vPortFree+0x62>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60bb      	str	r3, [r7, #8]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <vPortFree+0xb8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01e      	beq.n	8006d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11a      	bne.n	8006d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <vPortFree+0xb8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	401a      	ands	r2, r3
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d48:	f7fe fc82 	bl	8005650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <vPortFree+0xbc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4413      	add	r3, r2
 8006d56:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <vPortFree+0xbc>)
 8006d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d5a:	6938      	ldr	r0, [r7, #16]
 8006d5c:	f000 f874 	bl	8006e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <vPortFree+0xc0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	4a06      	ldr	r2, [pc, #24]	; (8006d80 <vPortFree+0xc0>)
 8006d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d6a:	f7fe fc7f 	bl	800566c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20001e88 	.word	0x20001e88
 8006d7c:	20001e78 	.word	0x20001e78
 8006d80:	20001e84 	.word	0x20001e84

08006d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d90:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <prvHeapInit+0xac>)
 8006d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3307      	adds	r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0307 	bic.w	r3, r3, #7
 8006daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	4a1f      	ldr	r2, [pc, #124]	; (8006e30 <prvHeapInit+0xac>)
 8006db4:	4413      	add	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dbc:	4a1d      	ldr	r2, [pc, #116]	; (8006e34 <prvHeapInit+0xb0>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <prvHeapInit+0xb0>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	4413      	add	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0307 	bic.w	r3, r3, #7
 8006dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <prvHeapInit+0xb4>)
 8006de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <prvHeapInit+0xb4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <prvHeapInit+0xb4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <prvHeapInit+0xb4>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <prvHeapInit+0xb8>)
 8006e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <prvHeapInit+0xbc>)
 8006e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <prvHeapInit+0xc0>)
 8006e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	2000126c 	.word	0x2000126c
 8006e34:	20001e6c 	.word	0x20001e6c
 8006e38:	20001e74 	.word	0x20001e74
 8006e3c:	20001e7c 	.word	0x20001e7c
 8006e40:	20001e78 	.word	0x20001e78
 8006e44:	20001e88 	.word	0x20001e88

08006e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e50:	4b28      	ldr	r3, [pc, #160]	; (8006ef4 <prvInsertBlockIntoFreeList+0xac>)
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e002      	b.n	8006e5c <prvInsertBlockIntoFreeList+0x14>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d8f7      	bhi.n	8006e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d108      	bne.n	8006e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	441a      	add	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d118      	bne.n	8006ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d00d      	beq.n	8006ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e008      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e003      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d002      	beq.n	8006ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20001e6c 	.word	0x20001e6c
 8006ef8:	20001e74 	.word	0x20001e74

08006efc <__errno>:
 8006efc:	4b01      	ldr	r3, [pc, #4]	; (8006f04 <__errno+0x8>)
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000014 	.word	0x20000014

08006f08 <std>:
 8006f08:	2300      	movs	r3, #0
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f16:	6083      	str	r3, [r0, #8]
 8006f18:	8181      	strh	r1, [r0, #12]
 8006f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f1c:	81c2      	strh	r2, [r0, #14]
 8006f1e:	6183      	str	r3, [r0, #24]
 8006f20:	4619      	mov	r1, r3
 8006f22:	2208      	movs	r2, #8
 8006f24:	305c      	adds	r0, #92	; 0x5c
 8006f26:	f000 f91a 	bl	800715e <memset>
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <std+0x38>)
 8006f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8006f2e:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <std+0x3c>)
 8006f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f32:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <std+0x40>)
 8006f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <std+0x44>)
 8006f38:	6224      	str	r4, [r4, #32]
 8006f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	080073bd 	.word	0x080073bd
 8006f44:	080073df 	.word	0x080073df
 8006f48:	08007417 	.word	0x08007417
 8006f4c:	0800743b 	.word	0x0800743b

08006f50 <_cleanup_r>:
 8006f50:	4901      	ldr	r1, [pc, #4]	; (8006f58 <_cleanup_r+0x8>)
 8006f52:	f000 b8af 	b.w	80070b4 <_fwalk_reent>
 8006f56:	bf00      	nop
 8006f58:	08007595 	.word	0x08007595

08006f5c <__sfmoreglue>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	2268      	movs	r2, #104	; 0x68
 8006f60:	1e4d      	subs	r5, r1, #1
 8006f62:	4355      	muls	r5, r2
 8006f64:	460e      	mov	r6, r1
 8006f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f6a:	f000 f921 	bl	80071b0 <_malloc_r>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	b140      	cbz	r0, 8006f84 <__sfmoreglue+0x28>
 8006f72:	2100      	movs	r1, #0
 8006f74:	e9c0 1600 	strd	r1, r6, [r0]
 8006f78:	300c      	adds	r0, #12
 8006f7a:	60a0      	str	r0, [r4, #8]
 8006f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f80:	f000 f8ed 	bl	800715e <memset>
 8006f84:	4620      	mov	r0, r4
 8006f86:	bd70      	pop	{r4, r5, r6, pc}

08006f88 <__sfp_lock_acquire>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sfp_lock_acquire+0x8>)
 8006f8a:	f000 b8d8 	b.w	800713e <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20001e8d 	.word	0x20001e8d

08006f94 <__sfp_lock_release>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__sfp_lock_release+0x8>)
 8006f96:	f000 b8d3 	b.w	8007140 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20001e8d 	.word	0x20001e8d

08006fa0 <__sinit_lock_acquire>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__sinit_lock_acquire+0x8>)
 8006fa2:	f000 b8cc 	b.w	800713e <__retarget_lock_acquire_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	20001e8e 	.word	0x20001e8e

08006fac <__sinit_lock_release>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__sinit_lock_release+0x8>)
 8006fae:	f000 b8c7 	b.w	8007140 <__retarget_lock_release_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	20001e8e 	.word	0x20001e8e

08006fb8 <__sinit>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	4604      	mov	r4, r0
 8006fbc:	f7ff fff0 	bl	8006fa0 <__sinit_lock_acquire>
 8006fc0:	69a3      	ldr	r3, [r4, #24]
 8006fc2:	b11b      	cbz	r3, 8006fcc <__sinit+0x14>
 8006fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc8:	f7ff bff0 	b.w	8006fac <__sinit_lock_release>
 8006fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <__sinit+0x68>)
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <__sinit+0x6c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	bf04      	itt	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	61a3      	streq	r3, [r4, #24]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f820 	bl	8007028 <__sfp>
 8006fe8:	6060      	str	r0, [r4, #4]
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 f81c 	bl	8007028 <__sfp>
 8006ff0:	60a0      	str	r0, [r4, #8]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f818 	bl	8007028 <__sfp>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	60e0      	str	r0, [r4, #12]
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	6860      	ldr	r0, [r4, #4]
 8007000:	f7ff ff82 	bl	8006f08 <std>
 8007004:	68a0      	ldr	r0, [r4, #8]
 8007006:	2201      	movs	r2, #1
 8007008:	2109      	movs	r1, #9
 800700a:	f7ff ff7d 	bl	8006f08 <std>
 800700e:	68e0      	ldr	r0, [r4, #12]
 8007010:	2202      	movs	r2, #2
 8007012:	2112      	movs	r1, #18
 8007014:	f7ff ff78 	bl	8006f08 <std>
 8007018:	2301      	movs	r3, #1
 800701a:	61a3      	str	r3, [r4, #24]
 800701c:	e7d2      	b.n	8006fc4 <__sinit+0xc>
 800701e:	bf00      	nop
 8007020:	08008178 	.word	0x08008178
 8007024:	08006f51 	.word	0x08006f51

08007028 <__sfp>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	4607      	mov	r7, r0
 800702c:	f7ff ffac 	bl	8006f88 <__sfp_lock_acquire>
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <__sfp+0x84>)
 8007032:	681e      	ldr	r6, [r3, #0]
 8007034:	69b3      	ldr	r3, [r6, #24]
 8007036:	b913      	cbnz	r3, 800703e <__sfp+0x16>
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ffbd 	bl	8006fb8 <__sinit>
 800703e:	3648      	adds	r6, #72	; 0x48
 8007040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007044:	3b01      	subs	r3, #1
 8007046:	d503      	bpl.n	8007050 <__sfp+0x28>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	b30b      	cbz	r3, 8007090 <__sfp+0x68>
 800704c:	6836      	ldr	r6, [r6, #0]
 800704e:	e7f7      	b.n	8007040 <__sfp+0x18>
 8007050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007054:	b9d5      	cbnz	r5, 800708c <__sfp+0x64>
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <__sfp+0x88>)
 8007058:	60e3      	str	r3, [r4, #12]
 800705a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800705e:	6665      	str	r5, [r4, #100]	; 0x64
 8007060:	f000 f86c 	bl	800713c <__retarget_lock_init_recursive>
 8007064:	f7ff ff96 	bl	8006f94 <__sfp_lock_release>
 8007068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800706c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007070:	6025      	str	r5, [r4, #0]
 8007072:	61a5      	str	r5, [r4, #24]
 8007074:	2208      	movs	r2, #8
 8007076:	4629      	mov	r1, r5
 8007078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800707c:	f000 f86f 	bl	800715e <memset>
 8007080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007088:	4620      	mov	r0, r4
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708c:	3468      	adds	r4, #104	; 0x68
 800708e:	e7d9      	b.n	8007044 <__sfp+0x1c>
 8007090:	2104      	movs	r1, #4
 8007092:	4638      	mov	r0, r7
 8007094:	f7ff ff62 	bl	8006f5c <__sfmoreglue>
 8007098:	4604      	mov	r4, r0
 800709a:	6030      	str	r0, [r6, #0]
 800709c:	2800      	cmp	r0, #0
 800709e:	d1d5      	bne.n	800704c <__sfp+0x24>
 80070a0:	f7ff ff78 	bl	8006f94 <__sfp_lock_release>
 80070a4:	230c      	movs	r3, #12
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	e7ee      	b.n	8007088 <__sfp+0x60>
 80070aa:	bf00      	nop
 80070ac:	08008178 	.word	0x08008178
 80070b0:	ffff0001 	.word	0xffff0001

080070b4 <_fwalk_reent>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	4606      	mov	r6, r0
 80070ba:	4688      	mov	r8, r1
 80070bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070c0:	2700      	movs	r7, #0
 80070c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c6:	f1b9 0901 	subs.w	r9, r9, #1
 80070ca:	d505      	bpl.n	80070d8 <_fwalk_reent+0x24>
 80070cc:	6824      	ldr	r4, [r4, #0]
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	d1f7      	bne.n	80070c2 <_fwalk_reent+0xe>
 80070d2:	4638      	mov	r0, r7
 80070d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d907      	bls.n	80070ee <_fwalk_reent+0x3a>
 80070de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070e2:	3301      	adds	r3, #1
 80070e4:	d003      	beq.n	80070ee <_fwalk_reent+0x3a>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	47c0      	blx	r8
 80070ec:	4307      	orrs	r7, r0
 80070ee:	3568      	adds	r5, #104	; 0x68
 80070f0:	e7e9      	b.n	80070c6 <_fwalk_reent+0x12>
	...

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f000 ff32 	bl	8007f70 <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	080081b8 	.word	0x080081b8
 8007130:	080081b8 	.word	0x080081b8
 8007134:	080081b8 	.word	0x080081b8
 8007138:	080081bc 	.word	0x080081bc

0800713c <__retarget_lock_init_recursive>:
 800713c:	4770      	bx	lr

0800713e <__retarget_lock_acquire_recursive>:
 800713e:	4770      	bx	lr

08007140 <__retarget_lock_release_recursive>:
 8007140:	4770      	bx	lr

08007142 <memcpy>:
 8007142:	440a      	add	r2, r1
 8007144:	4291      	cmp	r1, r2
 8007146:	f100 33ff 	add.w	r3, r0, #4294967295
 800714a:	d100      	bne.n	800714e <memcpy+0xc>
 800714c:	4770      	bx	lr
 800714e:	b510      	push	{r4, lr}
 8007150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007158:	4291      	cmp	r1, r2
 800715a:	d1f9      	bne.n	8007150 <memcpy+0xe>
 800715c:	bd10      	pop	{r4, pc}

0800715e <memset>:
 800715e:	4402      	add	r2, r0
 8007160:	4603      	mov	r3, r0
 8007162:	4293      	cmp	r3, r2
 8007164:	d100      	bne.n	8007168 <memset+0xa>
 8007166:	4770      	bx	lr
 8007168:	f803 1b01 	strb.w	r1, [r3], #1
 800716c:	e7f9      	b.n	8007162 <memset+0x4>
	...

08007170 <sbrk_aligned>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4e0e      	ldr	r6, [pc, #56]	; (80071ac <sbrk_aligned+0x3c>)
 8007174:	460c      	mov	r4, r1
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	4605      	mov	r5, r0
 800717a:	b911      	cbnz	r1, 8007182 <sbrk_aligned+0x12>
 800717c:	f000 f90e 	bl	800739c <_sbrk_r>
 8007180:	6030      	str	r0, [r6, #0]
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 f909 	bl	800739c <_sbrk_r>
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	d00a      	beq.n	80071a4 <sbrk_aligned+0x34>
 800718e:	1cc4      	adds	r4, r0, #3
 8007190:	f024 0403 	bic.w	r4, r4, #3
 8007194:	42a0      	cmp	r0, r4
 8007196:	d007      	beq.n	80071a8 <sbrk_aligned+0x38>
 8007198:	1a21      	subs	r1, r4, r0
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f8fe 	bl	800739c <_sbrk_r>
 80071a0:	3001      	adds	r0, #1
 80071a2:	d101      	bne.n	80071a8 <sbrk_aligned+0x38>
 80071a4:	f04f 34ff 	mov.w	r4, #4294967295
 80071a8:	4620      	mov	r0, r4
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	20001e94 	.word	0x20001e94

080071b0 <_malloc_r>:
 80071b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b4:	1ccd      	adds	r5, r1, #3
 80071b6:	f025 0503 	bic.w	r5, r5, #3
 80071ba:	3508      	adds	r5, #8
 80071bc:	2d0c      	cmp	r5, #12
 80071be:	bf38      	it	cc
 80071c0:	250c      	movcc	r5, #12
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	4607      	mov	r7, r0
 80071c6:	db01      	blt.n	80071cc <_malloc_r+0x1c>
 80071c8:	42a9      	cmp	r1, r5
 80071ca:	d905      	bls.n	80071d8 <_malloc_r+0x28>
 80071cc:	230c      	movs	r3, #12
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	2600      	movs	r6, #0
 80071d2:	4630      	mov	r0, r6
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d8:	4e2e      	ldr	r6, [pc, #184]	; (8007294 <_malloc_r+0xe4>)
 80071da:	f000 fa29 	bl	8007630 <__malloc_lock>
 80071de:	6833      	ldr	r3, [r6, #0]
 80071e0:	461c      	mov	r4, r3
 80071e2:	bb34      	cbnz	r4, 8007232 <_malloc_r+0x82>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4638      	mov	r0, r7
 80071e8:	f7ff ffc2 	bl	8007170 <sbrk_aligned>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	4604      	mov	r4, r0
 80071f0:	d14d      	bne.n	800728e <_malloc_r+0xde>
 80071f2:	6834      	ldr	r4, [r6, #0]
 80071f4:	4626      	mov	r6, r4
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d140      	bne.n	800727c <_malloc_r+0xcc>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	4631      	mov	r1, r6
 80071fe:	4638      	mov	r0, r7
 8007200:	eb04 0803 	add.w	r8, r4, r3
 8007204:	f000 f8ca 	bl	800739c <_sbrk_r>
 8007208:	4580      	cmp	r8, r0
 800720a:	d13a      	bne.n	8007282 <_malloc_r+0xd2>
 800720c:	6821      	ldr	r1, [r4, #0]
 800720e:	3503      	adds	r5, #3
 8007210:	1a6d      	subs	r5, r5, r1
 8007212:	f025 0503 	bic.w	r5, r5, #3
 8007216:	3508      	adds	r5, #8
 8007218:	2d0c      	cmp	r5, #12
 800721a:	bf38      	it	cc
 800721c:	250c      	movcc	r5, #12
 800721e:	4629      	mov	r1, r5
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff ffa5 	bl	8007170 <sbrk_aligned>
 8007226:	3001      	adds	r0, #1
 8007228:	d02b      	beq.n	8007282 <_malloc_r+0xd2>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	442b      	add	r3, r5
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	e00e      	b.n	8007250 <_malloc_r+0xa0>
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	1b52      	subs	r2, r2, r5
 8007236:	d41e      	bmi.n	8007276 <_malloc_r+0xc6>
 8007238:	2a0b      	cmp	r2, #11
 800723a:	d916      	bls.n	800726a <_malloc_r+0xba>
 800723c:	1961      	adds	r1, r4, r5
 800723e:	42a3      	cmp	r3, r4
 8007240:	6025      	str	r5, [r4, #0]
 8007242:	bf18      	it	ne
 8007244:	6059      	strne	r1, [r3, #4]
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	bf08      	it	eq
 800724a:	6031      	streq	r1, [r6, #0]
 800724c:	5162      	str	r2, [r4, r5]
 800724e:	604b      	str	r3, [r1, #4]
 8007250:	4638      	mov	r0, r7
 8007252:	f104 060b 	add.w	r6, r4, #11
 8007256:	f000 f9f1 	bl	800763c <__malloc_unlock>
 800725a:	f026 0607 	bic.w	r6, r6, #7
 800725e:	1d23      	adds	r3, r4, #4
 8007260:	1af2      	subs	r2, r6, r3
 8007262:	d0b6      	beq.n	80071d2 <_malloc_r+0x22>
 8007264:	1b9b      	subs	r3, r3, r6
 8007266:	50a3      	str	r3, [r4, r2]
 8007268:	e7b3      	b.n	80071d2 <_malloc_r+0x22>
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	42a3      	cmp	r3, r4
 800726e:	bf0c      	ite	eq
 8007270:	6032      	streq	r2, [r6, #0]
 8007272:	605a      	strne	r2, [r3, #4]
 8007274:	e7ec      	b.n	8007250 <_malloc_r+0xa0>
 8007276:	4623      	mov	r3, r4
 8007278:	6864      	ldr	r4, [r4, #4]
 800727a:	e7b2      	b.n	80071e2 <_malloc_r+0x32>
 800727c:	4634      	mov	r4, r6
 800727e:	6876      	ldr	r6, [r6, #4]
 8007280:	e7b9      	b.n	80071f6 <_malloc_r+0x46>
 8007282:	230c      	movs	r3, #12
 8007284:	603b      	str	r3, [r7, #0]
 8007286:	4638      	mov	r0, r7
 8007288:	f000 f9d8 	bl	800763c <__malloc_unlock>
 800728c:	e7a1      	b.n	80071d2 <_malloc_r+0x22>
 800728e:	6025      	str	r5, [r4, #0]
 8007290:	e7de      	b.n	8007250 <_malloc_r+0xa0>
 8007292:	bf00      	nop
 8007294:	20001e90 	.word	0x20001e90

08007298 <iprintf>:
 8007298:	b40f      	push	{r0, r1, r2, r3}
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <iprintf+0x2c>)
 800729c:	b513      	push	{r0, r1, r4, lr}
 800729e:	681c      	ldr	r4, [r3, #0]
 80072a0:	b124      	cbz	r4, 80072ac <iprintf+0x14>
 80072a2:	69a3      	ldr	r3, [r4, #24]
 80072a4:	b913      	cbnz	r3, 80072ac <iprintf+0x14>
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7ff fe86 	bl	8006fb8 <__sinit>
 80072ac:	ab05      	add	r3, sp, #20
 80072ae:	9a04      	ldr	r2, [sp, #16]
 80072b0:	68a1      	ldr	r1, [r4, #8]
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fa3d 	bl	8007734 <_vfiprintf_r>
 80072ba:	b002      	add	sp, #8
 80072bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c0:	b004      	add	sp, #16
 80072c2:	4770      	bx	lr
 80072c4:	20000014 	.word	0x20000014

080072c8 <cleanup_glue>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	6809      	ldr	r1, [r1, #0]
 80072ce:	4605      	mov	r5, r0
 80072d0:	b109      	cbz	r1, 80072d6 <cleanup_glue+0xe>
 80072d2:	f7ff fff9 	bl	80072c8 <cleanup_glue>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072de:	f000 b9b3 	b.w	8007648 <_free_r>
	...

080072e4 <_reclaim_reent>:
 80072e4:	4b2c      	ldr	r3, [pc, #176]	; (8007398 <_reclaim_reent+0xb4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4283      	cmp	r3, r0
 80072ea:	b570      	push	{r4, r5, r6, lr}
 80072ec:	4604      	mov	r4, r0
 80072ee:	d051      	beq.n	8007394 <_reclaim_reent+0xb0>
 80072f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072f2:	b143      	cbz	r3, 8007306 <_reclaim_reent+0x22>
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d14a      	bne.n	8007390 <_reclaim_reent+0xac>
 80072fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fc:	6819      	ldr	r1, [r3, #0]
 80072fe:	b111      	cbz	r1, 8007306 <_reclaim_reent+0x22>
 8007300:	4620      	mov	r0, r4
 8007302:	f000 f9a1 	bl	8007648 <_free_r>
 8007306:	6961      	ldr	r1, [r4, #20]
 8007308:	b111      	cbz	r1, 8007310 <_reclaim_reent+0x2c>
 800730a:	4620      	mov	r0, r4
 800730c:	f000 f99c 	bl	8007648 <_free_r>
 8007310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007312:	b111      	cbz	r1, 800731a <_reclaim_reent+0x36>
 8007314:	4620      	mov	r0, r4
 8007316:	f000 f997 	bl	8007648 <_free_r>
 800731a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800731c:	b111      	cbz	r1, 8007324 <_reclaim_reent+0x40>
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f992 	bl	8007648 <_free_r>
 8007324:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007326:	b111      	cbz	r1, 800732e <_reclaim_reent+0x4a>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 f98d 	bl	8007648 <_free_r>
 800732e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007330:	b111      	cbz	r1, 8007338 <_reclaim_reent+0x54>
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f988 	bl	8007648 <_free_r>
 8007338:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800733a:	b111      	cbz	r1, 8007342 <_reclaim_reent+0x5e>
 800733c:	4620      	mov	r0, r4
 800733e:	f000 f983 	bl	8007648 <_free_r>
 8007342:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007344:	b111      	cbz	r1, 800734c <_reclaim_reent+0x68>
 8007346:	4620      	mov	r0, r4
 8007348:	f000 f97e 	bl	8007648 <_free_r>
 800734c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800734e:	b111      	cbz	r1, 8007356 <_reclaim_reent+0x72>
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f979 	bl	8007648 <_free_r>
 8007356:	69a3      	ldr	r3, [r4, #24]
 8007358:	b1e3      	cbz	r3, 8007394 <_reclaim_reent+0xb0>
 800735a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800735c:	4620      	mov	r0, r4
 800735e:	4798      	blx	r3
 8007360:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007362:	b1b9      	cbz	r1, 8007394 <_reclaim_reent+0xb0>
 8007364:	4620      	mov	r0, r4
 8007366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800736a:	f7ff bfad 	b.w	80072c8 <cleanup_glue>
 800736e:	5949      	ldr	r1, [r1, r5]
 8007370:	b941      	cbnz	r1, 8007384 <_reclaim_reent+0xa0>
 8007372:	3504      	adds	r5, #4
 8007374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007376:	2d80      	cmp	r5, #128	; 0x80
 8007378:	68d9      	ldr	r1, [r3, #12]
 800737a:	d1f8      	bne.n	800736e <_reclaim_reent+0x8a>
 800737c:	4620      	mov	r0, r4
 800737e:	f000 f963 	bl	8007648 <_free_r>
 8007382:	e7ba      	b.n	80072fa <_reclaim_reent+0x16>
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	4620      	mov	r0, r4
 8007388:	f000 f95e 	bl	8007648 <_free_r>
 800738c:	4631      	mov	r1, r6
 800738e:	e7ef      	b.n	8007370 <_reclaim_reent+0x8c>
 8007390:	2500      	movs	r5, #0
 8007392:	e7ef      	b.n	8007374 <_reclaim_reent+0x90>
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	bf00      	nop
 8007398:	20000014 	.word	0x20000014

0800739c <_sbrk_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d06      	ldr	r5, [pc, #24]	; (80073b8 <_sbrk_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f7f9 fcec 	bl	8000d84 <_sbrk>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_sbrk_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_sbrk_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	20001e98 	.word	0x20001e98

080073bc <__sread>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	460c      	mov	r4, r1
 80073c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c4:	f000 fc7a 	bl	8007cbc <_read_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	bfab      	itete	ge
 80073cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ce:	89a3      	ldrhlt	r3, [r4, #12]
 80073d0:	181b      	addge	r3, r3, r0
 80073d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073d6:	bfac      	ite	ge
 80073d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073da:	81a3      	strhlt	r3, [r4, #12]
 80073dc:	bd10      	pop	{r4, pc}

080073de <__swrite>:
 80073de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	461f      	mov	r7, r3
 80073e4:	898b      	ldrh	r3, [r1, #12]
 80073e6:	05db      	lsls	r3, r3, #23
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4616      	mov	r6, r2
 80073ee:	d505      	bpl.n	80073fc <__swrite+0x1e>
 80073f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f4:	2302      	movs	r3, #2
 80073f6:	2200      	movs	r2, #0
 80073f8:	f000 f908 	bl	800760c <_lseek_r>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	4632      	mov	r2, r6
 800740a:	463b      	mov	r3, r7
 800740c:	4628      	mov	r0, r5
 800740e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	f000 b817 	b.w	8007444 <_write_r>

08007416 <__sseek>:
 8007416:	b510      	push	{r4, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 f8f5 	bl	800760c <_lseek_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	bf15      	itete	ne
 8007428:	6560      	strne	r0, [r4, #84]	; 0x54
 800742a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800742e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007432:	81a3      	strheq	r3, [r4, #12]
 8007434:	bf18      	it	ne
 8007436:	81a3      	strhne	r3, [r4, #12]
 8007438:	bd10      	pop	{r4, pc}

0800743a <__sclose>:
 800743a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743e:	f000 b813 	b.w	8007468 <_close_r>
	...

08007444 <_write_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d07      	ldr	r5, [pc, #28]	; (8007464 <_write_r+0x20>)
 8007448:	4604      	mov	r4, r0
 800744a:	4608      	mov	r0, r1
 800744c:	4611      	mov	r1, r2
 800744e:	2200      	movs	r2, #0
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	f7f9 fc45 	bl	8000ce2 <_write>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_write_r+0x1e>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_write_r+0x1e>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	20001e98 	.word	0x20001e98

08007468 <_close_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	; (8007484 <_close_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7f9 fc51 	bl	8000d1a <_close>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_close_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_close_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20001e98 	.word	0x20001e98

08007488 <__sflush_r>:
 8007488:	898a      	ldrh	r2, [r1, #12]
 800748a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800748e:	4605      	mov	r5, r0
 8007490:	0710      	lsls	r0, r2, #28
 8007492:	460c      	mov	r4, r1
 8007494:	d458      	bmi.n	8007548 <__sflush_r+0xc0>
 8007496:	684b      	ldr	r3, [r1, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dc05      	bgt.n	80074a8 <__sflush_r+0x20>
 800749c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dc02      	bgt.n	80074a8 <__sflush_r+0x20>
 80074a2:	2000      	movs	r0, #0
 80074a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	d0f9      	beq.n	80074a2 <__sflush_r+0x1a>
 80074ae:	2300      	movs	r3, #0
 80074b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074b4:	682f      	ldr	r7, [r5, #0]
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	d032      	beq.n	8007520 <__sflush_r+0x98>
 80074ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	075a      	lsls	r2, r3, #29
 80074c0:	d505      	bpl.n	80074ce <__sflush_r+0x46>
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	1ac0      	subs	r0, r0, r3
 80074c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074c8:	b10b      	cbz	r3, 80074ce <__sflush_r+0x46>
 80074ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074cc:	1ac0      	subs	r0, r0, r3
 80074ce:	2300      	movs	r3, #0
 80074d0:	4602      	mov	r2, r0
 80074d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074d4:	6a21      	ldr	r1, [r4, #32]
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b0      	blx	r6
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	d106      	bne.n	80074ee <__sflush_r+0x66>
 80074e0:	6829      	ldr	r1, [r5, #0]
 80074e2:	291d      	cmp	r1, #29
 80074e4:	d82c      	bhi.n	8007540 <__sflush_r+0xb8>
 80074e6:	4a2a      	ldr	r2, [pc, #168]	; (8007590 <__sflush_r+0x108>)
 80074e8:	40ca      	lsrs	r2, r1
 80074ea:	07d6      	lsls	r6, r2, #31
 80074ec:	d528      	bpl.n	8007540 <__sflush_r+0xb8>
 80074ee:	2200      	movs	r2, #0
 80074f0:	6062      	str	r2, [r4, #4]
 80074f2:	04d9      	lsls	r1, r3, #19
 80074f4:	6922      	ldr	r2, [r4, #16]
 80074f6:	6022      	str	r2, [r4, #0]
 80074f8:	d504      	bpl.n	8007504 <__sflush_r+0x7c>
 80074fa:	1c42      	adds	r2, r0, #1
 80074fc:	d101      	bne.n	8007502 <__sflush_r+0x7a>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b903      	cbnz	r3, 8007504 <__sflush_r+0x7c>
 8007502:	6560      	str	r0, [r4, #84]	; 0x54
 8007504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007506:	602f      	str	r7, [r5, #0]
 8007508:	2900      	cmp	r1, #0
 800750a:	d0ca      	beq.n	80074a2 <__sflush_r+0x1a>
 800750c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007510:	4299      	cmp	r1, r3
 8007512:	d002      	beq.n	800751a <__sflush_r+0x92>
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f897 	bl	8007648 <_free_r>
 800751a:	2000      	movs	r0, #0
 800751c:	6360      	str	r0, [r4, #52]	; 0x34
 800751e:	e7c1      	b.n	80074a4 <__sflush_r+0x1c>
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	2301      	movs	r3, #1
 8007524:	4628      	mov	r0, r5
 8007526:	47b0      	blx	r6
 8007528:	1c41      	adds	r1, r0, #1
 800752a:	d1c7      	bne.n	80074bc <__sflush_r+0x34>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0c4      	beq.n	80074bc <__sflush_r+0x34>
 8007532:	2b1d      	cmp	r3, #29
 8007534:	d001      	beq.n	800753a <__sflush_r+0xb2>
 8007536:	2b16      	cmp	r3, #22
 8007538:	d101      	bne.n	800753e <__sflush_r+0xb6>
 800753a:	602f      	str	r7, [r5, #0]
 800753c:	e7b1      	b.n	80074a2 <__sflush_r+0x1a>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	e7ad      	b.n	80074a4 <__sflush_r+0x1c>
 8007548:	690f      	ldr	r7, [r1, #16]
 800754a:	2f00      	cmp	r7, #0
 800754c:	d0a9      	beq.n	80074a2 <__sflush_r+0x1a>
 800754e:	0793      	lsls	r3, r2, #30
 8007550:	680e      	ldr	r6, [r1, #0]
 8007552:	bf08      	it	eq
 8007554:	694b      	ldreq	r3, [r1, #20]
 8007556:	600f      	str	r7, [r1, #0]
 8007558:	bf18      	it	ne
 800755a:	2300      	movne	r3, #0
 800755c:	eba6 0807 	sub.w	r8, r6, r7
 8007560:	608b      	str	r3, [r1, #8]
 8007562:	f1b8 0f00 	cmp.w	r8, #0
 8007566:	dd9c      	ble.n	80074a2 <__sflush_r+0x1a>
 8007568:	6a21      	ldr	r1, [r4, #32]
 800756a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800756c:	4643      	mov	r3, r8
 800756e:	463a      	mov	r2, r7
 8007570:	4628      	mov	r0, r5
 8007572:	47b0      	blx	r6
 8007574:	2800      	cmp	r0, #0
 8007576:	dc06      	bgt.n	8007586 <__sflush_r+0xfe>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e78e      	b.n	80074a4 <__sflush_r+0x1c>
 8007586:	4407      	add	r7, r0
 8007588:	eba8 0800 	sub.w	r8, r8, r0
 800758c:	e7e9      	b.n	8007562 <__sflush_r+0xda>
 800758e:	bf00      	nop
 8007590:	20400001 	.word	0x20400001

08007594 <_fflush_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	690b      	ldr	r3, [r1, #16]
 8007598:	4605      	mov	r5, r0
 800759a:	460c      	mov	r4, r1
 800759c:	b913      	cbnz	r3, 80075a4 <_fflush_r+0x10>
 800759e:	2500      	movs	r5, #0
 80075a0:	4628      	mov	r0, r5
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	b118      	cbz	r0, 80075ae <_fflush_r+0x1a>
 80075a6:	6983      	ldr	r3, [r0, #24]
 80075a8:	b90b      	cbnz	r3, 80075ae <_fflush_r+0x1a>
 80075aa:	f7ff fd05 	bl	8006fb8 <__sinit>
 80075ae:	4b14      	ldr	r3, [pc, #80]	; (8007600 <_fflush_r+0x6c>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d11b      	bne.n	80075ec <_fflush_r+0x58>
 80075b4:	686c      	ldr	r4, [r5, #4]
 80075b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0ef      	beq.n	800759e <_fflush_r+0xa>
 80075be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075c0:	07d0      	lsls	r0, r2, #31
 80075c2:	d404      	bmi.n	80075ce <_fflush_r+0x3a>
 80075c4:	0599      	lsls	r1, r3, #22
 80075c6:	d402      	bmi.n	80075ce <_fflush_r+0x3a>
 80075c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ca:	f7ff fdb8 	bl	800713e <__retarget_lock_acquire_recursive>
 80075ce:	4628      	mov	r0, r5
 80075d0:	4621      	mov	r1, r4
 80075d2:	f7ff ff59 	bl	8007488 <__sflush_r>
 80075d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075d8:	07da      	lsls	r2, r3, #31
 80075da:	4605      	mov	r5, r0
 80075dc:	d4e0      	bmi.n	80075a0 <_fflush_r+0xc>
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	059b      	lsls	r3, r3, #22
 80075e2:	d4dd      	bmi.n	80075a0 <_fflush_r+0xc>
 80075e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e6:	f7ff fdab 	bl	8007140 <__retarget_lock_release_recursive>
 80075ea:	e7d9      	b.n	80075a0 <_fflush_r+0xc>
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <_fflush_r+0x70>)
 80075ee:	429c      	cmp	r4, r3
 80075f0:	d101      	bne.n	80075f6 <_fflush_r+0x62>
 80075f2:	68ac      	ldr	r4, [r5, #8]
 80075f4:	e7df      	b.n	80075b6 <_fflush_r+0x22>
 80075f6:	4b04      	ldr	r3, [pc, #16]	; (8007608 <_fflush_r+0x74>)
 80075f8:	429c      	cmp	r4, r3
 80075fa:	bf08      	it	eq
 80075fc:	68ec      	ldreq	r4, [r5, #12]
 80075fe:	e7da      	b.n	80075b6 <_fflush_r+0x22>
 8007600:	08008138 	.word	0x08008138
 8007604:	08008158 	.word	0x08008158
 8007608:	08008118 	.word	0x08008118

0800760c <_lseek_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	; (800762c <_lseek_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7f9 fba4 	bl	8000d68 <_lseek>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_lseek_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_lseek_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20001e98 	.word	0x20001e98

08007630 <__malloc_lock>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__malloc_lock+0x8>)
 8007632:	f7ff bd84 	b.w	800713e <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	20001e8c 	.word	0x20001e8c

0800763c <__malloc_unlock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_unlock+0x8>)
 800763e:	f7ff bd7f 	b.w	8007140 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	20001e8c 	.word	0x20001e8c

08007648 <_free_r>:
 8007648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800764a:	2900      	cmp	r1, #0
 800764c:	d044      	beq.n	80076d8 <_free_r+0x90>
 800764e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007652:	9001      	str	r0, [sp, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f1a1 0404 	sub.w	r4, r1, #4
 800765a:	bfb8      	it	lt
 800765c:	18e4      	addlt	r4, r4, r3
 800765e:	f7ff ffe7 	bl	8007630 <__malloc_lock>
 8007662:	4a1e      	ldr	r2, [pc, #120]	; (80076dc <_free_r+0x94>)
 8007664:	9801      	ldr	r0, [sp, #4]
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	b933      	cbnz	r3, 8007678 <_free_r+0x30>
 800766a:	6063      	str	r3, [r4, #4]
 800766c:	6014      	str	r4, [r2, #0]
 800766e:	b003      	add	sp, #12
 8007670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007674:	f7ff bfe2 	b.w	800763c <__malloc_unlock>
 8007678:	42a3      	cmp	r3, r4
 800767a:	d908      	bls.n	800768e <_free_r+0x46>
 800767c:	6825      	ldr	r5, [r4, #0]
 800767e:	1961      	adds	r1, r4, r5
 8007680:	428b      	cmp	r3, r1
 8007682:	bf01      	itttt	eq
 8007684:	6819      	ldreq	r1, [r3, #0]
 8007686:	685b      	ldreq	r3, [r3, #4]
 8007688:	1949      	addeq	r1, r1, r5
 800768a:	6021      	streq	r1, [r4, #0]
 800768c:	e7ed      	b.n	800766a <_free_r+0x22>
 800768e:	461a      	mov	r2, r3
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	b10b      	cbz	r3, 8007698 <_free_r+0x50>
 8007694:	42a3      	cmp	r3, r4
 8007696:	d9fa      	bls.n	800768e <_free_r+0x46>
 8007698:	6811      	ldr	r1, [r2, #0]
 800769a:	1855      	adds	r5, r2, r1
 800769c:	42a5      	cmp	r5, r4
 800769e:	d10b      	bne.n	80076b8 <_free_r+0x70>
 80076a0:	6824      	ldr	r4, [r4, #0]
 80076a2:	4421      	add	r1, r4
 80076a4:	1854      	adds	r4, r2, r1
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	6011      	str	r1, [r2, #0]
 80076aa:	d1e0      	bne.n	800766e <_free_r+0x26>
 80076ac:	681c      	ldr	r4, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	6053      	str	r3, [r2, #4]
 80076b2:	4421      	add	r1, r4
 80076b4:	6011      	str	r1, [r2, #0]
 80076b6:	e7da      	b.n	800766e <_free_r+0x26>
 80076b8:	d902      	bls.n	80076c0 <_free_r+0x78>
 80076ba:	230c      	movs	r3, #12
 80076bc:	6003      	str	r3, [r0, #0]
 80076be:	e7d6      	b.n	800766e <_free_r+0x26>
 80076c0:	6825      	ldr	r5, [r4, #0]
 80076c2:	1961      	adds	r1, r4, r5
 80076c4:	428b      	cmp	r3, r1
 80076c6:	bf04      	itt	eq
 80076c8:	6819      	ldreq	r1, [r3, #0]
 80076ca:	685b      	ldreq	r3, [r3, #4]
 80076cc:	6063      	str	r3, [r4, #4]
 80076ce:	bf04      	itt	eq
 80076d0:	1949      	addeq	r1, r1, r5
 80076d2:	6021      	streq	r1, [r4, #0]
 80076d4:	6054      	str	r4, [r2, #4]
 80076d6:	e7ca      	b.n	800766e <_free_r+0x26>
 80076d8:	b003      	add	sp, #12
 80076da:	bd30      	pop	{r4, r5, pc}
 80076dc:	20001e90 	.word	0x20001e90

080076e0 <__sfputc_r>:
 80076e0:	6893      	ldr	r3, [r2, #8]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	b410      	push	{r4}
 80076e8:	6093      	str	r3, [r2, #8]
 80076ea:	da08      	bge.n	80076fe <__sfputc_r+0x1e>
 80076ec:	6994      	ldr	r4, [r2, #24]
 80076ee:	42a3      	cmp	r3, r4
 80076f0:	db01      	blt.n	80076f6 <__sfputc_r+0x16>
 80076f2:	290a      	cmp	r1, #10
 80076f4:	d103      	bne.n	80076fe <__sfputc_r+0x1e>
 80076f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076fa:	f000 baf1 	b.w	8007ce0 <__swbuf_r>
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	1c58      	adds	r0, r3, #1
 8007702:	6010      	str	r0, [r2, #0]
 8007704:	7019      	strb	r1, [r3, #0]
 8007706:	4608      	mov	r0, r1
 8007708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800770c:	4770      	bx	lr

0800770e <__sfputs_r>:
 800770e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	4614      	mov	r4, r2
 8007716:	18d5      	adds	r5, r2, r3
 8007718:	42ac      	cmp	r4, r5
 800771a:	d101      	bne.n	8007720 <__sfputs_r+0x12>
 800771c:	2000      	movs	r0, #0
 800771e:	e007      	b.n	8007730 <__sfputs_r+0x22>
 8007720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007724:	463a      	mov	r2, r7
 8007726:	4630      	mov	r0, r6
 8007728:	f7ff ffda 	bl	80076e0 <__sfputc_r>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d1f3      	bne.n	8007718 <__sfputs_r+0xa>
 8007730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007734 <_vfiprintf_r>:
 8007734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	460d      	mov	r5, r1
 800773a:	b09d      	sub	sp, #116	; 0x74
 800773c:	4614      	mov	r4, r2
 800773e:	4698      	mov	r8, r3
 8007740:	4606      	mov	r6, r0
 8007742:	b118      	cbz	r0, 800774c <_vfiprintf_r+0x18>
 8007744:	6983      	ldr	r3, [r0, #24]
 8007746:	b90b      	cbnz	r3, 800774c <_vfiprintf_r+0x18>
 8007748:	f7ff fc36 	bl	8006fb8 <__sinit>
 800774c:	4b89      	ldr	r3, [pc, #548]	; (8007974 <_vfiprintf_r+0x240>)
 800774e:	429d      	cmp	r5, r3
 8007750:	d11b      	bne.n	800778a <_vfiprintf_r+0x56>
 8007752:	6875      	ldr	r5, [r6, #4]
 8007754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007756:	07d9      	lsls	r1, r3, #31
 8007758:	d405      	bmi.n	8007766 <_vfiprintf_r+0x32>
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	059a      	lsls	r2, r3, #22
 800775e:	d402      	bmi.n	8007766 <_vfiprintf_r+0x32>
 8007760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007762:	f7ff fcec 	bl	800713e <__retarget_lock_acquire_recursive>
 8007766:	89ab      	ldrh	r3, [r5, #12]
 8007768:	071b      	lsls	r3, r3, #28
 800776a:	d501      	bpl.n	8007770 <_vfiprintf_r+0x3c>
 800776c:	692b      	ldr	r3, [r5, #16]
 800776e:	b9eb      	cbnz	r3, 80077ac <_vfiprintf_r+0x78>
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f000 fb06 	bl	8007d84 <__swsetup_r>
 8007778:	b1c0      	cbz	r0, 80077ac <_vfiprintf_r+0x78>
 800777a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800777c:	07dc      	lsls	r4, r3, #31
 800777e:	d50e      	bpl.n	800779e <_vfiprintf_r+0x6a>
 8007780:	f04f 30ff 	mov.w	r0, #4294967295
 8007784:	b01d      	add	sp, #116	; 0x74
 8007786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	4b7b      	ldr	r3, [pc, #492]	; (8007978 <_vfiprintf_r+0x244>)
 800778c:	429d      	cmp	r5, r3
 800778e:	d101      	bne.n	8007794 <_vfiprintf_r+0x60>
 8007790:	68b5      	ldr	r5, [r6, #8]
 8007792:	e7df      	b.n	8007754 <_vfiprintf_r+0x20>
 8007794:	4b79      	ldr	r3, [pc, #484]	; (800797c <_vfiprintf_r+0x248>)
 8007796:	429d      	cmp	r5, r3
 8007798:	bf08      	it	eq
 800779a:	68f5      	ldreq	r5, [r6, #12]
 800779c:	e7da      	b.n	8007754 <_vfiprintf_r+0x20>
 800779e:	89ab      	ldrh	r3, [r5, #12]
 80077a0:	0598      	lsls	r0, r3, #22
 80077a2:	d4ed      	bmi.n	8007780 <_vfiprintf_r+0x4c>
 80077a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077a6:	f7ff fccb 	bl	8007140 <__retarget_lock_release_recursive>
 80077aa:	e7e9      	b.n	8007780 <_vfiprintf_r+0x4c>
 80077ac:	2300      	movs	r3, #0
 80077ae:	9309      	str	r3, [sp, #36]	; 0x24
 80077b0:	2320      	movs	r3, #32
 80077b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ba:	2330      	movs	r3, #48	; 0x30
 80077bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007980 <_vfiprintf_r+0x24c>
 80077c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077c4:	f04f 0901 	mov.w	r9, #1
 80077c8:	4623      	mov	r3, r4
 80077ca:	469a      	mov	sl, r3
 80077cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d0:	b10a      	cbz	r2, 80077d6 <_vfiprintf_r+0xa2>
 80077d2:	2a25      	cmp	r2, #37	; 0x25
 80077d4:	d1f9      	bne.n	80077ca <_vfiprintf_r+0x96>
 80077d6:	ebba 0b04 	subs.w	fp, sl, r4
 80077da:	d00b      	beq.n	80077f4 <_vfiprintf_r+0xc0>
 80077dc:	465b      	mov	r3, fp
 80077de:	4622      	mov	r2, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff ff93 	bl	800770e <__sfputs_r>
 80077e8:	3001      	adds	r0, #1
 80077ea:	f000 80aa 	beq.w	8007942 <_vfiprintf_r+0x20e>
 80077ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f0:	445a      	add	r2, fp
 80077f2:	9209      	str	r2, [sp, #36]	; 0x24
 80077f4:	f89a 3000 	ldrb.w	r3, [sl]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80a2 	beq.w	8007942 <_vfiprintf_r+0x20e>
 80077fe:	2300      	movs	r3, #0
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007808:	f10a 0a01 	add.w	sl, sl, #1
 800780c:	9304      	str	r3, [sp, #16]
 800780e:	9307      	str	r3, [sp, #28]
 8007810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007814:	931a      	str	r3, [sp, #104]	; 0x68
 8007816:	4654      	mov	r4, sl
 8007818:	2205      	movs	r2, #5
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	4858      	ldr	r0, [pc, #352]	; (8007980 <_vfiprintf_r+0x24c>)
 8007820:	f7f8 fcae 	bl	8000180 <memchr>
 8007824:	9a04      	ldr	r2, [sp, #16]
 8007826:	b9d8      	cbnz	r0, 8007860 <_vfiprintf_r+0x12c>
 8007828:	06d1      	lsls	r1, r2, #27
 800782a:	bf44      	itt	mi
 800782c:	2320      	movmi	r3, #32
 800782e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007832:	0713      	lsls	r3, r2, #28
 8007834:	bf44      	itt	mi
 8007836:	232b      	movmi	r3, #43	; 0x2b
 8007838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800783c:	f89a 3000 	ldrb.w	r3, [sl]
 8007840:	2b2a      	cmp	r3, #42	; 0x2a
 8007842:	d015      	beq.n	8007870 <_vfiprintf_r+0x13c>
 8007844:	9a07      	ldr	r2, [sp, #28]
 8007846:	4654      	mov	r4, sl
 8007848:	2000      	movs	r0, #0
 800784a:	f04f 0c0a 	mov.w	ip, #10
 800784e:	4621      	mov	r1, r4
 8007850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007854:	3b30      	subs	r3, #48	; 0x30
 8007856:	2b09      	cmp	r3, #9
 8007858:	d94e      	bls.n	80078f8 <_vfiprintf_r+0x1c4>
 800785a:	b1b0      	cbz	r0, 800788a <_vfiprintf_r+0x156>
 800785c:	9207      	str	r2, [sp, #28]
 800785e:	e014      	b.n	800788a <_vfiprintf_r+0x156>
 8007860:	eba0 0308 	sub.w	r3, r0, r8
 8007864:	fa09 f303 	lsl.w	r3, r9, r3
 8007868:	4313      	orrs	r3, r2
 800786a:	9304      	str	r3, [sp, #16]
 800786c:	46a2      	mov	sl, r4
 800786e:	e7d2      	b.n	8007816 <_vfiprintf_r+0xe2>
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	1d19      	adds	r1, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	9103      	str	r1, [sp, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	bfbb      	ittet	lt
 800787c:	425b      	neglt	r3, r3
 800787e:	f042 0202 	orrlt.w	r2, r2, #2
 8007882:	9307      	strge	r3, [sp, #28]
 8007884:	9307      	strlt	r3, [sp, #28]
 8007886:	bfb8      	it	lt
 8007888:	9204      	strlt	r2, [sp, #16]
 800788a:	7823      	ldrb	r3, [r4, #0]
 800788c:	2b2e      	cmp	r3, #46	; 0x2e
 800788e:	d10c      	bne.n	80078aa <_vfiprintf_r+0x176>
 8007890:	7863      	ldrb	r3, [r4, #1]
 8007892:	2b2a      	cmp	r3, #42	; 0x2a
 8007894:	d135      	bne.n	8007902 <_vfiprintf_r+0x1ce>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	1d1a      	adds	r2, r3, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	9203      	str	r2, [sp, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80078a6:	3402      	adds	r4, #2
 80078a8:	9305      	str	r3, [sp, #20]
 80078aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007990 <_vfiprintf_r+0x25c>
 80078ae:	7821      	ldrb	r1, [r4, #0]
 80078b0:	2203      	movs	r2, #3
 80078b2:	4650      	mov	r0, sl
 80078b4:	f7f8 fc64 	bl	8000180 <memchr>
 80078b8:	b140      	cbz	r0, 80078cc <_vfiprintf_r+0x198>
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	eba0 000a 	sub.w	r0, r0, sl
 80078c0:	fa03 f000 	lsl.w	r0, r3, r0
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	4303      	orrs	r3, r0
 80078c8:	3401      	adds	r4, #1
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d0:	482c      	ldr	r0, [pc, #176]	; (8007984 <_vfiprintf_r+0x250>)
 80078d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078d6:	2206      	movs	r2, #6
 80078d8:	f7f8 fc52 	bl	8000180 <memchr>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d03f      	beq.n	8007960 <_vfiprintf_r+0x22c>
 80078e0:	4b29      	ldr	r3, [pc, #164]	; (8007988 <_vfiprintf_r+0x254>)
 80078e2:	bb1b      	cbnz	r3, 800792c <_vfiprintf_r+0x1f8>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	3307      	adds	r3, #7
 80078e8:	f023 0307 	bic.w	r3, r3, #7
 80078ec:	3308      	adds	r3, #8
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f2:	443b      	add	r3, r7
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	e767      	b.n	80077c8 <_vfiprintf_r+0x94>
 80078f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078fc:	460c      	mov	r4, r1
 80078fe:	2001      	movs	r0, #1
 8007900:	e7a5      	b.n	800784e <_vfiprintf_r+0x11a>
 8007902:	2300      	movs	r3, #0
 8007904:	3401      	adds	r4, #1
 8007906:	9305      	str	r3, [sp, #20]
 8007908:	4619      	mov	r1, r3
 800790a:	f04f 0c0a 	mov.w	ip, #10
 800790e:	4620      	mov	r0, r4
 8007910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007914:	3a30      	subs	r2, #48	; 0x30
 8007916:	2a09      	cmp	r2, #9
 8007918:	d903      	bls.n	8007922 <_vfiprintf_r+0x1ee>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0c5      	beq.n	80078aa <_vfiprintf_r+0x176>
 800791e:	9105      	str	r1, [sp, #20]
 8007920:	e7c3      	b.n	80078aa <_vfiprintf_r+0x176>
 8007922:	fb0c 2101 	mla	r1, ip, r1, r2
 8007926:	4604      	mov	r4, r0
 8007928:	2301      	movs	r3, #1
 800792a:	e7f0      	b.n	800790e <_vfiprintf_r+0x1da>
 800792c:	ab03      	add	r3, sp, #12
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	462a      	mov	r2, r5
 8007932:	4b16      	ldr	r3, [pc, #88]	; (800798c <_vfiprintf_r+0x258>)
 8007934:	a904      	add	r1, sp, #16
 8007936:	4630      	mov	r0, r6
 8007938:	f3af 8000 	nop.w
 800793c:	4607      	mov	r7, r0
 800793e:	1c78      	adds	r0, r7, #1
 8007940:	d1d6      	bne.n	80078f0 <_vfiprintf_r+0x1bc>
 8007942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007944:	07d9      	lsls	r1, r3, #31
 8007946:	d405      	bmi.n	8007954 <_vfiprintf_r+0x220>
 8007948:	89ab      	ldrh	r3, [r5, #12]
 800794a:	059a      	lsls	r2, r3, #22
 800794c:	d402      	bmi.n	8007954 <_vfiprintf_r+0x220>
 800794e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007950:	f7ff fbf6 	bl	8007140 <__retarget_lock_release_recursive>
 8007954:	89ab      	ldrh	r3, [r5, #12]
 8007956:	065b      	lsls	r3, r3, #25
 8007958:	f53f af12 	bmi.w	8007780 <_vfiprintf_r+0x4c>
 800795c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800795e:	e711      	b.n	8007784 <_vfiprintf_r+0x50>
 8007960:	ab03      	add	r3, sp, #12
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	462a      	mov	r2, r5
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <_vfiprintf_r+0x258>)
 8007968:	a904      	add	r1, sp, #16
 800796a:	4630      	mov	r0, r6
 800796c:	f000 f880 	bl	8007a70 <_printf_i>
 8007970:	e7e4      	b.n	800793c <_vfiprintf_r+0x208>
 8007972:	bf00      	nop
 8007974:	08008138 	.word	0x08008138
 8007978:	08008158 	.word	0x08008158
 800797c:	08008118 	.word	0x08008118
 8007980:	0800817c 	.word	0x0800817c
 8007984:	08008186 	.word	0x08008186
 8007988:	00000000 	.word	0x00000000
 800798c:	0800770f 	.word	0x0800770f
 8007990:	08008182 	.word	0x08008182

08007994 <_printf_common>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	4616      	mov	r6, r2
 800799a:	4699      	mov	r9, r3
 800799c:	688a      	ldr	r2, [r1, #8]
 800799e:	690b      	ldr	r3, [r1, #16]
 80079a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bfb8      	it	lt
 80079a8:	4613      	movlt	r3, r2
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b0:	4607      	mov	r7, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b10a      	cbz	r2, 80079ba <_printf_common+0x26>
 80079b6:	3301      	adds	r3, #1
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	0699      	lsls	r1, r3, #26
 80079be:	bf42      	ittt	mi
 80079c0:	6833      	ldrmi	r3, [r6, #0]
 80079c2:	3302      	addmi	r3, #2
 80079c4:	6033      	strmi	r3, [r6, #0]
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	f015 0506 	ands.w	r5, r5, #6
 80079cc:	d106      	bne.n	80079dc <_printf_common+0x48>
 80079ce:	f104 0a19 	add.w	sl, r4, #25
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	6832      	ldr	r2, [r6, #0]
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dc26      	bgt.n	8007a2a <_printf_common+0x96>
 80079dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e0:	1e13      	subs	r3, r2, #0
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	bf18      	it	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	0692      	lsls	r2, r2, #26
 80079ea:	d42b      	bmi.n	8007a44 <_printf_common+0xb0>
 80079ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f0:	4649      	mov	r1, r9
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c0      	blx	r8
 80079f6:	3001      	adds	r0, #1
 80079f8:	d01e      	beq.n	8007a38 <_printf_common+0xa4>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	68e5      	ldr	r5, [r4, #12]
 80079fe:	6832      	ldr	r2, [r6, #0]
 8007a00:	f003 0306 	and.w	r3, r3, #6
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	bf08      	it	eq
 8007a08:	1aad      	subeq	r5, r5, r2
 8007a0a:	68a3      	ldr	r3, [r4, #8]
 8007a0c:	6922      	ldr	r2, [r4, #16]
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a14:	2500      	movne	r5, #0
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bfc4      	itt	gt
 8007a1a:	1a9b      	subgt	r3, r3, r2
 8007a1c:	18ed      	addgt	r5, r5, r3
 8007a1e:	2600      	movs	r6, #0
 8007a20:	341a      	adds	r4, #26
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	d11a      	bne.n	8007a5c <_printf_common+0xc8>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e008      	b.n	8007a3c <_printf_common+0xa8>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4638      	mov	r0, r7
 8007a32:	47c0      	blx	r8
 8007a34:	3001      	adds	r0, #1
 8007a36:	d103      	bne.n	8007a40 <_printf_common+0xac>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	3501      	adds	r5, #1
 8007a42:	e7c6      	b.n	80079d2 <_printf_common+0x3e>
 8007a44:	18e1      	adds	r1, r4, r3
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	2030      	movs	r0, #48	; 0x30
 8007a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a4e:	4422      	add	r2, r4
 8007a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a58:	3302      	adds	r3, #2
 8007a5a:	e7c7      	b.n	80079ec <_printf_common+0x58>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4649      	mov	r1, r9
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0e6      	beq.n	8007a38 <_printf_common+0xa4>
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7d9      	b.n	8007a22 <_printf_common+0x8e>
	...

08007a70 <_printf_i>:
 8007a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	7e0f      	ldrb	r7, [r1, #24]
 8007a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a78:	2f78      	cmp	r7, #120	; 0x78
 8007a7a:	4691      	mov	r9, r2
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	469a      	mov	sl, r3
 8007a82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a86:	d807      	bhi.n	8007a98 <_printf_i+0x28>
 8007a88:	2f62      	cmp	r7, #98	; 0x62
 8007a8a:	d80a      	bhi.n	8007aa2 <_printf_i+0x32>
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	f000 80d8 	beq.w	8007c42 <_printf_i+0x1d2>
 8007a92:	2f58      	cmp	r7, #88	; 0x58
 8007a94:	f000 80a3 	beq.w	8007bde <_printf_i+0x16e>
 8007a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa0:	e03a      	b.n	8007b18 <_printf_i+0xa8>
 8007aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aa6:	2b15      	cmp	r3, #21
 8007aa8:	d8f6      	bhi.n	8007a98 <_printf_i+0x28>
 8007aaa:	a101      	add	r1, pc, #4	; (adr r1, 8007ab0 <_printf_i+0x40>)
 8007aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007b1d 	.word	0x08007b1d
 8007ab8:	08007a99 	.word	0x08007a99
 8007abc:	08007a99 	.word	0x08007a99
 8007ac0:	08007a99 	.word	0x08007a99
 8007ac4:	08007a99 	.word	0x08007a99
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007a99 	.word	0x08007a99
 8007ad0:	08007a99 	.word	0x08007a99
 8007ad4:	08007a99 	.word	0x08007a99
 8007ad8:	08007a99 	.word	0x08007a99
 8007adc:	08007c29 	.word	0x08007c29
 8007ae0:	08007b4d 	.word	0x08007b4d
 8007ae4:	08007c0b 	.word	0x08007c0b
 8007ae8:	08007a99 	.word	0x08007a99
 8007aec:	08007a99 	.word	0x08007a99
 8007af0:	08007c4b 	.word	0x08007c4b
 8007af4:	08007a99 	.word	0x08007a99
 8007af8:	08007b4d 	.word	0x08007b4d
 8007afc:	08007a99 	.word	0x08007a99
 8007b00:	08007a99 	.word	0x08007a99
 8007b04:	08007c13 	.word	0x08007c13
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	1d1a      	adds	r2, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	602a      	str	r2, [r5, #0]
 8007b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0a3      	b.n	8007c64 <_printf_i+0x1f4>
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	6829      	ldr	r1, [r5, #0]
 8007b20:	0606      	lsls	r6, r0, #24
 8007b22:	f101 0304 	add.w	r3, r1, #4
 8007b26:	d50a      	bpl.n	8007b3e <_printf_i+0xce>
 8007b28:	680e      	ldr	r6, [r1, #0]
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	da03      	bge.n	8007b38 <_printf_i+0xc8>
 8007b30:	232d      	movs	r3, #45	; 0x2d
 8007b32:	4276      	negs	r6, r6
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	485e      	ldr	r0, [pc, #376]	; (8007cb4 <_printf_i+0x244>)
 8007b3a:	230a      	movs	r3, #10
 8007b3c:	e019      	b.n	8007b72 <_printf_i+0x102>
 8007b3e:	680e      	ldr	r6, [r1, #0]
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b46:	bf18      	it	ne
 8007b48:	b236      	sxthne	r6, r6
 8007b4a:	e7ef      	b.n	8007b2c <_printf_i+0xbc>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	6820      	ldr	r0, [r4, #0]
 8007b50:	1d19      	adds	r1, r3, #4
 8007b52:	6029      	str	r1, [r5, #0]
 8007b54:	0601      	lsls	r1, r0, #24
 8007b56:	d501      	bpl.n	8007b5c <_printf_i+0xec>
 8007b58:	681e      	ldr	r6, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <_printf_i+0xf2>
 8007b5c:	0646      	lsls	r6, r0, #25
 8007b5e:	d5fb      	bpl.n	8007b58 <_printf_i+0xe8>
 8007b60:	881e      	ldrh	r6, [r3, #0]
 8007b62:	4854      	ldr	r0, [pc, #336]	; (8007cb4 <_printf_i+0x244>)
 8007b64:	2f6f      	cmp	r7, #111	; 0x6f
 8007b66:	bf0c      	ite	eq
 8007b68:	2308      	moveq	r3, #8
 8007b6a:	230a      	movne	r3, #10
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b72:	6865      	ldr	r5, [r4, #4]
 8007b74:	60a5      	str	r5, [r4, #8]
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	bfa2      	ittt	ge
 8007b7a:	6821      	ldrge	r1, [r4, #0]
 8007b7c:	f021 0104 	bicge.w	r1, r1, #4
 8007b80:	6021      	strge	r1, [r4, #0]
 8007b82:	b90e      	cbnz	r6, 8007b88 <_printf_i+0x118>
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	d04d      	beq.n	8007c24 <_printf_i+0x1b4>
 8007b88:	4615      	mov	r5, r2
 8007b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b92:	5dc7      	ldrb	r7, [r0, r7]
 8007b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b98:	4637      	mov	r7, r6
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	460e      	mov	r6, r1
 8007b9e:	d9f4      	bls.n	8007b8a <_printf_i+0x11a>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d10b      	bne.n	8007bbc <_printf_i+0x14c>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07de      	lsls	r6, r3, #31
 8007ba8:	d508      	bpl.n	8007bbc <_printf_i+0x14c>
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	bfde      	ittt	le
 8007bb2:	2330      	movle	r3, #48	; 0x30
 8007bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bbc:	1b52      	subs	r2, r2, r5
 8007bbe:	6122      	str	r2, [r4, #16]
 8007bc0:	f8cd a000 	str.w	sl, [sp]
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	aa03      	add	r2, sp, #12
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7ff fee2 	bl	8007994 <_printf_common>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d14c      	bne.n	8007c6e <_printf_i+0x1fe>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b004      	add	sp, #16
 8007bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bde:	4835      	ldr	r0, [pc, #212]	; (8007cb4 <_printf_i+0x244>)
 8007be0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007be4:	6829      	ldr	r1, [r5, #0]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bec:	6029      	str	r1, [r5, #0]
 8007bee:	061d      	lsls	r5, r3, #24
 8007bf0:	d514      	bpl.n	8007c1c <_printf_i+0x1ac>
 8007bf2:	07df      	lsls	r7, r3, #31
 8007bf4:	bf44      	itt	mi
 8007bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfa:	6023      	strmi	r3, [r4, #0]
 8007bfc:	b91e      	cbnz	r6, 8007c06 <_printf_i+0x196>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f023 0320 	bic.w	r3, r3, #32
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	2310      	movs	r3, #16
 8007c08:	e7b0      	b.n	8007b6c <_printf_i+0xfc>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f043 0320 	orr.w	r3, r3, #32
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2378      	movs	r3, #120	; 0x78
 8007c14:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <_printf_i+0x248>)
 8007c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1a:	e7e3      	b.n	8007be4 <_printf_i+0x174>
 8007c1c:	0659      	lsls	r1, r3, #25
 8007c1e:	bf48      	it	mi
 8007c20:	b2b6      	uxthmi	r6, r6
 8007c22:	e7e6      	b.n	8007bf2 <_printf_i+0x182>
 8007c24:	4615      	mov	r5, r2
 8007c26:	e7bb      	b.n	8007ba0 <_printf_i+0x130>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	6826      	ldr	r6, [r4, #0]
 8007c2c:	6961      	ldr	r1, [r4, #20]
 8007c2e:	1d18      	adds	r0, r3, #4
 8007c30:	6028      	str	r0, [r5, #0]
 8007c32:	0635      	lsls	r5, r6, #24
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	d501      	bpl.n	8007c3c <_printf_i+0x1cc>
 8007c38:	6019      	str	r1, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <_printf_i+0x1d2>
 8007c3c:	0670      	lsls	r0, r6, #25
 8007c3e:	d5fb      	bpl.n	8007c38 <_printf_i+0x1c8>
 8007c40:	8019      	strh	r1, [r3, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	4615      	mov	r5, r2
 8007c48:	e7ba      	b.n	8007bc0 <_printf_i+0x150>
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	602a      	str	r2, [r5, #0]
 8007c50:	681d      	ldr	r5, [r3, #0]
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7f8 fa92 	bl	8000180 <memchr>
 8007c5c:	b108      	cbz	r0, 8007c62 <_printf_i+0x1f2>
 8007c5e:	1b40      	subs	r0, r0, r5
 8007c60:	6060      	str	r0, [r4, #4]
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	2300      	movs	r3, #0
 8007c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6c:	e7a8      	b.n	8007bc0 <_printf_i+0x150>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4649      	mov	r1, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	47d0      	blx	sl
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0ab      	beq.n	8007bd4 <_printf_i+0x164>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	079b      	lsls	r3, r3, #30
 8007c80:	d413      	bmi.n	8007caa <_printf_i+0x23a>
 8007c82:	68e0      	ldr	r0, [r4, #12]
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	4298      	cmp	r0, r3
 8007c88:	bfb8      	it	lt
 8007c8a:	4618      	movlt	r0, r3
 8007c8c:	e7a4      	b.n	8007bd8 <_printf_i+0x168>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4632      	mov	r2, r6
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d09b      	beq.n	8007bd4 <_printf_i+0x164>
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	9903      	ldr	r1, [sp, #12]
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	42ab      	cmp	r3, r5
 8007ca6:	dcf2      	bgt.n	8007c8e <_printf_i+0x21e>
 8007ca8:	e7eb      	b.n	8007c82 <_printf_i+0x212>
 8007caa:	2500      	movs	r5, #0
 8007cac:	f104 0619 	add.w	r6, r4, #25
 8007cb0:	e7f5      	b.n	8007c9e <_printf_i+0x22e>
 8007cb2:	bf00      	nop
 8007cb4:	0800818d 	.word	0x0800818d
 8007cb8:	0800819e 	.word	0x0800819e

08007cbc <_read_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d07      	ldr	r5, [pc, #28]	; (8007cdc <_read_r+0x20>)
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	602a      	str	r2, [r5, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f7f8 ffec 	bl	8000ca8 <_read>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_read_r+0x1e>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_read_r+0x1e>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20001e98 	.word	0x20001e98

08007ce0 <__swbuf_r>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	460e      	mov	r6, r1
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b118      	cbz	r0, 8007cf2 <__swbuf_r+0x12>
 8007cea:	6983      	ldr	r3, [r0, #24]
 8007cec:	b90b      	cbnz	r3, 8007cf2 <__swbuf_r+0x12>
 8007cee:	f7ff f963 	bl	8006fb8 <__sinit>
 8007cf2:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <__swbuf_r+0x98>)
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d12b      	bne.n	8007d50 <__swbuf_r+0x70>
 8007cf8:	686c      	ldr	r4, [r5, #4]
 8007cfa:	69a3      	ldr	r3, [r4, #24]
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	071a      	lsls	r2, r3, #28
 8007d02:	d52f      	bpl.n	8007d64 <__swbuf_r+0x84>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	b36b      	cbz	r3, 8007d64 <__swbuf_r+0x84>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	6820      	ldr	r0, [r4, #0]
 8007d0c:	1ac0      	subs	r0, r0, r3
 8007d0e:	6963      	ldr	r3, [r4, #20]
 8007d10:	b2f6      	uxtb	r6, r6
 8007d12:	4283      	cmp	r3, r0
 8007d14:	4637      	mov	r7, r6
 8007d16:	dc04      	bgt.n	8007d22 <__swbuf_r+0x42>
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f7ff fc3a 	bl	8007594 <_fflush_r>
 8007d20:	bb30      	cbnz	r0, 8007d70 <__swbuf_r+0x90>
 8007d22:	68a3      	ldr	r3, [r4, #8]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	60a3      	str	r3, [r4, #8]
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	6022      	str	r2, [r4, #0]
 8007d2e:	701e      	strb	r6, [r3, #0]
 8007d30:	6963      	ldr	r3, [r4, #20]
 8007d32:	3001      	adds	r0, #1
 8007d34:	4283      	cmp	r3, r0
 8007d36:	d004      	beq.n	8007d42 <__swbuf_r+0x62>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	07db      	lsls	r3, r3, #31
 8007d3c:	d506      	bpl.n	8007d4c <__swbuf_r+0x6c>
 8007d3e:	2e0a      	cmp	r6, #10
 8007d40:	d104      	bne.n	8007d4c <__swbuf_r+0x6c>
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff fc25 	bl	8007594 <_fflush_r>
 8007d4a:	b988      	cbnz	r0, 8007d70 <__swbuf_r+0x90>
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <__swbuf_r+0x9c>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d101      	bne.n	8007d5a <__swbuf_r+0x7a>
 8007d56:	68ac      	ldr	r4, [r5, #8]
 8007d58:	e7cf      	b.n	8007cfa <__swbuf_r+0x1a>
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <__swbuf_r+0xa0>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	bf08      	it	eq
 8007d60:	68ec      	ldreq	r4, [r5, #12]
 8007d62:	e7ca      	b.n	8007cfa <__swbuf_r+0x1a>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f80c 	bl	8007d84 <__swsetup_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d0cb      	beq.n	8007d08 <__swbuf_r+0x28>
 8007d70:	f04f 37ff 	mov.w	r7, #4294967295
 8007d74:	e7ea      	b.n	8007d4c <__swbuf_r+0x6c>
 8007d76:	bf00      	nop
 8007d78:	08008138 	.word	0x08008138
 8007d7c:	08008158 	.word	0x08008158
 8007d80:	08008118 	.word	0x08008118

08007d84 <__swsetup_r>:
 8007d84:	4b32      	ldr	r3, [pc, #200]	; (8007e50 <__swsetup_r+0xcc>)
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	681d      	ldr	r5, [r3, #0]
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	b125      	cbz	r5, 8007d9a <__swsetup_r+0x16>
 8007d90:	69ab      	ldr	r3, [r5, #24]
 8007d92:	b913      	cbnz	r3, 8007d9a <__swsetup_r+0x16>
 8007d94:	4628      	mov	r0, r5
 8007d96:	f7ff f90f 	bl	8006fb8 <__sinit>
 8007d9a:	4b2e      	ldr	r3, [pc, #184]	; (8007e54 <__swsetup_r+0xd0>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	d10f      	bne.n	8007dc0 <__swsetup_r+0x3c>
 8007da0:	686c      	ldr	r4, [r5, #4]
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da8:	0719      	lsls	r1, r3, #28
 8007daa:	d42c      	bmi.n	8007e06 <__swsetup_r+0x82>
 8007dac:	06dd      	lsls	r5, r3, #27
 8007dae:	d411      	bmi.n	8007dd4 <__swsetup_r+0x50>
 8007db0:	2309      	movs	r3, #9
 8007db2:	6033      	str	r3, [r6, #0]
 8007db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbe:	e03e      	b.n	8007e3e <__swsetup_r+0xba>
 8007dc0:	4b25      	ldr	r3, [pc, #148]	; (8007e58 <__swsetup_r+0xd4>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d101      	bne.n	8007dca <__swsetup_r+0x46>
 8007dc6:	68ac      	ldr	r4, [r5, #8]
 8007dc8:	e7eb      	b.n	8007da2 <__swsetup_r+0x1e>
 8007dca:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <__swsetup_r+0xd8>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	bf08      	it	eq
 8007dd0:	68ec      	ldreq	r4, [r5, #12]
 8007dd2:	e7e6      	b.n	8007da2 <__swsetup_r+0x1e>
 8007dd4:	0758      	lsls	r0, r3, #29
 8007dd6:	d512      	bpl.n	8007dfe <__swsetup_r+0x7a>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dda:	b141      	cbz	r1, 8007dee <__swsetup_r+0x6a>
 8007ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <__swsetup_r+0x66>
 8007de4:	4630      	mov	r0, r6
 8007de6:	f7ff fc2f 	bl	8007648 <_free_r>
 8007dea:	2300      	movs	r3, #0
 8007dec:	6363      	str	r3, [r4, #52]	; 0x34
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	b94b      	cbnz	r3, 8007e1e <__swsetup_r+0x9a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e14:	d003      	beq.n	8007e1e <__swsetup_r+0x9a>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 f847 	bl	8007eac <__smakebuf_r>
 8007e1e:	89a0      	ldrh	r0, [r4, #12]
 8007e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e24:	f010 0301 	ands.w	r3, r0, #1
 8007e28:	d00a      	beq.n	8007e40 <__swsetup_r+0xbc>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60a3      	str	r3, [r4, #8]
 8007e2e:	6963      	ldr	r3, [r4, #20]
 8007e30:	425b      	negs	r3, r3
 8007e32:	61a3      	str	r3, [r4, #24]
 8007e34:	6923      	ldr	r3, [r4, #16]
 8007e36:	b943      	cbnz	r3, 8007e4a <__swsetup_r+0xc6>
 8007e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e3c:	d1ba      	bne.n	8007db4 <__swsetup_r+0x30>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	0781      	lsls	r1, r0, #30
 8007e42:	bf58      	it	pl
 8007e44:	6963      	ldrpl	r3, [r4, #20]
 8007e46:	60a3      	str	r3, [r4, #8]
 8007e48:	e7f4      	b.n	8007e34 <__swsetup_r+0xb0>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e7f7      	b.n	8007e3e <__swsetup_r+0xba>
 8007e4e:	bf00      	nop
 8007e50:	20000014 	.word	0x20000014
 8007e54:	08008138 	.word	0x08008138
 8007e58:	08008158 	.word	0x08008158
 8007e5c:	08008118 	.word	0x08008118

08007e60 <__swhatbuf_r>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	460e      	mov	r6, r1
 8007e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	b096      	sub	sp, #88	; 0x58
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	461d      	mov	r5, r3
 8007e70:	da08      	bge.n	8007e84 <__swhatbuf_r+0x24>
 8007e72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	602a      	str	r2, [r5, #0]
 8007e7a:	061a      	lsls	r2, r3, #24
 8007e7c:	d410      	bmi.n	8007ea0 <__swhatbuf_r+0x40>
 8007e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e82:	e00e      	b.n	8007ea2 <__swhatbuf_r+0x42>
 8007e84:	466a      	mov	r2, sp
 8007e86:	f000 f851 	bl	8007f2c <_fstat_r>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	dbf1      	blt.n	8007e72 <__swhatbuf_r+0x12>
 8007e8e:	9a01      	ldr	r2, [sp, #4]
 8007e90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e98:	425a      	negs	r2, r3
 8007e9a:	415a      	adcs	r2, r3
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	e7ee      	b.n	8007e7e <__swhatbuf_r+0x1e>
 8007ea0:	2340      	movs	r3, #64	; 0x40
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	b016      	add	sp, #88	; 0x58
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007eac <__smakebuf_r>:
 8007eac:	898b      	ldrh	r3, [r1, #12]
 8007eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eb0:	079d      	lsls	r5, r3, #30
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	d507      	bpl.n	8007ec8 <__smakebuf_r+0x1c>
 8007eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	6123      	str	r3, [r4, #16]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	6163      	str	r3, [r4, #20]
 8007ec4:	b002      	add	sp, #8
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	ab01      	add	r3, sp, #4
 8007eca:	466a      	mov	r2, sp
 8007ecc:	f7ff ffc8 	bl	8007e60 <__swhatbuf_r>
 8007ed0:	9900      	ldr	r1, [sp, #0]
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7ff f96b 	bl	80071b0 <_malloc_r>
 8007eda:	b948      	cbnz	r0, 8007ef0 <__smakebuf_r+0x44>
 8007edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee0:	059a      	lsls	r2, r3, #22
 8007ee2:	d4ef      	bmi.n	8007ec4 <__smakebuf_r+0x18>
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	f043 0302 	orr.w	r3, r3, #2
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	e7e3      	b.n	8007eb8 <__smakebuf_r+0xc>
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <__smakebuf_r+0x7c>)
 8007ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	6020      	str	r0, [r4, #0]
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	9b00      	ldr	r3, [sp, #0]
 8007f00:	6163      	str	r3, [r4, #20]
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	6120      	str	r0, [r4, #16]
 8007f06:	b15b      	cbz	r3, 8007f20 <__smakebuf_r+0x74>
 8007f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 f81f 	bl	8007f50 <_isatty_r>
 8007f12:	b128      	cbz	r0, 8007f20 <__smakebuf_r+0x74>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	89a0      	ldrh	r0, [r4, #12]
 8007f22:	4305      	orrs	r5, r0
 8007f24:	81a5      	strh	r5, [r4, #12]
 8007f26:	e7cd      	b.n	8007ec4 <__smakebuf_r+0x18>
 8007f28:	08006f51 	.word	0x08006f51

08007f2c <_fstat_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_fstat_r+0x20>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	f7f8 fefa 	bl	8000d32 <_fstat>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d102      	bne.n	8007f48 <_fstat_r+0x1c>
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	b103      	cbz	r3, 8007f48 <_fstat_r+0x1c>
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001e98 	.word	0x20001e98

08007f50 <_isatty_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d06      	ldr	r5, [pc, #24]	; (8007f6c <_isatty_r+0x1c>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	f7f8 fef9 	bl	8000d52 <_isatty>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_isatty_r+0x1a>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_isatty_r+0x1a>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20001e98 	.word	0x20001e98

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	bf00      	nop
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
