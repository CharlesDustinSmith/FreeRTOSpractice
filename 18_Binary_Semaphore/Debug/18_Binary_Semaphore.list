
18_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c55c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800c69c  0800c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000188  20000004  0800c848  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003408  2000018c  0800c9d0  0002018c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20003594  0800c9d0  00023594  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025858  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005237  00000000  00000000  00045a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002160  00000000  00000000  0004ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001f78  00000000  00000000  0004cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000272f9  00000000  00000000  0004ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002211d  00000000  00000000  00076021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e7776  00000000  00000000  0009813e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0017f8b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008a60  00000000  00000000  0017f904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000018c 	.word	0x2000018c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c684 	.word	0x0800c684

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000190 	.word	0x20000190
 800017c:	0800c684 	.word	0x0800c684

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <configureTimerForRunTimeStats>:
void vApplicationTickHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0

}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800019c:	4770      	bx	lr

0800019e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800019e:	b480      	push	{r7}
 80001a0:	af00      	add	r7, sp, #0
return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80001ae:	b480      	push	{r7}
 80001b0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c8:	4770      	bx	lr

080001ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4013      	ands	r3, r2
 80001ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ee:	68fb      	ldr	r3, [r7, #12]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800020a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000218:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4013      	ands	r3, r2
 800021e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000220:	68fb      	ldr	r3, [r7, #12]
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <main>:
void redLedController(void *pvParameters);
void yellowLedController(void *pvParameters);
void blueLedController(void *pvParameters);

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af02      	add	r7, sp, #8
  HAL_Init();
 8000236:	f000 fa91 	bl	800075c <HAL_Init>

  SystemClock_Config();
 800023a:	f000 f8c7 	bl	80003cc <SystemClock_Config>

  MX_GPIO_Init();
 800023e:	f000 f957 	bl	80004f0 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000242:	f00b fc83 	bl	800bb4c <MX_USB_Device_Init>

  xBinarySemaphore = xSemaphoreCreateBinary();
 8000246:	2203      	movs	r2, #3
 8000248:	2100      	movs	r1, #0
 800024a:	2001      	movs	r0, #1
 800024c:	f008 ffa0 	bl	8009190 <xQueueGenericCreate>
 8000250:	4603      	mov	r3, r0
 8000252:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <main+0x78>)
 8000254:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(xBinarySemaphore);
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <main+0x78>)
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	2300      	movs	r3, #0
 800025c:	2200      	movs	r2, #0
 800025e:	2100      	movs	r1, #0
 8000260:	f008 fff4 	bl	800924c <xQueueGenericSend>

  xTaskCreate(
 8000264:	2300      	movs	r3, #0
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	2301      	movs	r3, #1
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2300      	movs	r3, #0
 800026e:	2264      	movs	r2, #100	; 0x64
 8000270:	490e      	ldr	r1, [pc, #56]	; (80002ac <main+0x7c>)
 8000272:	480f      	ldr	r0, [pc, #60]	; (80002b0 <main+0x80>)
 8000274:	f009 fd53 	bl	8009d1e <xTaskCreate>
		  NULL,
		  1,
		  NULL
		  );

  xTaskCreate(
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2301      	movs	r3, #1
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2300      	movs	r3, #0
 8000282:	2264      	movs	r2, #100	; 0x64
 8000284:	490b      	ldr	r1, [pc, #44]	; (80002b4 <main+0x84>)
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <main+0x88>)
 8000288:	f009 fd49 	bl	8009d1e <xTaskCreate>
		  NULL,
		  1,
		  NULL
		  );

  xTaskCreate(
 800028c:	2300      	movs	r3, #0
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2301      	movs	r3, #1
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	2264      	movs	r2, #100	; 0x64
 8000298:	4908      	ldr	r1, [pc, #32]	; (80002bc <main+0x8c>)
 800029a:	4809      	ldr	r0, [pc, #36]	; (80002c0 <main+0x90>)
 800029c:	f009 fd3f 	bl	8009d1e <xTaskCreate>
		  NULL,
		  1,
		  NULL
		  );

  vTaskStartScheduler();
 80002a0:	f009 fe84 	bl	8009fac <vTaskStartScheduler>

  while (1)
 80002a4:	e7fe      	b.n	80002a4 <main+0x74>
 80002a6:	bf00      	nop
 80002a8:	20000238 	.word	0x20000238
 80002ac:	0800c69c 	.word	0x0800c69c
 80002b0:	080002c5 	.word	0x080002c5
 80002b4:	0800c6ac 	.word	0x0800c6ac
 80002b8:	0800031d 	.word	0x0800031d
 80002bc:	0800c6bc 	.word	0x0800c6bc
 80002c0:	08000375 	.word	0x08000375

080002c4 <redLedController>:
//	  HAL_Delay(1000);
  }
}

void redLedController(void *pvParameters)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <redLedController+0x4c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f04f 31ff 	mov.w	r1, #4294967295
 80002d4:	4618      	mov	r0, r3
 80002d6:	f009 fa33 	bl	8009740 <xQueueSemaphoreTake>
		uint8_t *data = "Hello World... From Red Task \n\r";
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <redLedController+0x50>)
 80002dc:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(data, strlen(data));
 80002de:	68f8      	ldr	r0, [r7, #12]
 80002e0:	f7ff ff4e 	bl	8000180 <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4619      	mov	r1, r3
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f00b fced 	bl	800bcc8 <CDC_Transmit_FS>
		HAL_Delay(1000);
 80002ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f2:	f000 fab9 	bl	8000868 <HAL_Delay>
		RedLEDProfiler++;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <redLedController+0x54>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <redLedController+0x54>)
 80002fe:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(xBinarySemaphore);
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <redLedController+0x4c>)
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	2300      	movs	r3, #0
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	f008 ff9f 	bl	800924c <xQueueGenericSend>
	{
 800030e:	e7dd      	b.n	80002cc <redLedController+0x8>
 8000310:	20000238 	.word	0x20000238
 8000314:	0800c6cc 	.word	0x0800c6cc
 8000318:	2000023c 	.word	0x2000023c

0800031c <yellowLedController>:
	}
}

void yellowLedController(void *pvParameters)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <yellowLedController+0x4c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f04f 31ff 	mov.w	r1, #4294967295
 800032c:	4618      	mov	r0, r3
 800032e:	f009 fa07 	bl	8009740 <xQueueSemaphoreTake>
		uint8_t *data = "Hello World... From Yellow Task \n\r";
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <yellowLedController+0x50>)
 8000334:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(data, strlen(data));
 8000336:	68f8      	ldr	r0, [r7, #12]
 8000338:	f7ff ff22 	bl	8000180 <strlen>
 800033c:	4603      	mov	r3, r0
 800033e:	4619      	mov	r1, r3
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f00b fcc1 	bl	800bcc8 <CDC_Transmit_FS>
		HAL_Delay(1000);
 8000346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034a:	f000 fa8d 	bl	8000868 <HAL_Delay>
		YellowLEDProfiler++;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <yellowLedController+0x54>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <yellowLedController+0x54>)
 8000356:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(xBinarySemaphore);
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <yellowLedController+0x4c>)
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	2300      	movs	r3, #0
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	f008 ff73 	bl	800924c <xQueueGenericSend>
	{
 8000366:	e7dd      	b.n	8000324 <yellowLedController+0x8>
 8000368:	20000238 	.word	0x20000238
 800036c:	0800c6ec 	.word	0x0800c6ec
 8000370:	20000240 	.word	0x20000240

08000374 <blueLedController>:
	}
}

void blueLedController(void *pvParameters)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <blueLedController+0x4c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f04f 31ff 	mov.w	r1, #4294967295
 8000384:	4618      	mov	r0, r3
 8000386:	f009 f9db 	bl	8009740 <xQueueSemaphoreTake>
		uint8_t *data = "Hello World... From Blue Task \n\r";
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <blueLedController+0x50>)
 800038c:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(data, strlen(data));
 800038e:	68f8      	ldr	r0, [r7, #12]
 8000390:	f7ff fef6 	bl	8000180 <strlen>
 8000394:	4603      	mov	r3, r0
 8000396:	4619      	mov	r1, r3
 8000398:	68f8      	ldr	r0, [r7, #12]
 800039a:	f00b fc95 	bl	800bcc8 <CDC_Transmit_FS>
		HAL_Delay(1000);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 fa61 	bl	8000868 <HAL_Delay>
		BlueLEDProfiler++;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <blueLedController+0x54>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <blueLedController+0x54>)
 80003ae:	6013      	str	r3, [r2, #0]
		xSemaphoreGive(xBinarySemaphore);
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <blueLedController+0x4c>)
 80003b2:	6818      	ldr	r0, [r3, #0]
 80003b4:	2300      	movs	r3, #0
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	f008 ff47 	bl	800924c <xQueueGenericSend>
	{
 80003be:	e7dd      	b.n	800037c <blueLedController+0x8>
 80003c0:	20000238 	.word	0x20000238
 80003c4:	0800c710 	.word	0x0800c710
 80003c8:	20000244 	.word	0x20000244

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b0a0      	sub	sp, #128	; 0x80
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003d6:	2248      	movs	r2, #72	; 0x48
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f00c f94a 	bl	800c674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	f107 031c 	add.w	r3, r7, #28
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	619a      	str	r2, [r3, #24]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
 8000402:	615a      	str	r2, [r3, #20]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800040e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000412:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	f023 0303 	bic.w	r3, r3, #3
 800041e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000428:	4b30      	ldr	r3, [pc, #192]	; (80004ec <SystemClock_Config+0x120>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000430:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <SystemClock_Config+0x120>)
 8000432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000436:	6013      	str	r3, [r2, #0]
 8000438:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <SystemClock_Config+0x120>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000444:	2327      	movs	r3, #39	; 0x27
 8000446:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800044e:	2300      	movs	r3, #0
 8000450:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045c:	2340      	movs	r3, #64	; 0x40
 800045e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000460:	2300      	movs	r3, #0
 8000462:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000464:	2360      	movs	r3, #96	; 0x60
 8000466:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	2300      	movs	r3, #0
 800046a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000470:	4618      	mov	r0, r3
 8000472:	f002 fe51 	bl	8003118 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800047c:	f000 f880 	bl	8000580 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000480:	236f      	movs	r3, #111	; 0x6f
 8000482:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000484:	2302      	movs	r3, #2
 8000486:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 f9ac 	bl	8003800 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80004ae:	f000 f867 	bl	8000580 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80004b2:	f003 ff91 	bl	80043d8 <HAL_RCCEx_EnableMSIPLLMode>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80004b6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80004ba:	f7ff fe9f 	bl	80001fc <LL_APB1_GRP1_EnableClock>

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80004c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004c6:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 80004cc:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80004d0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80004d2:	2322      	movs	r3, #34	; 0x22
 80004d4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80004d6:	2320      	movs	r3, #32
 80004d8:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4618      	mov	r0, r3
 80004de:	f003 ff81 	bl	80043e4 <HAL_RCCEx_CRSConfig>
}
 80004e2:	bf00      	nop
 80004e4:	3780      	adds	r7, #128	; 0x80
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	58000400 	.word	0x58000400

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000504:	2004      	movs	r0, #4
 8000506:	f7ff fe60 	bl	80001ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	2002      	movs	r0, #2
 800050c:	f7ff fe5d 	bl	80001ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff fe5a 	bl	80001ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	2008      	movs	r0, #8
 8000518:	f7ff fe57 	bl	80001ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2123      	movs	r1, #35	; 0x23
 8000520:	4814      	ldr	r0, [pc, #80]	; (8000574 <MX_GPIO_Init+0x84>)
 8000522:	f000 fd03 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000526:	2310      	movs	r3, #16
 8000528:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	4810      	ldr	r0, [pc, #64]	; (8000578 <MX_GPIO_Init+0x88>)
 8000538:	f000 fb88 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800053c:	2323      	movs	r3, #35	; 0x23
 800053e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <MX_GPIO_Init+0x84>)
 8000552:	f000 fb7b 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000556:	2303      	movs	r3, #3
 8000558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_GPIO_Init+0x8c>)
 8000568:	f000 fb70 	bl	8000c4c <HAL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	48000400 	.word	0x48000400
 8000578:	48000800 	.word	0x48000800
 800057c:	48000c00 	.word	0x48000c00

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>

0800058a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	210f      	movs	r1, #15
 8000592:	f06f 0001 	mvn.w	r0, #1
 8000596:	f000 fa66 	bl	8000a66 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2105      	movs	r1, #5
 800059e:	2005      	movs	r0, #5
 80005a0:	f000 fa61 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80005a4:	2005      	movs	r0, #5
 80005a6:	f000 fa78 	bl	8000a9a <HAL_NVIC_EnableIRQ>
  /* CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CRS_IRQn, 5, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2105      	movs	r1, #5
 80005ae:	202a      	movs	r0, #42	; 0x2a
 80005b0:	f000 fa59 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CRS_IRQn);
 80005b4:	202a      	movs	r0, #42	; 0x2a
 80005b6:	f000 fa70 	bl	8000a9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}

080005be <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <HardFault_Handler+0x4>

080005ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <MemManage_Handler+0x4>

080005d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <BusFault_Handler+0x4>

080005d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <UsageFault_Handler+0x4>

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ee:	f000 f90f 	bl	8000810 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005f2:	f00a f949 	bl	800a888 <xTaskGetSchedulerState>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d001      	beq.n	8000600 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005fc:	f00b f82c 	bl	800b658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <USB_LP_IRQHandler+0x10>)
 800061a:	f000 fdac 	bl	8001176 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000307c 	.word	0x2000307c

08000628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <USART1_IRQHandler+0x10>)
 800062e:	f004 f8ad 	bl	800478c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001a8 	.word	0x200001a8

0800063c <CRS_IRQHandler>:

/**
  * @brief This function handles CRS global interrupt.
  */
void CRS_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRS_IRQn 0 */

  /* USER CODE END CRS_IRQn 0 */
  HAL_RCCEx_CRS_IRQHandler();
 8000640:	f003 ff0a 	bl	8004458 <HAL_RCCEx_CRS_IRQHandler>
  /* USER CODE BEGIN CRS_IRQn 1 */

  /* USER CODE END CRS_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemInit+0x98>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <SystemInit+0x98>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800065c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000674:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <SystemInit+0x9c>)
 8000682:	4013      	ands	r3, r2
 8000684:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800068e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000692:	f023 0305 	bic.w	r3, r3, #5
 8000696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800069a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800069e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80006a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80006ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <SystemInit+0xa0>)
 80006b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80006b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <SystemInit+0xa0>)
 80006bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	faf6fefb 	.word	0xfaf6fefb
 80006e8:	22041000 	.word	0x22041000

080006ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80006ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f0:	3304      	adds	r3, #4

080006f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80006f6:	d3f9      	bcc.n	80006ec <CopyDataInit>
  bx lr
 80006f8:	4770      	bx	lr

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80006fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80006fc:	3004      	adds	r0, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80006fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>
  bx lr
 8000702:	4770      	bx	lr

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000708:	f7ff ff9e 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <LoopForever+0x8>)
 800070e:	490c      	ldr	r1, [pc, #48]	; (8000740 <LoopForever+0xc>)
 8000710:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <LoopForever+0x10>)
 8000712:	2300      	movs	r3, #0
 8000714:	f7ff ffed 	bl	80006f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LoopForever+0x14>)
 800071a:	490c      	ldr	r1, [pc, #48]	; (800074c <LoopForever+0x18>)
 800071c:	2300      	movs	r3, #0
 800071e:	f7ff ffee 	bl	80006fe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <LoopForever+0x1c>)
 8000724:	490b      	ldr	r1, [pc, #44]	; (8000754 <LoopForever+0x20>)
 8000726:	2300      	movs	r3, #0
 8000728:	f7ff ffe9 	bl	80006fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072c:	f00b ff70 	bl	800c610 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000730:	f7ff fd7e 	bl	8000230 <main>

08000734 <LoopForever>:

LoopForever:
  b LoopForever
 8000734:	e7fe      	b.n	8000734 <LoopForever>
 8000736:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000738:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800073c:	20000004 	.word	0x20000004
 8000740:	2000018c 	.word	0x2000018c
 8000744:	0800c848 	.word	0x0800c848
  INIT_BSS _sbss, _ebss
 8000748:	2000018c 	.word	0x2000018c
 800074c:	20003594 	.word	0x20003594
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000750:	20030000 	.word	0x20030000
 8000754:	20030000 	.word	0x20030000

08000758 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_Init+0x3c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <HAL_Init+0x3c>)
 800076c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000770:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000772:	2003      	movs	r0, #3
 8000774:	f000 f96c 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000778:	200f      	movs	r0, #15
 800077a:	f000 f80f 	bl	800079c <HAL_InitTick>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	e001      	b.n	800078e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800078a:	f7ff fefe 	bl	800058a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800078e:	79fb      	ldrb	r3, [r7, #7]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58004000 	.word	0x58004000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_InitTick+0x6c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d024      	beq.n	80007fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007b0:	f003 f9d2 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_InitTick+0x6c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f974 	bl	8000ab6 <HAL_SYSTICK_Config>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10f      	bne.n	80007f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b0f      	cmp	r3, #15
 80007d8:	d809      	bhi.n	80007ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007da:	2200      	movs	r2, #0
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	f04f 30ff 	mov.w	r0, #4294967295
 80007e2:	f000 f940 	bl	8000a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_InitTick+0x70>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	e007      	b.n	80007fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e004      	b.n	80007fe <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000000c 	.word	0x2000000c
 800080c:	20000008 	.word	0x20000008

08000810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2000000c 	.word	0x2000000c
 8000834:	20000248 	.word	0x20000248

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000248 	.word	0x20000248

08000850 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTickPrio+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ffe2 	bl	8000838 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffd2 	bl	8000838 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
    {
    }
  }
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000000c 	.word	0x2000000c

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a74:	f7ff ff40 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ff90 	bl	80009a4 <NVIC_EncodePriority>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff5f 	bl	8000950 <__NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff33 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffa4 	bl	8000a0c <SysTick_Config>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e04f      	b.n	8000b80 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d008      	beq.n	8000afe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2204      	movs	r2, #4
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e040      	b.n	8000b80 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 020e 	bic.w	r2, r2, #14
 8000b0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0201 	bic.w	r2, r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f003 021c 	and.w	r2, r3, #28
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b40:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b4a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00c      	beq.n	8000b6e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b6c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d005      	beq.n	8000bb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e047      	b.n	8000c40 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 020e 	bic.w	r2, r2, #14
 8000bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f022 0201 	bic.w	r2, r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be4:	f003 021c 	and.w	r2, r3, #28
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bfc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00c      	beq.n	8000c20 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
    }
  }
  return status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e14c      	b.n	8000ef6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 813e 	beq.w	8000ef0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8098 	beq.w	8000ef0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc0:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <HAL_GPIO_Init+0x2c8>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dea:	d019      	beq.n	8000e20 <HAL_GPIO_Init+0x1d4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d013      	beq.n	8000e1c <HAL_GPIO_Init+0x1d0>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00d      	beq.n	8000e18 <HAL_GPIO_Init+0x1cc>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0x1c8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <HAL_GPIO_Init+0x2d8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d101      	bne.n	8000e10 <HAL_GPIO_Init+0x1c4>
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e008      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e10:	2307      	movs	r3, #7
 8000e12:	e006      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e14:	2303      	movs	r3, #3
 8000e16:	e004      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e002      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e20:	2300      	movs	r3, #0
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	f002 0203 	and.w	r2, r2, #3
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e32:	4938      	ldr	r1, [pc, #224]	; (8000f14 <HAL_GPIO_Init+0x2c8>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e64:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee8:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f47f aeab 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40010000 	.word	0x40010000
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	48000c00 	.word	0x48000c00
 8000f24:	48001000 	.word	0x48001000
 8000f28:	58000800 	.word	0x58000800

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b08b      	sub	sp, #44	; 0x2c
 8000f60:	af06      	add	r7, sp, #24
 8000f62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e0dd      	b.n	800112a <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d106      	bne.n	8000f88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f00b f81a 	bl	800bfbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 f80a 	bl	8004fb4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e04d      	b.n	8001042 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	3304      	adds	r3, #4
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	b298      	uxth	r0, r3
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	333a      	adds	r3, #58	; 0x3a
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3307      	adds	r3, #7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	333c      	adds	r3, #60	; 0x3c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3340      	adds	r3, #64	; 0x40
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	3344      	adds	r3, #68	; 0x44
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	3301      	adds	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	d3ac      	bcc.n	8000fa6 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e044      	b.n	80010dc <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	3301      	adds	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d3b5      	bcc.n	8001052 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	687e      	ldr	r6, [r7, #4]
 80010ee:	466d      	mov	r5, sp
 80010f0:	f106 0410 	add.w	r4, r6, #16
 80010f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001100:	1d33      	adds	r3, r6, #4
 8001102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f003 ff70 	bl	8004fea <USB_DevInit>

  hpcd->USB_Address = 0U;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d102      	bne.n	8001128 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 fc42 	bl	80029ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001132 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_PCD_Start+0x16>
 8001144:	2302      	movs	r3, #2
 8001146:	e012      	b.n	800116e <HAL_PCD_Start+0x3c>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  __HAL_PCD_ENABLE(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 ff16 	bl	8004f86 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f006 f954 	bl	800740c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f006 f959 	bl	800743a <USB_ReadInterrupts>
 8001188:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 fb30 	bl	80017fa <PCD_EP_ISR_Handler>

    return;
 800119a:	e110      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d013      	beq.n	80011ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f00a ffaf 	bl	800c122 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f8fc 	bl	80013c4 <HAL_PCD_SetAddress>

    return;
 80011cc:	e0f7      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00c      	beq.n	80011f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011f0:	e0e5      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001214:	e0d3      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d034      	beq.n	800128a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0204 	bic.w	r2, r2, #4
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0208 	bic.w	r2, r2, #8
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f00b f953 	bl	800c510 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f00a ff92 	bl	800c194 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001282:	b292      	uxth	r2, r2
 8001284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001288:	e099      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001290:	2b00      	cmp	r3, #0
 8001292:	d027      	beq.n	80012e4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0208 	orr.w	r2, r2, #8
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012be:	b292      	uxth	r2, r2
 80012c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0204 	orr.w	r2, r2, #4
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f00a ff3f 	bl	800c160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012e2:	e06c      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001300:	b292      	uxth	r2, r2
 8001302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d12b      	bne.n	8001368 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0204 	orr.w	r2, r2, #4
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0208 	orr.w	r2, r2, #8
 800133a:	b292      	uxth	r2, r2
 800133c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001350:	b29b      	uxth	r3, r3
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800135e:	2101      	movs	r1, #1
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f00b f8d5 	bl	800c510 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001366:	e02a      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f00a fef9 	bl	800c160 <HAL_PCD_SuspendCallback>
    return;
 800136e:	e026      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00f      	beq.n	800139a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001382:	b29a      	uxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800138c:	b292      	uxth	r2, r2
 800138e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f00a feb7 	bl	800c106 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001398:	e011      	b.n	80013be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00c      	beq.n	80013be <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b6:	b292      	uxth	r2, r2
 80013b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013bc:	bf00      	nop
  }
}
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_PCD_SetAddress+0x1a>
 80013da:	2302      	movs	r3, #2
 80013dc:	e013      	b.n	8001406 <HAL_PCD_SetAddress+0x42>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	78fa      	ldrb	r2, [r7, #3]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 fff4 	bl	80073e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	4608      	mov	r0, r1
 8001418:	4611      	mov	r1, r2
 800141a:	461a      	mov	r2, r3
 800141c:	4603      	mov	r3, r0
 800141e:	70fb      	strb	r3, [r7, #3]
 8001420:	460b      	mov	r3, r1
 8001422:	803b      	strh	r3, [r7, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800142c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da0f      	bge.n	8001454 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	3304      	adds	r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	705a      	strb	r2, [r3, #1]
 8001452:	e00f      	b.n	8001474 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	f003 0207 	and.w	r2, r3, #7
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	3304      	adds	r3, #4
 800146c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001480:	883a      	ldrh	r2, [r7, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	78ba      	ldrb	r2, [r7, #2]
 800148a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800149e:	78bb      	ldrb	r3, [r7, #2]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d102      	bne.n	80014aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_PCD_EP_Open+0xaa>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e00e      	b.n	80014d6 <HAL_PCD_EP_Open+0xc8>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fdb0 	bl	800502c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80014d4:	7afb      	ldrb	r3, [r7, #11]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da0f      	bge.n	8001512 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	3304      	adds	r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	705a      	strb	r2, [r3, #1]
 8001510:	e00f      	b.n	8001532 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 0207 	and.w	r2, r3, #7
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_PCD_EP_Close+0x6e>
 8001548:	2302      	movs	r3, #2
 800154a:	e00e      	b.n	800156a <HAL_PCD_EP_Close+0x8c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 f920 	bl	80057a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	460b      	mov	r3, r1
 8001580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	f003 0207 	and.w	r2, r3, #7
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	3304      	adds	r3, #4
 800159a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2200      	movs	r2, #0
 80015b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fad2 	bl	8005b7a <USB_EPStartXfer>
 80015d6:	e005      	b.n	80015e4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6979      	ldr	r1, [r7, #20]
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 facb 	bl	8005b7a <USB_EPStartXfer>
  }

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	f003 0207 	and.w	r2, r3, #7
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001610:	681b      	ldr	r3, [r3, #0]
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	460b      	mov	r3, r1
 800162c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162e:	7afb      	ldrb	r3, [r7, #11]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2201      	movs	r2, #1
 800166a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	b2da      	uxtb	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6979      	ldr	r1, [r7, #20]
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fa76 	bl	8005b7a <USB_EPStartXfer>
 800168e:	e005      	b.n	800169c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6979      	ldr	r1, [r7, #20]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fa6f 	bl	8005b7a <USB_EPStartXfer>
  }

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 0207 	and.w	r2, r3, #7
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d901      	bls.n	80016c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e040      	b.n	8001746 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da0f      	bge.n	80016ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	3304      	adds	r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	705a      	strb	r2, [r3, #1]
 80016ea:	e00d      	b.n	8001708 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	3304      	adds	r3, #4
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_PCD_EP_SetStall+0x82>
 8001724:	2302      	movs	r3, #2
 8001726:	e00e      	b.n	8001746 <HAL_PCD_EP_SetStall+0xa0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fd55 	bl	80071e6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	f003 020f 	and.w	r2, r3, #15
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	d901      	bls.n	800176c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e042      	b.n	80017f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800176c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001770:	2b00      	cmp	r3, #0
 8001772:	da0f      	bge.n	8001794 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	3304      	adds	r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	705a      	strb	r2, [r3, #1]
 8001792:	e00f      	b.n	80017b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0207 	and.w	r2, r3, #7
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	3304      	adds	r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_EP_ClrStall+0x86>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e00e      	b.n	80017f2 <HAL_PCD_EP_ClrStall+0xa4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 fd50 	bl	8007288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b096      	sub	sp, #88	; 0x58
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001802:	e3a9      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001810:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800181e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8169 	bne.w	8001afa <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001828:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d150      	bne.n	80018d6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001844:	81fb      	strh	r3, [r7, #14]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001854:	b29b      	uxth	r3, r3
 8001856:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	332c      	adds	r3, #44	; 0x2c
 800185c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	4413      	add	r3, r2
 8001878:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001884:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	441a      	add	r2, r3
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001894:	2100      	movs	r1, #0
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f00a fc1b 	bl	800c0d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8357 	beq.w	8001f58 <PCD_EP_ISR_Handler+0x75e>
 80018aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 8352 	bne.w	8001f58 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b292      	uxth	r2, r2
 80018c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80018d4:	e340      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80018ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d032      	beq.n	800195a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4413      	add	r3, r2
 800190e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8001926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001928:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800192a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800192e:	b29b      	uxth	r3, r3
 8001930:	f005 fdd5 	bl	80074de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	b29a      	uxth	r2, r3
 800193c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001940:	4013      	ands	r3, r2
 8001942:	823b      	strh	r3, [r7, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	8a3a      	ldrh	r2, [r7, #16]
 800194a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194e:	b292      	uxth	r2, r2
 8001950:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f00a fb90 	bl	800c078 <HAL_PCD_SetupStageCallback>
 8001958:	e2fe      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800195e:	2b00      	cmp	r3, #0
 8001960:	f280 82fa 	bge.w	8001f58 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001970:	4013      	ands	r3, r2
 8001972:	83fb      	strh	r3, [r7, #30]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	8bfa      	ldrh	r2, [r7, #30]
 800197a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800197e:	b292      	uxth	r2, r2
 8001980:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4413      	add	r3, r2
 800199c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d019      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x1ec>
 80019b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c0:	6959      	ldr	r1, [r3, #20]
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f005 fd87 	bl	80074de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	441a      	add	r2, r3
 80019da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019de:	2100      	movs	r1, #0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f00a fb5b 	bl	800c09c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80019f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 82ad 	bne.w	8001f58 <PCD_EP_ISR_Handler+0x75e>
 80019fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a0a:	f000 82a5 	beq.w	8001f58 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4413      	add	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b3e      	cmp	r3, #62	; 0x3e
 8001a34:	d918      	bls.n	8001a68 <PCD_EP_ISR_Handler+0x26e>
 8001a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <PCD_EP_ISR_Handler+0x256>
 8001a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	801a      	strh	r2, [r3, #0]
 8001a66:	e029      	b.n	8001abc <PCD_EP_ISR_Handler+0x2c2>
 8001a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d112      	bne.n	8001a96 <PCD_EP_ISR_Handler+0x29c>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	801a      	strh	r2, [r3, #0]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	801a      	strh	r2, [r3, #0]
 8001a94:	e012      	b.n	8001abc <PCD_EP_ISR_Handler+0x2c2>
 8001a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <PCD_EP_ISR_Handler+0x2b6>
 8001aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aac:	3301      	adds	r3, #1
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001acc:	827b      	strh	r3, [r7, #18]
 8001ace:	8a7b      	ldrh	r3, [r7, #18]
 8001ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ad4:	827b      	strh	r3, [r7, #18]
 8001ad6:	8a7b      	ldrh	r3, [r7, #18]
 8001ad8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001adc:	827b      	strh	r3, [r7, #18]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	8a7b      	ldrh	r3, [r7, #18]
 8001ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	8013      	strh	r3, [r2, #0]
 8001af8:	e22e      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b0e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f280 80f7 	bge.w	8001d06 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b2e:	4013      	ands	r3, r2
 8001b30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b4e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	3304      	adds	r3, #4
 8001b64:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b68:	7b1b      	ldrb	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d123      	bne.n	8001bb6 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001b96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 808e 	beq.w	8001cbc <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba6:	6959      	ldr	r1, [r3, #20]
 8001ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001baa:	88da      	ldrh	r2, [r3, #6]
 8001bac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bb0:	f005 fc95 	bl	80074de <USB_ReadPMA>
 8001bb4:	e082      	b.n	8001cbc <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb8:	78db      	ldrb	r3, [r3, #3]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d10a      	bne.n	8001bd4 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bbe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f9d4 	bl	8001f74 <HAL_PCD_EP_DB_Receive>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001bd2:	e073      	b.n	8001cbc <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	441a      	add	r2, r3
 8001c00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d022      	beq.n	8001c78 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001c5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d02c      	beq.n	8001cbc <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c68:	6959      	ldr	r1, [r3, #20]
 8001c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c6c:	891a      	ldrh	r2, [r3, #8]
 8001c6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c72:	f005 fc34 	bl	80074de <USB_ReadPMA>
 8001c76:	e021      	b.n	8001cbc <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001ca0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cae:	6959      	ldr	r1, [r3, #20]
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb2:	895a      	ldrh	r2, [r3, #10]
 8001cb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cb8:	f005 fc11 	bl	80074de <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cc4:	441a      	add	r2, r3
 8001cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cd2:	441a      	add	r2, r3
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <PCD_EP_ISR_Handler+0x4f2>
 8001ce0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d206      	bcs.n	8001cfa <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f00a f9d2 	bl	800c09c <HAL_PCD_DataOutStageCallback>
 8001cf8:	e005      	b.n	8001d06 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 ff3a 	bl	8005b7a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8122 	beq.w	8001f58 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d68:	78db      	ldrb	r3, [r3, #3]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 80a2 	bne.w	8001eb4 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8001d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8093 	beq.w	8001ea6 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d80:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d046      	beq.n	8001e1a <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d8e:	785b      	ldrb	r3, [r3, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d126      	bne.n	8001de2 <PCD_EP_ISR_Handler+0x5e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	4413      	add	r3, r2
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00da      	lsls	r2, r3, #3
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	4413      	add	r3, r2
 8001db6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	801a      	strh	r2, [r3, #0]
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	e061      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x6ac>
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	785b      	ldrb	r3, [r3, #1]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d15d      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0x6ac>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	4413      	add	r3, r2
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	00da      	lsls	r2, r3, #3
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	2200      	movs	r2, #0
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	e045      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d126      	bne.n	8001e76 <PCD_EP_ISR_Handler+0x67c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3c:	4413      	add	r3, r2
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	00da      	lsls	r2, r3, #3
 8001e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e48:	4413      	add	r3, r2
 8001e4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	801a      	strh	r2, [r3, #0]
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	e017      	b.n	8001ea6 <PCD_EP_ISR_Handler+0x6ac>
 8001e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e78:	785b      	ldrb	r3, [r3, #1]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d113      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0x6ac>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8c:	4413      	add	r3, r2
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	00da      	lsls	r2, r3, #3
 8001e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e98:	4413      	add	r3, r2
 8001e9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f00a f910 	bl	800c0d2 <HAL_PCD_DataInStageCallback>
 8001eb2:	e051      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001eb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d144      	bne.n	8001f4a <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d907      	bls.n	8001f04 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001efc:	1ad2      	subs	r2, r2, r3
 8001efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	e002      	b.n	8001f0a <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f00a f8da 	bl	800c0d2 <HAL_PCD_DataInStageCallback>
 8001f1e:	e01b      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f28:	441a      	add	r2, r3
 8001f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f36:	441a      	add	r2, r3
 8001f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fe19 	bl	8005b7a <USB_EPStartXfer>
 8001f48:	e006      	b.n	8001f58 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f917 	bl	8002186 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f6ff ac4d 	blt.w	8001804 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3758      	adds	r7, #88	; 0x58
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d07c      	beq.n	8002086 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	8b7b      	ldrh	r3, [r7, #26]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d306      	bcc.n	8001fca <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	8b7b      	ldrh	r3, [r7, #26]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	619a      	str	r2, [r3, #24]
 8001fc8:	e002      	b.n	8001fd0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d123      	bne.n	8002020 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	833b      	strh	r3, [r7, #24]
 8001ff4:	8b3b      	ldrh	r3, [r7, #24]
 8001ff6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ffa:	833b      	strh	r3, [r7, #24]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	8b3b      	ldrh	r3, [r7, #24]
 800200c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01f      	beq.n	800206a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	82fb      	strh	r3, [r7, #22]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	441a      	add	r2, r3
 8002054:	8afb      	ldrh	r3, [r7, #22]
 8002056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800206a:	8b7b      	ldrh	r3, [r7, #26]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8085 	beq.w	800217c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6959      	ldr	r1, [r3, #20]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	891a      	ldrh	r2, [r3, #8]
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	f005 fa2d 	bl	80074de <USB_ReadPMA>
 8002084:	e07a      	b.n	800217c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	8b7b      	ldrh	r3, [r7, #26]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d306      	bcc.n	80020c4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	8b7b      	ldrh	r3, [r7, #26]
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	619a      	str	r2, [r3, #24]
 80020c2:	e002      	b.n	80020ca <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d123      	bne.n	800211a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ec:	83fb      	strh	r3, [r7, #30]
 80020ee:	8bfb      	ldrh	r3, [r7, #30]
 80020f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020f4:	83fb      	strh	r3, [r7, #30]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	441a      	add	r2, r3
 8002104:	8bfb      	ldrh	r3, [r7, #30]
 8002106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002116:	b29b      	uxth	r3, r3
 8002118:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11f      	bne.n	8002164 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213e:	83bb      	strh	r3, [r7, #28]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	8bbb      	ldrh	r3, [r7, #28]
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002164:	8b7b      	ldrh	r3, [r7, #26]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	6959      	ldr	r1, [r3, #20]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	895a      	ldrh	r2, [r3, #10]
 8002176:	8b7b      	ldrh	r3, [r7, #26]
 8002178:	f005 f9b1 	bl	80074de <USB_ReadPMA>
    }
  }

  return count;
 800217c:	8b7b      	ldrh	r3, [r7, #26]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b0a2      	sub	sp, #136	; 0x88
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 81c5 	beq.w	800252a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d907      	bls.n	80021e4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021dc:	1ad2      	subs	r2, r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	619a      	str	r2, [r3, #24]
 80021e2:	e002      	b.n	80021ea <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80b9 	bne.w	8002366 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	785b      	ldrb	r3, [r3, #1]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d126      	bne.n	800224a <HAL_PCD_EP_DB_Transmit+0xc4>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	4413      	add	r3, r2
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	00da      	lsls	r2, r3, #3
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	4413      	add	r3, r2
 800221e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800222e:	b29a      	uxth	r2, r3
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002242:	b29a      	uxth	r2, r3
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	e01a      	b.n	8002280 <HAL_PCD_EP_DB_Transmit+0xfa>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d116      	bne.n	8002280 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	4413      	add	r3, r2
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00da      	lsls	r2, r3, #3
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	4413      	add	r3, r2
 8002274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	2200      	movs	r2, #0
 800227e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	623b      	str	r3, [r7, #32]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d126      	bne.n	80022dc <HAL_PCD_EP_DB_Transmit+0x156>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4413      	add	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00da      	lsls	r2, r3, #3
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	e017      	b.n	800230c <HAL_PCD_EP_DB_Transmit+0x186>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d113      	bne.n	800230c <HAL_PCD_EP_DB_Transmit+0x186>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	4413      	add	r3, r2
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	00da      	lsls	r2, r3, #3
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	4413      	add	r3, r2
 8002300:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2200      	movs	r2, #0
 800230a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f009 fedd 	bl	800c0d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 82d2 	beq.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233e:	827b      	strh	r3, [r7, #18]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	8a7b      	ldrh	r3, [r7, #18]
 8002350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002360:	b29b      	uxth	r3, r3
 8002362:	8013      	strh	r3, [r2, #0]
 8002364:	e2b0      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d021      	beq.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 8284 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c8:	441a      	add	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023d6:	441a      	add	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d309      	bcc.n	80023fc <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f4:	1ad2      	subs	r2, r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	621a      	str	r2, [r3, #32]
 80023fa:	e015      	b.n	8002428 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002408:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002412:	e009      	b.n	8002428 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d155      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0x356>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	4413      	add	r3, r2
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	00da      	lsls	r2, r3, #3
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	4413      	add	r3, r2
 8002452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
 8002458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245a:	2b3e      	cmp	r3, #62	; 0x3e
 800245c:	d916      	bls.n	800248c <HAL_PCD_EP_DB_Transmit+0x306>
 800245e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	64bb      	str	r3, [r7, #72]	; 0x48
 8002464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800246e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002470:	3b01      	subs	r3, #1
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
 8002474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002476:	b29b      	uxth	r3, r3
 8002478:	029b      	lsls	r3, r3, #10
 800247a:	b29b      	uxth	r3, r3
 800247c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002484:	b29a      	uxth	r2, r3
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e043      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x38e>
 800248c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d112      	bne.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x332>
 8002492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800249c:	b29a      	uxth	r2, r3
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	e02d      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x38e>
 80024b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_PCD_EP_DB_Transmit+0x348>
 80024c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ca:	3301      	adds	r3, #1
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e01b      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x38e>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d117      	bne.n	8002514 <HAL_PCD_EP_DB_Transmit+0x38e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f8:	4413      	add	r3, r2
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00da      	lsls	r2, r3, #3
 8002502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002504:	4413      	add	r3, r2
 8002506:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250e:	b29a      	uxth	r2, r3
 8002510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002512:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	891a      	ldrh	r2, [r3, #8]
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	f004 ff99 	bl	800745a <USB_WritePMA>
 8002528:	e1ce      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255a:	429a      	cmp	r2, r3
 800255c:	d307      	bcc.n	800256e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	619a      	str	r2, [r3, #24]
 800256c:	e002      	b.n	8002574 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 80c4 	bne.w	8002706 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d126      	bne.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	66bb      	str	r3, [r7, #104]	; 0x68
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259a:	4413      	add	r3, r2
 800259c:	66bb      	str	r3, [r7, #104]	; 0x68
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00da      	lsls	r2, r3, #3
 80025a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a6:	4413      	add	r3, r2
 80025a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025ac:	667b      	str	r3, [r7, #100]	; 0x64
 80025ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	e01a      	b.n	800260a <HAL_PCD_EP_DB_Transmit+0x484>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d116      	bne.n	800260a <HAL_PCD_EP_DB_Transmit+0x484>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	673b      	str	r3, [r7, #112]	; 0x70
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f0:	4413      	add	r3, r2
 80025f2:	673b      	str	r3, [r7, #112]	; 0x70
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	00da      	lsls	r2, r3, #3
 80025fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025fc:	4413      	add	r3, r2
 80025fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12f      	bne.n	8002678 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002630:	4413      	add	r3, r2
 8002632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00da      	lsls	r2, r3, #3
 800263c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002640:	4413      	add	r3, r2
 8002642:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002656:	b29a      	uxth	r2, r3
 8002658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266e:	b29a      	uxth	r2, r3
 8002670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e017      	b.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x522>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d113      	bne.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x522>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800268e:	4413      	add	r3, r2
 8002690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	00da      	lsls	r2, r3, #3
 8002698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800269a:	4413      	add	r3, r2
 800269c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80026a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a4:	2200      	movs	r2, #0
 80026a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f009 fd0f 	bl	800c0d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 8104 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	b29b      	uxth	r3, r3
 8002702:	8013      	strh	r3, [r2, #0]
 8002704:	e0e0      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d121      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	441a      	add	r2, r3
 800273c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800274c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 80b4 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002768:	441a      	add	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002776:	441a      	add	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d309      	bcc.n	800279c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	1ad2      	subs	r2, r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	621a      	str	r2, [r3, #32]
 800279a:	e015      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027b2:	e009      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2200      	movs	r2, #0
 80027be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d155      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	65bb      	str	r3, [r7, #88]	; 0x58
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ea:	4413      	add	r3, r2
 80027ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00da      	lsls	r2, r3, #3
 80027f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027fc:	657b      	str	r3, [r7, #84]	; 0x54
 80027fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002800:	2b3e      	cmp	r3, #62	; 0x3e
 8002802:	d916      	bls.n	8002832 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	677b      	str	r3, [r7, #116]	; 0x74
 800280a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x694>
 8002814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002816:	3b01      	subs	r3, #1
 8002818:	677b      	str	r3, [r7, #116]	; 0x74
 800281a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281c:	b29b      	uxth	r3, r3
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	b29b      	uxth	r3, r3
 8002822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282a:	b29a      	uxth	r2, r3
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	e040      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002834:	2b00      	cmp	r3, #0
 8002836:	d112      	bne.n	800285e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002842:	b29a      	uxth	r2, r3
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002856:	b29a      	uxth	r2, r3
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	801a      	strh	r2, [r3, #0]
 800285c:	e02a      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800285e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	677b      	str	r3, [r7, #116]	; 0x74
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002870:	3301      	adds	r3, #1
 8002872:	677b      	str	r3, [r7, #116]	; 0x74
 8002874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002876:	b29b      	uxth	r3, r3
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	b29a      	uxth	r2, r3
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	e018      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d114      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002898:	4413      	add	r3, r2
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00da      	lsls	r2, r3, #3
 80028a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	895a      	ldrh	r2, [r3, #10]
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f004 fdc9 	bl	800745a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e2:	823b      	strh	r3, [r7, #16]
 80028e4:	8a3b      	ldrh	r3, [r7, #16]
 80028e6:	f083 0310 	eor.w	r3, r3, #16
 80028ea:	823b      	strh	r3, [r7, #16]
 80028ec:	8a3b      	ldrh	r3, [r7, #16]
 80028ee:	f083 0320 	eor.w	r3, r3, #32
 80028f2:	823b      	strh	r3, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	8a3b      	ldrh	r3, [r7, #16]
 8002904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	b29b      	uxth	r3, r3
 8002916:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3788      	adds	r7, #136	; 0x88
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	817b      	strh	r3, [r7, #10]
 8002930:	4613      	mov	r3, r2
 8002932:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00a      	b.n	8002970 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800295a:	897a      	ldrh	r2, [r7, #10]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	b29a      	uxth	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	80da      	strh	r2, [r3, #6]
 8002984:	e00b      	b.n	800299e <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2201      	movs	r2, #1
 800298a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	b29a      	uxth	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	58000400 	.word	0x58000400

08002a20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	58000400 	.word	0x58000400

08002a3c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4a:	6053      	str	r3, [r2, #4]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	58000400 	.word	0x58000400

08002a5c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6e:	d101      	bne.n	8002a74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ace:	d101      	bne.n	8002ad4 <LL_RCC_HSE_IsReady+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_RCC_HSE_IsReady+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d101      	bne.n	8002b34 <LL_RCC_HSI_IsReady+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_RCC_HSI_IsReady+0x1a>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d101      	bne.n	8002bc6 <LL_RCC_HSI48_IsReady+0x18>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <LL_RCC_HSI48_IsReady+0x1a>
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d101      	bne.n	8002c72 <LL_RCC_LSE_IsReady+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_RCC_LSE_IsReady+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d101      	bne.n	8002cda <LL_RCC_LSI1_IsReady+0x18>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_RCC_LSI1_IsReady+0x1a>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d101      	bne.n	8002d42 <LL_RCC_LSI2_IsReady+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_RCC_LSI2_IsReady+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6013      	str	r3, [r2, #0]
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d101      	bne.n	8002dce <LL_RCC_MSI_IsReady+0x16>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_RCC_MSI_IsReady+0x18>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2bb0      	cmp	r3, #176	; 0xb0
 8002e18:	d901      	bls.n	8002e1e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e1a:	23b0      	movs	r3, #176	; 0xb0
 8002e1c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 0203 	bic.w	r2, r3, #3
 8002e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002efa:	f023 020f 	bic.w	r2, r3, #15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fea:	d101      	bne.n	8002ff0 <LL_RCC_PLL_IsReady+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_RCC_PLL_IsReady+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0303 	and.w	r3, r3, #3
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d101      	bne.n	8003076 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003096:	d101      	bne.n	800309c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d101      	bne.n	80030c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030e0:	d101      	bne.n	80030e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003104:	d101      	bne.n	800310a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b08d      	sub	sp, #52	; 0x34
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e363      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 808d 	beq.w	8003252 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003138:	f7ff fea1 	bl	8002e7e <LL_RCC_GetSysClkSource>
 800313c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313e:	f7ff ff82 	bl	8003046 <LL_RCC_PLL_GetMainSource>
 8003142:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x3e>
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d147      	bne.n	80031e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	2b01      	cmp	r3, #1
 8003154:	d144      	bne.n	80031e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e347      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003166:	f7ff fe4c 	bl	8002e02 <LL_RCC_MSI_GetRange>
 800316a:	4603      	mov	r3, r0
 800316c:	429c      	cmp	r4, r3
 800316e:	d914      	bls.n	800319a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fd03 	bl	8003b80 <RCC_SetFlashLatencyFromMSIRange>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e336      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe26 	bl	8002dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe4a 	bl	8002e2c <LL_RCC_MSI_SetCalibTrimming>
 8003198:	e013      	b.n	80031c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fe1b 	bl	8002dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fe3f 	bl	8002e2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fce4 	bl	8003b80 <RCC_SetFlashLatencyFromMSIRange>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e317      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031c2:	f000 fcc9 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4aa4      	ldr	r2, [pc, #656]	; (800345c <HAL_RCC_OscConfig+0x344>)
 80031ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031cc:	4ba4      	ldr	r3, [pc, #656]	; (8003460 <HAL_RCC_OscConfig+0x348>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fae3 	bl	800079c <HAL_InitTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d039      	beq.n	8003250 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e308      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01e      	beq.n	8003226 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031e8:	f7ff fdc8 	bl	8002d7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ec:	f7fd fb24 	bl	8000838 <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f4:	f7fd fb20 	bl	8000838 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e2f5      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003206:	f7ff fdd7 	bl	8002db8 <LL_RCC_MSI_IsReady>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f1      	beq.n	80031f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fde0 	bl	8002dda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fe04 	bl	8002e2c <LL_RCC_MSI_SetCalibTrimming>
 8003224:	e015      	b.n	8003252 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003226:	f7ff fdb8 	bl	8002d9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800322a:	f7fd fb05 	bl	8000838 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003232:	f7fd fb01 	bl	8000838 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e2d6      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003244:	f7ff fdb8 	bl	8002db8 <LL_RCC_MSI_IsReady>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f1      	bne.n	8003232 <HAL_RCC_OscConfig+0x11a>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003250:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d047      	beq.n	80032ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	f7ff fe0e 	bl	8002e7e <LL_RCC_GetSysClkSource>
 8003262:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	f7ff feef 	bl	8003046 <LL_RCC_PLL_GetMainSource>
 8003268:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x164>
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d108      	bne.n	8003288 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d105      	bne.n	8003288 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d134      	bne.n	80032ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e2b4      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d102      	bne.n	8003298 <HAL_RCC_OscConfig+0x180>
 8003292:	f7ff fbf5 	bl	8002a80 <LL_RCC_HSE_Enable>
 8003296:	e001      	b.n	800329c <HAL_RCC_OscConfig+0x184>
 8003298:	f7ff fc01 	bl	8002a9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd fac8 	bl	8000838 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fd fac4 	bl	8000838 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e299      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80032be:	f7ff fbfd 	bl	8002abc <LL_RCC_HSE_IsReady>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f1      	beq.n	80032ac <HAL_RCC_OscConfig+0x194>
 80032c8:	e011      	b.n	80032ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd fab5 	bl	8000838 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d2:	f7fd fab1 	bl	8000838 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e286      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80032e4:	f7ff fbea 	bl	8002abc <LL_RCC_HSE_IsReady>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f1      	bne.n	80032d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d04c      	beq.n	8003394 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	f7ff fdc0 	bl	8002e7e <LL_RCC_GetSysClkSource>
 80032fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003300:	f7ff fea1 	bl	8003046 <LL_RCC_PLL_GetMainSource>
 8003304:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d005      	beq.n	8003318 <HAL_RCC_OscConfig+0x200>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d10e      	bne.n	8003330 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d10b      	bne.n	8003330 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e266      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fc09 	bl	8002b40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800332e:	e031      	b.n	8003394 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d019      	beq.n	800336c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	f7ff fbd2 	bl	8002ae0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fd fa7c 	bl	8000838 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003344:	f7fd fa78 	bl	8000838 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e24d      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003356:	f7ff fbe1 	bl	8002b1c <LL_RCC_HSI_IsReady>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f1      	beq.n	8003344 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fbeb 	bl	8002b40 <LL_RCC_HSI_SetCalibTrimming>
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336c:	f7ff fbc7 	bl	8002afe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd fa62 	bl	8000838 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fd fa5e 	bl	8000838 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e233      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800338a:	f7ff fbc7 	bl	8002b1c <LL_RCC_HSI_IsReady>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f1      	bne.n	8003378 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a3 	beq.w	80034f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d076      	beq.n	80034a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d046      	beq.n	8003450 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80033c2:	f7ff fc7e 	bl	8002cc2 <LL_RCC_LSI1_IsReady>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d113      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80033cc:	f7ff fc57 	bl	8002c7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033d0:	f7fd fa32 	bl	8000838 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033d8:	f7fd fa2e 	bl	8000838 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e203      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80033ea:	f7ff fc6a 	bl	8002cc2 <LL_RCC_LSI1_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f1      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80033f4:	f7ff fc77 	bl	8002ce6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fd fa1e 	bl	8000838 <HAL_GetTick>
 80033fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003400:	f7fd fa1a 	bl	8000838 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b03      	cmp	r3, #3
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1ef      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003412:	f7ff fc8a 	bl	8002d2a <LL_RCC_LSI2_IsReady>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f1      	beq.n	8003400 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fc94 	bl	8002d4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003426:	f7ff fc3b 	bl	8002ca0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd fa05 	bl	8000838 <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003432:	f7fd fa01 	bl	8000838 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1d6      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003444:	f7ff fc3d 	bl	8002cc2 <LL_RCC_LSI1_IsReady>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f1      	bne.n	8003432 <HAL_RCC_OscConfig+0x31a>
 800344e:	e051      	b.n	80034f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003450:	f7ff fc15 	bl	8002c7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fd f9f0 	bl	8000838 <HAL_GetTick>
 8003458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800345a:	e00c      	b.n	8003476 <HAL_RCC_OscConfig+0x35e>
 800345c:	20000004 	.word	0x20000004
 8003460:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003464:	f7fd f9e8 	bl	8000838 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1bd      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003476:	f7ff fc24 	bl	8002cc2 <LL_RCC_LSI1_IsReady>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f1      	beq.n	8003464 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003480:	f7ff fc42 	bl	8002d08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003486:	f7fd f9d7 	bl	8000838 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b03      	cmp	r3, #3
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1ac      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003498:	f7ff fc47 	bl	8002d2a <LL_RCC_LSI2_IsReady>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f1      	bne.n	8003486 <HAL_RCC_OscConfig+0x36e>
 80034a2:	e027      	b.n	80034f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80034a4:	f7ff fc30 	bl	8002d08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd f9c6 	bl	8000838 <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034b0:	f7fd f9c2 	bl	8000838 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e197      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80034c2:	f7ff fc32 	bl	8002d2a <LL_RCC_LSI2_IsReady>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f1      	bne.n	80034b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80034cc:	f7ff fbe8 	bl	8002ca0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd f9b2 	bl	8000838 <HAL_GetTick>
 80034d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034d8:	f7fd f9ae 	bl	8000838 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e183      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80034ea:	f7ff fbea 	bl	8002cc2 <LL_RCC_LSI1_IsReady>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f1      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003500:	4ba7      	ldr	r3, [pc, #668]	; (80037a0 <HAL_RCC_OscConfig+0x688>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d114      	bne.n	8003536 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800350c:	f7ff fa78 	bl	8002a00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003510:	f7fd f992 	bl	8000838 <HAL_GetTick>
 8003514:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003518:	f7fd f98e 	bl	8000838 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e163      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352a:	4b9d      	ldr	r3, [pc, #628]	; (80037a0 <HAL_RCC_OscConfig+0x688>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_RCC_OscConfig+0x42c>
 800353e:	f7ff fb48 	bl	8002bd2 <LL_RCC_LSE_Enable>
 8003542:	e00c      	b.n	800355e <HAL_RCC_OscConfig+0x446>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d104      	bne.n	8003556 <HAL_RCC_OscConfig+0x43e>
 800354c:	f7ff fb63 	bl	8002c16 <LL_RCC_LSE_EnableBypass>
 8003550:	f7ff fb3f 	bl	8002bd2 <LL_RCC_LSE_Enable>
 8003554:	e003      	b.n	800355e <HAL_RCC_OscConfig+0x446>
 8003556:	f7ff fb4d 	bl	8002bf4 <LL_RCC_LSE_Disable>
 800355a:	f7ff fb6d 	bl	8002c38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d014      	beq.n	8003590 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd f967 	bl	8000838 <HAL_GetTick>
 800356a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fd f963 	bl	8000838 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e136      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003584:	f7ff fb69 	bl	8002c5a <LL_RCC_LSE_IsReady>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ef      	beq.n	800356e <HAL_RCC_OscConfig+0x456>
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fd f952 	bl	8000838 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003596:	e00a      	b.n	80035ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fd f94e 	bl	8000838 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e121      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035ae:	f7ff fb54 	bl	8002c5a <LL_RCC_LSE_IsReady>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ef      	bne.n	8003598 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02c      	beq.n	800361e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d014      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035cc:	f7ff facd 	bl	8002b6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fd f932 	bl	8000838 <HAL_GetTick>
 80035d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d8:	f7fd f92e 	bl	8000838 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e103      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80035ea:	f7ff fae0 	bl	8002bae <LL_RCC_HSI48_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f1      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4c0>
 80035f4:	e013      	b.n	800361e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035f6:	f7ff fac9 	bl	8002b8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd f91d 	bl	8000838 <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003602:	f7fd f919 	bl	8000838 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0ee      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003614:	f7ff facb 	bl	8002bae <LL_RCC_HSI48_IsReady>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f1      	bne.n	8003602 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80e4 	beq.w	80037f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003628:	f7ff fc29 	bl	8002e7e <LL_RCC_GetSysClkSource>
 800362c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	2b02      	cmp	r3, #2
 800363c:	f040 80b4 	bne.w	80037a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	429a      	cmp	r2, r3
 800364c:	d123      	bne.n	8003696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d11c      	bne.n	8003696 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d114      	bne.n	8003696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d10d      	bne.n	8003696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d05d      	beq.n	8003752 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d058      	beq.n	800374e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0a1      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036ae:	f7ff fc84 	bl	8002fba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b2:	f7fd f8c1 	bl	8000838 <HAL_GetTick>
 80036b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fd f8bd 	bl	8000838 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e092      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ef      	bne.n	80036ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <HAL_RCC_OscConfig+0x68c>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f2:	0212      	lsls	r2, r2, #8
 80036f4:	4311      	orrs	r1, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003706:	430a      	orrs	r2, r1
 8003708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370c:	4313      	orrs	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003710:	f7ff fc44 	bl	8002f9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003724:	f7fd f888 	bl	8000838 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd f884 	bl	8000838 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e059      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	e050      	b.n	80037f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e04f      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d147      	bne.n	80037f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003760:	f7ff fc1c 	bl	8002f9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003774:	f7fd f860 	bl	8000838 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd f85c 	bl	8000838 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e031      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <HAL_RCC_OscConfig+0x664>
 800379c:	e028      	b.n	80037f0 <HAL_RCC_OscConfig+0x6d8>
 800379e:	bf00      	nop
 80037a0:	58000400 	.word	0x58000400
 80037a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d01e      	beq.n	80037ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	f7ff fc04 	bl	8002fba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fd f841 	bl	8000838 <HAL_GetTick>
 80037b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fd f83d 	bl	8000838 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e012      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ef      	bne.n	80037ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_OscConfig+0x6e4>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60cb      	str	r3, [r1, #12]
 80037ea:	e001      	b.n	80037f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3734      	adds	r7, #52	; 0x34
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	eefefffc 	.word	0xeefefffc

08003800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e12d      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b98      	ldr	r3, [pc, #608]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d91b      	bls.n	800385a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b95      	ldr	r3, [pc, #596]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 0207 	bic.w	r2, r3, #7
 800382a:	4993      	ldr	r1, [pc, #588]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003832:	f7fd f801 	bl	8000838 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003838:	e008      	b.n	800384c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800383a:	f7fc fffd 	bl	8000838 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e111      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384c:	4b8a      	ldr	r3, [pc, #552]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d1ef      	bne.n	800383a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fb13 	bl	8002e96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003870:	f7fc ffe2 	bl	8000838 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003878:	f7fc ffde 	bl	8000838 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0f2      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800388a:	f7ff fbe8 	bl	800305e <LL_RCC_IsActiveFlag_HPRE>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f1      	beq.n	8003878 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d016      	beq.n	80038ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fb0a 	bl	8002ebe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038aa:	f7fc ffc5 	bl	8000838 <HAL_GetTick>
 80038ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038b2:	f7fc ffc1 	bl	8000838 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0d5      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80038c4:	f7ff fbdd 	bl	8003082 <LL_RCC_IsActiveFlag_C2HPRE>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f1      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fb03 	bl	8002eea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038e4:	f7fc ffa8 	bl	8000838 <HAL_GetTick>
 80038e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ec:	f7fc ffa4 	bl	8000838 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0b8      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80038fe:	f7ff fbd3 	bl	80030a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f1      	beq.n	80038ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d016      	beq.n	8003942 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fafd 	bl	8002f18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800391e:	f7fc ff8b 	bl	8000838 <HAL_GetTick>
 8003922:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003926:	f7fc ff87 	bl	8000838 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e09b      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003938:	f7ff fbc9 	bl	80030ce <LL_RCC_IsActiveFlag_PPRE1>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f1      	beq.n	8003926 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff faf3 	bl	8002f40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800395a:	f7fc ff6d 	bl	8000838 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003962:	f7fc ff69 	bl	8000838 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e07d      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003974:	f7ff fbbd 	bl	80030f2 <LL_RCC_IsActiveFlag_PPRE2>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f1      	beq.n	8003962 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d043      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003992:	f7ff f893 	bl	8002abc <LL_RCC_HSE_IsReady>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11e      	bne.n	80039da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e067      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80039a8:	f7ff fb16 	bl	8002fd8 <LL_RCC_PLL_IsReady>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e05c      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80039be:	f7ff f9fb 	bl	8002db8 <LL_RCC_MSI_IsReady>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e051      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80039cc:	f7ff f8a6 	bl	8002b1c <LL_RCC_HSI_IsReady>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e04a      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fa39 	bl	8002e56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e4:	f7fc ff28 	bl	8000838 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fc ff24 	bl	8000838 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e036      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	f7ff fa3c 	bl	8002e7e <LL_RCC_GetSysClkSource>
 8003a06:	4602      	mov	r2, r0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d1ec      	bne.n	80039ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d21b      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a20:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 0207 	bic.w	r2, r3, #7
 8003a28:	4913      	ldr	r1, [pc, #76]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fc ff02 	bl	8000838 <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a38:	f7fc fefe 	bl	8000838 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e012      	b.n	8003a70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x278>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d1ef      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a58:	f000 f87e 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_RCC_ClockConfig+0x27c>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003a62:	f7fc fef5 	bl	8000850 <HAL_GetTickPrio>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fe97 	bl	800079c <HAL_InitTick>
 8003a6e:	4603      	mov	r3, r0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58004000 	.word	0x58004000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a86:	f7ff f9fa 	bl	8002e7e <LL_RCC_GetSysClkSource>
 8003a8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a92:	f7ff f9b6 	bl	8002e02 <LL_RCC_MSI_GetRange>
 8003a96:	4603      	mov	r3, r0
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e04b      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e045      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003aba:	f7fe ffcf 	bl	8002a5c <LL_RCC_HSE_IsEnabledDiv2>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e03a      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003aca:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e037      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003ad0:	f7ff fab9 	bl	8003046 <LL_RCC_PLL_GetMainSource>
 8003ad4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d003      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x64>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x6a>
 8003ae2:	e00d      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ae6:	60bb      	str	r3, [r7, #8]
        break;
 8003ae8:	e015      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003aea:	f7fe ffb7 	bl	8002a5c <LL_RCC_HSE_IsEnabledDiv2>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003af8:	e00d      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003afc:	60bb      	str	r3, [r7, #8]
        break;
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b00:	f7ff f97f 	bl	8002e02 <LL_RCC_MSI_GetRange>
 8003b04:	4603      	mov	r3, r0
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	60bb      	str	r3, [r7, #8]
        break;
 8003b14:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003b16:	f7ff fa71 	bl	8002ffc <LL_RCC_PLL_GetN>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	fb03 f402 	mul.w	r4, r3, r2
 8003b22:	f7ff fa84 	bl	800302e <LL_RCC_PLL_GetDivider>
 8003b26:	4603      	mov	r3, r0
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b30:	f7ff fa71 	bl	8003016 <LL_RCC_PLL_GetR>
 8003b34:	4603      	mov	r3, r0
 8003b36:	0f5b      	lsrs	r3, r3, #29
 8003b38:	3301      	adds	r3, #1
 8003b3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b3e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	0800c800 	.word	0x0800c800
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	01e84800 	.word	0x01e84800

08003b58 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b598      	push	{r3, r4, r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003b5c:	f7ff ff90 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003b60:	4604      	mov	r4, r0
 8003b62:	f7ff fa01 	bl	8002f68 <LL_RCC_GetAHBPrescaler>
 8003b66:	4603      	mov	r3, r0
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x24>)
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd98      	pop	{r3, r4, r7, pc}
 8003b7c:	0800c7c0 	.word	0x0800c7c0

08003b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2bb0      	cmp	r3, #176	; 0xb0
 8003b8c:	d903      	bls.n	8003b96 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e007      	b.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003ba6:	f7ff f9eb 	bl	8002f80 <LL_RCC_GetAHB4Prescaler>
 8003baa:	4603      	mov	r3, r0
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	0c9c      	lsrs	r4, r3, #18
 8003bca:	f7fe ff29 	bl	8002a20 <HAL_PWREx_GetVoltageRange>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f000 f80c 	bl	8003bf0 <RCC_SetFlashLatency>
 8003bd8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd90      	pop	{r4, r7, pc}
 8003be2:	bf00      	nop
 8003be4:	0800c800 	.word	0x0800c800
 8003be8:	0800c7c0 	.word	0x0800c7c0
 8003bec:	431bde83 	.word	0x431bde83

08003bf0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b093      	sub	sp, #76	; 0x4c
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <RCC_SetFlashLatency+0xe8>)
 8003bfc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003c06:	4a35      	ldr	r2, [pc, #212]	; (8003cdc <RCC_SetFlashLatency+0xec>)
 8003c08:	f107 031c 	add.w	r3, r7, #28
 8003c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c12:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <RCC_SetFlashLatency+0xf0>)
 8003c14:	f107 040c 	add.w	r4, r7, #12
 8003c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c1e:	2300      	movs	r3, #0
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d11a      	bne.n	8003c60 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c2e:	e013      	b.n	8003c58 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	3348      	adds	r3, #72	; 0x48
 8003c36:	443b      	add	r3, r7
 8003c38:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d807      	bhi.n	8003c52 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	3348      	adds	r3, #72	; 0x48
 8003c48:	443b      	add	r3, r7
 8003c4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c4e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c50:	e020      	b.n	8003c94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c54:	3301      	adds	r3, #1
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40
 8003c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d9e8      	bls.n	8003c30 <RCC_SetFlashLatency+0x40>
 8003c5e:	e019      	b.n	8003c94 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c64:	e013      	b.n	8003c8e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	3348      	adds	r3, #72	; 0x48
 8003c6c:	443b      	add	r3, r7
 8003c6e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d807      	bhi.n	8003c88 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	3348      	adds	r3, #72	; 0x48
 8003c7e:	443b      	add	r3, r7
 8003c80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c86:	e005      	b.n	8003c94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d9e8      	bls.n	8003c66 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <RCC_SetFlashLatency+0xf4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 0207 	bic.w	r2, r3, #7
 8003c9c:	4911      	ldr	r1, [pc, #68]	; (8003ce4 <RCC_SetFlashLatency+0xf4>)
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ca4:	f7fc fdc8 	bl	8000838 <HAL_GetTick>
 8003ca8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003caa:	e008      	b.n	8003cbe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cac:	f7fc fdc4 	bl	8000838 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e007      	b.n	8003cce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <RCC_SetFlashLatency+0xf4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1ef      	bne.n	8003cac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	374c      	adds	r7, #76	; 0x4c
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	0800c734 	.word	0x0800c734
 8003cdc:	0800c744 	.word	0x0800c744
 8003ce0:	0800c750 	.word	0x0800c750
 8003ce4:	58004000 	.word	0x58004000

08003ce8 <LL_RCC_LSE_IsEnabled>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <LL_RCC_LSE_IsEnabled+0x18>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <LL_RCC_LSE_IsEnabled+0x1a>
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_RCC_LSE_IsReady>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d101      	bne.n	8003d24 <LL_RCC_LSE_IsReady+0x18>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <LL_RCC_LSE_IsReady+0x1a>
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_MSI_EnablePLLMode>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3e:	f043 0304 	orr.w	r3, r3, #4
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_SetRFWKPClockSource>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_SetSMPSClockSource>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	f023 0203 	bic.w	r2, r3, #3
 8003d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_SetSMPSPrescaler>:
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_RCC_SetUSARTClockSource>:
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_SetLPUARTClockSource>:
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_RCC_SetI2CClockSource>:
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_SetLPTIMClockSource>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	43db      	mvns	r3, r3
 8003e74:	401a      	ands	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_SetSAIClockSource>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_RCC_SetRNGClockSource>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_RCC_SetCLK48ClockSource>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_SetUSBClockSource>:
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ffe3 	bl	8003ee8 <LL_RCC_SetCLK48ClockSource>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <LL_RCC_SetADCClockSource>:
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_RCC_SetRTCClockSource>:
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_RCC_GetRTCClockSource>:
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_ForceBackupDomainReset>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_ReleaseBackupDomainReset>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fd6:	bf00      	nop
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_PLLSAI1_Enable>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <LL_RCC_PLLSAI1_Disable>:
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800400c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004010:	6013      	str	r3, [r2, #0]
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_RCC_PLLSAI1_IsReady>:
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402e:	d101      	bne.n	8004034 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	43db      	mvns	r3, r3
 8004076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800407a:	4013      	ands	r3, r2
 800407c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <LL_CRS_ClearFlag_SYNCOK>:
  * @brief  Clear the SYNC event OK flag
  * @rmtoll ICR          SYNCOKC       LL_CRS_ClearFlag_SYNCOK
  * @retval None
  */
__STATIC_INLINE void LL_CRS_ClearFlag_SYNCOK(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <LL_CRS_ClearFlag_SYNCOK+0x14>)
 8004092:	2201      	movs	r2, #1
 8004094:	60da      	str	r2, [r3, #12]
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40006000 	.word	0x40006000

080040a4 <LL_CRS_ClearFlag_SYNCWARN>:
  * @brief  Clear the  SYNC warning flag
  * @rmtoll ICR          SYNCWARNC     LL_CRS_ClearFlag_SYNCWARN
  * @retval None
  */
__STATIC_INLINE void LL_CRS_ClearFlag_SYNCWARN(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <LL_CRS_ClearFlag_SYNCWARN+0x14>)
 80040aa:	2202      	movs	r2, #2
 80040ac:	60da      	str	r2, [r3, #12]
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40006000 	.word	0x40006000

080040bc <LL_CRS_ClearFlag_ERR>:
  * the ERR flag
  * @rmtoll ICR          ERRC          LL_CRS_ClearFlag_ERR
  * @retval None
  */
__STATIC_INLINE void LL_CRS_ClearFlag_ERR(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <LL_CRS_ClearFlag_ERR+0x14>)
 80040c2:	2204      	movs	r2, #4
 80040c4:	60da      	str	r2, [r3, #12]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40006000 	.word	0x40006000

080040d4 <LL_CRS_ClearFlag_ESYNC>:
  * @brief  Clear Expected SYNC flag
  * @rmtoll ICR          ESYNCC        LL_CRS_ClearFlag_ESYNC
  * @retval None
  */
__STATIC_INLINE void LL_CRS_ClearFlag_ESYNC(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <LL_CRS_ClearFlag_ESYNC+0x14>)
 80040da:	2208      	movs	r2, #8
 80040dc:	60da      	str	r2, [r3, #12]
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40006000 	.word	0x40006000

080040ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040f4:	2300      	movs	r3, #0
 80040f6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d034      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004110:	d021      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004116:	d81b      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800411c:	d01d      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800411e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004122:	d815      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412c:	d110      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800413e:	e00d      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fa10 	bl	800456a <RCCEx_PLLSAI1_ConfigNP>
 800414a:	4603      	mov	r3, r0
 800414c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800414e:	e005      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	77fb      	strb	r3, [r7, #31]
        break;
 8004154:	e002      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800415a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fe92 	bl	8003e90 <LL_RCC_SetSAIClockSource>
 800416c:	e001      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	7ffb      	ldrb	r3, [r7, #31]
 8004170:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417a:	2b00      	cmp	r3, #0
 800417c:	d046      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800417e:	f7ff ff00 	bl	8003f82 <LL_RCC_GetRTCClockSource>
 8004182:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	429a      	cmp	r2, r3
 800418c:	d03c      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800418e:	f7fe fc37 	bl	8002a00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff feda 	bl	8003f56 <LL_RCC_SetRTCClockSource>
 80041a2:	e02e      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80041ae:	f7ff fef5 	bl	8003f9c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80041b2:	f7ff ff04 	bl	8003fbe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80041c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80041ce:	f7ff fd8b 	bl	8003ce8 <LL_RCC_LSE_IsEnabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d114      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041d8:	f7fc fb2e 	bl	8000838 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80041de:	e00b      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fc fb2a 	bl	8000838 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d902      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	77fb      	strb	r3, [r7, #31]
              break;
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80041f8:	f7ff fd88 	bl	8003d0c <LL_RCC_LSE_IsReady>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d1ee      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	77bb      	strb	r3, [r7, #30]
 8004206:	e001      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fdd4 	bl	8003dca <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fddf 	bl	8003df6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fe07 	bl	8003e5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fdfc 	bl	8003e5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fdd4 	bl	8003e22 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fdc9 	bl	8003e22 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d022      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fe37 	bl	8003f14 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ae:	d107      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042be:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f9a6 	bl	8004620 <RCCEx_PLLSAI1_ConfigNQ>
 80042d4:	4603      	mov	r3, r0
 80042d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80042de:	7ffb      	ldrb	r3, [r7, #31]
 80042e0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fdd4 	bl	8003ebc <LL_RCC_SetRNGClockSource>
 8004314:	e00a      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	2000      	movs	r0, #0
 8004322:	f7ff fdcb 	bl	8003ebc <LL_RCC_SetRNGClockSource>
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fdde 	bl	8003ee8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004334:	d107      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004344:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434e:	2b00      	cmp	r3, #0
 8004350:	d022      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fde7 	bl	8003f2a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004364:	d107      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800437e:	d10b      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f9a6 	bl	80046d6 <RCCEx_PLLSAI1_ConfigNR>
 800438a:	4603      	mov	r3, r0
 800438c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004394:	7ffb      	ldrb	r3, [r7, #31]
 8004396:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fcd0 	bl	8003d4e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fcef 	bl	8003da2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fcd6 	bl	8003d7a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80043ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80043dc:	f7ff fca8 	bl	8003d30 <LL_RCC_MSI_EnablePLLMode>
}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80043ec:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80043f0:	f7ff fe26 	bl	8004040 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80043f4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80043f8:	f7ff fe34 	bl	8004064 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004424:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <HAL_RCCEx_CRSConfig+0x70>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCCEx_CRSConfig+0x70>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4906      	ldr	r1, [pc, #24]	; (8004454 <HAL_RCCEx_CRSConfig+0x70>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCCEx_CRSConfig+0x70>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <HAL_RCCEx_CRSConfig+0x70>)
 8004444:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004448:	6013      	str	r3, [r2, #0]
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40006000 	.word	0x40006000

08004458 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCCEx_CRS_IRQHandler+0xd0>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
 8004468:	4b2f      	ldr	r3, [pc, #188]	; (8004528 <HAL_RCCEx_CRS_IRQHandler+0xd0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if (((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_CRS_IRQHandler+0x34>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_RCCEx_CRS_IRQHandler+0x34>
  {
    /* Clear CRS SYNC event OK flag */
    LL_CRS_ClearFlag_SYNCOK();
 8004482:	f7ff fe03 	bl	800408c <LL_CRS_ClearFlag_SYNCOK>

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
 8004486:	f000 f851 	bl	800452c <HAL_RCCEx_CRS_SyncOkCallback>
 800448a:	e048      	b.n	800451e <HAL_RCCEx_CRS_IRQHandler+0xc6>
  }
  /* Check CRS SYNCWARN flag  */
  else if (((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_CRS_IRQHandler+0x52>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_RCCEx_CRS_IRQHandler+0x52>
  {
    /* Clear CRS SYNCWARN flag */
    LL_CRS_ClearFlag_SYNCWARN();
 80044a0:	f7ff fe00 	bl	80040a4 <LL_CRS_ClearFlag_SYNCWARN>

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
 80044a4:	f000 f849 	bl	800453a <HAL_RCCEx_CRS_SyncWarnCallback>
 80044a8:	e039      	b.n	800451e <HAL_RCCEx_CRS_IRQHandler+0xc6>
  }
  /* Check CRS Expected SYNC flag  */
  else if (((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_RCCEx_CRS_IRQHandler+0x70>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_RCCEx_CRS_IRQHandler+0x70>
  {
    /* frequency error counter reached a zero value */
    LL_CRS_ClearFlag_ESYNC();
 80044be:	f7ff fe09 	bl	80040d4 <LL_CRS_ClearFlag_ESYNC>

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
 80044c2:	f000 f841 	bl	8004548 <HAL_RCCEx_CRS_ExpectedSyncCallback>
 80044c6:	e02a      	b.n	800451e <HAL_RCCEx_CRS_IRQHandler+0xc6>
  }
  /* Check CRS Error flags  */
  else
  {
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d025      	beq.n	800451e <HAL_RCCEx_CRS_IRQHandler+0xc6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_RCCEx_CRS_IRQHandler+0xc6>
    {
      if ((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_RCCEx_CRS_IRQHandler+0x96>
      {
        crserror |= RCC_CRS_SYNCERR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_CRS_IRQHandler+0xa8>
      {
        crserror |= RCC_CRS_SYNCMISS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f043 0310 	orr.w	r3, r3, #16
 80044fe:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_RCCEx_CRS_IRQHandler+0xba>
      {
        crserror |= RCC_CRS_TRIMOVF;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f043 0320 	orr.w	r3, r3, #32
 8004510:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      LL_CRS_ClearFlag_ERR();
 8004512:	f7ff fdd3 	bl	80040bc <LL_CRS_ClearFlag_ERR>

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f81d 	bl	8004556 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
 800451c:	e7ff      	b.n	800451e <HAL_RCCEx_CRS_IRQHandler+0xc6>
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40006000 	.word	0x40006000

0800452c <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
 800453a:	b480      	push	{r7}
 800453c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004576:	f7ff fd42 	bl	8003ffe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800457a:	f7fc f95d 	bl	8000838 <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004580:	e009      	b.n	8004596 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004582:	f7fc f959 	bl	8000838 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d902      	bls.n	8004596 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e004      	b.n	80045a0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004596:	f7ff fd41 	bl	800401c <LL_RCC_PLLSAI1_IsReady>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d137      	bne.n	8004616 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ba:	4313      	orrs	r3, r2
 80045bc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045d4:	f7ff fd04 	bl	8003fe0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fc f92e 	bl	8000838 <HAL_GetTick>
 80045dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045de:	e009      	b.n	80045f4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045e0:	f7fc f92a 	bl	8000838 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d902      	bls.n	80045f4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	73fb      	strb	r3, [r7, #15]
        break;
 80045f2:	e004      	b.n	80045fe <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045f4:	f7ff fd12 	bl	800401c <LL_RCC_PLLSAI1_IsReady>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d1f0      	bne.n	80045e0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d108      	bne.n	8004616 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004612:	4313      	orrs	r3, r2
 8004614:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800462c:	f7ff fce7 	bl	8003ffe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004630:	f7fc f902 	bl	8000838 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004636:	e009      	b.n	800464c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004638:	f7fc f8fe 	bl	8000838 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	73fb      	strb	r3, [r7, #15]
      break;
 800464a:	e004      	b.n	8004656 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800464c:	f7ff fce6 	bl	800401c <LL_RCC_PLLSAI1_IsReady>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d137      	bne.n	80046cc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004670:	4313      	orrs	r3, r2
 8004672:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004686:	4313      	orrs	r3, r2
 8004688:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800468a:	f7ff fca9 	bl	8003fe0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468e:	f7fc f8d3 	bl	8000838 <HAL_GetTick>
 8004692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004694:	e009      	b.n	80046aa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004696:	f7fc f8cf 	bl	8000838 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d902      	bls.n	80046aa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	73fb      	strb	r3, [r7, #15]
        break;
 80046a8:	e004      	b.n	80046b4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046aa:	f7ff fcb7 	bl	800401c <LL_RCC_PLLSAI1_IsReady>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d1f0      	bne.n	8004696 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c8:	4313      	orrs	r3, r2
 80046ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046e2:	f7ff fc8c 	bl	8003ffe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046e6:	f7fc f8a7 	bl	8000838 <HAL_GetTick>
 80046ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046ec:	e009      	b.n	8004702 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ee:	f7fc f8a3 	bl	8000838 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d902      	bls.n	8004702 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004700:	e004      	b.n	800470c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004702:	f7ff fc8b 	bl	800401c <LL_RCC_PLLSAI1_IsReady>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d137      	bne.n	8004782 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800473c:	4313      	orrs	r3, r2
 800473e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004740:	f7ff fc4e 	bl	8003fe0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fc f878 	bl	8000838 <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800474a:	e009      	b.n	8004760 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800474c:	f7fc f874 	bl	8000838 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d902      	bls.n	8004760 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	73fb      	strb	r3, [r7, #15]
        break;
 800475e:	e004      	b.n	800476a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004760:	f7ff fc5c 	bl	800401c <LL_RCC_PLLSAI1_IsReady>
 8004764:	4603      	mov	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d1f0      	bne.n	800474c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800477e:	4313      	orrs	r3, r2
 8004780:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b0ba      	sub	sp, #232	; 0xe8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ba:	4013      	ands	r3, r2
 80047bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11b      	bne.n	8004800 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 82d6 	beq.w	8004da2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
      }
      return;
 80047fe:	e2d0      	b.n	8004da2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 811f 	beq.w	8004a48 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800480a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800480e:	4b8b      	ldr	r3, [pc, #556]	; (8004a3c <HAL_UART_IRQHandler+0x2b0>)
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800481a:	4b89      	ldr	r3, [pc, #548]	; (8004a40 <HAL_UART_IRQHandler+0x2b4>)
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8112 	beq.w	8004a48 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d011      	beq.n	8004854 <HAL_UART_IRQHandler+0xc8>
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2201      	movs	r2, #1
 8004842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d011      	beq.n	8004884 <HAL_UART_IRQHandler+0xf8>
 8004860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2202      	movs	r2, #2
 8004872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487a:	f043 0204 	orr.w	r2, r3, #4
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d011      	beq.n	80048b4 <HAL_UART_IRQHandler+0x128>
 8004890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2204      	movs	r2, #4
 80048a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048aa:	f043 0202 	orr.w	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048d0:	4b5a      	ldr	r3, [pc, #360]	; (8004a3c <HAL_UART_IRQHandler+0x2b0>)
 80048d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00b      	beq.n	80048f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2208      	movs	r2, #8
 80048de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e6:	f043 0208 	orr.w	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d012      	beq.n	8004922 <HAL_UART_IRQHandler+0x196>
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 823c 	beq.w	8004da6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d013      	beq.n	8004962 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800493a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d005      	beq.n	8004986 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800497a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800497e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004982:	2b00      	cmp	r3, #0
 8004984:	d04f      	beq.n	8004a26 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa38 	bl	8004dfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d141      	bne.n	8004a1e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1d9      	bne.n	800499a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d013      	beq.n	8004a16 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f2:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <HAL_UART_IRQHandler+0x2b8>)
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc f8c6 	bl	8000b8c <HAL_DMA_Abort_IT>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004a10:	4610      	mov	r0, r2
 8004a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e00f      	b.n	8004a36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9da 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e00b      	b.n	8004a36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9d6 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	e007      	b.n	8004a36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9d2 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004a34:	e1b7      	b.n	8004da6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a36:	bf00      	nop
    return;
 8004a38:	e1b5      	b.n	8004da6 <HAL_UART_IRQHandler+0x61a>
 8004a3a:	bf00      	nop
 8004a3c:	10000001 	.word	0x10000001
 8004a40:	04000120 	.word	0x04000120
 8004a44:	08004ec9 	.word	0x08004ec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 814a 	bne.w	8004ce6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8143 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 813c 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2210      	movs	r2, #16
 8004a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	f040 80b5 	bne.w	8004bf0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8004a92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8187 	beq.w	8004daa <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	f080 817f 	bcs.w	8004daa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 8086 	bne.w	8004bd4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004af6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1da      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e1      	bne.n	8004b12 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e3      	bne.n	8004b4e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba4:	f023 0310 	bic.w	r3, r3, #16
 8004ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e4      	bne.n	8004b94 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fb ff7d 	bl	8000ace <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f8fb 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bee:	e0dc      	b.n	8004daa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80ce 	beq.w	8004dae <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8004c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80c9 	beq.w	8004dae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e4      	bne.n	8004c1c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	623b      	str	r3, [r7, #32]
   return(result);
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c7a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e1      	bne.n	8004c52 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0310 	bic.w	r3, r3, #16
 8004cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e4      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f880 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ce4:	e063      	b.n	8004dae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <HAL_UART_IRQHandler+0x584>
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f91e 	bl	8004f4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d0e:	e051      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d014      	beq.n	8004d46 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03a      	beq.n	8004db2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
    }
    return;
 8004d44:	e035      	b.n	8004db2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_UART_IRQHandler+0x5da>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8c8 	bl	8004ef4 <UART_EndTransmit_IT>
    return;
 8004d64:	e026      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_UART_IRQHandler+0x5fa>
 8004d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8f7 	bl	8004f72 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d84:	e016      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d010      	beq.n	8004db4 <HAL_UART_IRQHandler+0x628>
 8004d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da0c      	bge.n	8004db4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8df 	bl	8004f5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004da0:	e008      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
      return;
 8004da2:	bf00      	nop
 8004da4:	e006      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
    return;
 8004da6:	bf00      	nop
 8004da8:	e004      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
      return;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
      return;
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <HAL_UART_IRQHandler+0x628>
    return;
 8004db2:	bf00      	nop
  }
}
 8004db4:	37e8      	adds	r7, #232	; 0xe8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop

08004dbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b095      	sub	sp, #84	; 0x54
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	643b      	str	r3, [r7, #64]	; 0x40
 8004e24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e6      	bne.n	8004e04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e3      	bne.n	8004e36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d118      	bne.n	8004ea8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6979      	ldr	r1, [r7, #20]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e6      	bne.n	8004e76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004ebc:	bf00      	nop
 8004ebe:	3754      	adds	r7, #84	; 0x54
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff72 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff3d 	bl	8004dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f42:	bf00      	nop
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f96:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004f9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fbc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004fc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fea:	b084      	sub	sp, #16
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	f107 0014 	add.w	r0, r7, #20
 8004ff8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	b004      	add	sp, #16
 800502a:	4770      	bx	lr

0800502c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800502c:	b480      	push	{r7}
 800502e:	b09d      	sub	sp, #116	; 0x74
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	78db      	ldrb	r3, [r3, #3]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d81f      	bhi.n	800509e <USB_ActivateEndpoint+0x72>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <USB_ActivateEndpoint+0x38>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	08005075 	.word	0x08005075
 8005068:	08005091 	.word	0x08005091
 800506c:	080050a7 	.word	0x080050a7
 8005070:	08005083 	.word	0x08005083
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005074:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800507c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005080:	e012      	b.n	80050a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005082:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005086:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800508a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800508e:	e00b      	b.n	80050a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005094:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005098:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800509c:	e004      	b.n	80050a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80050a4:	e000      	b.n	80050a8 <USB_ActivateEndpoint+0x7c>
      break;
 80050a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	b21b      	sxth	r3, r3
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	b21a      	sxth	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	b21b      	sxth	r3, r3
 80050ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	7b1b      	ldrb	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f040 816e 	bne.w	80053fa <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8084 	beq.w	8005230 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005132:	b29b      	uxth	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4413      	add	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	00da      	lsls	r2, r3, #3
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	88db      	ldrh	r3, [r3, #6]
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	b29b      	uxth	r3, r3
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	827b      	strh	r3, [r7, #18]
 800516a:	8a7b      	ldrh	r3, [r7, #18]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <USB_ActivateEndpoint+0x180>
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	823b      	strh	r3, [r7, #16]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	8a3b      	ldrh	r3, [r7, #16]
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d020      	beq.n	80051f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ca:	81bb      	strh	r3, [r7, #12]
 80051cc:	89bb      	ldrh	r3, [r7, #12]
 80051ce:	f083 0320 	eor.w	r3, r3, #32
 80051d2:	81bb      	strh	r3, [r7, #12]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	89bb      	ldrh	r3, [r7, #12]
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
 80051f4:	e2cb      	b.n	800578e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520c:	81fb      	strh	r3, [r7, #14]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	89fb      	ldrh	r3, [r7, #14]
 800521a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
 800522e:	e2ae      	b.n	800578e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	4413      	add	r3, r2
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	00da      	lsls	r2, r3, #3
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	4413      	add	r3, r2
 800524e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	88db      	ldrh	r3, [r3, #6]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	b29b      	uxth	r3, r3
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526e:	b29b      	uxth	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	4413      	add	r3, r2
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	00da      	lsls	r2, r3, #3
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	4413      	add	r3, r2
 8005282:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b3e      	cmp	r3, #62	; 0x3e
 800528e:	d918      	bls.n	80052c2 <USB_ActivateEndpoint+0x296>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	66bb      	str	r3, [r7, #104]	; 0x68
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <USB_ActivateEndpoint+0x27e>
 80052a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a6:	3b01      	subs	r3, #1
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	e029      	b.n	8005316 <USB_ActivateEndpoint+0x2ea>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d112      	bne.n	80052f0 <USB_ActivateEndpoint+0x2c4>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e012      	b.n	8005316 <USB_ActivateEndpoint+0x2ea>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <USB_ActivateEndpoint+0x2de>
 8005304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005306:	3301      	adds	r3, #1
 8005308:	66bb      	str	r3, [r7, #104]	; 0x68
 800530a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800530c:	b29b      	uxth	r3, r3
 800530e:	029b      	lsls	r3, r3, #10
 8005310:	b29a      	uxth	r2, r3
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	847b      	strh	r3, [r7, #34]	; 0x22
 8005324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01b      	beq.n	8005366 <USB_ActivateEndpoint+0x33a>
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005344:	843b      	strh	r3, [r7, #32]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	8c3b      	ldrh	r3, [r7, #32]
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d124      	bne.n	80053b8 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	83bb      	strh	r3, [r7, #28]
 8005386:	8bbb      	ldrh	r3, [r7, #28]
 8005388:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800538c:	83bb      	strh	r3, [r7, #28]
 800538e:	8bbb      	ldrh	r3, [r7, #28]
 8005390:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005394:	83bb      	strh	r3, [r7, #28]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	441a      	add	r2, r3
 80053a0:	8bbb      	ldrh	r3, [r7, #28]
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]
 80053b6:	e1ea      	b.n	800578e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	83fb      	strh	r3, [r7, #30]
 80053d0:	8bfb      	ldrh	r3, [r7, #30]
 80053d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053d6:	83fb      	strh	r3, [r7, #30]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	8bfb      	ldrh	r3, [r7, #30]
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]
 80053f8:	e1c9      	b.n	800578e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	78db      	ldrb	r3, [r3, #3]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d11e      	bne.n	8005440 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005418:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548c:	4413      	add	r3, r2
 800548e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	00da      	lsls	r2, r3, #3
 8005496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005498:	4413      	add	r3, r2
 800549a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549e:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	891b      	ldrh	r3, [r3, #8]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c0:	4413      	add	r3, r2
 80054c2:	657b      	str	r3, [r7, #84]	; 0x54
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00da      	lsls	r2, r3, #3
 80054ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054cc:	4413      	add	r3, r2
 80054ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054d2:	653b      	str	r3, [r7, #80]	; 0x50
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	895b      	ldrh	r3, [r3, #10]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 8093 	bne.w	8005614 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <USB_ActivateEndpoint+0x516>
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005550:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01b      	beq.n	8005592 <USB_ActivateEndpoint+0x566>
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80055aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80055b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	441a      	add	r2, r3
 80055c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
 8005612:	e0bc      	b.n	800578e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005624:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01d      	beq.n	800566c <USB_ActivateEndpoint+0x640>
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800567c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01d      	beq.n	80056c4 <USB_ActivateEndpoint+0x698>
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d024      	beq.n	8005716 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056ea:	f083 0320 	eor.w	r3, r3, #32
 80056ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	b29b      	uxth	r3, r3
 8005712:	8013      	strh	r3, [r2, #0]
 8005714:	e01d      	b.n	8005752 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800573e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574e:	b29b      	uxth	r3, r3
 8005750:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800578e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005792:	4618      	mov	r0, r3
 8005794:	3774      	adds	r7, #116	; 0x74
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop

080057a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b08d      	sub	sp, #52	; 0x34
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	7b1b      	ldrb	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 808e 	bne.w	80058d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d044      	beq.n	8005846 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	81bb      	strh	r3, [r7, #12]
 80057ca:	89bb      	ldrh	r3, [r7, #12]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <USB_DeactivateEndpoint+0x6c>
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	817b      	strh	r3, [r7, #10]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	897b      	ldrh	r3, [r7, #10]
 80057f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005808:	b29b      	uxth	r3, r3
 800580a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005822:	813b      	strh	r3, [r7, #8]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	893b      	ldrh	r3, [r7, #8]
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
 8005844:	e192      	b.n	8005b6c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	827b      	strh	r3, [r7, #18]
 8005854:	8a7b      	ldrh	r3, [r7, #18]
 8005856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01b      	beq.n	8005896 <USB_DeactivateEndpoint+0xf6>
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	823b      	strh	r3, [r7, #16]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	8a3b      	ldrh	r3, [r7, #16]
 8005882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ac:	81fb      	strh	r3, [r7, #14]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	441a      	add	r2, r3
 80058b8:	89fb      	ldrh	r3, [r7, #14]
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]
 80058ce:	e14d      	b.n	8005b6c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 80a5 	bne.w	8005a24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	843b      	strh	r3, [r7, #32]
 80058e8:	8c3b      	ldrh	r3, [r7, #32]
 80058ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01b      	beq.n	800592a <USB_DeactivateEndpoint+0x18a>
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	83fb      	strh	r3, [r7, #30]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8bfb      	ldrh	r3, [r7, #30]
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	83bb      	strh	r3, [r7, #28]
 8005938:	8bbb      	ldrh	r3, [r7, #28]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01b      	beq.n	800597a <USB_DeactivateEndpoint+0x1da>
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	837b      	strh	r3, [r7, #26]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	8b7b      	ldrh	r3, [r7, #26]
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	833b      	strh	r3, [r7, #24]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	8b3b      	ldrh	r3, [r7, #24]
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c8:	82fb      	strh	r3, [r7, #22]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	8afb      	ldrh	r3, [r7, #22]
 80059d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a00:	82bb      	strh	r3, [r7, #20]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	8abb      	ldrh	r3, [r7, #20]
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
 8005a22:	e0a3      	b.n	8005b6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <USB_DeactivateEndpoint+0x2d4>
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <USB_DeactivateEndpoint+0x324>
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	441a      	add	r2, r3
 8005aae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3734      	adds	r7, #52	; 0x34
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b0c2      	sub	sp, #264	; 0x108
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b88:	6018      	str	r0, [r3, #0]
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b92:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	f040 867b 	bne.w	800689c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d908      	bls.n	8005bd4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bd2:	e007      	b.n	8005be4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	7b1b      	ldrb	r3, [r3, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d13a      	bne.n	8005c6a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	88da      	ldrh	r2, [r3, #6]
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	f001 fc1d 	bl	800745a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00da      	lsls	r2, r3, #3
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	f000 bde3 	b.w	8006830 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	f040 843a 	bne.w	80064f0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	f240 83b7 	bls.w	8006408 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 81b3 	beq.w	80060a2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d16d      	bne.n	8005e34 <USB_EPStartXfer+0x2ba>
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	4413      	add	r3, r2
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	00da      	lsls	r2, r3, #3
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d98:	2b3e      	cmp	r3, #62	; 0x3e
 8005d9a:	d91c      	bls.n	8005dd6 <USB_EPStartXfer+0x25c>
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <USB_EPStartXfer+0x242>
 8005db2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005db6:	3b01      	subs	r3, #1
 8005db8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e053      	b.n	8005e7e <USB_EPStartXfer+0x304>
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d112      	bne.n	8005e04 <USB_EPStartXfer+0x28a>
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	e03c      	b.n	8005e7e <USB_EPStartXfer+0x304>
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <USB_EPStartXfer+0x2aa>
 8005e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e1e:	3301      	adds	r3, #1
 8005e20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	029b      	lsls	r3, r3, #10
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e024      	b.n	8005e7e <USB_EPStartXfer+0x304>
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d11c      	bne.n	8005e7e <USB_EPStartXfer+0x304>
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	4413      	add	r3, r2
 8005e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	00da      	lsls	r2, r3, #3
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	895b      	ldrh	r3, [r3, #10]
 8005e8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6959      	ldr	r1, [r3, #20]
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ea4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ea8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f001 fad4 	bl	800745a <USB_WritePMA>
            ep->xfer_buff += len;
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	441a      	add	r2, r3
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d90f      	bls.n	8005f0c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	621a      	str	r2, [r3, #32]
 8005f0a:	e00e      	b.n	8005f2a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d16d      	bne.n	8006016 <USB_EPStartXfer+0x49c>
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f7c:	d91c      	bls.n	8005fb8 <USB_EPStartXfer+0x43e>
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <USB_EPStartXfer+0x424>
 8005f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e059      	b.n	800606c <USB_EPStartXfer+0x4f2>
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d112      	bne.n	8005fe6 <USB_EPStartXfer+0x46c>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e042      	b.n	800606c <USB_EPStartXfer+0x4f2>
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <USB_EPStartXfer+0x48c>
 8005ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006000:	3301      	adds	r3, #1
 8006002:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600a:	b29b      	uxth	r3, r3
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	b29a      	uxth	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e02a      	b.n	800606c <USB_EPStartXfer+0x4f2>
 8006016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d122      	bne.n	800606c <USB_EPStartXfer+0x4f2>
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006040:	b29b      	uxth	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	4413      	add	r3, r2
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	00da      	lsls	r2, r3, #3
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	4413      	add	r3, r2
 800605c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	b29a      	uxth	r2, r3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800606c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	891b      	ldrh	r3, [r3, #8]
 8006078:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800607c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6959      	ldr	r1, [r3, #20]
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608c:	b29b      	uxth	r3, r3
 800608e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006092:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006096:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	f001 f9dd 	bl	800745a <USB_WritePMA>
 80060a0:	e3c6      	b.n	8006830 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d16d      	bne.n	800618e <USB_EPStartXfer+0x614>
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d2:	4413      	add	r3, r2
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	00da      	lsls	r2, r3, #3
 80060e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e6:	4413      	add	r3, r2
 80060e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	2b3e      	cmp	r3, #62	; 0x3e
 80060f4:	d91c      	bls.n	8006130 <USB_EPStartXfer+0x5b6>
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <USB_EPStartXfer+0x59c>
 800610c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006110:	3b01      	subs	r3, #1
 8006112:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800611a:	b29b      	uxth	r3, r3
 800611c:	029b      	lsls	r3, r3, #10
 800611e:	b29b      	uxth	r3, r3
 8006120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006128:	b29a      	uxth	r2, r3
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e059      	b.n	80061e4 <USB_EPStartXfer+0x66a>
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006134:	2b00      	cmp	r3, #0
 8006136:	d112      	bne.n	800615e <USB_EPStartXfer+0x5e4>
 8006138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006142:	b29a      	uxth	r2, r3
 8006144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e042      	b.n	80061e4 <USB_EPStartXfer+0x66a>
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <USB_EPStartXfer+0x604>
 8006174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006178:	3301      	adds	r3, #1
 800617a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800617e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29a      	uxth	r2, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e02a      	b.n	80061e4 <USB_EPStartXfer+0x66a>
 800618e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d122      	bne.n	80061e4 <USB_EPStartXfer+0x66a>
 800619e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	653b      	str	r3, [r7, #80]	; 0x50
 80061aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	4413      	add	r3, r2
 80061c0:	653b      	str	r3, [r7, #80]	; 0x50
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	00da      	lsls	r2, r3, #3
 80061d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d2:	4413      	add	r3, r2
 80061d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	891b      	ldrh	r3, [r3, #8]
 80061f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6959      	ldr	r1, [r3, #20]
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	b29b      	uxth	r3, r3
 8006206:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800620a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800620e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006212:	6800      	ldr	r0, [r0, #0]
 8006214:	f001 f921 	bl	800745a <USB_WritePMA>
            ep->xfer_buff += len;
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695a      	ldr	r2, [r3, #20]
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006228:	441a      	add	r2, r3
 800622a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6a1a      	ldr	r2, [r3, #32]
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	d90f      	bls.n	8006272 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6a1a      	ldr	r2, [r3, #32]
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	621a      	str	r2, [r3, #32]
 8006270:	e00e      	b.n	8006290 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	643b      	str	r3, [r7, #64]	; 0x40
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d16d      	bne.n	8006388 <USB_EPStartXfer+0x80e>
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	4413      	add	r3, r2
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	00da      	lsls	r2, r3, #3
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062e6:	637b      	str	r3, [r7, #52]	; 0x34
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ec:	2b3e      	cmp	r3, #62	; 0x3e
 80062ee:	d91c      	bls.n	800632a <USB_EPStartXfer+0x7b0>
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <USB_EPStartXfer+0x796>
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	3b01      	subs	r3, #1
 800630c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	b29b      	uxth	r3, r3
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e053      	b.n	80063d2 <USB_EPStartXfer+0x858>
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	2b00      	cmp	r3, #0
 8006330:	d112      	bne.n	8006358 <USB_EPStartXfer+0x7de>
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800633c:	b29a      	uxth	r2, r3
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006350:	b29a      	uxth	r2, r3
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	e03c      	b.n	80063d2 <USB_EPStartXfer+0x858>
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d004      	beq.n	8006378 <USB_EPStartXfer+0x7fe>
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006372:	3301      	adds	r3, #1
 8006374:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637c:	b29b      	uxth	r3, r3
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	b29a      	uxth	r2, r3
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	e024      	b.n	80063d2 <USB_EPStartXfer+0x858>
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d11c      	bne.n	80063d2 <USB_EPStartXfer+0x858>
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ac:	4413      	add	r3, r2
 80063ae:	643b      	str	r3, [r7, #64]	; 0x40
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	00da      	lsls	r2, r3, #3
 80063be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	895b      	ldrh	r3, [r3, #10]
 80063de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6959      	ldr	r1, [r3, #20]
 80063ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006400:	6800      	ldr	r0, [r0, #0]
 8006402:	f001 f82a 	bl	800745a <USB_WritePMA>
 8006406:	e213      	b.n	8006830 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800643a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	441a      	add	r2, r3
 800645c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006470:	b29b      	uxth	r3, r3
 8006472:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006494:	4413      	add	r3, r2
 8006496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	00da      	lsls	r2, r3, #3
 80064a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	891b      	ldrh	r3, [r3, #8]
 80064c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6959      	ldr	r1, [r3, #20]
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064e8:	6800      	ldr	r0, [r0, #0]
 80064ea:	f000 ffb6 	bl	800745a <USB_WritePMA>
 80064ee:	e19f      	b.n	8006830 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80bc 	beq.w	80066ae <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	673b      	str	r3, [r7, #112]	; 0x70
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d16d      	bne.n	800662e <USB_EPStartXfer+0xab4>
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	66bb      	str	r3, [r7, #104]	; 0x68
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656c:	b29b      	uxth	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006572:	4413      	add	r3, r2
 8006574:	66bb      	str	r3, [r7, #104]	; 0x68
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	00da      	lsls	r2, r3, #3
 8006584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006586:	4413      	add	r3, r2
 8006588:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800658c:	667b      	str	r3, [r7, #100]	; 0x64
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	2b3e      	cmp	r3, #62	; 0x3e
 8006594:	d91c      	bls.n	80065d0 <USB_EPStartXfer+0xa56>
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <USB_EPStartXfer+0xa3c>
 80065ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065b0:	3b01      	subs	r3, #1
 80065b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e053      	b.n	8006678 <USB_EPStartXfer+0xafe>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d112      	bne.n	80065fe <USB_EPStartXfer+0xa84>
 80065d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e03c      	b.n	8006678 <USB_EPStartXfer+0xafe>
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d004      	beq.n	800661e <USB_EPStartXfer+0xaa4>
 8006614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006618:	3301      	adds	r3, #1
 800661a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800661e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006622:	b29b      	uxth	r3, r3
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	b29a      	uxth	r2, r3
 8006628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e024      	b.n	8006678 <USB_EPStartXfer+0xafe>
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d11c      	bne.n	8006678 <USB_EPStartXfer+0xafe>
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664c:	b29b      	uxth	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006652:	4413      	add	r3, r2
 8006654:	673b      	str	r3, [r7, #112]	; 0x70
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	00da      	lsls	r2, r3, #3
 8006664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006666:	4413      	add	r3, r2
 8006668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800666c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	b29a      	uxth	r2, r3
 8006674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006676:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	895b      	ldrh	r3, [r3, #10]
 8006684:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6959      	ldr	r1, [r3, #20]
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006698:	b29b      	uxth	r3, r3
 800669a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800669e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066a6:	6800      	ldr	r0, [r0, #0]
 80066a8:	f000 fed7 	bl	800745a <USB_WritePMA>
 80066ac:	e0c0      	b.n	8006830 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d16d      	bne.n	800679a <USB_EPStartXfer+0xc20>
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066de:	4413      	add	r3, r2
 80066e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00da      	lsls	r2, r3, #3
 80066f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006700:	d91c      	bls.n	800673c <USB_EPStartXfer+0xbc2>
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <USB_EPStartXfer+0xba8>
 8006718:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800671c:	3b01      	subs	r3, #1
 800671e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006726:	b29b      	uxth	r3, r3
 8006728:	029b      	lsls	r3, r3, #10
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e05f      	b.n	80067fc <USB_EPStartXfer+0xc82>
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	2b00      	cmp	r3, #0
 8006742:	d112      	bne.n	800676a <USB_EPStartXfer+0xbf0>
 8006744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800674e:	b29a      	uxth	r2, r3
 8006750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006762:	b29a      	uxth	r2, r3
 8006764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e048      	b.n	80067fc <USB_EPStartXfer+0xc82>
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0xc10>
 8006780:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800678a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800678e:	b29b      	uxth	r3, r3
 8006790:	029b      	lsls	r3, r3, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	e030      	b.n	80067fc <USB_EPStartXfer+0xc82>
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d128      	bne.n	80067fc <USB_EPStartXfer+0xc82>
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ce:	4413      	add	r3, r2
 80067d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	00da      	lsls	r2, r3, #3
 80067e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e6:	4413      	add	r3, r2
 80067e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	891b      	ldrh	r3, [r3, #8]
 8006808:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6959      	ldr	r1, [r3, #20]
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	b29b      	uxth	r3, r3
 800681e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006822:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006826:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	f000 fe15 	bl	800745a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006856:	817b      	strh	r3, [r7, #10]
 8006858:	897b      	ldrh	r3, [r7, #10]
 800685a:	f083 0310 	eor.w	r3, r3, #16
 800685e:	817b      	strh	r3, [r7, #10]
 8006860:	897b      	ldrh	r3, [r7, #10]
 8006862:	f083 0320 	eor.w	r3, r3, #32
 8006866:	817b      	strh	r3, [r7, #10]
 8006868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006894:	b29b      	uxth	r3, r3
 8006896:	8013      	strh	r3, [r2, #0]
 8006898:	f000 bc9f 	b.w	80071da <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	7b1b      	ldrb	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 80ae 	bne.w	8006a0a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d917      	bls.n	80068fa <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80068ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	619a      	str	r2, [r3, #24]
 80068f8:	e00e      	b.n	8006918 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800690a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800693c:	4413      	add	r3, r2
 800693e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	00da      	lsls	r2, r3, #3
 8006950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006954:	4413      	add	r3, r2
 8006956:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800695a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	2b3e      	cmp	r3, #62	; 0x3e
 8006964:	d91d      	bls.n	80069a2 <USB_EPStartXfer+0xe28>
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <USB_EPStartXfer+0xe0c>
 800697c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006980:	3b01      	subs	r3, #1
 8006982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006986:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800698a:	b29b      	uxth	r3, r3
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006998:	b29a      	uxth	r2, r3
 800699a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e3e1      	b.n	8007166 <USB_EPStartXfer+0x15ec>
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d116      	bne.n	80069d8 <USB_EPStartXfer+0xe5e>
 80069aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	e3c6      	b.n	8007166 <USB_EPStartXfer+0x15ec>
 80069d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <USB_EPStartXfer+0xe7e>
 80069ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069f2:	3301      	adds	r3, #1
 80069f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	029b      	lsls	r3, r3, #10
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	e3ad      	b.n	8007166 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	78db      	ldrb	r3, [r3, #3]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	f040 8200 	bne.w	8006e1c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 8091 	bne.w	8006b50 <USB_EPStartXfer+0xfd6>
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a52:	4413      	add	r3, r2
 8006a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	00da      	lsls	r2, r3, #3
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b3e      	cmp	r3, #62	; 0x3e
 8006a82:	d925      	bls.n	8006ad0 <USB_EPStartXfer+0xf56>
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <USB_EPStartXfer+0xf3a>
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	e074      	b.n	8006bba <USB_EPStartXfer+0x1040>
 8006ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d116      	bne.n	8006b0e <USB_EPStartXfer+0xf94>
 8006ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b0a:	801a      	strh	r2, [r3, #0]
 8006b0c:	e055      	b.n	8006bba <USB_EPStartXfer+0x1040>
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <USB_EPStartXfer+0xfc4>
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e034      	b.n	8006bba <USB_EPStartXfer+0x1040>
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d12c      	bne.n	8006bba <USB_EPStartXfer+0x1040>
 8006b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b84:	4413      	add	r3, r2
 8006b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	00da      	lsls	r2, r3, #3
 8006b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 8091 	bne.w	8006cfc <USB_EPStartXfer+0x1182>
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bfe:	4413      	add	r3, r2
 8006c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	00da      	lsls	r2, r3, #3
 8006c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c2e:	d925      	bls.n	8006c7c <USB_EPStartXfer+0x1102>
 8006c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <USB_EPStartXfer+0x10e6>
 8006c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	029b      	lsls	r3, r3, #10
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	e06d      	b.n	8006d58 <USB_EPStartXfer+0x11de>
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d116      	bne.n	8006cba <USB_EPStartXfer+0x1140>
 8006c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e04e      	b.n	8006d58 <USB_EPStartXfer+0x11de>
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <USB_EPStartXfer+0x1170>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e02d      	b.n	8006d58 <USB_EPStartXfer+0x11de>
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d125      	bne.n	8006d58 <USB_EPStartXfer+0x11de>
 8006d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d22:	4413      	add	r3, r2
 8006d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	00da      	lsls	r2, r3, #3
 8006d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d56:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 81fe 	beq.w	8007166 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <USB_EPStartXfer+0x1228>
 8006d96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006da2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 81db 	bne.w	8007166 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006db0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 81d4 	bne.w	8007166 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]
 8006e1a:	e1a4      	b.n	8007166 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	78db      	ldrb	r3, [r3, #3]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	f040 819a 	bne.w	8007162 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d917      	bls.n	8006e7a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6a:	1ad2      	subs	r2, r2, r3
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	619a      	str	r2, [r3, #24]
 8006e78:	e00e      	b.n	8006e98 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2200      	movs	r2, #0
 8006e96:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d178      	bne.n	8006f9a <USB_EPStartXfer+0x1420>
 8006ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ecc:	4413      	add	r3, r2
 8006ece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00da      	lsls	r2, r3, #3
 8006ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef4:	d91d      	bls.n	8006f32 <USB_EPStartXfer+0x13b8>
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <USB_EPStartXfer+0x139c>
 8006f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f2e:	801a      	strh	r2, [r3, #0]
 8006f30:	e064      	b.n	8006ffc <USB_EPStartXfer+0x1482>
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d116      	bne.n	8006f68 <USB_EPStartXfer+0x13ee>
 8006f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e049      	b.n	8006ffc <USB_EPStartXfer+0x1482>
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <USB_EPStartXfer+0x140e>
 8006f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f82:	3301      	adds	r3, #1
 8006f84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f96:	801a      	strh	r2, [r3, #0]
 8006f98:	e030      	b.n	8006ffc <USB_EPStartXfer+0x1482>
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d128      	bne.n	8006ffc <USB_EPStartXfer+0x1482>
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fce:	4413      	add	r3, r2
 8006fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	00da      	lsls	r2, r3, #3
 8006fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800700a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d178      	bne.n	800710c <USB_EPStartXfer+0x1592>
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007036:	b29b      	uxth	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800703e:	4413      	add	r3, r2
 8007040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	00da      	lsls	r2, r3, #3
 8007052:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007056:	4413      	add	r3, r2
 8007058:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800705c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007064:	2b3e      	cmp	r3, #62	; 0x3e
 8007066:	d91d      	bls.n	80070a4 <USB_EPStartXfer+0x152a>
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <USB_EPStartXfer+0x150e>
 800707e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007082:	3b01      	subs	r3, #1
 8007084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708c:	b29b      	uxth	r3, r3
 800708e:	029b      	lsls	r3, r3, #10
 8007090:	b29b      	uxth	r3, r3
 8007092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	e060      	b.n	8007166 <USB_EPStartXfer+0x15ec>
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d116      	bne.n	80070da <USB_EPStartXfer+0x1560>
 80070ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e045      	b.n	8007166 <USB_EPStartXfer+0x15ec>
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <USB_EPStartXfer+0x1580>
 80070f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f4:	3301      	adds	r3, #1
 80070f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070fe:	b29b      	uxth	r3, r3
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	b29a      	uxth	r2, r3
 8007104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	e02c      	b.n	8007166 <USB_EPStartXfer+0x15ec>
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	785b      	ldrb	r3, [r3, #1]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d124      	bne.n	8007166 <USB_EPStartXfer+0x15ec>
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712a:	b29b      	uxth	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007132:	4413      	add	r3, r2
 8007134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	00da      	lsls	r2, r3, #3
 8007146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800714a:	4413      	add	r3, r2
 800714c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007158:	b29a      	uxth	r2, r3
 800715a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	e001      	b.n	8007166 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e03a      	b.n	80071dc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007190:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800719c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720e:	81bb      	strh	r3, [r7, #12]
 8007210:	89bb      	ldrh	r3, [r7, #12]
 8007212:	f083 0310 	eor.w	r3, r3, #16
 8007216:	81bb      	strh	r3, [r7, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	441a      	add	r2, r3
 8007222:	89bb      	ldrh	r3, [r7, #12]
 8007224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]
 8007238:	e01f      	b.n	800727a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800724c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007250:	81fb      	strh	r3, [r7, #14]
 8007252:	89fb      	ldrh	r3, [r7, #14]
 8007254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007258:	81fb      	strh	r3, [r7, #14]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	89fb      	ldrh	r3, [r7, #14]
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	7b1b      	ldrb	r3, [r3, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 809d 	bne.w	80073d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d04c      	beq.n	800733e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	823b      	strh	r3, [r7, #16]
 80072b2:	8a3b      	ldrh	r3, [r7, #16]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01b      	beq.n	80072f4 <USB_EPClearStall+0x6c>
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d2:	81fb      	strh	r3, [r7, #14]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	441a      	add	r2, r3
 80072de:	89fb      	ldrh	r3, [r7, #14]
 80072e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	78db      	ldrb	r3, [r3, #3]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d06c      	beq.n	80073d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007312:	81bb      	strh	r3, [r7, #12]
 8007314:	89bb      	ldrh	r3, [r7, #12]
 8007316:	f083 0320 	eor.w	r3, r3, #32
 800731a:	81bb      	strh	r3, [r7, #12]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	441a      	add	r2, r3
 8007326:	89bb      	ldrh	r3, [r7, #12]
 8007328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]
 800733c:	e04b      	b.n	80073d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	82fb      	strh	r3, [r7, #22]
 800734c:	8afb      	ldrh	r3, [r7, #22]
 800734e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01b      	beq.n	800738e <USB_EPClearStall+0x106>
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736c:	82bb      	strh	r3, [r7, #20]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	441a      	add	r2, r3
 8007378:	8abb      	ldrh	r3, [r7, #20]
 800737a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	b29b      	uxth	r3, r3
 800738c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a4:	827b      	strh	r3, [r7, #18]
 80073a6:	8a7b      	ldrh	r3, [r7, #18]
 80073a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073ac:	827b      	strh	r3, [r7, #18]
 80073ae:	8a7b      	ldrh	r3, [r7, #18]
 80073b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073b4:	827b      	strh	r3, [r7, #18]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	441a      	add	r2, r3
 80073c0:	8a7b      	ldrh	r3, [r7, #18]
 80073c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2280      	movs	r2, #128	; 0x80
 80073fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007448:	b29b      	uxth	r3, r3
 800744a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800744c:	68fb      	ldr	r3, [r7, #12]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800745a:	b480      	push	{r7}
 800745c:	b08b      	sub	sp, #44	; 0x2c
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	4611      	mov	r1, r2
 8007466:	461a      	mov	r2, r3
 8007468:	460b      	mov	r3, r1
 800746a:	80fb      	strh	r3, [r7, #6]
 800746c:	4613      	mov	r3, r2
 800746e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007470:	88bb      	ldrh	r3, [r7, #4]
 8007472:	3301      	adds	r3, #1
 8007474:	085b      	lsrs	r3, r3, #1
 8007476:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800748a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
 8007490:	e01b      	b.n	80074ca <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	3301      	adds	r3, #1
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	b21a      	sxth	r2, r3
 80074a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	8a7a      	ldrh	r2, [r7, #18]
 80074b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	3302      	adds	r3, #2
 80074b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	3301      	adds	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	3301      	adds	r3, #1
 80074c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	3b01      	subs	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e0      	bne.n	8007492 <USB_WritePMA+0x38>
  }
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	372c      	adds	r7, #44	; 0x2c
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074de:	b480      	push	{r7}
 80074e0:	b08b      	sub	sp, #44	; 0x2c
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	4611      	mov	r1, r2
 80074ea:	461a      	mov	r2, r3
 80074ec:	460b      	mov	r3, r1
 80074ee:	80fb      	strh	r3, [r7, #6]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80074f4:	88bb      	ldrh	r3, [r7, #4]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007504:	88fa      	ldrh	r2, [r7, #6]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800750e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
 8007514:	e018      	b.n	8007548 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	3302      	adds	r3, #2
 8007522:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	3301      	adds	r3, #1
 8007530:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	b2da      	uxtb	r2, r3
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	3b01      	subs	r3, #1
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e3      	bne.n	8007516 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800754e:	88bb      	ldrh	r3, [r7, #4]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	701a      	strb	r2, [r3, #0]
  }
}
 800756a:	bf00      	nop
 800756c:	372c      	adds	r7, #44	; 0x2c
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007582:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007586:	f004 fff9 	bl	800c57c <USBD_static_malloc>
 800758a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800759a:	2302      	movs	r3, #2
 800759c:	e066      	b.n	800766c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7c1b      	ldrb	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d119      	bne.n	80075e2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b2:	2202      	movs	r2, #2
 80075b4:	2181      	movs	r1, #129	; 0x81
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f004 fe85 	bl	800c2c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c6:	2202      	movs	r2, #2
 80075c8:	2101      	movs	r1, #1
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f004 fe7b 	bl	800c2c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2210      	movs	r2, #16
 80075dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80075e0:	e016      	b.n	8007610 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	2202      	movs	r2, #2
 80075e6:	2181      	movs	r1, #129	; 0x81
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f004 fe6c 	bl	800c2c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	2202      	movs	r2, #2
 80075f8:	2101      	movs	r1, #1
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f004 fe63 	bl	800c2c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2210      	movs	r2, #16
 800760c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007610:	2308      	movs	r3, #8
 8007612:	2203      	movs	r2, #3
 8007614:	2182      	movs	r1, #130	; 0x82
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f004 fe55 	bl	800c2c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	7c1b      	ldrb	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800764c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007650:	2101      	movs	r1, #1
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f004 ff27 	bl	800c4a6 <USBD_LL_PrepareReceive>
 8007658:	e007      	b.n	800766a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007660:	2340      	movs	r3, #64	; 0x40
 8007662:	2101      	movs	r1, #1
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f004 ff1e 	bl	800c4a6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007680:	2181      	movs	r1, #129	; 0x81
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f004 fe45 	bl	800c312 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800768e:	2101      	movs	r1, #1
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f004 fe3e 	bl	800c312 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800769e:	2182      	movs	r1, #130	; 0x82
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f004 fe36 	bl	800c312 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00e      	beq.n	80076de <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d0:	4618      	mov	r0, r3
 80076d2:	f004 ff61 	bl	800c598 <USBD_static_free>
    pdev->pClassData = NULL;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	e0af      	b.n	8007870 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007718:	2b00      	cmp	r3, #0
 800771a:	d03f      	beq.n	800779c <USBD_CDC_Setup+0xb4>
 800771c:	2b20      	cmp	r3, #32
 800771e:	f040 809f 	bne.w	8007860 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	88db      	ldrh	r3, [r3, #6]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02e      	beq.n	8007788 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b25b      	sxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	da16      	bge.n	8007762 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007740:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	88d2      	ldrh	r2, [r2, #6]
 8007746:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	88db      	ldrh	r3, [r3, #6]
 800774c:	2b07      	cmp	r3, #7
 800774e:	bf28      	it	cs
 8007750:	2307      	movcs	r3, #7
 8007752:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	89fa      	ldrh	r2, [r7, #14]
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 facf 	bl	8008cfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007760:	e085      	b.n	800786e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	785a      	ldrb	r2, [r3, #1]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007778:	6939      	ldr	r1, [r7, #16]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88db      	ldrh	r3, [r3, #6]
 800777e:	461a      	mov	r2, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fae8 	bl	8008d56 <USBD_CtlPrepareRx>
      break;
 8007786:	e072      	b.n	800786e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	7850      	ldrb	r0, [r2, #1]
 8007794:	2200      	movs	r2, #0
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	4798      	blx	r3
      break;
 800779a:	e068      	b.n	800786e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	2b0b      	cmp	r3, #11
 80077a2:	d852      	bhi.n	800784a <USBD_CDC_Setup+0x162>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USBD_CDC_Setup+0xc4>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077dd 	.word	0x080077dd
 80077b0:	08007859 	.word	0x08007859
 80077b4:	0800784b 	.word	0x0800784b
 80077b8:	0800784b 	.word	0x0800784b
 80077bc:	0800784b 	.word	0x0800784b
 80077c0:	0800784b 	.word	0x0800784b
 80077c4:	0800784b 	.word	0x0800784b
 80077c8:	0800784b 	.word	0x0800784b
 80077cc:	0800784b 	.word	0x0800784b
 80077d0:	0800784b 	.word	0x0800784b
 80077d4:	08007807 	.word	0x08007807
 80077d8:	08007831 	.word	0x08007831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d107      	bne.n	80077f8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077e8:	f107 030a 	add.w	r3, r7, #10
 80077ec:	2202      	movs	r2, #2
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fa84 	bl	8008cfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077f6:	e032      	b.n	800785e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fa0e 	bl	8008c1c <USBD_CtlError>
            ret = USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	75fb      	strb	r3, [r7, #23]
          break;
 8007804:	e02b      	b.n	800785e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d107      	bne.n	8007822 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007812:	f107 030d 	add.w	r3, r7, #13
 8007816:	2201      	movs	r2, #1
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fa6f 	bl	8008cfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007820:	e01d      	b.n	800785e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f9f9 	bl	8008c1c <USBD_CtlError>
            ret = USBD_FAIL;
 800782a:	2303      	movs	r3, #3
 800782c:	75fb      	strb	r3, [r7, #23]
          break;
 800782e:	e016      	b.n	800785e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d00f      	beq.n	800785c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f9ec 	bl	8008c1c <USBD_CtlError>
            ret = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007848:	e008      	b.n	800785c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f9e5 	bl	8008c1c <USBD_CtlError>
          ret = USBD_FAIL;
 8007852:	2303      	movs	r3, #3
 8007854:	75fb      	strb	r3, [r7, #23]
          break;
 8007856:	e002      	b.n	800785e <USBD_CDC_Setup+0x176>
          break;
 8007858:	bf00      	nop
 800785a:	e008      	b.n	800786e <USBD_CDC_Setup+0x186>
          break;
 800785c:	bf00      	nop
      }
      break;
 800785e:	e006      	b.n	800786e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 f9da 	bl	8008c1c <USBD_CtlError>
      ret = USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	75fb      	strb	r3, [r7, #23]
      break;
 800786c:	bf00      	nop
  }

  return (uint8_t)ret;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800788a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007896:	2303      	movs	r3, #3
 8007898:	e04f      	b.n	800793a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	3318      	adds	r3, #24
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d029      	beq.n	800790c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	3318      	adds	r3, #24
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	78f9      	ldrb	r1, [r7, #3]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	460b      	mov	r3, r1
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4403      	add	r3, r0
 80078d8:	333c      	adds	r3, #60	; 0x3c
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d110      	bne.n	800790c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3318      	adds	r3, #24
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078fe:	78f9      	ldrb	r1, [r7, #3]
 8007900:	2300      	movs	r3, #0
 8007902:	2200      	movs	r2, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f004 fdad 	bl	800c464 <USBD_LL_Transmit>
 800790a:	e015      	b.n	8007938 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007934:	78fa      	ldrb	r2, [r7, #3]
 8007936:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	e015      	b.n	8007990 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f004 fdbd 	bl	800c4e8 <USBD_LL_GetRxDataSize>
 800796e:	4602      	mov	r2, r0
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800798a:	4611      	mov	r1, r2
 800798c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e01b      	b.n	80079ea <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d015      	beq.n	80079e8 <USBD_CDC_EP0_RxReady+0x50>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079c2:	2bff      	cmp	r3, #255	; 0xff
 80079c4:	d010      	beq.n	80079e8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80079d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079dc:	b292      	uxth	r2, r2
 80079de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	22ff      	movs	r2, #255	; 0xff
 80079e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2243      	movs	r2, #67	; 0x43
 8007a00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007a02:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000098 	.word	0x20000098

08007a14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2243      	movs	r2, #67	; 0x43
 8007a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007a22:	4b03      	ldr	r3, [pc, #12]	; (8007a30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	20000054 	.word	0x20000054

08007a34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2243      	movs	r2, #67	; 0x43
 8007a40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007a42:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	200000dc 	.word	0x200000dc

08007a54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	220a      	movs	r2, #10
 8007a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a62:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	20000010 	.word	0x20000010

08007a74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e004      	b.n	8007a92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e008      	b.n	8007ace <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e004      	b.n	8007b00 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e01a      	b.n	8007b64 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d114      	bne.n	8007b62 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b56:	2181      	movs	r1, #129	; 0x81
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f004 fc83 	bl	800c464 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e016      	b.n	8007bb8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	7c1b      	ldrb	r3, [r3, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f004 fc81 	bl	800c4a6 <USBD_LL_PrepareReceive>
 8007ba4:	e007      	b.n	8007bb6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	2101      	movs	r1, #1
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f004 fc78 	bl	800c4a6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e01f      	b.n	8007c18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	79fa      	ldrb	r2, [r7, #7]
 8007c0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f004 fadd 	bl	800c1cc <USBD_LL_Init>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e016      	b.n	8007c66 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	f107 020e 	add.w	r2, r7, #14
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f004 fb0a 	bl	800c290 <USBD_LL_Start>
 8007c7c:	4603      	mov	r3, r0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
  }

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 ff46 	bl	8008ba8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d01a      	beq.n	8007d76 <USBD_LL_SetupStage+0x72>
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d822      	bhi.n	8007d8a <USBD_LL_SetupStage+0x86>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <USBD_LL_SetupStage+0x4a>
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d00a      	beq.n	8007d62 <USBD_LL_SetupStage+0x5e>
 8007d4c:	e01d      	b.n	8007d8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f9ee 	bl	8008138 <USBD_StdDevReq>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d60:	e020      	b.n	8007da4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa52 	bl	8008214 <USBD_StdItfReq>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
      break;
 8007d74:	e016      	b.n	8007da4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa91 	bl	80082a6 <USBD_StdEPReq>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]
      break;
 8007d88:	e00c      	b.n	8007da4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f004 fad9 	bl	800c350 <USBD_LL_StallEP>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73fb      	strb	r3, [r7, #15]
      break;
 8007da2:	bf00      	nop
  }

  return ret;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b086      	sub	sp, #24
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	460b      	mov	r3, r1
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d138      	bne.n	8007e34 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d14a      	bne.n	8007e6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d913      	bls.n	8007e08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bf28      	it	cs
 8007dfa:	4613      	movcs	r3, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 ffc5 	bl	8008d90 <USBD_CtlContinueRx>
 8007e06:	e030      	b.n	8007e6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d10b      	bne.n	8007e2c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 ffc0 	bl	8008db2 <USBD_CtlSendStatus>
 8007e32:	e01a      	b.n	8007e6a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d114      	bne.n	8007e6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00e      	beq.n	8007e6a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	7afa      	ldrb	r2, [r7, #11]
 8007e56:	4611      	mov	r1, r2
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	4798      	blx	r3
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	e000      	b.n	8007e6c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e82:	7afb      	ldrb	r3, [r7, #11]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d16b      	bne.n	8007f60 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3314      	adds	r3, #20
 8007e8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d156      	bne.n	8007f46 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d914      	bls.n	8007ece <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	1ad2      	subs	r2, r2, r3
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 ff3a 	bl	8008d34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f004 faed 	bl	800c4a6 <USBD_LL_PrepareReceive>
 8007ecc:	e03b      	b.n	8007f46 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d11c      	bne.n	8007f14 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d316      	bcc.n	8007f14 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d20f      	bcs.n	8007f14 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 ff1b 	bl	8008d34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f06:	2300      	movs	r3, #0
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f004 faca 	bl	800c4a6 <USBD_LL_PrepareReceive>
 8007f12:	e018      	b.n	8007f46 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d10b      	bne.n	8007f38 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f38:	2180      	movs	r1, #128	; 0x80
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f004 fa08 	bl	800c350 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 ff49 	bl	8008dd8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d122      	bne.n	8007f96 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fe98 	bl	8007c86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f5e:	e01a      	b.n	8007f96 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d114      	bne.n	8007f96 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00e      	beq.n	8007f96 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	7afa      	ldrb	r2, [r7, #11]
 8007f82:	4611      	mov	r1, r2
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	4798      	blx	r3
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	e000      	b.n	8007f98 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e02f      	b.n	8008034 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00f      	beq.n	8007ffe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6852      	ldr	r2, [r2, #4]
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ffe:	2340      	movs	r3, #64	; 0x40
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f004 f95e 	bl	800c2c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2240      	movs	r2, #64	; 0x40
 8008016:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	2200      	movs	r2, #0
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f004 f950 	bl	800c2c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2240      	movs	r2, #64	; 0x40
 8008030:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2204      	movs	r2, #4
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b04      	cmp	r3, #4
 800809a:	d106      	bne.n	80080aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e012      	b.n	80080f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d10b      	bne.n	80080f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	3301      	adds	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800811a:	8a3b      	ldrh	r3, [r7, #16]
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	b21a      	sxth	r2, r3
 8008120:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008124:	4313      	orrs	r3, r2
 8008126:	b21b      	sxth	r3, r3
 8008128:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800812a:	89fb      	ldrh	r3, [r7, #14]
}
 800812c:	4618      	mov	r0, r3
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	d005      	beq.n	800815e <USBD_StdDevReq+0x26>
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d853      	bhi.n	80081fe <USBD_StdDevReq+0xc6>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <USBD_StdDevReq+0x3a>
 800815a:	2b20      	cmp	r3, #32
 800815c:	d14f      	bne.n	80081fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
      break;
 8008170:	e04a      	b.n	8008208 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b09      	cmp	r3, #9
 8008178:	d83b      	bhi.n	80081f2 <USBD_StdDevReq+0xba>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBD_StdDevReq+0x48>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	080081d5 	.word	0x080081d5
 8008184:	080081e9 	.word	0x080081e9
 8008188:	080081f3 	.word	0x080081f3
 800818c:	080081df 	.word	0x080081df
 8008190:	080081f3 	.word	0x080081f3
 8008194:	080081b3 	.word	0x080081b3
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081f3 	.word	0x080081f3
 80081a0:	080081cb 	.word	0x080081cb
 80081a4:	080081bd 	.word	0x080081bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9de 	bl	800856c <USBD_GetDescriptor>
          break;
 80081b0:	e024      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fb6d 	bl	8008894 <USBD_SetAddress>
          break;
 80081ba:	e01f      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fbac 	bl	800891c <USBD_SetConfig>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
          break;
 80081c8:	e018      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fc4b 	bl	8008a68 <USBD_GetConfig>
          break;
 80081d2:	e013      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc7c 	bl	8008ad4 <USBD_GetStatus>
          break;
 80081dc:	e00e      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fcab 	bl	8008b3c <USBD_SetFeature>
          break;
 80081e6:	e009      	b.n	80081fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fcba 	bl	8008b64 <USBD_ClrFeature>
          break;
 80081f0:	e004      	b.n	80081fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fd11 	bl	8008c1c <USBD_CtlError>
          break;
 80081fa:	bf00      	nop
      }
      break;
 80081fc:	e004      	b.n	8008208 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fd0b 	bl	8008c1c <USBD_CtlError>
      break;
 8008206:	bf00      	nop
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d005      	beq.n	800823a <USBD_StdItfReq+0x26>
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d82f      	bhi.n	8008292 <USBD_StdItfReq+0x7e>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <USBD_StdItfReq+0x26>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d12b      	bne.n	8008292 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	b2db      	uxtb	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	2b02      	cmp	r3, #2
 8008246:	d81d      	bhi.n	8008284 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	889b      	ldrh	r3, [r3, #4]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d813      	bhi.n	800827a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <USBD_StdItfReq+0x7a>
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10d      	bne.n	800828e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fd9d 	bl	8008db2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008278:	e009      	b.n	800828e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fccd 	bl	8008c1c <USBD_CtlError>
          break;
 8008282:	e004      	b.n	800828e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fcc8 	bl	8008c1c <USBD_CtlError>
          break;
 800828c:	e000      	b.n	8008290 <USBD_StdItfReq+0x7c>
          break;
 800828e:	bf00      	nop
      }
      break;
 8008290:	e004      	b.n	800829c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fcc1 	bl	8008c1c <USBD_CtlError>
      break;
 800829a:	bf00      	nop
  }

  return ret;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d007      	beq.n	80082d6 <USBD_StdEPReq+0x30>
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	f200 8145 	bhi.w	8008556 <USBD_StdEPReq+0x2b0>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <USBD_StdEPReq+0x44>
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	f040 8140 	bne.w	8008556 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]
      break;
 80082e8:	e13a      	b.n	8008560 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d007      	beq.n	8008302 <USBD_StdEPReq+0x5c>
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	f300 8129 	bgt.w	800854a <USBD_StdEPReq+0x2a4>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d07f      	beq.n	80083fc <USBD_StdEPReq+0x156>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d03c      	beq.n	800837a <USBD_StdEPReq+0xd4>
 8008300:	e123      	b.n	800854a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d002      	beq.n	8008314 <USBD_StdEPReq+0x6e>
 800830e:	2b03      	cmp	r3, #3
 8008310:	d016      	beq.n	8008340 <USBD_StdEPReq+0x9a>
 8008312:	e02c      	b.n	800836e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00d      	beq.n	8008336 <USBD_StdEPReq+0x90>
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d00a      	beq.n	8008336 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f004 f813 	bl	800c350 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800832a:	2180      	movs	r1, #128	; 0x80
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f004 f80f 	bl	800c350 <USBD_LL_StallEP>
 8008332:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008334:	e020      	b.n	8008378 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc6f 	bl	8008c1c <USBD_CtlError>
              break;
 800833e:	e01b      	b.n	8008378 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	885b      	ldrh	r3, [r3, #2]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10e      	bne.n	8008366 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <USBD_StdEPReq+0xc0>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d008      	beq.n	8008366 <USBD_StdEPReq+0xc0>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	88db      	ldrh	r3, [r3, #6]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f003 fff5 	bl	800c350 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fd23 	bl	8008db2 <USBD_CtlSendStatus>

              break;
 800836c:	e004      	b.n	8008378 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fc53 	bl	8008c1c <USBD_CtlError>
              break;
 8008376:	bf00      	nop
          }
          break;
 8008378:	e0ec      	b.n	8008554 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d002      	beq.n	800838c <USBD_StdEPReq+0xe6>
 8008386:	2b03      	cmp	r3, #3
 8008388:	d016      	beq.n	80083b8 <USBD_StdEPReq+0x112>
 800838a:	e030      	b.n	80083ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00d      	beq.n	80083ae <USBD_StdEPReq+0x108>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b80      	cmp	r3, #128	; 0x80
 8008396:	d00a      	beq.n	80083ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 ffd7 	bl	800c350 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f003 ffd3 	bl	800c350 <USBD_LL_StallEP>
 80083aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083ac:	e025      	b.n	80083fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fc33 	bl	8008c1c <USBD_CtlError>
              break;
 80083b6:	e020      	b.n	80083fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	885b      	ldrh	r3, [r3, #2]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11b      	bne.n	80083f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f003 ffdd 	bl	800c38e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fcec 	bl	8008db2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80083ec:	e004      	b.n	80083f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc13 	bl	8008c1c <USBD_CtlError>
              break;
 80083f6:	e000      	b.n	80083fa <USBD_StdEPReq+0x154>
              break;
 80083f8:	bf00      	nop
          }
          break;
 80083fa:	e0ab      	b.n	8008554 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d002      	beq.n	800840e <USBD_StdEPReq+0x168>
 8008408:	2b03      	cmp	r3, #3
 800840a:	d032      	beq.n	8008472 <USBD_StdEPReq+0x1cc>
 800840c:	e097      	b.n	800853e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <USBD_StdEPReq+0x17e>
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d004      	beq.n	8008424 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fbfd 	bl	8008c1c <USBD_CtlError>
                break;
 8008422:	e091      	b.n	8008548 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	da0b      	bge.n	8008444 <USBD_StdEPReq+0x19e>
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	3310      	adds	r3, #16
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	e00b      	b.n	800845c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc47 	bl	8008cfe <USBD_CtlSendData>
              break;
 8008470:	e06a      	b.n	8008548 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	da11      	bge.n	800849e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f003 020f 	and.w	r2, r3, #15
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	3324      	adds	r3, #36	; 0x24
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d117      	bne.n	80084c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fbc0 	bl	8008c1c <USBD_CtlError>
                  break;
 800849c:	e054      	b.n	8008548 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	440b      	add	r3, r1
 80084b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbad 	bl	8008c1c <USBD_CtlError>
                  break;
 80084c2:	e041      	b.n	8008548 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0b      	bge.n	80084e4 <USBD_StdEPReq+0x23e>
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	3310      	adds	r3, #16
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	3304      	adds	r3, #4
 80084e2:	e00b      	b.n	80084fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <USBD_StdEPReq+0x264>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b80      	cmp	r3, #128	; 0x80
 8008508:	d103      	bne.n	8008512 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e00e      	b.n	8008530 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f003 ff58 	bl	800c3cc <USBD_LL_IsStallEP>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e002      	b.n	8008530 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2202      	movs	r2, #2
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fbe1 	bl	8008cfe <USBD_CtlSendData>
              break;
 800853c:	e004      	b.n	8008548 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fb6b 	bl	8008c1c <USBD_CtlError>
              break;
 8008546:	bf00      	nop
          }
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb65 	bl	8008c1c <USBD_CtlError>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb5f 	bl	8008c1c <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	2b0e      	cmp	r3, #14
 800858e:	f200 8152 	bhi.w	8008836 <USBD_GetDescriptor+0x2ca>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0x2c>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	08008609 	.word	0x08008609
 800859c:	08008621 	.word	0x08008621
 80085a0:	08008661 	.word	0x08008661
 80085a4:	08008837 	.word	0x08008837
 80085a8:	08008837 	.word	0x08008837
 80085ac:	080087d7 	.word	0x080087d7
 80085b0:	08008803 	.word	0x08008803
 80085b4:	08008837 	.word	0x08008837
 80085b8:	08008837 	.word	0x08008837
 80085bc:	08008837 	.word	0x08008837
 80085c0:	08008837 	.word	0x08008837
 80085c4:	08008837 	.word	0x08008837
 80085c8:	08008837 	.word	0x08008837
 80085cc:	08008837 	.word	0x08008837
 80085d0:	080085d5 	.word	0x080085d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085f6:	e126      	b.n	8008846 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fb0e 	bl	8008c1c <USBD_CtlError>
        err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
      break;
 8008606:	e11e      	b.n	8008846 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	7c12      	ldrb	r2, [r2, #16]
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	4610      	mov	r0, r2
 800861a:	4798      	blx	r3
 800861c:	60f8      	str	r0, [r7, #12]
      break;
 800861e:	e112      	b.n	8008846 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	f107 0208 	add.w	r2, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	2202      	movs	r2, #2
 8008640:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008642:	e100      	b.n	8008846 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	f107 0208 	add.w	r2, r7, #8
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
 8008654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	2202      	movs	r2, #2
 800865c:	701a      	strb	r2, [r3, #0]
      break;
 800865e:	e0f2      	b.n	8008846 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	885b      	ldrh	r3, [r3, #2]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b05      	cmp	r3, #5
 8008668:	f200 80ac 	bhi.w	80087c4 <USBD_GetDescriptor+0x258>
 800866c:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <USBD_GetDescriptor+0x108>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	0800868d 	.word	0x0800868d
 8008678:	080086c1 	.word	0x080086c1
 800867c:	080086f5 	.word	0x080086f5
 8008680:	08008729 	.word	0x08008729
 8008684:	0800875d 	.word	0x0800875d
 8008688:	08008791 	.word	0x08008791
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e091      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fab2 	bl	8008c1c <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e089      	b.n	80087d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e077      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa98 	bl	8008c1c <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e06f      	b.n	80087d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e05d      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa7e 	bl	8008c1c <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e055      	b.n	80087d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	f107 0108 	add.w	r1, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874a:	e043      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa64 	bl	8008c1c <USBD_CtlError>
            err++;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	3301      	adds	r3, #1
 8008758:	72fb      	strb	r3, [r7, #11]
          break;
 800875a:	e03b      	b.n	80087d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7c12      	ldrb	r2, [r2, #16]
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800877e:	e029      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa4a 	bl	8008c1c <USBD_CtlError>
            err++;
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	3301      	adds	r3, #1
 800878c:	72fb      	strb	r3, [r7, #11]
          break;
 800878e:	e021      	b.n	80087d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b2:	e00f      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa30 	bl	8008c1c <USBD_CtlError>
            err++;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	3301      	adds	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
          break;
 80087c2:	e007      	b.n	80087d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa28 	bl	8008c1c <USBD_CtlError>
          err++;
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80087d2:	bf00      	nop
      }
      break;
 80087d4:	e037      	b.n	8008846 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7c1b      	ldrb	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	f107 0208 	add.w	r2, r7, #8
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087f0:	e029      	b.n	8008846 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa11 	bl	8008c1c <USBD_CtlError>
        err++;
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	3301      	adds	r3, #1
 80087fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008800:	e021      	b.n	8008846 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7c1b      	ldrb	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10d      	bne.n	8008826 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	f107 0208 	add.w	r2, r7, #8
 8008816:	4610      	mov	r0, r2
 8008818:	4798      	blx	r3
 800881a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	2207      	movs	r2, #7
 8008822:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008824:	e00f      	b.n	8008846 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f9f7 	bl	8008c1c <USBD_CtlError>
        err++;
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	3301      	adds	r3, #1
 8008832:	72fb      	strb	r3, [r7, #11]
      break;
 8008834:	e007      	b.n	8008846 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f9ef 	bl	8008c1c <USBD_CtlError>
      err++;
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	3301      	adds	r3, #1
 8008842:	72fb      	strb	r3, [r7, #11]
      break;
 8008844:	bf00      	nop
  }

  if (err != 0U)
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11e      	bne.n	800888a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	88db      	ldrh	r3, [r3, #6]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d016      	beq.n	8008882 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008854:	893b      	ldrh	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00e      	beq.n	8008878 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	88da      	ldrh	r2, [r3, #6]
 800885e:	893b      	ldrh	r3, [r7, #8]
 8008860:	4293      	cmp	r3, r2
 8008862:	bf28      	it	cs
 8008864:	4613      	movcs	r3, r2
 8008866:	b29b      	uxth	r3, r3
 8008868:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800886a:	893b      	ldrh	r3, [r7, #8]
 800886c:	461a      	mov	r2, r3
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fa44 	bl	8008cfe <USBD_CtlSendData>
 8008876:	e009      	b.n	800888c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f9ce 	bl	8008c1c <USBD_CtlError>
 8008880:	e004      	b.n	800888c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa95 	bl	8008db2 <USBD_CtlSendStatus>
 8008888:	e000      	b.n	800888c <USBD_GetDescriptor+0x320>
    return;
 800888a:	bf00      	nop
  }
}
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop

08008894 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	889b      	ldrh	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d131      	bne.n	800890a <USBD_SetAddress+0x76>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d12d      	bne.n	800890a <USBD_SetAddress+0x76>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	885b      	ldrh	r3, [r3, #2]
 80088b2:	2b7f      	cmp	r3, #127	; 0x7f
 80088b4:	d829      	bhi.n	800890a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d104      	bne.n	80088d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f9a3 	bl	8008c1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	e01d      	b.n	8008914 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f003 fd9e 	bl	800c426 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa61 	bl	8008db2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	e009      	b.n	8008914 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008908:	e004      	b.n	8008914 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f985 	bl	8008c1c <USBD_CtlError>
  }
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	b2da      	uxtb	r2, r3
 8008930:	4b4c      	ldr	r3, [pc, #304]	; (8008a64 <USBD_SetConfig+0x148>)
 8008932:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008934:	4b4b      	ldr	r3, [pc, #300]	; (8008a64 <USBD_SetConfig+0x148>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d905      	bls.n	8008948 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f96c 	bl	8008c1c <USBD_CtlError>
    return USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	e088      	b.n	8008a5a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d002      	beq.n	800895a <USBD_SetConfig+0x3e>
 8008954:	2b03      	cmp	r3, #3
 8008956:	d025      	beq.n	80089a4 <USBD_SetConfig+0x88>
 8008958:	e071      	b.n	8008a3e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800895a:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <USBD_SetConfig+0x148>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01c      	beq.n	800899c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008962:	4b40      	ldr	r3, [pc, #256]	; (8008a64 <USBD_SetConfig+0x148>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800896c:	4b3d      	ldr	r3, [pc, #244]	; (8008a64 <USBD_SetConfig+0x148>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff f992 	bl	8007c9c <USBD_SetClassConfig>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f949 	bl	8008c1c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800898a:	e065      	b.n	8008a58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fa10 	bl	8008db2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2203      	movs	r2, #3
 8008996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800899a:	e05d      	b.n	8008a58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fa08 	bl	8008db2 <USBD_CtlSendStatus>
      break;
 80089a2:	e059      	b.n	8008a58 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089a4:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <USBD_SetConfig+0x148>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d112      	bne.n	80089d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <USBD_SetConfig+0x148>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089be:	4b29      	ldr	r3, [pc, #164]	; (8008a64 <USBD_SetConfig+0x148>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff f985 	bl	8007cd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f9f1 	bl	8008db2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089d0:	e042      	b.n	8008a58 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <USBD_SetConfig+0x148>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d02a      	beq.n	8008a36 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff f973 	bl	8007cd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089ee:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <USBD_SetConfig+0x148>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089f8:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <USBD_SetConfig+0x148>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff f94c 	bl	8007c9c <USBD_SetClassConfig>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00f      	beq.n	8008a2e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f903 	bl	8008c1c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7ff f958 	bl	8007cd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a2c:	e014      	b.n	8008a58 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9bf 	bl	8008db2 <USBD_CtlSendStatus>
      break;
 8008a34:	e010      	b.n	8008a58 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9bb 	bl	8008db2 <USBD_CtlSendStatus>
      break;
 8008a3c:	e00c      	b.n	8008a58 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f8eb 	bl	8008c1c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a46:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <USBD_SetConfig+0x148>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff f941 	bl	8007cd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	73fb      	strb	r3, [r7, #15]
      break;
 8008a56:	bf00      	nop
  }

  return ret;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	2000024c 	.word	0x2000024c

08008a68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d004      	beq.n	8008a84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f8cd 	bl	8008c1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a82:	e023      	b.n	8008acc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	dc02      	bgt.n	8008a96 <USBD_GetConfig+0x2e>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc03      	bgt.n	8008a9c <USBD_GetConfig+0x34>
 8008a94:	e015      	b.n	8008ac2 <USBD_GetConfig+0x5a>
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d00b      	beq.n	8008ab2 <USBD_GetConfig+0x4a>
 8008a9a:	e012      	b.n	8008ac2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f927 	bl	8008cfe <USBD_CtlSendData>
        break;
 8008ab0:	e00c      	b.n	8008acc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f91f 	bl	8008cfe <USBD_CtlSendData>
        break;
 8008ac0:	e004      	b.n	8008acc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f8a9 	bl	8008c1c <USBD_CtlError>
        break;
 8008aca:	bf00      	nop
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d81e      	bhi.n	8008b2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	88db      	ldrh	r3, [r3, #6]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d004      	beq.n	8008afe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f890 	bl	8008c1c <USBD_CtlError>
        break;
 8008afc:	e01a      	b.n	8008b34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f043 0202 	orr.w	r2, r3, #2
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	330c      	adds	r3, #12
 8008b1e:	2202      	movs	r2, #2
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8eb 	bl	8008cfe <USBD_CtlSendData>
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f875 	bl	8008c1c <USBD_CtlError>
      break;
 8008b32:	bf00      	nop
  }
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d106      	bne.n	8008b5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f92b 	bl	8008db2 <USBD_CtlSendStatus>
  }
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d80b      	bhi.n	8008b94 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	885b      	ldrh	r3, [r3, #2]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d10c      	bne.n	8008b9e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f910 	bl	8008db2 <USBD_CtlSendStatus>
      }
      break;
 8008b92:	e004      	b.n	8008b9e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f840 	bl	8008c1c <USBD_CtlError>
      break;
 8008b9c:	e000      	b.n	8008ba0 <USBD_ClrFeature+0x3c>
      break;
 8008b9e:	bf00      	nop
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff fa92 	bl	80080fc <SWAPBYTE>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fa85 	bl	80080fc <SWAPBYTE>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fa78 	bl	80080fc <SWAPBYTE>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	80da      	strh	r2, [r3, #6]
}
 8008c14:	bf00      	nop
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c26:	2180      	movs	r1, #128	; 0x80
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f003 fb91 	bl	800c350 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c2e:	2100      	movs	r1, #0
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f003 fb8d 	bl	800c350 <USBD_LL_StallEP>
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d036      	beq.n	8008cc2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c58:	6938      	ldr	r0, [r7, #16]
 8008c5a:	f000 f836 	bl	8008cca <USBD_GetLen>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	3301      	adds	r3, #1
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4413      	add	r3, r2
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	4413      	add	r3, r2
 8008c84:	2203      	movs	r2, #3
 8008c86:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c8e:	e013      	b.n	8008cb8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4413      	add	r3, r2
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	613b      	str	r3, [r7, #16]
    idx++;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
    idx++;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e7      	bne.n	8008c90 <USBD_GetString+0x52>
 8008cc0:	e000      	b.n	8008cc4 <USBD_GetString+0x86>
    return;
 8008cc2:	bf00      	nop
  }
}
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008cda:	e005      	b.n	8008ce8 <USBD_GetLen+0x1e>
  {
    len++;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f5      	bne.n	8008cdc <USBD_GetLen+0x12>
  }

  return len;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	2100      	movs	r1, #0
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f003 fb9d 	bl	800c464 <USBD_LL_Transmit>

  return USBD_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f003 fb8c 	bl	800c464 <USBD_LL_Transmit>

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2203      	movs	r2, #3
 8008d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	2100      	movs	r1, #0
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f003 fb90 	bl	800c4a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	2100      	movs	r1, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f003 fb7f 	bl	800c4a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f003 fb4b 	bl	800c464 <USBD_LL_Transmit>

  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2205      	movs	r2, #5
 8008de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008de8:	2300      	movs	r3, #0
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f003 fb59 	bl	800c4a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4a07      	ldr	r2, [pc, #28]	; (8008e2c <vApplicationGetIdleTaskMemory+0x2c>)
 8008e10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	4a06      	ldr	r2, [pc, #24]	; (8008e30 <vApplicationGetIdleTaskMemory+0x30>)
 8008e16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2280      	movs	r2, #128	; 0x80
 8008e1c:	601a      	str	r2, [r3, #0]
}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000250 	.word	0x20000250
 8008e30:	200002b0 	.word	0x200002b0

08008e34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4a07      	ldr	r2, [pc, #28]	; (8008e60 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4a06      	ldr	r2, [pc, #24]	; (8008e64 <vApplicationGetTimerTaskMemory+0x30>)
 8008e4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e52:	601a      	str	r2, [r3, #0]
}
 8008e54:	bf00      	nop
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	200004b0 	.word	0x200004b0
 8008e64:	20000510 	.word	0x20000510

08008e68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f103 0208 	add.w	r2, r3, #8
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f103 0208 	add.w	r2, r3, #8
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f103 0208 	add.w	r2, r3, #8
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	601a      	str	r2, [r3, #0]
}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b085      	sub	sp, #20
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d103      	bne.n	8008f2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e00c      	b.n	8008f44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e002      	b.n	8008f38 <vListInsert+0x2e>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d2f6      	bcs.n	8008f32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6892      	ldr	r2, [r2, #8]
 8008f92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	6852      	ldr	r2, [r2, #4]
 8008f9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d103      	bne.n	8008fb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	1e5a      	subs	r2, r3, #1
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ffa:	f002 fa9b 	bl	800b534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	68f9      	ldr	r1, [r7, #12]
 8009008:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800900a:	fb01 f303 	mul.w	r3, r1, r3
 800900e:	441a      	add	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	3b01      	subs	r3, #1
 800902c:	68f9      	ldr	r1, [r7, #12]
 800902e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009030:	fb01 f303 	mul.w	r3, r1, r3
 8009034:	441a      	add	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	22ff      	movs	r2, #255	; 0xff
 800903e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	22ff      	movs	r2, #255	; 0xff
 8009046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d114      	bne.n	800907a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01a      	beq.n	800908e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3310      	adds	r3, #16
 800905c:	4618      	mov	r0, r3
 800905e:	f001 fa53 	bl	800a508 <xTaskRemoveFromEventList>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d012      	beq.n	800908e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <xQueueGenericReset+0xcc>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	e009      	b.n	800908e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3310      	adds	r3, #16
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fef2 	bl	8008e68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff feed 	bl	8008e68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f002 fa81 	bl	800b594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009092:	2301      	movs	r3, #1
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08e      	sub	sp, #56	; 0x38
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <xQueueGenericCreateStatic+0x52>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <xQueueGenericCreateStatic+0x56>
 80090f2:	2301      	movs	r3, #1
 80090f4:	e000      	b.n	80090f8 <xQueueGenericCreateStatic+0x58>
 80090f6:	2300      	movs	r3, #0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	623b      	str	r3, [r7, #32]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <xQueueGenericCreateStatic+0x7e>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <xQueueGenericCreateStatic+0x82>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <xQueueGenericCreateStatic+0x84>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	61fb      	str	r3, [r7, #28]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800913e:	2350      	movs	r3, #80	; 0x50
 8009140:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b50      	cmp	r3, #80	; 0x50
 8009146:	d00a      	beq.n	800915e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	61bb      	str	r3, [r7, #24]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800915e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009172:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4613      	mov	r3, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f83f 	bl	8009204 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009188:	4618      	mov	r0, r3
 800918a:	3730      	adds	r7, #48	; 0x30
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af02      	add	r7, sp, #8
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	613b      	str	r3, [r7, #16]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	fb02 f303 	mul.w	r3, r2, r3
 80091c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	3350      	adds	r3, #80	; 0x50
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 fad5 	bl	800b778 <pvPortMalloc>
 80091ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	3350      	adds	r3, #80	; 0x50
 80091de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091e8:	79fa      	ldrb	r2, [r7, #7]
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	4613      	mov	r3, r2
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f805 	bl	8009204 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091fa:	69bb      	ldr	r3, [r7, #24]
	}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3720      	adds	r7, #32
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	e002      	b.n	8009226 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009232:	2101      	movs	r1, #1
 8009234:	69b8      	ldr	r0, [r7, #24]
 8009236:	f7ff fecb 	bl	8008fd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08e      	sub	sp, #56	; 0x38
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800925a:	2300      	movs	r3, #0
 800925c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <xQueueGenericSend+0x32>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <xQueueGenericSend+0x40>
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <xQueueGenericSend+0x44>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <xQueueGenericSend+0x46>
 8009290:	2300      	movs	r3, #0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <xQueueGenericSend+0x60>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092a8:	bf00      	nop
 80092aa:	e7fe      	b.n	80092aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d103      	bne.n	80092ba <xQueueGenericSend+0x6e>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d101      	bne.n	80092be <xQueueGenericSend+0x72>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e000      	b.n	80092c0 <xQueueGenericSend+0x74>
 80092be:	2300      	movs	r3, #0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10a      	bne.n	80092da <xQueueGenericSend+0x8e>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	623b      	str	r3, [r7, #32]
}
 80092d6:	bf00      	nop
 80092d8:	e7fe      	b.n	80092d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092da:	f001 fad5 	bl	800a888 <xTaskGetSchedulerState>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <xQueueGenericSend+0x9e>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <xQueueGenericSend+0xa2>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <xQueueGenericSend+0xa4>
 80092ee:	2300      	movs	r3, #0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <xQueueGenericSend+0xbe>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	61fb      	str	r3, [r7, #28]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800930a:	f002 f913 	bl	800b534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009316:	429a      	cmp	r2, r3
 8009318:	d302      	bcc.n	8009320 <xQueueGenericSend+0xd4>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d129      	bne.n	8009374 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009326:	f000 fb2f 	bl	8009988 <prvCopyDataToQueue>
 800932a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d010      	beq.n	8009356 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	3324      	adds	r3, #36	; 0x24
 8009338:	4618      	mov	r0, r3
 800933a:	f001 f8e5 	bl	800a508 <xTaskRemoveFromEventList>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d013      	beq.n	800936c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009344:	4b3f      	ldr	r3, [pc, #252]	; (8009444 <xQueueGenericSend+0x1f8>)
 8009346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	e00a      	b.n	800936c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d007      	beq.n	800936c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800935c:	4b39      	ldr	r3, [pc, #228]	; (8009444 <xQueueGenericSend+0x1f8>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800936c:	f002 f912 	bl	800b594 <vPortExitCritical>
				return pdPASS;
 8009370:	2301      	movs	r3, #1
 8009372:	e063      	b.n	800943c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d103      	bne.n	8009382 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800937a:	f002 f90b 	bl	800b594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800937e:	2300      	movs	r3, #0
 8009380:	e05c      	b.n	800943c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	2b00      	cmp	r3, #0
 8009386:	d106      	bne.n	8009396 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009388:	f107 0314 	add.w	r3, r7, #20
 800938c:	4618      	mov	r0, r3
 800938e:	f001 f91f 	bl	800a5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009392:	2301      	movs	r3, #1
 8009394:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009396:	f002 f8fd 	bl	800b594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800939a:	f000 fe6f 	bl	800a07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800939e:	f002 f8c9 	bl	800b534 <vPortEnterCritical>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d103      	bne.n	80093b8 <xQueueGenericSend+0x16c>
 80093b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093be:	b25b      	sxtb	r3, r3
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c4:	d103      	bne.n	80093ce <xQueueGenericSend+0x182>
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093ce:	f002 f8e1 	bl	800b594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093d2:	1d3a      	adds	r2, r7, #4
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	4611      	mov	r1, r2
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 f90e 	bl	800a5fc <xTaskCheckForTimeOut>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d124      	bne.n	8009430 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093e8:	f000 fbc6 	bl	8009b78 <prvIsQueueFull>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d018      	beq.n	8009424 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	3310      	adds	r3, #16
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	4611      	mov	r1, r2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 f834 	bl	800a468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009402:	f000 fb51 	bl	8009aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009406:	f000 fe47 	bl	800a098 <xTaskResumeAll>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	f47f af7c 	bne.w	800930a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009412:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <xQueueGenericSend+0x1f8>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	e772      	b.n	800930a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009426:	f000 fb3f 	bl	8009aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800942a:	f000 fe35 	bl	800a098 <xTaskResumeAll>
 800942e:	e76c      	b.n	800930a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009432:	f000 fb39 	bl	8009aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009436:	f000 fe2f 	bl	800a098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800943a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800943c:	4618      	mov	r0, r3
 800943e:	3738      	adds	r7, #56	; 0x38
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	e000ed04 	.word	0xe000ed04

08009448 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b090      	sub	sp, #64	; 0x40
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <xQueueGenericSendFromISR+0x3c>
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <xQueueGenericSendFromISR+0x40>
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <xQueueGenericSendFromISR+0x42>
 8009488:	2300      	movs	r3, #0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d103      	bne.n	80094b2 <xQueueGenericSendFromISR+0x6a>
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <xQueueGenericSendFromISR+0x6e>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <xQueueGenericSendFromISR+0x70>
 80094b6:	2300      	movs	r3, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	623b      	str	r3, [r7, #32]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094d2:	f002 f911 	bl	800b6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094d6:	f3ef 8211 	mrs	r2, BASEPRI
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	61fa      	str	r2, [r7, #28]
 80094ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d302      	bcc.n	8009504 <xQueueGenericSendFromISR+0xbc>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d12f      	bne.n	8009564 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800951a:	f000 fa35 	bl	8009988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800951e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d112      	bne.n	800954e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	d016      	beq.n	800955e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	3324      	adds	r3, #36	; 0x24
 8009534:	4618      	mov	r0, r3
 8009536:	f000 ffe7 	bl	800a508 <xTaskRemoveFromEventList>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00e      	beq.n	800955e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00b      	beq.n	800955e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e007      	b.n	800955e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800954e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009552:	3301      	adds	r3, #1
 8009554:	b2db      	uxtb	r3, r3
 8009556:	b25a      	sxtb	r2, r3
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800955e:	2301      	movs	r3, #1
 8009560:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009562:	e001      	b.n	8009568 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009572:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009576:	4618      	mov	r0, r3
 8009578:	3740      	adds	r7, #64	; 0x40
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08c      	sub	sp, #48	; 0x30
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800958c:	2300      	movs	r3, #0
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10a      	bne.n	80095b0 <xQueueReceive+0x30>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	623b      	str	r3, [r7, #32]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d103      	bne.n	80095be <xQueueReceive+0x3e>
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <xQueueReceive+0x42>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <xQueueReceive+0x44>
 80095c2:	2300      	movs	r3, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xQueueReceive+0x5e>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	61fb      	str	r3, [r7, #28]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095de:	f001 f953 	bl	800a888 <xTaskGetSchedulerState>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <xQueueReceive+0x6e>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <xQueueReceive+0x72>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <xQueueReceive+0x74>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <xQueueReceive+0x8e>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	61bb      	str	r3, [r7, #24]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800960e:	f001 ff91 	bl	800b534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01f      	beq.n	800965e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009622:	f000 fa1b 	bl	8009a5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	1e5a      	subs	r2, r3, #1
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00f      	beq.n	8009656 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	3310      	adds	r3, #16
 800963a:	4618      	mov	r0, r3
 800963c:	f000 ff64 	bl	800a508 <xTaskRemoveFromEventList>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d007      	beq.n	8009656 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009646:	4b3d      	ldr	r3, [pc, #244]	; (800973c <xQueueReceive+0x1bc>)
 8009648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009656:	f001 ff9d 	bl	800b594 <vPortExitCritical>
				return pdPASS;
 800965a:	2301      	movs	r3, #1
 800965c:	e069      	b.n	8009732 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d103      	bne.n	800966c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009664:	f001 ff96 	bl	800b594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009668:	2300      	movs	r3, #0
 800966a:	e062      	b.n	8009732 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d106      	bne.n	8009680 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	4618      	mov	r0, r3
 8009678:	f000 ffaa 	bl	800a5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009680:	f001 ff88 	bl	800b594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009684:	f000 fcfa 	bl	800a07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009688:	f001 ff54 	bl	800b534 <vPortEnterCritical>
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009692:	b25b      	sxtb	r3, r3
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d103      	bne.n	80096a2 <xQueueReceive+0x122>
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096a8:	b25b      	sxtb	r3, r3
 80096aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ae:	d103      	bne.n	80096b8 <xQueueReceive+0x138>
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096b8:	f001 ff6c 	bl	800b594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096bc:	1d3a      	adds	r2, r7, #4
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	4611      	mov	r1, r2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 ff99 	bl	800a5fc <xTaskCheckForTimeOut>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d123      	bne.n	8009718 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d2:	f000 fa3b 	bl	8009b4c <prvIsQueueEmpty>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d017      	beq.n	800970c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	3324      	adds	r3, #36	; 0x24
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 febf 	bl	800a468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ec:	f000 f9dc 	bl	8009aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096f0:	f000 fcd2 	bl	800a098 <xTaskResumeAll>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d189      	bne.n	800960e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096fa:	4b10      	ldr	r3, [pc, #64]	; (800973c <xQueueReceive+0x1bc>)
 80096fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	e780      	b.n	800960e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800970c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970e:	f000 f9cb 	bl	8009aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009712:	f000 fcc1 	bl	800a098 <xTaskResumeAll>
 8009716:	e77a      	b.n	800960e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800971a:	f000 f9c5 	bl	8009aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800971e:	f000 fcbb 	bl	800a098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009724:	f000 fa12 	bl	8009b4c <prvIsQueueEmpty>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	f43f af6f 	beq.w	800960e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009730:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009732:	4618      	mov	r0, r3
 8009734:	3730      	adds	r7, #48	; 0x30
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	e000ed04 	.word	0xe000ed04

08009740 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08e      	sub	sp, #56	; 0x38
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009752:	2300      	movs	r3, #0
 8009754:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	623b      	str	r3, [r7, #32]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61fb      	str	r3, [r7, #28]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009790:	f001 f87a 	bl	800a888 <xTaskGetSchedulerState>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <xQueueSemaphoreTake+0x60>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <xQueueSemaphoreTake+0x64>
 80097a0:	2301      	movs	r3, #1
 80097a2:	e000      	b.n	80097a6 <xQueueSemaphoreTake+0x66>
 80097a4:	2300      	movs	r3, #0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	61bb      	str	r3, [r7, #24]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097c0:	f001 feb8 	bl	800b534 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d024      	beq.n	800981a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	1e5a      	subs	r2, r3, #1
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80097e0:	f001 f9c8 	bl	800ab74 <pvTaskIncrementMutexHeldCount>
 80097e4:	4602      	mov	r2, r0
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00f      	beq.n	8009812 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	3310      	adds	r3, #16
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fe86 	bl	800a508 <xTaskRemoveFromEventList>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009802:	4b54      	ldr	r3, [pc, #336]	; (8009954 <xQueueSemaphoreTake+0x214>)
 8009804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009812:	f001 febf 	bl	800b594 <vPortExitCritical>
				return pdPASS;
 8009816:	2301      	movs	r3, #1
 8009818:	e097      	b.n	800994a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d111      	bne.n	8009844 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	617b      	str	r3, [r7, #20]
}
 8009838:	bf00      	nop
 800983a:	e7fe      	b.n	800983a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800983c:	f001 feaa 	bl	800b594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009840:	2300      	movs	r3, #0
 8009842:	e082      	b.n	800994a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009846:	2b00      	cmp	r3, #0
 8009848:	d106      	bne.n	8009858 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800984a:	f107 030c 	add.w	r3, r7, #12
 800984e:	4618      	mov	r0, r3
 8009850:	f000 febe 	bl	800a5d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009858:	f001 fe9c 	bl	800b594 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800985c:	f000 fc0e 	bl	800a07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009860:	f001 fe68 	bl	800b534 <vPortEnterCritical>
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800986a:	b25b      	sxtb	r3, r3
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009870:	d103      	bne.n	800987a <xQueueSemaphoreTake+0x13a>
 8009872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009880:	b25b      	sxtb	r3, r3
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009886:	d103      	bne.n	8009890 <xQueueSemaphoreTake+0x150>
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009890:	f001 fe80 	bl	800b594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009894:	463a      	mov	r2, r7
 8009896:	f107 030c 	add.w	r3, r7, #12
 800989a:	4611      	mov	r1, r2
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fead 	bl	800a5fc <xTaskCheckForTimeOut>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d132      	bne.n	800990e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098aa:	f000 f94f 	bl	8009b4c <prvIsQueueEmpty>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d026      	beq.n	8009902 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d109      	bne.n	80098d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80098bc:	f001 fe3a 	bl	800b534 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 fffd 	bl	800a8c4 <xTaskPriorityInherit>
 80098ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80098cc:	f001 fe62 	bl	800b594 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	3324      	adds	r3, #36	; 0x24
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	4611      	mov	r1, r2
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fdc5 	bl	800a468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e0:	f000 f8e2 	bl	8009aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098e4:	f000 fbd8 	bl	800a098 <xTaskResumeAll>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f47f af68 	bne.w	80097c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80098f0:	4b18      	ldr	r3, [pc, #96]	; (8009954 <xQueueSemaphoreTake+0x214>)
 80098f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	e75e      	b.n	80097c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009904:	f000 f8d0 	bl	8009aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009908:	f000 fbc6 	bl	800a098 <xTaskResumeAll>
 800990c:	e758      	b.n	80097c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800990e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009910:	f000 f8ca 	bl	8009aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009914:	f000 fbc0 	bl	800a098 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800991a:	f000 f917 	bl	8009b4c <prvIsQueueEmpty>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	f43f af4d 	beq.w	80097c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00d      	beq.n	8009948 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800992c:	f001 fe02 	bl	800b534 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009932:	f000 f811 	bl	8009958 <prvGetDisinheritPriorityAfterTimeout>
 8009936:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800993e:	4618      	mov	r0, r3
 8009940:	f001 f896 	bl	800aa70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009944:	f001 fe26 	bl	800b594 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009948:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800994a:	4618      	mov	r0, r3
 800994c:	3738      	adds	r7, #56	; 0x38
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e001      	b.n	800997a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800997a:	68fb      	ldr	r3, [r7, #12]
	}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009994:	2300      	movs	r3, #0
 8009996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10d      	bne.n	80099c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d14d      	bne.n	8009a4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 ffee 	bl	800a994 <xTaskPriorityDisinherit>
 80099b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	609a      	str	r2, [r3, #8]
 80099c0:	e043      	b.n	8009a4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d119      	bne.n	80099fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6858      	ldr	r0, [r3, #4]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d0:	461a      	mov	r2, r3
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	f002 fe40 	bl	800c658 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e0:	441a      	add	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d32b      	bcc.n	8009a4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	e026      	b.n	8009a4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	68d8      	ldr	r0, [r3, #12]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	461a      	mov	r2, r3
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	f002 fe26 	bl	800c658 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	425b      	negs	r3, r3
 8009a16:	441a      	add	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d207      	bcs.n	8009a38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	425b      	negs	r3, r3
 8009a32:	441a      	add	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d105      	bne.n	8009a4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a52:	697b      	ldr	r3, [r7, #20]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d018      	beq.n	8009aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	441a      	add	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d303      	bcc.n	8009a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68d9      	ldr	r1, [r3, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6838      	ldr	r0, [r7, #0]
 8009a9c:	f002 fddc 	bl	800c658 <memcpy>
	}
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ab0:	f001 fd40 	bl	800b534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009abc:	e011      	b.n	8009ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d012      	beq.n	8009aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3324      	adds	r3, #36	; 0x24
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fd1c 	bl	800a508 <xTaskRemoveFromEventList>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ad6:	f000 fdf3 	bl	800a6c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dce9      	bgt.n	8009abe <prvUnlockQueue+0x16>
 8009aea:	e000      	b.n	8009aee <prvUnlockQueue+0x46>
					break;
 8009aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	22ff      	movs	r2, #255	; 0xff
 8009af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009af6:	f001 fd4d 	bl	800b594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009afa:	f001 fd1b 	bl	800b534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b06:	e011      	b.n	8009b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d012      	beq.n	8009b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3310      	adds	r3, #16
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fcf7 	bl	800a508 <xTaskRemoveFromEventList>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b20:	f000 fdce 	bl	800a6c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	dce9      	bgt.n	8009b08 <prvUnlockQueue+0x60>
 8009b34:	e000      	b.n	8009b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	22ff      	movs	r2, #255	; 0xff
 8009b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b40:	f001 fd28 	bl	800b594 <vPortExitCritical>
}
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b54:	f001 fcee 	bl	800b534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	e001      	b.n	8009b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b6a:	f001 fd13 	bl	800b594 <vPortExitCritical>

	return xReturn;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b80:	f001 fcd8 	bl	800b534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d102      	bne.n	8009b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	e001      	b.n	8009b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b9a:	f001 fcfb 	bl	800b594 <vPortExitCritical>

	return xReturn;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
 8009bb6:	e014      	b.n	8009be2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bb8:	4a0f      	ldr	r2, [pc, #60]	; (8009bf8 <vQueueAddToRegistry+0x50>)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10b      	bne.n	8009bdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bc4:	490c      	ldr	r1, [pc, #48]	; (8009bf8 <vQueueAddToRegistry+0x50>)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bce:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <vQueueAddToRegistry+0x50>)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bda:	e006      	b.n	8009bea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b07      	cmp	r3, #7
 8009be6:	d9e7      	bls.n	8009bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000910 	.word	0x20000910

08009bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c0c:	f001 fc92 	bl	800b534 <vPortEnterCritical>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c16:	b25b      	sxtb	r3, r3
 8009c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1c:	d103      	bne.n	8009c26 <vQueueWaitForMessageRestricted+0x2a>
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c2c:	b25b      	sxtb	r3, r3
 8009c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c32:	d103      	bne.n	8009c3c <vQueueWaitForMessageRestricted+0x40>
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c3c:	f001 fcaa 	bl	800b594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	3324      	adds	r3, #36	; 0x24
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fc2d 	bl	800a4b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c56:	6978      	ldr	r0, [r7, #20]
 8009c58:	f7ff ff26 	bl	8009aa8 <prvUnlockQueue>
	}
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08e      	sub	sp, #56	; 0x38
 8009c68:	af04      	add	r7, sp, #16
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	623b      	str	r3, [r7, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xTaskCreateStatic+0x46>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	61fb      	str	r3, [r7, #28]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009caa:	2360      	movs	r3, #96	; 0x60
 8009cac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b60      	cmp	r3, #96	; 0x60
 8009cb2:	d00a      	beq.n	8009cca <xTaskCreateStatic+0x66>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	61bb      	str	r3, [r7, #24]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d01e      	beq.n	8009d10 <xTaskCreateStatic+0xac>
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d01b      	beq.n	8009d10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cea:	2300      	movs	r3, #0
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	f107 0314 	add.w	r3, r7, #20
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 f850 	bl	8009da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d0a:	f000 f8df 	bl	8009ecc <prvAddNewTaskToReadyList>
 8009d0e:	e001      	b.n	8009d14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d14:	697b      	ldr	r3, [r7, #20]
	}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3728      	adds	r7, #40	; 0x28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b08c      	sub	sp, #48	; 0x30
 8009d22:	af04      	add	r7, sp, #16
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	603b      	str	r3, [r7, #0]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d2e:	88fb      	ldrh	r3, [r7, #6]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fd20 	bl	800b778 <pvPortMalloc>
 8009d38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00e      	beq.n	8009d5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d40:	2060      	movs	r0, #96	; 0x60
 8009d42:	f001 fd19 	bl	800b778 <pvPortMalloc>
 8009d46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	631a      	str	r2, [r3, #48]	; 0x30
 8009d54:	e005      	b.n	8009d62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d56:	6978      	ldr	r0, [r7, #20]
 8009d58:	f001 fdda 	bl	800b910 <vPortFree>
 8009d5c:	e001      	b.n	8009d62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d017      	beq.n	8009d98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d70:	88fa      	ldrh	r2, [r7, #6]
 8009d72:	2300      	movs	r3, #0
 8009d74:	9303      	str	r3, [sp, #12]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	9302      	str	r3, [sp, #8]
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68b9      	ldr	r1, [r7, #8]
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 f80e 	bl	8009da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d8c:	69f8      	ldr	r0, [r7, #28]
 8009d8e:	f000 f89d 	bl	8009ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d92:	2301      	movs	r3, #1
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	e002      	b.n	8009d9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d98:	f04f 33ff 	mov.w	r3, #4294967295
 8009d9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3720      	adds	r7, #32
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	21a5      	movs	r1, #165	; 0xa5
 8009dc2:	f002 fc57 	bl	800c674 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f023 0307 	bic.w	r3, r3, #7
 8009dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	617b      	str	r3, [r7, #20]
}
 8009dfc:	bf00      	nop
 8009dfe:	e7fe      	b.n	8009dfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01f      	beq.n	8009e46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e012      	b.n	8009e32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	7819      	ldrb	r1, [r3, #0]
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	3334      	adds	r3, #52	; 0x34
 8009e1c:	460a      	mov	r2, r1
 8009e1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d006      	beq.n	8009e3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	61fb      	str	r3, [r7, #28]
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	2b0f      	cmp	r3, #15
 8009e36:	d9e9      	bls.n	8009e0c <prvInitialiseNewTask+0x64>
 8009e38:	e000      	b.n	8009e3c <prvInitialiseNewTask+0x94>
			{
				break;
 8009e3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e44:	e003      	b.n	8009e4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	2b37      	cmp	r3, #55	; 0x37
 8009e52:	d901      	bls.n	8009e58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e54:	2337      	movs	r3, #55	; 0x37
 8009e56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	2200      	movs	r2, #0
 8009e68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff f81a 	bl	8008ea8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	3318      	adds	r3, #24
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff f815 	bl	8008ea8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	2200      	movs	r2, #0
 8009e98:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	69b8      	ldr	r0, [r7, #24]
 8009eae:	f001 fa17 	bl	800b2e0 <pxPortInitialiseStack>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ec4:	bf00      	nop
 8009ec6:	3720      	adds	r7, #32
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ed4:	f001 fb2e 	bl	800b534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ed8:	4b2d      	ldr	r3, [pc, #180]	; (8009f90 <prvAddNewTaskToReadyList+0xc4>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	4a2c      	ldr	r2, [pc, #176]	; (8009f90 <prvAddNewTaskToReadyList+0xc4>)
 8009ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ee2:	4b2c      	ldr	r3, [pc, #176]	; (8009f94 <prvAddNewTaskToReadyList+0xc8>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d109      	bne.n	8009efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009eea:	4a2a      	ldr	r2, [pc, #168]	; (8009f94 <prvAddNewTaskToReadyList+0xc8>)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ef0:	4b27      	ldr	r3, [pc, #156]	; (8009f90 <prvAddNewTaskToReadyList+0xc4>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d110      	bne.n	8009f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ef8:	f000 fc08 	bl	800a70c <prvInitialiseTaskLists>
 8009efc:	e00d      	b.n	8009f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009efe:	4b26      	ldr	r3, [pc, #152]	; (8009f98 <prvAddNewTaskToReadyList+0xcc>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f06:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <prvAddNewTaskToReadyList+0xc8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d802      	bhi.n	8009f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f14:	4a1f      	ldr	r2, [pc, #124]	; (8009f94 <prvAddNewTaskToReadyList+0xc8>)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f1a:	4b20      	ldr	r3, [pc, #128]	; (8009f9c <prvAddNewTaskToReadyList+0xd0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	4a1e      	ldr	r2, [pc, #120]	; (8009f9c <prvAddNewTaskToReadyList+0xd0>)
 8009f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f24:	4b1d      	ldr	r3, [pc, #116]	; (8009f9c <prvAddNewTaskToReadyList+0xd0>)
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	4b1b      	ldr	r3, [pc, #108]	; (8009fa0 <prvAddNewTaskToReadyList+0xd4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d903      	bls.n	8009f40 <prvAddNewTaskToReadyList+0x74>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	4a18      	ldr	r2, [pc, #96]	; (8009fa0 <prvAddNewTaskToReadyList+0xd4>)
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4a15      	ldr	r2, [pc, #84]	; (8009fa4 <prvAddNewTaskToReadyList+0xd8>)
 8009f4e:	441a      	add	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f7fe ffb3 	bl	8008ec2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f5c:	f001 fb1a 	bl	800b594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f60:	4b0d      	ldr	r3, [pc, #52]	; (8009f98 <prvAddNewTaskToReadyList+0xcc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00e      	beq.n	8009f86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f68:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <prvAddNewTaskToReadyList+0xc8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d207      	bcs.n	8009f86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f76:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <prvAddNewTaskToReadyList+0xdc>)
 8009f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000e24 	.word	0x20000e24
 8009f94:	20000950 	.word	0x20000950
 8009f98:	20000e30 	.word	0x20000e30
 8009f9c:	20000e40 	.word	0x20000e40
 8009fa0:	20000e2c 	.word	0x20000e2c
 8009fa4:	20000954 	.word	0x20000954
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08a      	sub	sp, #40	; 0x28
 8009fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fba:	463a      	mov	r2, r7
 8009fbc:	1d39      	adds	r1, r7, #4
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe ff1c 	bl	8008e00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	9202      	str	r2, [sp, #8]
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	460a      	mov	r2, r1
 8009fda:	4922      	ldr	r1, [pc, #136]	; (800a064 <vTaskStartScheduler+0xb8>)
 8009fdc:	4822      	ldr	r0, [pc, #136]	; (800a068 <vTaskStartScheduler+0xbc>)
 8009fde:	f7ff fe41 	bl	8009c64 <xTaskCreateStatic>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	4a21      	ldr	r2, [pc, #132]	; (800a06c <vTaskStartScheduler+0xc0>)
 8009fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fe8:	4b20      	ldr	r3, [pc, #128]	; (800a06c <vTaskStartScheduler+0xc0>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e001      	b.n	8009ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d102      	bne.n	800a006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a000:	f000 fe20 	bl	800ac44 <xTimerCreateTimerTask>
 800a004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d118      	bne.n	800a03e <vTaskStartScheduler+0x92>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	613b      	str	r3, [r7, #16]
}
 800a01e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a020:	4b13      	ldr	r3, [pc, #76]	; (800a070 <vTaskStartScheduler+0xc4>)
 800a022:	f04f 32ff 	mov.w	r2, #4294967295
 800a026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a028:	4b12      	ldr	r3, [pc, #72]	; (800a074 <vTaskStartScheduler+0xc8>)
 800a02a:	2201      	movs	r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <vTaskStartScheduler+0xcc>)
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a034:	f7f6 f8ac 	bl	8000190 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a038:	f001 f9da 	bl	800b3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a03c:	e00e      	b.n	800a05c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d10a      	bne.n	800a05c <vTaskStartScheduler+0xb0>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60fb      	str	r3, [r7, #12]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <vTaskStartScheduler+0xae>
}
 800a05c:	bf00      	nop
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	0800c760 	.word	0x0800c760
 800a068:	0800a6d9 	.word	0x0800a6d9
 800a06c:	20000e48 	.word	0x20000e48
 800a070:	20000e44 	.word	0x20000e44
 800a074:	20000e30 	.word	0x20000e30
 800a078:	20000e28 	.word	0x20000e28

0800a07c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a080:	4b04      	ldr	r3, [pc, #16]	; (800a094 <vTaskSuspendAll+0x18>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3301      	adds	r3, #1
 800a086:	4a03      	ldr	r2, [pc, #12]	; (800a094 <vTaskSuspendAll+0x18>)
 800a088:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a08a:	bf00      	nop
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	20000e4c 	.word	0x20000e4c

0800a098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0a6:	4b42      	ldr	r3, [pc, #264]	; (800a1b0 <xTaskResumeAll+0x118>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	603b      	str	r3, [r7, #0]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0c4:	f001 fa36 	bl	800b534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0c8:	4b39      	ldr	r3, [pc, #228]	; (800a1b0 <xTaskResumeAll+0x118>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	4a38      	ldr	r2, [pc, #224]	; (800a1b0 <xTaskResumeAll+0x118>)
 800a0d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0d2:	4b37      	ldr	r3, [pc, #220]	; (800a1b0 <xTaskResumeAll+0x118>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d162      	bne.n	800a1a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0da:	4b36      	ldr	r3, [pc, #216]	; (800a1b4 <xTaskResumeAll+0x11c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d05e      	beq.n	800a1a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0e2:	e02f      	b.n	800a144 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e4:	4b34      	ldr	r3, [pc, #208]	; (800a1b8 <xTaskResumeAll+0x120>)
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3318      	adds	r3, #24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe ff43 	bl	8008f7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe ff3e 	bl	8008f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4b2d      	ldr	r3, [pc, #180]	; (800a1bc <xTaskResumeAll+0x124>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d903      	bls.n	800a114 <xTaskResumeAll+0x7c>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	4a2a      	ldr	r2, [pc, #168]	; (800a1bc <xTaskResumeAll+0x124>)
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4a27      	ldr	r2, [pc, #156]	; (800a1c0 <xTaskResumeAll+0x128>)
 800a122:	441a      	add	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f7fe fec9 	bl	8008ec2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a134:	4b23      	ldr	r3, [pc, #140]	; (800a1c4 <xTaskResumeAll+0x12c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d302      	bcc.n	800a144 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a13e:	4b22      	ldr	r3, [pc, #136]	; (800a1c8 <xTaskResumeAll+0x130>)
 800a140:	2201      	movs	r2, #1
 800a142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a144:	4b1c      	ldr	r3, [pc, #112]	; (800a1b8 <xTaskResumeAll+0x120>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1cb      	bne.n	800a0e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a152:	f000 fb79 	bl	800a848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a156:	4b1d      	ldr	r3, [pc, #116]	; (800a1cc <xTaskResumeAll+0x134>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a162:	f000 f847 	bl	800a1f4 <xTaskIncrementTick>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a16c:	4b16      	ldr	r3, [pc, #88]	; (800a1c8 <xTaskResumeAll+0x130>)
 800a16e:	2201      	movs	r2, #1
 800a170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3b01      	subs	r3, #1
 800a176:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1f1      	bne.n	800a162 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a17e:	4b13      	ldr	r3, [pc, #76]	; (800a1cc <xTaskResumeAll+0x134>)
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a184:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <xTaskResumeAll+0x130>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d009      	beq.n	800a1a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a190:	4b0f      	ldr	r3, [pc, #60]	; (800a1d0 <xTaskResumeAll+0x138>)
 800a192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1a0:	f001 f9f8 	bl	800b594 <vPortExitCritical>

	return xAlreadyYielded;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000e4c 	.word	0x20000e4c
 800a1b4:	20000e24 	.word	0x20000e24
 800a1b8:	20000de4 	.word	0x20000de4
 800a1bc:	20000e2c 	.word	0x20000e2c
 800a1c0:	20000954 	.word	0x20000954
 800a1c4:	20000950 	.word	0x20000950
 800a1c8:	20000e38 	.word	0x20000e38
 800a1cc:	20000e34 	.word	0x20000e34
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1da:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <xTaskGetTickCount+0x1c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1e0:	687b      	ldr	r3, [r7, #4]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20000e28 	.word	0x20000e28

0800a1f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1fe:	4b53      	ldr	r3, [pc, #332]	; (800a34c <xTaskIncrementTick+0x158>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f040 8095 	bne.w	800a332 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a208:	4b51      	ldr	r3, [pc, #324]	; (800a350 <xTaskIncrementTick+0x15c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3301      	adds	r3, #1
 800a20e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a210:	4a4f      	ldr	r2, [pc, #316]	; (800a350 <xTaskIncrementTick+0x15c>)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d120      	bne.n	800a25e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a21c:	4b4d      	ldr	r3, [pc, #308]	; (800a354 <xTaskIncrementTick+0x160>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <xTaskIncrementTick+0x48>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	603b      	str	r3, [r7, #0]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <xTaskIncrementTick+0x46>
 800a23c:	4b45      	ldr	r3, [pc, #276]	; (800a354 <xTaskIncrementTick+0x160>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	4b45      	ldr	r3, [pc, #276]	; (800a358 <xTaskIncrementTick+0x164>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a43      	ldr	r2, [pc, #268]	; (800a354 <xTaskIncrementTick+0x160>)
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	4a43      	ldr	r2, [pc, #268]	; (800a358 <xTaskIncrementTick+0x164>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	4b42      	ldr	r3, [pc, #264]	; (800a35c <xTaskIncrementTick+0x168>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3301      	adds	r3, #1
 800a256:	4a41      	ldr	r2, [pc, #260]	; (800a35c <xTaskIncrementTick+0x168>)
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	f000 faf5 	bl	800a848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a25e:	4b40      	ldr	r3, [pc, #256]	; (800a360 <xTaskIncrementTick+0x16c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	429a      	cmp	r2, r3
 800a266:	d349      	bcc.n	800a2fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a268:	4b3a      	ldr	r3, [pc, #232]	; (800a354 <xTaskIncrementTick+0x160>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a272:	4b3b      	ldr	r3, [pc, #236]	; (800a360 <xTaskIncrementTick+0x16c>)
 800a274:	f04f 32ff 	mov.w	r2, #4294967295
 800a278:	601a      	str	r2, [r3, #0]
					break;
 800a27a:	e03f      	b.n	800a2fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a27c:	4b35      	ldr	r3, [pc, #212]	; (800a354 <xTaskIncrementTick+0x160>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	d203      	bcs.n	800a29c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a294:	4a32      	ldr	r2, [pc, #200]	; (800a360 <xTaskIncrementTick+0x16c>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a29a:	e02f      	b.n	800a2fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe fe6b 	bl	8008f7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d004      	beq.n	800a2b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	3318      	adds	r3, #24
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fe62 	bl	8008f7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4b29      	ldr	r3, [pc, #164]	; (800a364 <xTaskIncrementTick+0x170>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d903      	bls.n	800a2cc <xTaskIncrementTick+0xd8>
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	4a26      	ldr	r2, [pc, #152]	; (800a364 <xTaskIncrementTick+0x170>)
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4a23      	ldr	r2, [pc, #140]	; (800a368 <xTaskIncrementTick+0x174>)
 800a2da:	441a      	add	r2, r3
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f7fe fded 	bl	8008ec2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ec:	4b1f      	ldr	r3, [pc, #124]	; (800a36c <xTaskIncrementTick+0x178>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d3b8      	bcc.n	800a268 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2fa:	e7b5      	b.n	800a268 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2fc:	4b1b      	ldr	r3, [pc, #108]	; (800a36c <xTaskIncrementTick+0x178>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	4919      	ldr	r1, [pc, #100]	; (800a368 <xTaskIncrementTick+0x174>)
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d901      	bls.n	800a318 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a314:	2301      	movs	r3, #1
 800a316:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800a318:	4b15      	ldr	r3, [pc, #84]	; (800a370 <xTaskIncrementTick+0x17c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800a320:	f7f5 ff4c 	bl	80001bc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a324:	4b13      	ldr	r3, [pc, #76]	; (800a374 <xTaskIncrementTick+0x180>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d009      	beq.n	800a340 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	e006      	b.n	800a340 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a332:	4b0f      	ldr	r3, [pc, #60]	; (800a370 <xTaskIncrementTick+0x17c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	4a0d      	ldr	r2, [pc, #52]	; (800a370 <xTaskIncrementTick+0x17c>)
 800a33a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800a33c:	f7f5 ff3e 	bl	80001bc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800a340:	697b      	ldr	r3, [r7, #20]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000e4c 	.word	0x20000e4c
 800a350:	20000e28 	.word	0x20000e28
 800a354:	20000ddc 	.word	0x20000ddc
 800a358:	20000de0 	.word	0x20000de0
 800a35c:	20000e3c 	.word	0x20000e3c
 800a360:	20000e44 	.word	0x20000e44
 800a364:	20000e2c 	.word	0x20000e2c
 800a368:	20000954 	.word	0x20000954
 800a36c:	20000950 	.word	0x20000950
 800a370:	20000e34 	.word	0x20000e34
 800a374:	20000e38 	.word	0x20000e38

0800a378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a37e:	4b33      	ldr	r3, [pc, #204]	; (800a44c <vTaskSwitchContext+0xd4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a386:	4b32      	ldr	r3, [pc, #200]	; (800a450 <vTaskSwitchContext+0xd8>)
 800a388:	2201      	movs	r2, #1
 800a38a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a38c:	e05a      	b.n	800a444 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800a38e:	4b30      	ldr	r3, [pc, #192]	; (800a450 <vTaskSwitchContext+0xd8>)
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a394:	f7f5 ff03 	bl	800019e <getRunTimeCounterValue>
 800a398:	4603      	mov	r3, r0
 800a39a:	4a2e      	ldr	r2, [pc, #184]	; (800a454 <vTaskSwitchContext+0xdc>)
 800a39c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a39e:	4b2d      	ldr	r3, [pc, #180]	; (800a454 <vTaskSwitchContext+0xdc>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b2d      	ldr	r3, [pc, #180]	; (800a458 <vTaskSwitchContext+0xe0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d909      	bls.n	800a3be <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a3aa:	4b2c      	ldr	r3, [pc, #176]	; (800a45c <vTaskSwitchContext+0xe4>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a3b0:	4a28      	ldr	r2, [pc, #160]	; (800a454 <vTaskSwitchContext+0xdc>)
 800a3b2:	6810      	ldr	r0, [r2, #0]
 800a3b4:	4a28      	ldr	r2, [pc, #160]	; (800a458 <vTaskSwitchContext+0xe0>)
 800a3b6:	6812      	ldr	r2, [r2, #0]
 800a3b8:	1a82      	subs	r2, r0, r2
 800a3ba:	440a      	add	r2, r1
 800a3bc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a3be:	4b25      	ldr	r3, [pc, #148]	; (800a454 <vTaskSwitchContext+0xdc>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a25      	ldr	r2, [pc, #148]	; (800a458 <vTaskSwitchContext+0xe0>)
 800a3c4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c6:	4b26      	ldr	r3, [pc, #152]	; (800a460 <vTaskSwitchContext+0xe8>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	e010      	b.n	800a3f0 <vTaskSwitchContext+0x78>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <vTaskSwitchContext+0x72>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	607b      	str	r3, [r7, #4]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <vTaskSwitchContext+0x70>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	491c      	ldr	r1, [pc, #112]	; (800a464 <vTaskSwitchContext+0xec>)
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	440b      	add	r3, r1
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0e4      	beq.n	800a3ce <vTaskSwitchContext+0x56>
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4a15      	ldr	r2, [pc, #84]	; (800a464 <vTaskSwitchContext+0xec>)
 800a410:	4413      	add	r3, r2
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	605a      	str	r2, [r3, #4]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	3308      	adds	r3, #8
 800a426:	429a      	cmp	r2, r3
 800a428:	d104      	bne.n	800a434 <vTaskSwitchContext+0xbc>
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	605a      	str	r2, [r3, #4]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	4a08      	ldr	r2, [pc, #32]	; (800a45c <vTaskSwitchContext+0xe4>)
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	4a08      	ldr	r2, [pc, #32]	; (800a460 <vTaskSwitchContext+0xe8>)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6013      	str	r3, [r2, #0]
}
 800a444:	bf00      	nop
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	20000e4c 	.word	0x20000e4c
 800a450:	20000e38 	.word	0x20000e38
 800a454:	20000e54 	.word	0x20000e54
 800a458:	20000e50 	.word	0x20000e50
 800a45c:	20000950 	.word	0x20000950
 800a460:	20000e2c 	.word	0x20000e2c
 800a464:	20000954 	.word	0x20000954

0800a468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60fb      	str	r3, [r7, #12]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a48e:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <vTaskPlaceOnEventList+0x44>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3318      	adds	r3, #24
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe fd37 	bl	8008f0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a49c:	2101      	movs	r1, #1
 800a49e:	6838      	ldr	r0, [r7, #0]
 800a4a0:	f000 fb7c 	bl	800ab9c <prvAddCurrentTaskToDelayedList>
}
 800a4a4:	bf00      	nop
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20000950 	.word	0x20000950

0800a4b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	617b      	str	r3, [r7, #20]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4d8:	4b0a      	ldr	r3, [pc, #40]	; (800a504 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3318      	adds	r3, #24
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7fe fcee 	bl	8008ec2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	68b8      	ldr	r0, [r7, #8]
 800a4f6:	f000 fb51 	bl	800ab9c <prvAddCurrentTaskToDelayedList>
	}
 800a4fa:	bf00      	nop
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000950 	.word	0x20000950

0800a508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60fb      	str	r3, [r7, #12]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	3318      	adds	r3, #24
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fd1f 	bl	8008f7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a53e:	4b1e      	ldr	r3, [pc, #120]	; (800a5b8 <xTaskRemoveFromEventList+0xb0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d11d      	bne.n	800a582 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	3304      	adds	r3, #4
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fd16 	bl	8008f7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	4b19      	ldr	r3, [pc, #100]	; (800a5bc <xTaskRemoveFromEventList+0xb4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d903      	bls.n	800a564 <xTaskRemoveFromEventList+0x5c>
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	4a16      	ldr	r2, [pc, #88]	; (800a5bc <xTaskRemoveFromEventList+0xb4>)
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4a13      	ldr	r2, [pc, #76]	; (800a5c0 <xTaskRemoveFromEventList+0xb8>)
 800a572:	441a      	add	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	3304      	adds	r3, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f7fe fca1 	bl	8008ec2 <vListInsertEnd>
 800a580:	e005      	b.n	800a58e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	3318      	adds	r3, #24
 800a586:	4619      	mov	r1, r3
 800a588:	480e      	ldr	r0, [pc, #56]	; (800a5c4 <xTaskRemoveFromEventList+0xbc>)
 800a58a:	f7fe fc9a 	bl	8008ec2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a592:	4b0d      	ldr	r3, [pc, #52]	; (800a5c8 <xTaskRemoveFromEventList+0xc0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	429a      	cmp	r2, r3
 800a59a:	d905      	bls.n	800a5a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	; (800a5cc <xTaskRemoveFromEventList+0xc4>)
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e001      	b.n	800a5ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5ac:	697b      	ldr	r3, [r7, #20]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000e4c 	.word	0x20000e4c
 800a5bc:	20000e2c 	.word	0x20000e2c
 800a5c0:	20000954 	.word	0x20000954
 800a5c4:	20000de4 	.word	0x20000de4
 800a5c8:	20000950 	.word	0x20000950
 800a5cc:	20000e38 	.word	0x20000e38

0800a5d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5d8:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <vTaskInternalSetTimeOutState+0x24>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5e0:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <vTaskInternalSetTimeOutState+0x28>)
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	605a      	str	r2, [r3, #4]
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	20000e3c 	.word	0x20000e3c
 800a5f8:	20000e28 	.word	0x20000e28

0800a5fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	613b      	str	r3, [r7, #16]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60fb      	str	r3, [r7, #12]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a63e:	f000 ff79 	bl	800b534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a642:	4b1d      	ldr	r3, [pc, #116]	; (800a6b8 <xTaskCheckForTimeOut+0xbc>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65a:	d102      	bne.n	800a662 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e023      	b.n	800a6aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <xTaskCheckForTimeOut+0xc0>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d007      	beq.n	800a67e <xTaskCheckForTimeOut+0x82>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	429a      	cmp	r2, r3
 800a676:	d302      	bcc.n	800a67e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	61fb      	str	r3, [r7, #28]
 800a67c:	e015      	b.n	800a6aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	429a      	cmp	r2, r3
 800a686:	d20b      	bcs.n	800a6a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff ff9b 	bl	800a5d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	61fb      	str	r3, [r7, #28]
 800a69e:	e004      	b.n	800a6aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6aa:	f000 ff73 	bl	800b594 <vPortExitCritical>

	return xReturn;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	20000e28 	.word	0x20000e28
 800a6bc:	20000e3c 	.word	0x20000e3c

0800a6c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6c4:	4b03      	ldr	r3, [pc, #12]	; (800a6d4 <vTaskMissedYield+0x14>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
}
 800a6ca:	bf00      	nop
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	20000e38 	.word	0x20000e38

0800a6d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6e0:	f000 f854 	bl	800a78c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <prvIdleTask+0x2c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d907      	bls.n	800a6fc <prvIdleTask+0x24>
			{
				taskYIELD();
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <prvIdleTask+0x30>)
 800a6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a6fc:	f7f5 fd57 	bl	80001ae <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a700:	e7ee      	b.n	800a6e0 <prvIdleTask+0x8>
 800a702:	bf00      	nop
 800a704:	20000954 	.word	0x20000954
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a712:	2300      	movs	r3, #0
 800a714:	607b      	str	r3, [r7, #4]
 800a716:	e00c      	b.n	800a732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4a12      	ldr	r2, [pc, #72]	; (800a76c <prvInitialiseTaskLists+0x60>)
 800a724:	4413      	add	r3, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fb9e 	bl	8008e68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3301      	adds	r3, #1
 800a730:	607b      	str	r3, [r7, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b37      	cmp	r3, #55	; 0x37
 800a736:	d9ef      	bls.n	800a718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a738:	480d      	ldr	r0, [pc, #52]	; (800a770 <prvInitialiseTaskLists+0x64>)
 800a73a:	f7fe fb95 	bl	8008e68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a73e:	480d      	ldr	r0, [pc, #52]	; (800a774 <prvInitialiseTaskLists+0x68>)
 800a740:	f7fe fb92 	bl	8008e68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a744:	480c      	ldr	r0, [pc, #48]	; (800a778 <prvInitialiseTaskLists+0x6c>)
 800a746:	f7fe fb8f 	bl	8008e68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a74a:	480c      	ldr	r0, [pc, #48]	; (800a77c <prvInitialiseTaskLists+0x70>)
 800a74c:	f7fe fb8c 	bl	8008e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a750:	480b      	ldr	r0, [pc, #44]	; (800a780 <prvInitialiseTaskLists+0x74>)
 800a752:	f7fe fb89 	bl	8008e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a756:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <prvInitialiseTaskLists+0x78>)
 800a758:	4a05      	ldr	r2, [pc, #20]	; (800a770 <prvInitialiseTaskLists+0x64>)
 800a75a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <prvInitialiseTaskLists+0x7c>)
 800a75e:	4a05      	ldr	r2, [pc, #20]	; (800a774 <prvInitialiseTaskLists+0x68>)
 800a760:	601a      	str	r2, [r3, #0]
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000954 	.word	0x20000954
 800a770:	20000db4 	.word	0x20000db4
 800a774:	20000dc8 	.word	0x20000dc8
 800a778:	20000de4 	.word	0x20000de4
 800a77c:	20000df8 	.word	0x20000df8
 800a780:	20000e10 	.word	0x20000e10
 800a784:	20000ddc 	.word	0x20000ddc
 800a788:	20000de0 	.word	0x20000de0

0800a78c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a792:	e019      	b.n	800a7c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a794:	f000 fece 	bl	800b534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a798:	4b10      	ldr	r3, [pc, #64]	; (800a7dc <prvCheckTasksWaitingTermination+0x50>)
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fbe9 	bl	8008f7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <prvCheckTasksWaitingTermination+0x54>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	4a0b      	ldr	r2, [pc, #44]	; (800a7e0 <prvCheckTasksWaitingTermination+0x54>)
 800a7b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7b4:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <prvCheckTasksWaitingTermination+0x58>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	4a0a      	ldr	r2, [pc, #40]	; (800a7e4 <prvCheckTasksWaitingTermination+0x58>)
 800a7bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7be:	f000 fee9 	bl	800b594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f810 	bl	800a7e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7c8:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <prvCheckTasksWaitingTermination+0x58>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e1      	bne.n	800a794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000df8 	.word	0x20000df8
 800a7e0:	20000e24 	.word	0x20000e24
 800a7e4:	20000e0c 	.word	0x20000e0c

0800a7e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d108      	bne.n	800a80c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fe:	4618      	mov	r0, r3
 800a800:	f001 f886 	bl	800b910 <vPortFree>
				vPortFree( pxTCB );
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f001 f883 	bl	800b910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a80a:	e018      	b.n	800a83e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a812:	2b01      	cmp	r3, #1
 800a814:	d103      	bne.n	800a81e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 f87a 	bl	800b910 <vPortFree>
	}
 800a81c:	e00f      	b.n	800a83e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a824:	2b02      	cmp	r3, #2
 800a826:	d00a      	beq.n	800a83e <prvDeleteTCB+0x56>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	60fb      	str	r3, [r7, #12]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <prvDeleteTCB+0x54>
	}
 800a83e:	bf00      	nop
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a84e:	4b0c      	ldr	r3, [pc, #48]	; (800a880 <prvResetNextTaskUnblockTime+0x38>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d104      	bne.n	800a862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a858:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <prvResetNextTaskUnblockTime+0x3c>)
 800a85a:	f04f 32ff 	mov.w	r2, #4294967295
 800a85e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a860:	e008      	b.n	800a874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a862:	4b07      	ldr	r3, [pc, #28]	; (800a880 <prvResetNextTaskUnblockTime+0x38>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	4a04      	ldr	r2, [pc, #16]	; (800a884 <prvResetNextTaskUnblockTime+0x3c>)
 800a872:	6013      	str	r3, [r2, #0]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20000ddc 	.word	0x20000ddc
 800a884:	20000e44 	.word	0x20000e44

0800a888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a88e:	4b0b      	ldr	r3, [pc, #44]	; (800a8bc <xTaskGetSchedulerState+0x34>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d102      	bne.n	800a89c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a896:	2301      	movs	r3, #1
 800a898:	607b      	str	r3, [r7, #4]
 800a89a:	e008      	b.n	800a8ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a89c:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <xTaskGetSchedulerState+0x38>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	607b      	str	r3, [r7, #4]
 800a8a8:	e001      	b.n	800a8ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8ae:	687b      	ldr	r3, [r7, #4]
	}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	20000e30 	.word	0x20000e30
 800a8c0:	20000e4c 	.word	0x20000e4c

0800a8c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d051      	beq.n	800a97e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8de:	4b2a      	ldr	r3, [pc, #168]	; (800a988 <xTaskPriorityInherit+0xc4>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d241      	bcs.n	800a96c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	db06      	blt.n	800a8fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8f0:	4b25      	ldr	r3, [pc, #148]	; (800a988 <xTaskPriorityInherit+0xc4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	6959      	ldr	r1, [r3, #20]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a1f      	ldr	r2, [pc, #124]	; (800a98c <xTaskPriorityInherit+0xc8>)
 800a910:	4413      	add	r3, r2
 800a912:	4299      	cmp	r1, r3
 800a914:	d122      	bne.n	800a95c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	3304      	adds	r3, #4
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fb2e 	bl	8008f7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a920:	4b19      	ldr	r3, [pc, #100]	; (800a988 <xTaskPriorityInherit+0xc4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92e:	4b18      	ldr	r3, [pc, #96]	; (800a990 <xTaskPriorityInherit+0xcc>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	d903      	bls.n	800a93e <xTaskPriorityInherit+0x7a>
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	4a15      	ldr	r2, [pc, #84]	; (800a990 <xTaskPriorityInherit+0xcc>)
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4a10      	ldr	r2, [pc, #64]	; (800a98c <xTaskPriorityInherit+0xc8>)
 800a94c:	441a      	add	r2, r3
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	3304      	adds	r3, #4
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7fe fab4 	bl	8008ec2 <vListInsertEnd>
 800a95a:	e004      	b.n	800a966 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <xTaskPriorityInherit+0xc4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a966:	2301      	movs	r3, #1
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	e008      	b.n	800a97e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <xTaskPriorityInherit+0xc4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	429a      	cmp	r2, r3
 800a978:	d201      	bcs.n	800a97e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a97a:	2301      	movs	r3, #1
 800a97c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a97e:	68fb      	ldr	r3, [r7, #12]
	}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20000950 	.word	0x20000950
 800a98c:	20000954 	.word	0x20000954
 800a990:	20000e2c 	.word	0x20000e2c

0800a994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d056      	beq.n	800aa58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9aa:	4b2e      	ldr	r3, [pc, #184]	; (800aa64 <xTaskPriorityDisinherit+0xd0>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d00a      	beq.n	800a9ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	60fb      	str	r3, [r7, #12]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	60bb      	str	r3, [r7, #8]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d02c      	beq.n	800aa58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d128      	bne.n	800aa58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fab6 	bl	8008f7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa28:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <xTaskPriorityDisinherit+0xd4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d903      	bls.n	800aa38 <xTaskPriorityDisinherit+0xa4>
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	4a0c      	ldr	r2, [pc, #48]	; (800aa68 <xTaskPriorityDisinherit+0xd4>)
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4a09      	ldr	r2, [pc, #36]	; (800aa6c <xTaskPriorityDisinherit+0xd8>)
 800aa46:	441a      	add	r2, r3
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f7fe fa37 	bl	8008ec2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa54:	2301      	movs	r3, #1
 800aa56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa58:	697b      	ldr	r3, [r7, #20]
	}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20000950 	.word	0x20000950
 800aa68:	20000e2c 	.word	0x20000e2c
 800aa6c:	20000954 	.word	0x20000954

0800aa70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d06a      	beq.n	800ab5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d902      	bls.n	800aab6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	61fb      	str	r3, [r7, #28]
 800aab4:	e002      	b.n	800aabc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d04b      	beq.n	800ab5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d146      	bne.n	800ab5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aad0:	4b25      	ldr	r3, [pc, #148]	; (800ab68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d10a      	bne.n	800aaf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	60bb      	str	r3, [r7, #8]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	db04      	blt.n	800ab0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	6959      	ldr	r1, [r3, #20]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4a13      	ldr	r2, [pc, #76]	; (800ab6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab1e:	4413      	add	r3, r2
 800ab20:	4299      	cmp	r1, r3
 800ab22:	d11c      	bne.n	800ab5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fa27 	bl	8008f7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab32:	4b0f      	ldr	r3, [pc, #60]	; (800ab70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d903      	bls.n	800ab42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	4a0c      	ldr	r2, [pc, #48]	; (800ab70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4a07      	ldr	r2, [pc, #28]	; (800ab6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab50:	441a      	add	r2, r3
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	3304      	adds	r3, #4
 800ab56:	4619      	mov	r1, r3
 800ab58:	4610      	mov	r0, r2
 800ab5a:	f7fe f9b2 	bl	8008ec2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab5e:	bf00      	nop
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20000950 	.word	0x20000950
 800ab6c:	20000954 	.word	0x20000954
 800ab70:	20000e2c 	.word	0x20000e2c

0800ab74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab78:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab80:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab86:	3201      	adds	r2, #1
 800ab88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ab8a:	4b03      	ldr	r3, [pc, #12]	; (800ab98 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
	}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20000950 	.word	0x20000950

0800ab9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aba6:	4b21      	ldr	r3, [pc, #132]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x90>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abac:	4b20      	ldr	r3, [pc, #128]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3304      	adds	r3, #4
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe f9e2 	bl	8008f7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbe:	d10a      	bne.n	800abd6 <prvAddCurrentTaskToDelayedList+0x3a>
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abc6:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3304      	adds	r3, #4
 800abcc:	4619      	mov	r1, r3
 800abce:	4819      	ldr	r0, [pc, #100]	; (800ac34 <prvAddCurrentTaskToDelayedList+0x98>)
 800abd0:	f7fe f977 	bl	8008ec2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abd4:	e026      	b.n	800ac24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4413      	add	r3, r2
 800abdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abde:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	429a      	cmp	r2, r3
 800abec:	d209      	bcs.n	800ac02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abee:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fe f985 	bl	8008f0a <vListInsert>
}
 800ac00:	e010      	b.n	800ac24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac02:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fe f97b 	bl	8008f0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d202      	bcs.n	800ac24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac1e:	4a08      	ldr	r2, [pc, #32]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	6013      	str	r3, [r2, #0]
}
 800ac24:	bf00      	nop
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20000e28 	.word	0x20000e28
 800ac30:	20000950 	.word	0x20000950
 800ac34:	20000e10 	.word	0x20000e10
 800ac38:	20000de0 	.word	0x20000de0
 800ac3c:	20000ddc 	.word	0x20000ddc
 800ac40:	20000e44 	.word	0x20000e44

0800ac44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08a      	sub	sp, #40	; 0x28
 800ac48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac4e:	f000 fb07 	bl	800b260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac52:	4b1c      	ldr	r3, [pc, #112]	; (800acc4 <xTimerCreateTimerTask+0x80>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d021      	beq.n	800ac9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac62:	1d3a      	adds	r2, r7, #4
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe f8e1 	bl	8008e34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	9202      	str	r2, [sp, #8]
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	2300      	movs	r3, #0
 800ac82:	460a      	mov	r2, r1
 800ac84:	4910      	ldr	r1, [pc, #64]	; (800acc8 <xTimerCreateTimerTask+0x84>)
 800ac86:	4811      	ldr	r0, [pc, #68]	; (800accc <xTimerCreateTimerTask+0x88>)
 800ac88:	f7fe ffec 	bl	8009c64 <xTaskCreateStatic>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <xTimerCreateTimerTask+0x8c>)
 800ac90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac92:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <xTimerCreateTimerTask+0x8c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	613b      	str	r3, [r7, #16]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800acba:	697b      	ldr	r3, [r7, #20]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000e88 	.word	0x20000e88
 800acc8:	0800c768 	.word	0x0800c768
 800accc:	0800ae09 	.word	0x0800ae09
 800acd0:	20000e8c 	.word	0x20000e8c

0800acd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xTimerGenericCommand+0x2e>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	623b      	str	r3, [r7, #32]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad02:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d02a      	beq.n	800ad60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	dc18      	bgt.n	800ad4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad1c:	f7ff fdb4 	bl	800a888 <xTaskGetSchedulerState>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d109      	bne.n	800ad3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f107 0110 	add.w	r1, r7, #16
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad32:	f7fe fa8b 	bl	800924c <xQueueGenericSend>
 800ad36:	6278      	str	r0, [r7, #36]	; 0x24
 800ad38:	e012      	b.n	800ad60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	f107 0110 	add.w	r1, r7, #16
 800ad42:	2300      	movs	r3, #0
 800ad44:	2200      	movs	r2, #0
 800ad46:	f7fe fa81 	bl	800924c <xQueueGenericSend>
 800ad4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ad4c:	e008      	b.n	800ad60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad4e:	4b07      	ldr	r3, [pc, #28]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	f107 0110 	add.w	r1, r7, #16
 800ad56:	2300      	movs	r3, #0
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	f7fe fb75 	bl	8009448 <xQueueGenericSendFromISR>
 800ad5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3728      	adds	r7, #40	; 0x28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000e88 	.word	0x20000e88

0800ad70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7a:	4b22      	ldr	r3, [pc, #136]	; (800ae04 <prvProcessExpiredTimer+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe f8f7 	bl	8008f7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d022      	beq.n	800ade2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	699a      	ldr	r2, [r3, #24]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	18d1      	adds	r1, r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	6978      	ldr	r0, [r7, #20]
 800adaa:	f000 f8d1 	bl	800af50 <prvInsertTimerInActiveList>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01f      	beq.n	800adf4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adb4:	2300      	movs	r3, #0
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	2300      	movs	r3, #0
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	2100      	movs	r1, #0
 800adbe:	6978      	ldr	r0, [r7, #20]
 800adc0:	f7ff ff88 	bl	800acd4 <xTimerGenericCommand>
 800adc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d113      	bne.n	800adf4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	60fb      	str	r3, [r7, #12]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade8:	f023 0301 	bic.w	r3, r3, #1
 800adec:	b2da      	uxtb	r2, r3
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	6978      	ldr	r0, [r7, #20]
 800adfa:	4798      	blx	r3
}
 800adfc:	bf00      	nop
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	20000e80 	.word	0x20000e80

0800ae08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 f857 	bl	800aec8 <prvGetNextExpireTime>
 800ae1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 f803 	bl	800ae2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae26:	f000 f8d5 	bl	800afd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae2a:	e7f1      	b.n	800ae10 <prvTimerTask+0x8>

0800ae2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae36:	f7ff f921 	bl	800a07c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f866 	bl	800af10 <prvSampleTimeNow>
 800ae44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d130      	bne.n	800aeae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <prvProcessTimerOrBlockTask+0x3c>
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d806      	bhi.n	800ae68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae5a:	f7ff f91d 	bl	800a098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ff85 	bl	800ad70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae66:	e024      	b.n	800aeb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d008      	beq.n	800ae80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae6e:	4b13      	ldr	r3, [pc, #76]	; (800aebc <prvProcessTimerOrBlockTask+0x90>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <prvProcessTimerOrBlockTask+0x50>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e000      	b.n	800ae7e <prvProcessTimerOrBlockTask+0x52>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <prvProcessTimerOrBlockTask+0x94>)
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f7fe feb5 	bl	8009bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae92:	f7ff f901 	bl	800a098 <xTaskResumeAll>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <prvProcessTimerOrBlockTask+0x98>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	f3bf 8f6f 	isb	sy
}
 800aeac:	e001      	b.n	800aeb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aeae:	f7ff f8f3 	bl	800a098 <xTaskResumeAll>
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20000e84 	.word	0x20000e84
 800aec0:	20000e88 	.word	0x20000e88
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aed0:	4b0e      	ldr	r3, [pc, #56]	; (800af0c <prvGetNextExpireTime+0x44>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <prvGetNextExpireTime+0x16>
 800aeda:	2201      	movs	r2, #1
 800aedc:	e000      	b.n	800aee0 <prvGetNextExpireTime+0x18>
 800aede:	2200      	movs	r2, #0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d105      	bne.n	800aef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeec:	4b07      	ldr	r3, [pc, #28]	; (800af0c <prvGetNextExpireTime+0x44>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	e001      	b.n	800aefc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aefc:	68fb      	ldr	r3, [r7, #12]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	20000e80 	.word	0x20000e80

0800af10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af18:	f7ff f95c 	bl	800a1d4 <xTaskGetTickCount>
 800af1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af1e:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <prvSampleTimeNow+0x3c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d205      	bcs.n	800af34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af28:	f000 f936 	bl	800b198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e002      	b.n	800af3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af3a:	4a04      	ldr	r2, [pc, #16]	; (800af4c <prvSampleTimeNow+0x3c>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000e90 	.word	0x20000e90

0800af50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	429a      	cmp	r2, r3
 800af74:	d812      	bhi.n	800af9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	429a      	cmp	r2, r3
 800af82:	d302      	bcc.n	800af8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	e01b      	b.n	800afc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af8a:	4b10      	ldr	r3, [pc, #64]	; (800afcc <prvInsertTimerInActiveList+0x7c>)
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3304      	adds	r3, #4
 800af92:	4619      	mov	r1, r3
 800af94:	4610      	mov	r0, r2
 800af96:	f7fd ffb8 	bl	8008f0a <vListInsert>
 800af9a:	e012      	b.n	800afc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d206      	bcs.n	800afb2 <prvInsertTimerInActiveList+0x62>
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d302      	bcc.n	800afb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	e007      	b.n	800afc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afb2:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <prvInsertTimerInActiveList+0x80>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3304      	adds	r3, #4
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7fd ffa4 	bl	8008f0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afc2:	697b      	ldr	r3, [r7, #20]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20000e84 	.word	0x20000e84
 800afd0:	20000e80 	.word	0x20000e80

0800afd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08e      	sub	sp, #56	; 0x38
 800afd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afda:	e0ca      	b.n	800b172 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	da18      	bge.n	800b014 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afe2:	1d3b      	adds	r3, r7, #4
 800afe4:	3304      	adds	r3, #4
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	61fb      	str	r3, [r7, #28]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b00a:	6850      	ldr	r0, [r2, #4]
 800b00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b00e:	6892      	ldr	r2, [r2, #8]
 800b010:	4611      	mov	r1, r2
 800b012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f2c0 80aa 	blt.w	800b170 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d004      	beq.n	800b032 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	3304      	adds	r3, #4
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fd ffa5 	bl	8008f7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b032:	463b      	mov	r3, r7
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ff6b 	bl	800af10 <prvSampleTimeNow>
 800b03a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b09      	cmp	r3, #9
 800b040:	f200 8097 	bhi.w	800b172 <prvProcessReceivedCommands+0x19e>
 800b044:	a201      	add	r2, pc, #4	; (adr r2, 800b04c <prvProcessReceivedCommands+0x78>)
 800b046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04a:	bf00      	nop
 800b04c:	0800b075 	.word	0x0800b075
 800b050:	0800b075 	.word	0x0800b075
 800b054:	0800b075 	.word	0x0800b075
 800b058:	0800b0e9 	.word	0x0800b0e9
 800b05c:	0800b0fd 	.word	0x0800b0fd
 800b060:	0800b147 	.word	0x0800b147
 800b064:	0800b075 	.word	0x0800b075
 800b068:	0800b075 	.word	0x0800b075
 800b06c:	0800b0e9 	.word	0x0800b0e9
 800b070:	0800b0fd 	.word	0x0800b0fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b07a:	f043 0301 	orr.w	r3, r3, #1
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	18d1      	adds	r1, r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b094:	f7ff ff5c 	bl	800af50 <prvInsertTimerInActiveList>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d069      	beq.n	800b172 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d05e      	beq.n	800b172 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	441a      	add	r2, r3
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c6:	f7ff fe05 	bl	800acd4 <xTimerGenericCommand>
 800b0ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d14f      	bne.n	800b172 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	61bb      	str	r3, [r7, #24]
}
 800b0e4:	bf00      	nop
 800b0e6:	e7fe      	b.n	800b0e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0fa:	e03a      	b.n	800b172 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	b2da      	uxtb	r2, r3
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	617b      	str	r3, [r7, #20]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	699a      	ldr	r2, [r3, #24]
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	18d1      	adds	r1, r2, r3
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b140:	f7ff ff06 	bl	800af50 <prvInsertTimerInActiveList>
					break;
 800b144:	e015      	b.n	800b172 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b156:	f000 fbdb 	bl	800b910 <vPortFree>
 800b15a:	e00a      	b.n	800b172 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b16e:	e000      	b.n	800b172 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b172:	4b08      	ldr	r3, [pc, #32]	; (800b194 <prvProcessReceivedCommands+0x1c0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	1d39      	adds	r1, r7, #4
 800b178:	2200      	movs	r2, #0
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fa00 	bl	8009580 <xQueueReceive>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	f47f af2a 	bne.w	800afdc <prvProcessReceivedCommands+0x8>
	}
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	3730      	adds	r7, #48	; 0x30
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000e88 	.word	0x20000e88

0800b198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b19e:	e048      	b.n	800b232 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a0:	4b2d      	ldr	r3, [pc, #180]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1aa:	4b2b      	ldr	r3, [pc, #172]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fd fedf 	bl	8008f7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d02e      	beq.n	800b232 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4413      	add	r3, r2
 800b1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d90e      	bls.n	800b204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1f2:	4b19      	ldr	r3, [pc, #100]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	f7fd fe84 	bl	8008f0a <vListInsert>
 800b202:	e016      	b.n	800b232 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b204:	2300      	movs	r3, #0
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	2100      	movs	r1, #0
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fd60 	bl	800acd4 <xTimerGenericCommand>
 800b214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	603b      	str	r3, [r7, #0]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1b1      	bne.n	800b1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b242:	4b06      	ldr	r3, [pc, #24]	; (800b25c <prvSwitchTimerLists+0xc4>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a04      	ldr	r2, [pc, #16]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b24a:	4a04      	ldr	r2, [pc, #16]	; (800b25c <prvSwitchTimerLists+0xc4>)
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6013      	str	r3, [r2, #0]
}
 800b250:	bf00      	nop
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20000e80 	.word	0x20000e80
 800b25c:	20000e84 	.word	0x20000e84

0800b260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b266:	f000 f965 	bl	800b534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b26a:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d120      	bne.n	800b2b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b272:	4814      	ldr	r0, [pc, #80]	; (800b2c4 <prvCheckForValidListAndQueue+0x64>)
 800b274:	f7fd fdf8 	bl	8008e68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b278:	4813      	ldr	r0, [pc, #76]	; (800b2c8 <prvCheckForValidListAndQueue+0x68>)
 800b27a:	f7fd fdf5 	bl	8008e68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <prvCheckForValidListAndQueue+0x6c>)
 800b280:	4a10      	ldr	r2, [pc, #64]	; (800b2c4 <prvCheckForValidListAndQueue+0x64>)
 800b282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <prvCheckForValidListAndQueue+0x70>)
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <prvCheckForValidListAndQueue+0x68>)
 800b288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b28a:	2300      	movs	r3, #0
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <prvCheckForValidListAndQueue+0x74>)
 800b290:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <prvCheckForValidListAndQueue+0x78>)
 800b292:	2110      	movs	r1, #16
 800b294:	200a      	movs	r0, #10
 800b296:	f7fd ff03 	bl	80090a0 <xQueueGenericCreateStatic>
 800b29a:	4603      	mov	r3, r0
 800b29c:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b29e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	490b      	ldr	r1, [pc, #44]	; (800b2dc <prvCheckForValidListAndQueue+0x7c>)
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fc7a 	bl	8009ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2b4:	f000 f96e 	bl	800b594 <vPortExitCritical>
}
 800b2b8:	bf00      	nop
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000e88 	.word	0x20000e88
 800b2c4:	20000e58 	.word	0x20000e58
 800b2c8:	20000e6c 	.word	0x20000e6c
 800b2cc:	20000e80 	.word	0x20000e80
 800b2d0:	20000e84 	.word	0x20000e84
 800b2d4:	20000f34 	.word	0x20000f34
 800b2d8:	20000e94 	.word	0x20000e94
 800b2dc:	0800c770 	.word	0x0800c770

0800b2e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3b04      	subs	r3, #4
 800b2f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3b04      	subs	r3, #4
 800b2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f023 0201 	bic.w	r2, r3, #1
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3b04      	subs	r3, #4
 800b30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b310:	4a0c      	ldr	r2, [pc, #48]	; (800b344 <pxPortInitialiseStack+0x64>)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3b14      	subs	r3, #20
 800b31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3b04      	subs	r3, #4
 800b326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f06f 0202 	mvn.w	r2, #2
 800b32e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3b20      	subs	r3, #32
 800b334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b336:	68fb      	ldr	r3, [r7, #12]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	0800b349 	.word	0x0800b349

0800b348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b352:	4b12      	ldr	r3, [pc, #72]	; (800b39c <prvTaskExitError+0x54>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35a:	d00a      	beq.n	800b372 <prvTaskExitError+0x2a>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60fb      	str	r3, [r7, #12]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <prvTaskExitError+0x28>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60bb      	str	r3, [r7, #8]
}
 800b384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b386:	bf00      	nop
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0fc      	beq.n	800b388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	20000120 	.word	0x20000120

0800b3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3a0:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <pxCurrentTCBConst2>)
 800b3a2:	6819      	ldr	r1, [r3, #0]
 800b3a4:	6808      	ldr	r0, [r1, #0]
 800b3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3aa:	f380 8809 	msr	PSP, r0
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f380 8811 	msr	BASEPRI, r0
 800b3ba:	4770      	bx	lr
 800b3bc:	f3af 8000 	nop.w

0800b3c0 <pxCurrentTCBConst2>:
 800b3c0:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop

0800b3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3c8:	4808      	ldr	r0, [pc, #32]	; (800b3ec <prvPortStartFirstTask+0x24>)
 800b3ca:	6800      	ldr	r0, [r0, #0]
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f380 8808 	msr	MSP, r0
 800b3d2:	f04f 0000 	mov.w	r0, #0
 800b3d6:	f380 8814 	msr	CONTROL, r0
 800b3da:	b662      	cpsie	i
 800b3dc:	b661      	cpsie	f
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	df00      	svc	0
 800b3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3ea:	bf00      	nop
 800b3ec:	e000ed08 	.word	0xe000ed08

0800b3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3f6:	4b46      	ldr	r3, [pc, #280]	; (800b510 <xPortStartScheduler+0x120>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a46      	ldr	r2, [pc, #280]	; (800b514 <xPortStartScheduler+0x124>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d10a      	bne.n	800b416 <xPortStartScheduler+0x26>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	613b      	str	r3, [r7, #16]
}
 800b412:	bf00      	nop
 800b414:	e7fe      	b.n	800b414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b416:	4b3e      	ldr	r3, [pc, #248]	; (800b510 <xPortStartScheduler+0x120>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a3f      	ldr	r2, [pc, #252]	; (800b518 <xPortStartScheduler+0x128>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d10a      	bne.n	800b436 <xPortStartScheduler+0x46>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	60fb      	str	r3, [r7, #12]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b436:	4b39      	ldr	r3, [pc, #228]	; (800b51c <xPortStartScheduler+0x12c>)
 800b438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	22ff      	movs	r2, #255	; 0xff
 800b446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b450:	78fb      	ldrb	r3, [r7, #3]
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	4b31      	ldr	r3, [pc, #196]	; (800b520 <xPortStartScheduler+0x130>)
 800b45c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b45e:	4b31      	ldr	r3, [pc, #196]	; (800b524 <xPortStartScheduler+0x134>)
 800b460:	2207      	movs	r2, #7
 800b462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b464:	e009      	b.n	800b47a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b466:	4b2f      	ldr	r3, [pc, #188]	; (800b524 <xPortStartScheduler+0x134>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	4a2d      	ldr	r2, [pc, #180]	; (800b524 <xPortStartScheduler+0x134>)
 800b46e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b482:	2b80      	cmp	r3, #128	; 0x80
 800b484:	d0ef      	beq.n	800b466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b486:	4b27      	ldr	r3, [pc, #156]	; (800b524 <xPortStartScheduler+0x134>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f1c3 0307 	rsb	r3, r3, #7
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d00a      	beq.n	800b4a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	60bb      	str	r3, [r7, #8]
}
 800b4a4:	bf00      	nop
 800b4a6:	e7fe      	b.n	800b4a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <xPortStartScheduler+0x134>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	021b      	lsls	r3, r3, #8
 800b4ae:	4a1d      	ldr	r2, [pc, #116]	; (800b524 <xPortStartScheduler+0x134>)
 800b4b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4b2:	4b1c      	ldr	r3, [pc, #112]	; (800b524 <xPortStartScheduler+0x134>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ba:	4a1a      	ldr	r2, [pc, #104]	; (800b524 <xPortStartScheduler+0x134>)
 800b4bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4c6:	4b18      	ldr	r3, [pc, #96]	; (800b528 <xPortStartScheduler+0x138>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a17      	ldr	r2, [pc, #92]	; (800b528 <xPortStartScheduler+0x138>)
 800b4cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <xPortStartScheduler+0x138>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a14      	ldr	r2, [pc, #80]	; (800b528 <xPortStartScheduler+0x138>)
 800b4d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4de:	f000 f8dd 	bl	800b69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4e2:	4b12      	ldr	r3, [pc, #72]	; (800b52c <xPortStartScheduler+0x13c>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4e8:	f000 f8fc 	bl	800b6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4ec:	4b10      	ldr	r3, [pc, #64]	; (800b530 <xPortStartScheduler+0x140>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a0f      	ldr	r2, [pc, #60]	; (800b530 <xPortStartScheduler+0x140>)
 800b4f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4f8:	f7ff ff66 	bl	800b3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4fc:	f7fe ff3c 	bl	800a378 <vTaskSwitchContext>
	prvTaskExitError();
 800b500:	f7ff ff22 	bl	800b348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	e000ed00 	.word	0xe000ed00
 800b514:	410fc271 	.word	0x410fc271
 800b518:	410fc270 	.word	0x410fc270
 800b51c:	e000e400 	.word	0xe000e400
 800b520:	20000f84 	.word	0x20000f84
 800b524:	20000f88 	.word	0x20000f88
 800b528:	e000ed20 	.word	0xe000ed20
 800b52c:	20000120 	.word	0x20000120
 800b530:	e000ef34 	.word	0xe000ef34

0800b534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	607b      	str	r3, [r7, #4]
}
 800b54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <vPortEnterCritical+0x58>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	4a0d      	ldr	r2, [pc, #52]	; (800b58c <vPortEnterCritical+0x58>)
 800b556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <vPortEnterCritical+0x58>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d10f      	bne.n	800b580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <vPortEnterCritical+0x5c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <vPortEnterCritical+0x4c>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	603b      	str	r3, [r7, #0]
}
 800b57c:	bf00      	nop
 800b57e:	e7fe      	b.n	800b57e <vPortEnterCritical+0x4a>
	}
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	20000120 	.word	0x20000120
 800b590:	e000ed04 	.word	0xe000ed04

0800b594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <vPortExitCritical+0x50>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10a      	bne.n	800b5b8 <vPortExitCritical+0x24>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	607b      	str	r3, [r7, #4]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5b8:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <vPortExitCritical+0x50>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	4a09      	ldr	r2, [pc, #36]	; (800b5e4 <vPortExitCritical+0x50>)
 800b5c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5c2:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <vPortExitCritical+0x50>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d105      	bne.n	800b5d6 <vPortExitCritical+0x42>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	f383 8811 	msr	BASEPRI, r3
}
 800b5d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000120 	.word	0x20000120
	...

0800b5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5f0:	f3ef 8009 	mrs	r0, PSP
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	4b15      	ldr	r3, [pc, #84]	; (800b650 <pxCurrentTCBConst>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	f01e 0f10 	tst.w	lr, #16
 800b600:	bf08      	it	eq
 800b602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	6010      	str	r0, [r2, #0]
 800b60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b614:	f380 8811 	msr	BASEPRI, r0
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f7fe feaa 	bl	800a378 <vTaskSwitchContext>
 800b624:	f04f 0000 	mov.w	r0, #0
 800b628:	f380 8811 	msr	BASEPRI, r0
 800b62c:	bc09      	pop	{r0, r3}
 800b62e:	6819      	ldr	r1, [r3, #0]
 800b630:	6808      	ldr	r0, [r1, #0]
 800b632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b636:	f01e 0f10 	tst.w	lr, #16
 800b63a:	bf08      	it	eq
 800b63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b640:	f380 8809 	msr	PSP, r0
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w

0800b650 <pxCurrentTCBConst>:
 800b650:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop

0800b658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	607b      	str	r3, [r7, #4]
}
 800b670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b672:	f7fe fdbf 	bl	800a1f4 <xTaskIncrementTick>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <xPortSysTickHandler+0x40>)
 800b67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	f383 8811 	msr	BASEPRI, r3
}
 800b68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	e000ed04 	.word	0xe000ed04

0800b69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6a0:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <vPortSetupTimerInterrupt+0x34>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6a6:	4b0b      	ldr	r3, [pc, #44]	; (800b6d4 <vPortSetupTimerInterrupt+0x38>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <vPortSetupTimerInterrupt+0x3c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a0a      	ldr	r2, [pc, #40]	; (800b6dc <vPortSetupTimerInterrupt+0x40>)
 800b6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b6:	099b      	lsrs	r3, r3, #6
 800b6b8:	4a09      	ldr	r2, [pc, #36]	; (800b6e0 <vPortSetupTimerInterrupt+0x44>)
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <vPortSetupTimerInterrupt+0x34>)
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	601a      	str	r2, [r3, #0]
}
 800b6c4:	bf00      	nop
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	e000e010 	.word	0xe000e010
 800b6d4:	e000e018 	.word	0xe000e018
 800b6d8:	20000004 	.word	0x20000004
 800b6dc:	10624dd3 	.word	0x10624dd3
 800b6e0:	e000e014 	.word	0xe000e014

0800b6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6f4 <vPortEnableVFP+0x10>
 800b6e8:	6801      	ldr	r1, [r0, #0]
 800b6ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ee:	6001      	str	r1, [r0, #0]
 800b6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6f2:	bf00      	nop
 800b6f4:	e000ed88 	.word	0xe000ed88

0800b6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6fe:	f3ef 8305 	mrs	r3, IPSR
 800b702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b0f      	cmp	r3, #15
 800b708:	d914      	bls.n	800b734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b70a:	4a17      	ldr	r2, [pc, #92]	; (800b768 <vPortValidateInterruptPriority+0x70>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b714:	4b15      	ldr	r3, [pc, #84]	; (800b76c <vPortValidateInterruptPriority+0x74>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	7afa      	ldrb	r2, [r7, #11]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d20a      	bcs.n	800b734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	607b      	str	r3, [r7, #4]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b734:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <vPortValidateInterruptPriority+0x78>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b73c:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <vPortValidateInterruptPriority+0x7c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d90a      	bls.n	800b75a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	603b      	str	r3, [r7, #0]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <vPortValidateInterruptPriority+0x60>
	}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	e000e3f0 	.word	0xe000e3f0
 800b76c:	20000f84 	.word	0x20000f84
 800b770:	e000ed0c 	.word	0xe000ed0c
 800b774:	20000f88 	.word	0x20000f88

0800b778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08a      	sub	sp, #40	; 0x28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b784:	f7fe fc7a 	bl	800a07c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b788:	4b5b      	ldr	r3, [pc, #364]	; (800b8f8 <pvPortMalloc+0x180>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b790:	f000 f920 	bl	800b9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b794:	4b59      	ldr	r3, [pc, #356]	; (800b8fc <pvPortMalloc+0x184>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4013      	ands	r3, r2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f040 8093 	bne.w	800b8c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01d      	beq.n	800b7e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7a8:	2208      	movs	r2, #8
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d014      	beq.n	800b7e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f023 0307 	bic.w	r3, r3, #7
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00a      	beq.n	800b7e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	617b      	str	r3, [r7, #20]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d06e      	beq.n	800b8c8 <pvPortMalloc+0x150>
 800b7ea:	4b45      	ldr	r3, [pc, #276]	; (800b900 <pvPortMalloc+0x188>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d869      	bhi.n	800b8c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7f4:	4b43      	ldr	r3, [pc, #268]	; (800b904 <pvPortMalloc+0x18c>)
 800b7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7f8:	4b42      	ldr	r3, [pc, #264]	; (800b904 <pvPortMalloc+0x18c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7fe:	e004      	b.n	800b80a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d903      	bls.n	800b81c <pvPortMalloc+0xa4>
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1f1      	bne.n	800b800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b81c:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <pvPortMalloc+0x180>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b822:	429a      	cmp	r2, r3
 800b824:	d050      	beq.n	800b8c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2208      	movs	r2, #8
 800b82c:	4413      	add	r3, r2
 800b82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	2308      	movs	r3, #8
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	429a      	cmp	r2, r3
 800b846:	d91f      	bls.n	800b888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <pvPortMalloc+0xf8>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	613b      	str	r3, [r7, #16]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b882:	69b8      	ldr	r0, [r7, #24]
 800b884:	f000 f908 	bl	800ba98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b888:	4b1d      	ldr	r3, [pc, #116]	; (800b900 <pvPortMalloc+0x188>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	4a1b      	ldr	r2, [pc, #108]	; (800b900 <pvPortMalloc+0x188>)
 800b894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b896:	4b1a      	ldr	r3, [pc, #104]	; (800b900 <pvPortMalloc+0x188>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b1b      	ldr	r3, [pc, #108]	; (800b908 <pvPortMalloc+0x190>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d203      	bcs.n	800b8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8a2:	4b17      	ldr	r3, [pc, #92]	; (800b900 <pvPortMalloc+0x188>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a18      	ldr	r2, [pc, #96]	; (800b908 <pvPortMalloc+0x190>)
 800b8a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <pvPortMalloc+0x184>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8be:	4b13      	ldr	r3, [pc, #76]	; (800b90c <pvPortMalloc+0x194>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	4a11      	ldr	r2, [pc, #68]	; (800b90c <pvPortMalloc+0x194>)
 800b8c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8c8:	f7fe fbe6 	bl	800a098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <pvPortMalloc+0x174>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60fb      	str	r3, [r7, #12]
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <pvPortMalloc+0x172>
	return pvReturn;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3728      	adds	r7, #40	; 0x28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20001b94 	.word	0x20001b94
 800b8fc:	20001ba8 	.word	0x20001ba8
 800b900:	20001b98 	.word	0x20001b98
 800b904:	20001b8c 	.word	0x20001b8c
 800b908:	20001b9c 	.word	0x20001b9c
 800b90c:	20001ba0 	.word	0x20001ba0

0800b910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d04d      	beq.n	800b9be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b922:	2308      	movs	r3, #8
 800b924:	425b      	negs	r3, r3
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	4413      	add	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <vPortFree+0xb8>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4013      	ands	r3, r2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <vPortFree+0x44>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	60fb      	str	r3, [r7, #12]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00a      	beq.n	800b972 <vPortFree+0x62>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60bb      	str	r3, [r7, #8]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	4b14      	ldr	r3, [pc, #80]	; (800b9c8 <vPortFree+0xb8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d01e      	beq.n	800b9be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11a      	bne.n	800b9be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	4b0e      	ldr	r3, [pc, #56]	; (800b9c8 <vPortFree+0xb8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	43db      	mvns	r3, r3
 800b992:	401a      	ands	r2, r3
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b998:	f7fe fb70 	bl	800a07c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <vPortFree+0xbc>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <vPortFree+0xbc>)
 800b9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f000 f874 	bl	800ba98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <vPortFree+0xc0>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	4a06      	ldr	r2, [pc, #24]	; (800b9d0 <vPortFree+0xc0>)
 800b9b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9ba:	f7fe fb6d 	bl	800a098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9be:	bf00      	nop
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20001ba8 	.word	0x20001ba8
 800b9cc:	20001b98 	.word	0x20001b98
 800b9d0:	20001ba4 	.word	0x20001ba4

0800b9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9e0:	4b27      	ldr	r3, [pc, #156]	; (800ba80 <prvHeapInit+0xac>)
 800b9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f003 0307 	and.w	r3, r3, #7
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00c      	beq.n	800ba08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3307      	adds	r3, #7
 800b9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f023 0307 	bic.w	r3, r3, #7
 800b9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	4a1f      	ldr	r2, [pc, #124]	; (800ba80 <prvHeapInit+0xac>)
 800ba04:	4413      	add	r3, r2
 800ba06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba0c:	4a1d      	ldr	r2, [pc, #116]	; (800ba84 <prvHeapInit+0xb0>)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba12:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <prvHeapInit+0xb0>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba20:	2208      	movs	r2, #8
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1a9b      	subs	r3, r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0307 	bic.w	r3, r3, #7
 800ba2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	4a15      	ldr	r2, [pc, #84]	; (800ba88 <prvHeapInit+0xb4>)
 800ba34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <prvHeapInit+0xb4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba3e:	4b12      	ldr	r3, [pc, #72]	; (800ba88 <prvHeapInit+0xb4>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba54:	4b0c      	ldr	r3, [pc, #48]	; (800ba88 <prvHeapInit+0xb4>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	4a0a      	ldr	r2, [pc, #40]	; (800ba8c <prvHeapInit+0xb8>)
 800ba62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a09      	ldr	r2, [pc, #36]	; (800ba90 <prvHeapInit+0xbc>)
 800ba6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba6c:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <prvHeapInit+0xc0>)
 800ba6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba72:	601a      	str	r2, [r3, #0]
}
 800ba74:	bf00      	nop
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	20000f8c 	.word	0x20000f8c
 800ba84:	20001b8c 	.word	0x20001b8c
 800ba88:	20001b94 	.word	0x20001b94
 800ba8c:	20001b9c 	.word	0x20001b9c
 800ba90:	20001b98 	.word	0x20001b98
 800ba94:	20001ba8 	.word	0x20001ba8

0800ba98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800baa0:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <prvInsertBlockIntoFreeList+0xac>)
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e002      	b.n	800baac <prvInsertBlockIntoFreeList+0x14>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d8f7      	bhi.n	800baa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	4413      	add	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d108      	bne.n	800bada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	441a      	add	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	441a      	add	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d118      	bne.n	800bb20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	4b15      	ldr	r3, [pc, #84]	; (800bb48 <prvInsertBlockIntoFreeList+0xb0>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d00d      	beq.n	800bb16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	441a      	add	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	e008      	b.n	800bb28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <prvInsertBlockIntoFreeList+0xb0>)
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	e003      	b.n	800bb28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d002      	beq.n	800bb36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20001b8c 	.word	0x20001b8c
 800bb48:	20001b94 	.word	0x20001b94

0800bb4c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bb50:	2200      	movs	r2, #0
 800bb52:	4912      	ldr	r1, [pc, #72]	; (800bb9c <MX_USB_Device_Init+0x50>)
 800bb54:	4812      	ldr	r0, [pc, #72]	; (800bba0 <MX_USB_Device_Init+0x54>)
 800bb56:	f7fc f833 	bl	8007bc0 <USBD_Init>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bb60:	f7f4 fd0e 	bl	8000580 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bb64:	490f      	ldr	r1, [pc, #60]	; (800bba4 <MX_USB_Device_Init+0x58>)
 800bb66:	480e      	ldr	r0, [pc, #56]	; (800bba0 <MX_USB_Device_Init+0x54>)
 800bb68:	f7fc f85a 	bl	8007c20 <USBD_RegisterClass>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bb72:	f7f4 fd05 	bl	8000580 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bb76:	490c      	ldr	r1, [pc, #48]	; (800bba8 <MX_USB_Device_Init+0x5c>)
 800bb78:	4809      	ldr	r0, [pc, #36]	; (800bba0 <MX_USB_Device_Init+0x54>)
 800bb7a:	f7fb ff7b 	bl	8007a74 <USBD_CDC_RegisterInterface>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bb84:	f7f4 fcfc 	bl	8000580 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bb88:	4805      	ldr	r0, [pc, #20]	; (800bba0 <MX_USB_Device_Init+0x54>)
 800bb8a:	f7fc f870 	bl	8007c6e <USBD_Start>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bb94:	f7f4 fcf4 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bb98:	bf00      	nop
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000138 	.word	0x20000138
 800bba0:	20001bac 	.word	0x20001bac
 800bba4:	2000001c 	.word	0x2000001c
 800bba8:	20000124 	.word	0x20000124

0800bbac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4905      	ldr	r1, [pc, #20]	; (800bbc8 <CDC_Init_FS+0x1c>)
 800bbb4:	4805      	ldr	r0, [pc, #20]	; (800bbcc <CDC_Init_FS+0x20>)
 800bbb6:	f7fb ff72 	bl	8007a9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbba:	4905      	ldr	r1, [pc, #20]	; (800bbd0 <CDC_Init_FS+0x24>)
 800bbbc:	4803      	ldr	r0, [pc, #12]	; (800bbcc <CDC_Init_FS+0x20>)
 800bbbe:	f7fb ff8c 	bl	8007ada <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	2000267c 	.word	0x2000267c
 800bbcc:	20001bac 	.word	0x20001bac
 800bbd0:	20001e7c 	.word	0x20001e7c

0800bbd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	6039      	str	r1, [r7, #0]
 800bbee:	71fb      	strb	r3, [r7, #7]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	2b23      	cmp	r3, #35	; 0x23
 800bbf8:	d84a      	bhi.n	800bc90 <CDC_Control_FS+0xac>
 800bbfa:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <CDC_Control_FS+0x1c>)
 800bbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc00:	0800bc91 	.word	0x0800bc91
 800bc04:	0800bc91 	.word	0x0800bc91
 800bc08:	0800bc91 	.word	0x0800bc91
 800bc0c:	0800bc91 	.word	0x0800bc91
 800bc10:	0800bc91 	.word	0x0800bc91
 800bc14:	0800bc91 	.word	0x0800bc91
 800bc18:	0800bc91 	.word	0x0800bc91
 800bc1c:	0800bc91 	.word	0x0800bc91
 800bc20:	0800bc91 	.word	0x0800bc91
 800bc24:	0800bc91 	.word	0x0800bc91
 800bc28:	0800bc91 	.word	0x0800bc91
 800bc2c:	0800bc91 	.word	0x0800bc91
 800bc30:	0800bc91 	.word	0x0800bc91
 800bc34:	0800bc91 	.word	0x0800bc91
 800bc38:	0800bc91 	.word	0x0800bc91
 800bc3c:	0800bc91 	.word	0x0800bc91
 800bc40:	0800bc91 	.word	0x0800bc91
 800bc44:	0800bc91 	.word	0x0800bc91
 800bc48:	0800bc91 	.word	0x0800bc91
 800bc4c:	0800bc91 	.word	0x0800bc91
 800bc50:	0800bc91 	.word	0x0800bc91
 800bc54:	0800bc91 	.word	0x0800bc91
 800bc58:	0800bc91 	.word	0x0800bc91
 800bc5c:	0800bc91 	.word	0x0800bc91
 800bc60:	0800bc91 	.word	0x0800bc91
 800bc64:	0800bc91 	.word	0x0800bc91
 800bc68:	0800bc91 	.word	0x0800bc91
 800bc6c:	0800bc91 	.word	0x0800bc91
 800bc70:	0800bc91 	.word	0x0800bc91
 800bc74:	0800bc91 	.word	0x0800bc91
 800bc78:	0800bc91 	.word	0x0800bc91
 800bc7c:	0800bc91 	.word	0x0800bc91
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bc91 	.word	0x0800bc91
 800bc88:	0800bc91 	.word	0x0800bc91
 800bc8c:	0800bc91 	.word	0x0800bc91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc90:	bf00      	nop
  }

  return (USBD_OK);
 800bc92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcaa:	6879      	ldr	r1, [r7, #4]
 800bcac:	4805      	ldr	r0, [pc, #20]	; (800bcc4 <CDC_Receive_FS+0x24>)
 800bcae:	f7fb ff14 	bl	8007ada <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcb2:	4804      	ldr	r0, [pc, #16]	; (800bcc4 <CDC_Receive_FS+0x24>)
 800bcb4:	f7fb ff5a 	bl	8007b6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bcb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20001bac 	.word	0x20001bac

0800bcc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcd8:	4b0d      	ldr	r3, [pc, #52]	; (800bd10 <CDC_Transmit_FS+0x48>)
 800bcda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e00b      	b.n	800bd06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcee:	887b      	ldrh	r3, [r7, #2]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	6879      	ldr	r1, [r7, #4]
 800bcf4:	4806      	ldr	r0, [pc, #24]	; (800bd10 <CDC_Transmit_FS+0x48>)
 800bcf6:	f7fb fed2 	bl	8007a9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcfa:	4805      	ldr	r0, [pc, #20]	; (800bd10 <CDC_Transmit_FS+0x48>)
 800bcfc:	f7fb ff06 	bl	8007b0c <USBD_CDC_TransmitPacket>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	20001bac 	.word	0x20001bac

0800bd14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
	...

0800bd38 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	6039      	str	r1, [r7, #0]
 800bd42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2212      	movs	r2, #18
 800bd48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bd4a:	4b03      	ldr	r3, [pc, #12]	; (800bd58 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	20000158 	.word	0x20000158

0800bd5c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	6039      	str	r1, [r7, #0]
 800bd66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2204      	movs	r2, #4
 800bd6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	; (800bd7c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	2000016c 	.word	0x2000016c

0800bd80 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d105      	bne.n	800bd9e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4907      	ldr	r1, [pc, #28]	; (800bdb4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bd96:	4808      	ldr	r0, [pc, #32]	; (800bdb8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bd98:	f7fc ff51 	bl	8008c3e <USBD_GetString>
 800bd9c:	e004      	b.n	800bda8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4904      	ldr	r1, [pc, #16]	; (800bdb4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bda2:	4805      	ldr	r0, [pc, #20]	; (800bdb8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bda4:	f7fc ff4b 	bl	8008c3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20002e7c 	.word	0x20002e7c
 800bdb8:	0800c778 	.word	0x0800c778

0800bdbc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	4904      	ldr	r1, [pc, #16]	; (800bddc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bdcc:	4804      	ldr	r0, [pc, #16]	; (800bde0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bdce:	f7fc ff36 	bl	8008c3e <USBD_GetString>
  return USBD_StrDesc;
 800bdd2:	4b02      	ldr	r3, [pc, #8]	; (800bddc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	20002e7c 	.word	0x20002e7c
 800bde0:	0800c790 	.word	0x0800c790

0800bde4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	221a      	movs	r2, #26
 800bdf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdf6:	f000 f843 	bl	800be80 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bdfa:	4b02      	ldr	r3, [pc, #8]	; (800be04 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	20000170 	.word	0x20000170

0800be08 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	4603      	mov	r3, r0
 800be10:	6039      	str	r1, [r7, #0]
 800be12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d105      	bne.n	800be26 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	4907      	ldr	r1, [pc, #28]	; (800be3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be1e:	4808      	ldr	r0, [pc, #32]	; (800be40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be20:	f7fc ff0d 	bl	8008c3e <USBD_GetString>
 800be24:	e004      	b.n	800be30 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4904      	ldr	r1, [pc, #16]	; (800be3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be2a:	4805      	ldr	r0, [pc, #20]	; (800be40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be2c:	f7fc ff07 	bl	8008c3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be30:	4b02      	ldr	r3, [pc, #8]	; (800be3c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	20002e7c 	.word	0x20002e7c
 800be40:	0800c7a4 	.word	0x0800c7a4

0800be44 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	6039      	str	r1, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be50:	79fb      	ldrb	r3, [r7, #7]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d105      	bne.n	800be62 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	4907      	ldr	r1, [pc, #28]	; (800be78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800be5a:	4808      	ldr	r0, [pc, #32]	; (800be7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800be5c:	f7fc feef 	bl	8008c3e <USBD_GetString>
 800be60:	e004      	b.n	800be6c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4904      	ldr	r1, [pc, #16]	; (800be78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800be66:	4805      	ldr	r0, [pc, #20]	; (800be7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800be68:	f7fc fee9 	bl	8008c3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be6c:	4b02      	ldr	r3, [pc, #8]	; (800be78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20002e7c 	.word	0x20002e7c
 800be7c:	0800c7b0 	.word	0x0800c7b0

0800be80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be86:	4b0f      	ldr	r3, [pc, #60]	; (800bec4 <Get_SerialNum+0x44>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be8c:	4b0e      	ldr	r3, [pc, #56]	; (800bec8 <Get_SerialNum+0x48>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be92:	4b0e      	ldr	r3, [pc, #56]	; (800becc <Get_SerialNum+0x4c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d009      	beq.n	800beba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bea6:	2208      	movs	r2, #8
 800bea8:	4909      	ldr	r1, [pc, #36]	; (800bed0 <Get_SerialNum+0x50>)
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f000 f814 	bl	800bed8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800beb0:	2204      	movs	r2, #4
 800beb2:	4908      	ldr	r1, [pc, #32]	; (800bed4 <Get_SerialNum+0x54>)
 800beb4:	68b8      	ldr	r0, [r7, #8]
 800beb6:	f000 f80f 	bl	800bed8 <IntToUnicode>
  }
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	1fff7590 	.word	0x1fff7590
 800bec8:	1fff7594 	.word	0x1fff7594
 800becc:	1fff7598 	.word	0x1fff7598
 800bed0:	20000172 	.word	0x20000172
 800bed4:	20000182 	.word	0x20000182

0800bed8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	4613      	mov	r3, r2
 800bee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800beea:	2300      	movs	r3, #0
 800beec:	75fb      	strb	r3, [r7, #23]
 800beee:	e027      	b.n	800bf40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	0f1b      	lsrs	r3, r3, #28
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d80b      	bhi.n	800bf10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	0f1b      	lsrs	r3, r3, #28
 800befc:	b2da      	uxtb	r2, r3
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	4619      	mov	r1, r3
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	440b      	add	r3, r1
 800bf08:	3230      	adds	r2, #48	; 0x30
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	701a      	strb	r2, [r3, #0]
 800bf0e:	e00a      	b.n	800bf26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	0f1b      	lsrs	r3, r3, #28
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	440b      	add	r3, r1
 800bf20:	3237      	adds	r2, #55	; 0x37
 800bf22:	b2d2      	uxtb	r2, r2
 800bf24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf2c:	7dfb      	ldrb	r3, [r7, #23]
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	3301      	adds	r3, #1
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	4413      	add	r3, r2
 800bf36:	2200      	movs	r2, #0
 800bf38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf3a:	7dfb      	ldrb	r3, [r7, #23]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	75fb      	strb	r3, [r7, #23]
 800bf40:	7dfa      	ldrb	r2, [r7, #23]
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d3d3      	bcc.n	800bef0 <IntToUnicode+0x18>
  }
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	371c      	adds	r7, #28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <LL_AHB2_GRP1_EnableClock>:
{
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800bf5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800bf6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4013      	ands	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
}
 800bf7c:	bf00      	nop
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <LL_APB1_GRP1_EnableClock>:
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800bf90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800bfa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
	...

0800bfbc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b09c      	sub	sp, #112	; 0x70
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	605a      	str	r2, [r3, #4]
 800bfce:	609a      	str	r2, [r3, #8]
 800bfd0:	60da      	str	r2, [r3, #12]
 800bfd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bfd4:	f107 030c 	add.w	r3, r7, #12
 800bfd8:	2250      	movs	r2, #80	; 0x50
 800bfda:	2100      	movs	r1, #0
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 fb49 	bl	800c674 <memset>
  if(pcdHandle->Instance==USB)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a23      	ldr	r2, [pc, #140]	; (800c074 <HAL_PCD_MspInit+0xb8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d13e      	bne.n	800c06a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bfec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bff0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800bff2:	2318      	movs	r3, #24
 800bff4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800bff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bffa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800bffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c000:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800c002:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c006:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800c008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c00c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c00e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c012:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	4618      	mov	r0, r3
 800c01a:	f7f8 f867 	bl	80040ec <HAL_RCCEx_PeriphCLKConfig>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800c024:	f7f4 faac 	bl	8000580 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c028:	2001      	movs	r0, #1
 800c02a:	f7ff ff94 	bl	800bf56 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c02e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c032:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c034:	2302      	movs	r3, #2
 800c036:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c038:	2300      	movs	r3, #0
 800c03a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c03c:	2300      	movs	r3, #0
 800c03e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800c040:	230a      	movs	r3, #10
 800c042:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c044:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c048:	4619      	mov	r1, r3
 800c04a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c04e:	f7f4 fdfd 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c052:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c056:	f7ff ff97 	bl	800bf88 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800c05a:	2200      	movs	r2, #0
 800c05c:	2105      	movs	r1, #5
 800c05e:	2014      	movs	r0, #20
 800c060:	f7f4 fd01 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c064:	2014      	movs	r0, #20
 800c066:	f7f4 fd18 	bl	8000a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c06a:	bf00      	nop
 800c06c:	3770      	adds	r7, #112	; 0x70
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	40006800 	.word	0x40006800

0800c078 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800c08c:	4619      	mov	r1, r3
 800c08e:	4610      	mov	r0, r2
 800c090:	f7fb fe38 	bl	8007d04 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	440b      	add	r3, r1
 800c0bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	f7fb fe72 	bl	8007dae <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	440b      	add	r3, r1
 800c0f2:	3340      	adds	r3, #64	; 0x40
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	78fb      	ldrb	r3, [r7, #3]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	f7fb febb 	bl	8007e74 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c114:	4618      	mov	r0, r3
 800c116:	f7fb ffcf 	bl	80080b8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c11a:	bf00      	nop
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c12a:	2301      	movs	r3, #1
 800c12c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	2b02      	cmp	r3, #2
 800c134:	d001      	beq.n	800c13a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c136:	f7f4 fa23 	bl	8000580 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c140:	7bfa      	ldrb	r2, [r7, #15]
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f7fb ff79 	bl	800803c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c150:	4618      	mov	r0, r3
 800c152:	f7fb ff25 	bl	8007fa0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c156:	bf00      	nop
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fb ff74 	bl	800805c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c17c:	4b04      	ldr	r3, [pc, #16]	; (800c190 <HAL_PCD_SuspendCallback+0x30>)
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	4a03      	ldr	r2, [pc, #12]	; (800c190 <HAL_PCD_SuspendCallback+0x30>)
 800c182:	f043 0306 	orr.w	r3, r3, #6
 800c186:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	e000ed00 	.word	0xe000ed00

0800c194 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1a4:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <HAL_PCD_ResumeCallback+0x34>)
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	4a07      	ldr	r2, [pc, #28]	; (800c1c8 <HAL_PCD_ResumeCallback+0x34>)
 800c1aa:	f023 0306 	bic.w	r3, r3, #6
 800c1ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c1b0:	f000 f9fc 	bl	800c5ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fb ff64 	bl	8008088 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	e000ed00 	.word	0xe000ed00

0800c1cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c1d4:	4a2c      	ldr	r2, [pc, #176]	; (800c288 <USBD_LL_Init+0xbc>)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a2a      	ldr	r2, [pc, #168]	; (800c288 <USBD_LL_Init+0xbc>)
 800c1e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c1e4:	f7f6 fc2a 	bl	8002a3c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800c1e8:	4b27      	ldr	r3, [pc, #156]	; (800c288 <USBD_LL_Init+0xbc>)
 800c1ea:	4a28      	ldr	r2, [pc, #160]	; (800c28c <USBD_LL_Init+0xc0>)
 800c1ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1ee:	4b26      	ldr	r3, [pc, #152]	; (800c288 <USBD_LL_Init+0xbc>)
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1f4:	4b24      	ldr	r3, [pc, #144]	; (800c288 <USBD_LL_Init+0xbc>)
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1fa:	4b23      	ldr	r3, [pc, #140]	; (800c288 <USBD_LL_Init+0xbc>)
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c200:	4b21      	ldr	r3, [pc, #132]	; (800c288 <USBD_LL_Init+0xbc>)
 800c202:	2200      	movs	r2, #0
 800c204:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c206:	4b20      	ldr	r3, [pc, #128]	; (800c288 <USBD_LL_Init+0xbc>)
 800c208:	2200      	movs	r2, #0
 800c20a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c20c:	4b1e      	ldr	r3, [pc, #120]	; (800c288 <USBD_LL_Init+0xbc>)
 800c20e:	2200      	movs	r2, #0
 800c210:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c212:	4b1d      	ldr	r3, [pc, #116]	; (800c288 <USBD_LL_Init+0xbc>)
 800c214:	2200      	movs	r2, #0
 800c216:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c218:	481b      	ldr	r0, [pc, #108]	; (800c288 <USBD_LL_Init+0xbc>)
 800c21a:	f7f4 fe9f 	bl	8000f5c <HAL_PCD_Init>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c224:	f7f4 f9ac 	bl	8000580 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c22e:	2318      	movs	r3, #24
 800c230:	2200      	movs	r2, #0
 800c232:	2100      	movs	r1, #0
 800c234:	f7f6 fb75 	bl	8002922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c23e:	2358      	movs	r3, #88	; 0x58
 800c240:	2200      	movs	r2, #0
 800c242:	2180      	movs	r1, #128	; 0x80
 800c244:	f7f6 fb6d 	bl	8002922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c24e:	23c0      	movs	r3, #192	; 0xc0
 800c250:	2200      	movs	r2, #0
 800c252:	2181      	movs	r1, #129	; 0x81
 800c254:	f7f6 fb65 	bl	8002922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c25e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c262:	2200      	movs	r2, #0
 800c264:	2101      	movs	r1, #1
 800c266:	f7f6 fb5c 	bl	8002922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c270:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c274:	2200      	movs	r2, #0
 800c276:	2182      	movs	r1, #130	; 0x82
 800c278:	f7f6 fb53 	bl	8002922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	2000307c 	.word	0x2000307c
 800c28c:	40006800 	.word	0x40006800

0800c290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7f4 ff43 	bl	8001132 <HAL_PCD_Start>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 f980 	bl	800c5b8 <USBD_Get_USB_Status>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	70fb      	strb	r3, [r7, #3]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	70bb      	strb	r3, [r7, #2]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2ee:	78bb      	ldrb	r3, [r7, #2]
 800c2f0:	883a      	ldrh	r2, [r7, #0]
 800c2f2:	78f9      	ldrb	r1, [r7, #3]
 800c2f4:	f7f5 f88b 	bl	800140e <HAL_PCD_EP_Open>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f95a 	bl	800c5b8 <USBD_Get_USB_Status>
 800c304:	4603      	mov	r3, r0
 800c306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c308:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	460b      	mov	r3, r1
 800c31c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c32c:	78fa      	ldrb	r2, [r7, #3]
 800c32e:	4611      	mov	r1, r2
 800c330:	4618      	mov	r0, r3
 800c332:	f7f5 f8d4 	bl	80014de <HAL_PCD_EP_Close>
 800c336:	4603      	mov	r3, r0
 800c338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f93b 	bl	800c5b8 <USBD_Get_USB_Status>
 800c342:	4603      	mov	r3, r0
 800c344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c346:	7bbb      	ldrb	r3, [r7, #14]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c36a:	78fa      	ldrb	r2, [r7, #3]
 800c36c:	4611      	mov	r1, r2
 800c36e:	4618      	mov	r0, r3
 800c370:	f7f5 f999 	bl	80016a6 <HAL_PCD_EP_SetStall>
 800c374:	4603      	mov	r3, r0
 800c376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 f91c 	bl	800c5b8 <USBD_Get_USB_Status>
 800c380:	4603      	mov	r3, r0
 800c382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c384:	7bbb      	ldrb	r3, [r7, #14]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	460b      	mov	r3, r1
 800c398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3a8:	78fa      	ldrb	r2, [r7, #3]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7f5 f9ce 	bl	800174e <HAL_PCD_EP_ClrStall>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 f8fd 	bl	800c5b8 <USBD_Get_USB_Status>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	da0c      	bge.n	800c402 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3e8:	78fb      	ldrb	r3, [r7, #3]
 800c3ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ee:	68f9      	ldr	r1, [r7, #12]
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	440b      	add	r3, r1
 800c3fc:	3306      	adds	r3, #6
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	e00b      	b.n	800c41a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c408:	68f9      	ldr	r1, [r7, #12]
 800c40a:	4613      	mov	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	440b      	add	r3, r1
 800c414:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800c418:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	460b      	mov	r3, r1
 800c430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c440:	78fa      	ldrb	r2, [r7, #3]
 800c442:	4611      	mov	r1, r2
 800c444:	4618      	mov	r0, r3
 800c446:	f7f4 ffbd 	bl	80013c4 <HAL_PCD_SetAddress>
 800c44a:	4603      	mov	r3, r0
 800c44c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c44e:	7bfb      	ldrb	r3, [r7, #15]
 800c450:	4618      	mov	r0, r3
 800c452:	f000 f8b1 	bl	800c5b8 <USBD_Get_USB_Status>
 800c456:	4603      	mov	r3, r0
 800c458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c45a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	607a      	str	r2, [r7, #4]
 800c46e:	603b      	str	r3, [r7, #0]
 800c470:	460b      	mov	r3, r1
 800c472:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c478:	2300      	movs	r3, #0
 800c47a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c482:	7af9      	ldrb	r1, [r7, #11]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	f7f5 f8c9 	bl	800161e <HAL_PCD_EP_Transmit>
 800c48c:	4603      	mov	r3, r0
 800c48e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 f890 	bl	800c5b8 <USBD_Get_USB_Status>
 800c498:	4603      	mov	r3, r0
 800c49a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c49c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b086      	sub	sp, #24
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4c4:	7af9      	ldrb	r1, [r7, #11]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	f7f5 f852 	bl	8001572 <HAL_PCD_EP_Receive>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 f86f 	bl	800c5b8 <USBD_Get_USB_Status>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4de:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4fa:	78fa      	ldrb	r2, [r7, #3]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f5 f875 	bl	80015ee <HAL_PCD_EP_GetRxCount>
 800c504:	4603      	mov	r3, r0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c51c:	78fb      	ldrb	r3, [r7, #3]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <HAL_PCDEx_LPM_Callback+0x18>
 800c522:	2b01      	cmp	r3, #1
 800c524:	d013      	beq.n	800c54e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c526:	e023      	b.n	800c570 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d007      	beq.n	800c540 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c530:	f000 f83c 	bl	800c5ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c534:	4b10      	ldr	r3, [pc, #64]	; (800c578 <HAL_PCDEx_LPM_Callback+0x68>)
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	4a0f      	ldr	r2, [pc, #60]	; (800c578 <HAL_PCDEx_LPM_Callback+0x68>)
 800c53a:	f023 0306 	bic.w	r3, r3, #6
 800c53e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c546:	4618      	mov	r0, r3
 800c548:	f7fb fd9e 	bl	8008088 <USBD_LL_Resume>
    break;
 800c54c:	e010      	b.n	800c570 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c554:	4618      	mov	r0, r3
 800c556:	f7fb fd81 	bl	800805c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d005      	beq.n	800c56e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c562:	4b05      	ldr	r3, [pc, #20]	; (800c578 <HAL_PCDEx_LPM_Callback+0x68>)
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	4a04      	ldr	r2, [pc, #16]	; (800c578 <HAL_PCDEx_LPM_Callback+0x68>)
 800c568:	f043 0306 	orr.w	r3, r3, #6
 800c56c:	6113      	str	r3, [r2, #16]
    break;
 800c56e:	bf00      	nop
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed00 	.word	0xe000ed00

0800c57c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c584:	4b03      	ldr	r3, [pc, #12]	; (800c594 <USBD_static_malloc+0x18>)
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	20003374 	.word	0x20003374

0800c598 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]

}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c5b0:	f7f3 ff0c 	bl	80003cc <SystemClock_Config>
}
 800c5b4:	bf00      	nop
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5c6:	79fb      	ldrb	r3, [r7, #7]
 800c5c8:	2b03      	cmp	r3, #3
 800c5ca:	d817      	bhi.n	800c5fc <USBD_Get_USB_Status+0x44>
 800c5cc:	a201      	add	r2, pc, #4	; (adr r2, 800c5d4 <USBD_Get_USB_Status+0x1c>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c5e5 	.word	0x0800c5e5
 800c5d8:	0800c5eb 	.word	0x0800c5eb
 800c5dc:	0800c5f1 	.word	0x0800c5f1
 800c5e0:	0800c5f7 	.word	0x0800c5f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e8:	e00b      	b.n	800c602 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ee:	e008      	b.n	800c602 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f4:	e005      	b.n	800c602 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5fa:	e002      	b.n	800c602 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c600:	bf00      	nop
  }
  return usb_status;
 800c602:	7bfb      	ldrb	r3, [r7, #15]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <__libc_init_array>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	4d0d      	ldr	r5, [pc, #52]	; (800c648 <__libc_init_array+0x38>)
 800c614:	4c0d      	ldr	r4, [pc, #52]	; (800c64c <__libc_init_array+0x3c>)
 800c616:	1b64      	subs	r4, r4, r5
 800c618:	10a4      	asrs	r4, r4, #2
 800c61a:	2600      	movs	r6, #0
 800c61c:	42a6      	cmp	r6, r4
 800c61e:	d109      	bne.n	800c634 <__libc_init_array+0x24>
 800c620:	4d0b      	ldr	r5, [pc, #44]	; (800c650 <__libc_init_array+0x40>)
 800c622:	4c0c      	ldr	r4, [pc, #48]	; (800c654 <__libc_init_array+0x44>)
 800c624:	f000 f82e 	bl	800c684 <_init>
 800c628:	1b64      	subs	r4, r4, r5
 800c62a:	10a4      	asrs	r4, r4, #2
 800c62c:	2600      	movs	r6, #0
 800c62e:	42a6      	cmp	r6, r4
 800c630:	d105      	bne.n	800c63e <__libc_init_array+0x2e>
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	f855 3b04 	ldr.w	r3, [r5], #4
 800c638:	4798      	blx	r3
 800c63a:	3601      	adds	r6, #1
 800c63c:	e7ee      	b.n	800c61c <__libc_init_array+0xc>
 800c63e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c642:	4798      	blx	r3
 800c644:	3601      	adds	r6, #1
 800c646:	e7f2      	b.n	800c62e <__libc_init_array+0x1e>
 800c648:	0800c840 	.word	0x0800c840
 800c64c:	0800c840 	.word	0x0800c840
 800c650:	0800c840 	.word	0x0800c840
 800c654:	0800c844 	.word	0x0800c844

0800c658 <memcpy>:
 800c658:	440a      	add	r2, r1
 800c65a:	4291      	cmp	r1, r2
 800c65c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c660:	d100      	bne.n	800c664 <memcpy+0xc>
 800c662:	4770      	bx	lr
 800c664:	b510      	push	{r4, lr}
 800c666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c66a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c66e:	4291      	cmp	r1, r2
 800c670:	d1f9      	bne.n	800c666 <memcpy+0xe>
 800c672:	bd10      	pop	{r4, pc}

0800c674 <memset>:
 800c674:	4402      	add	r2, r0
 800c676:	4603      	mov	r3, r0
 800c678:	4293      	cmp	r3, r2
 800c67a:	d100      	bne.n	800c67e <memset+0xa>
 800c67c:	4770      	bx	lr
 800c67e:	f803 1b01 	strb.w	r1, [r3], #1
 800c682:	e7f9      	b.n	800c678 <memset+0x4>

0800c684 <_init>:
 800c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c686:	bf00      	nop
 800c688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68a:	bc08      	pop	{r3}
 800c68c:	469e      	mov	lr, r3
 800c68e:	4770      	bx	lr

0800c690 <_fini>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	bf00      	nop
 800c694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c696:	bc08      	pop	{r3}
 800c698:	469e      	mov	lr, r3
 800c69a:	4770      	bx	lr
