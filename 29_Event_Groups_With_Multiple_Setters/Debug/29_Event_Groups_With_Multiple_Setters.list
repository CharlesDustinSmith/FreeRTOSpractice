
29_Event_Groups_With_Multiple_Setters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008024  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080083ec  080083ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  080083fc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e18  20000078  08008470  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001e90  08008470  00021e90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026057  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004992  00000000  00000000  000460ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022e0  00000000  00000000  0004aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002138  00000000  00000000  0004cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006007  00000000  00000000  0004eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020c30  00000000  00000000  00054eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef8fd  00000000  00000000  00075ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001653e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009bfc  00000000  00000000  00165434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	0800814c 	.word	0x0800814c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	0800814c 	.word	0x0800814c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000534:	f023 0218 	bic.w	r2, r3, #24
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
EventGroupHandle_t xEventGroup;

const TickType_t xDelay500ms = pdMS_TO_TICKS(500UL);

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  HAL_Init();
 800058a:	f000 fcbf 	bl	8000f0c <HAL_Init>
  SystemClock_Config();
 800058e:	f000 f8a9 	bl	80006e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000592:	f000 f945 	bl	8000820 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000596:	f000 f91b 	bl	80007d0 <MX_USB_PCD_Init>
  LPUART1_UART_TX_Init();
 800059a:	f000 fc2d 	bl	8000df8 <LPUART1_UART_TX_Init>

  printf("System Initializing... \n\r");
 800059e:	4819      	ldr	r0, [pc, #100]	; (8000604 <main+0x80>)
 80005a0:	f006 fef2 	bl	8007388 <iprintf>

  xEventGroup = xEventGroupCreate();
 80005a4:	f003 febe 	bl	8004324 <xEventGroupCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <main+0x84>)
 80005ac:	6013      	str	r3, [r2, #0]
  xTaskCreate(InputTask1, "Input Task 1", 100, NULL, 1, NULL);
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	4914      	ldr	r1, [pc, #80]	; (800060c <main+0x88>)
 80005bc:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x8c>)
 80005be:	f004 fe44 	bl	800524a <xTaskCreate>
  xTaskCreate(InputTask2, "Input Task 2", 100, NULL, 1, NULL);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2264      	movs	r2, #100	; 0x64
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <main+0x90>)
 80005d0:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0x94>)
 80005d2:	f004 fe3a 	bl	800524a <xTaskCreate>
  xTaskCreate(InputTask3, "Input Task 3", 100, NULL, 1, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <main+0x98>)
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <main+0x9c>)
 80005e6:	f004 fe30 	bl	800524a <xTaskCreate>
  xTaskCreate(OutputTask, "Output Task", 100, NULL, 1, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	490b      	ldr	r1, [pc, #44]	; (8000624 <main+0xa0>)
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0xa4>)
 80005fa:	f004 fe26 	bl	800524a <xTaskCreate>

  vTaskStartScheduler();
 80005fe:	f004 ff7f 	bl	8005500 <vTaskStartScheduler>

  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x7e>
 8000604:	08008164 	.word	0x08008164
 8000608:	2000038c 	.word	0x2000038c
 800060c:	08008180 	.word	0x08008180
 8000610:	0800062d 	.word	0x0800062d
 8000614:	08008190 	.word	0x08008190
 8000618:	08000649 	.word	0x08000649
 800061c:	080081a0 	.word	0x080081a0
 8000620:	08000665 	.word	0x08000665
 8000624:	080081b0 	.word	0x080081b0
 8000628:	08000681 	.word	0x08000681

0800062c <InputTask1>:
  }
  /* USER CODE END 3 */
}

static void InputTask1(void *pvParameters)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Do something..
		xEventGroupSetBits(xEventGroup, TASK1_BIT);
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <InputTask1+0x18>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2101      	movs	r1, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f003 ff5a 	bl	80044f4 <xEventGroupSetBits>
 8000640:	e7f8      	b.n	8000634 <InputTask1+0x8>
 8000642:	bf00      	nop
 8000644:	2000038c 	.word	0x2000038c

08000648 <InputTask2>:
	}
}

static void InputTask2(void *pvParameters)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Do something..
		xEventGroupSetBits(xEventGroup, TASK2_BIT);
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <InputTask2+0x18>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f003 ff4c 	bl	80044f4 <xEventGroupSetBits>
 800065c:	e7f8      	b.n	8000650 <InputTask2+0x8>
 800065e:	bf00      	nop
 8000660:	2000038c 	.word	0x2000038c

08000664 <InputTask3>:
	}
}

static void InputTask3(void *pvParameters)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Do something..
		xEventGroupSetBits(xEventGroup, TASK3_BIT);
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <InputTask3+0x18>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f003 ff3e 	bl	80044f4 <xEventGroupSetBits>
 8000678:	e7f8      	b.n	800066c <InputTask3+0x8>
 800067a:	bf00      	nop
 800067c:	2000038c 	.word	0x2000038c

08000680 <OutputTask>:
	}
}

static void OutputTask(void *pvParameters)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	6078      	str	r0, [r7, #4]
	const EventBits_t xBitsToWaitFor = (TASK1_BIT | TASK2_BIT | TASK3_BIT);
 8000688:	2307      	movs	r3, #7
 800068a:	60fb      	str	r3, [r7, #12]
	EventBits_t xEventGroupValue;

	while(1)
	{
		xEventGroupValue = xEventGroupWaitBits(/* The event group to read. */
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <OutputTask+0x54>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	2201      	movs	r2, #1
 800069a:	68f9      	ldr	r1, [r7, #12]
 800069c:	f003 fe5c 	bl	8004358 <xEventGroupWaitBits>
 80006a0:	60b8      	str	r0, [r7, #8]
												xBitsToWaitFor,
												pdTRUE,
												pdFALSE,
												portMAX_DELAY);

		if((xEventGroupValue & TASK1_BIT) != 0)
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <OutputTask+0x32>
		{
			printf("Bit reading task -\t event bit 0 was set - TASK1 \r\n");
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <OutputTask+0x58>)
 80006ae:	f006 fef1 	bl	8007494 <puts>
		}
		if((xEventGroupValue & TASK2_BIT) != 0)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f003 0302 	and.w	r3, r3, #2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <OutputTask+0x42>
		{
			printf("Bit reading task -\t event bit 1 was set - TASK2 \r\n");
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <OutputTask+0x5c>)
 80006be:	f006 fee9 	bl	8007494 <puts>
		}
		if((xEventGroupValue & TASK3_BIT) != 0)
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0df      	beq.n	800068c <OutputTask+0xc>
		{
			printf("Bit reading task -\t event bit 0 was set - TASK3 \r\n");
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <OutputTask+0x60>)
 80006ce:	f006 fee1 	bl	8007494 <puts>
		xEventGroupValue = xEventGroupWaitBits(/* The event group to read. */
 80006d2:	e7db      	b.n	800068c <OutputTask+0xc>
 80006d4:	2000038c 	.word	0x2000038c
 80006d8:	080081bc 	.word	0x080081bc
 80006dc:	080081f0 	.word	0x080081f0
 80006e0:	08008224 	.word	0x08008224

080006e4 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b09a      	sub	sp, #104	; 0x68
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2248      	movs	r2, #72	; 0x48
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 fdab 	bl	800724e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800070a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000718:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800071a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f023 0303 	bic.w	r3, r3, #3
 8000724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072e:	f001 f843 	bl	80017b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fef6 	bl	8000524 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <SystemClock_Config+0xe8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemClock_Config+0xe8>)
 8000742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <SystemClock_Config+0xe8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000754:	2327      	movs	r3, #39	; 0x27
 8000756:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2340      	movs	r3, #64	; 0x40
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000770:	2300      	movs	r3, #0
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000774:	2360      	movs	r3, #96	; 0x60
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	2300      	movs	r3, #0
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fc0b 	bl	8001f9c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800078c:	f000 f8b2 	bl	80008f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000790:	236f      	movs	r3, #111	; 0x6f
 8000792:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000794:	2302      	movs	r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 ff67 	bl	8002684 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007bc:	f000 f89a 	bl	80008f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c0:	f002 fd54 	bl	800326c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c4:	bf00      	nop
 80007c6:	3768      	adds	r7, #104	; 0x68
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58000400 	.word	0x58000400

080007d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <MX_USB_PCD_Init+0x4c>)
 80007d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007dc:	2208      	movs	r2, #8
 80007de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_USB_PCD_Init+0x48>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USB_PCD_Init+0x48>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_USB_PCD_Init+0x48>)
 8000806:	f000 fe35 	bl	8001474 <HAL_PCD_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000810:	f000 f870 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000094 	.word	0x20000094
 800081c:	40006800 	.word	0x40006800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	2004      	movs	r0, #4
 8000836:	f7ff fe8b 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fe88 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fe85 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2008      	movs	r0, #8
 8000848:	f7ff fe82 	bl	8000550 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2123      	movs	r1, #35	; 0x23
 8000850:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xa4>)
 8000852:	f000 fdf7 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	2310      	movs	r3, #16
 8000858:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <MX_GPIO_Init+0xa8>)
 8000868:	f000 fc7c 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800086c:	2323      	movs	r3, #35	; 0x23
 800086e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_GPIO_Init+0xa4>)
 8000882:	f000 fc6f 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000886:	2303      	movs	r3, #3
 8000888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_GPIO_Init+0xac>)
 8000898:	f000 fc64 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800089c:	23c0      	movs	r3, #192	; 0xc0
 800089e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ac:	2307      	movs	r3, #7
 80008ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <MX_GPIO_Init+0xa4>)
 80008b6:	f000 fc55 	bl	8001164 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48000800 	.word	0x48000800
 80008cc:	48000c00 	.word	0x48000c00

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f000 fb33 	bl	8000f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>

080008fe <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800090c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4313      	orrs	r3, r2
 8000914:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4013      	ands	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800093e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000962:	b480      	push	{r7}
 8000964:	b085      	sub	sp, #20
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800096a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4313      	orrs	r3, r2
 8000978:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800097a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4013      	ands	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	210f      	movs	r1, #15
 80009a6:	f06f 0001 	mvn.w	r0, #1
 80009aa:	f000 fbb3 	bl	8001114 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80009b6:	463b      	mov	r3, r7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 ff0d 	bl	80017d8 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80009be:	f000 ff4d 	bl	800185c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09c      	sub	sp, #112	; 0x70
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2250      	movs	r2, #80	; 0x50
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 fc2e 	bl	800724e <memset>
  if(huart->Instance==LPUART1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_UART_MspInit+0x84>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d124      	bne.n	8000a46 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009fc:	2302      	movs	r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fab9 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a14:	f7ff ff6e 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff ffa2 	bl	8000962 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff ff6d 	bl	80008fe <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a24:	230c      	movs	r3, #12
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a34:	2308      	movs	r3, #8
 8000a36:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fb8f 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40008000 	.word	0x40008000

08000a54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2250      	movs	r2, #80	; 0x50
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 fbea 	bl	800724e <memset>
  if(hpcd->Instance==USB)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <HAL_PCD_MspInit+0xa8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d136      	bne.n	8000af2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000aa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fa65 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000abc:	f7ff ff1a 	bl	80008f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ff1c 	bl	80008fe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f000 fb3d 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000aea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000aee:	f7ff ff1f 	bl	8000930 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3770      	adds	r7, #112	; 0x70
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40006800 	.word	0x40006800

08000b00 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b24:	68fb      	ldr	r3, [r7, #12]
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	2019      	movs	r0, #25
 8000b4a:	f000 fae3 	bl	8001114 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b4e:	2019      	movs	r0, #25
 8000b50:	f000 fafa 	bl	8001148 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b58:	f7ff ffd2 	bl	8000b00 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 0208 	add.w	r2, r7, #8
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 ff78 	bl	8002a5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b6c:	f001 ff60 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8000b70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_InitTick+0x8c>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	0c9b      	lsrs	r3, r3, #18
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_InitTick+0x90>)
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <HAL_InitTick+0x94>)
 8000b84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_InitTick+0x90>)
 8000b88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b8e:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <HAL_InitTick+0x90>)
 8000b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_InitTick+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_InitTick+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <HAL_InitTick+0x90>)
 8000ba2:	f002 fc7a 	bl	800349a <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_InitTick+0x90>)
 8000bae:	f002 fcd5 	bl	800355c <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	431bde83 	.word	0x431bde83
 8000bc4:	20000390 	.word	0x20000390
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bfe:	f002 fcfb 	bl	80035f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000390 	.word	0x20000390

08000c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
	}

return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f90f 	bl	8000e84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf1      	blt.n	8000c58 <_write+0x12>
	}
	return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_close>:

int _close(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_isatty>:

int _isatty(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f006 f968 	bl	8006fec <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20030000 	.word	0x20030000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	200003dc 	.word	0x200003dc
 8000d50:	20001e90 	.word	0x20001e90

08000d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <SystemInit+0x98>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <SystemInit+0x98>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d80:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <SystemInit+0x9c>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d9e:	f023 0305 	bic.w	r3, r3, #5
 8000da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <SystemInit+0xa0>)
 8000dc0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <SystemInit+0xa0>)
 8000dc8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	faf6fefb 	.word	0xfaf6fefb
 8000df4:	22041000 	.word	0x22041000

08000df8 <LPUART1_UART_TX_Init>:
#include "uart.h"

UART_HandleTypeDef hlpuart1;

void LPUART1_UART_TX_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <LPUART1_UART_TX_Init+0x58>)
 8000e00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e1e:	2208      	movs	r2, #8
 8000e20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <LPUART1_UART_TX_Init+0x54>)
 8000e42:	f002 fdc3 	bl	80039cc <HAL_UART_Init>
  {
  }
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200003e0 	.word	0x200003e0
 8000e50:	40008000 	.word	0x40008000

08000e54 <LPUART1_write>:
  {
  }
}

int LPUART1_write(int ch)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	while(!(LPUART1->ISR & 0x0080)){}
 8000e5c:	bf00      	nop
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <LPUART1_write+0x2c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <LPUART1_write+0xa>
	LPUART1->RDR = (ch & 0xFF);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <LPUART1_write+0x2c>)
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	6253      	str	r3, [r2, #36]	; 0x24
	return ch;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40008000 	.word	0x40008000

08000e84 <__io_putchar>:
{
	while(!(LPUART1->ISR & 0x0020)) {}
	return LPUART1->RDR;
}

int __io_putchar(int ch) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	LPUART1_write(ch);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ffe1 	bl	8000e54 <LPUART1_write>
	return ch;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e9c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea0:	3304      	adds	r3, #4

08000ea2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ea6:	d3f9      	bcc.n	8000e9c <CopyDataInit>
  bx lr
 8000ea8:	4770      	bx	lr

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000eaa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000eac:	3004      	adds	r0, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000eae:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>
  bx lr
 8000eb2:	4770      	bx	lr

08000eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb8:	f7ff ff4c 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <LoopForever+0x8>)
 8000ebe:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <LoopForever+0xc>)
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <LoopForever+0x10>)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f7ff ffed 	bl	8000ea2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopForever+0x14>)
 8000eca:	490c      	ldr	r1, [pc, #48]	; (8000efc <LoopForever+0x18>)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f7ff ffee 	bl	8000eae <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <LoopForever+0x1c>)
 8000ed4:	490b      	ldr	r1, [pc, #44]	; (8000f04 <LoopForever+0x20>)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f7ff ffe9 	bl	8000eae <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000edc:	f006 f982 	bl	80071e4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ee0:	f7ff fb50 	bl	8000584 <main>

08000ee4 <LoopForever>:

LoopForever:
  b LoopForever
 8000ee4:	e7fe      	b.n	8000ee4 <LoopForever>
 8000ee6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ee8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	20000078 	.word	0x20000078
 8000ef4:	080083fc 	.word	0x080083fc
  INIT_BSS _sbss, _ebss
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	20001e90 	.word	0x20001e90
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f00:	20030000 	.word	0x20030000
 8000f04:	20030000 	.word	0x20030000

08000f08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_Init+0x3c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_Init+0x3c>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f8eb 	bl	80010fe <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f7ff fe03 	bl	8000b34 <HAL_InitTick>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e001      	b.n	8000f3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3a:	f7ff fd2b 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58004000 	.word	0x58004000

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	20000470 	.word	0x20000470

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000470 	.word	0x20000470

08000f8c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTickPrio+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff4c 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff63 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb3 	bl	8001098 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff82 	bl	8001044 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff56 	bl	8001008 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e14c      	b.n	800140e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 813e 	beq.w	8001408 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8098 	beq.w	8001408 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012d8:	4a54      	ldr	r2, [pc, #336]	; (800142c <HAL_GPIO_Init+0x2c8>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001302:	d019      	beq.n	8001338 <HAL_GPIO_Init+0x1d4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <HAL_GPIO_Init+0x2cc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1d0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a49      	ldr	r2, [pc, #292]	; (8001434 <HAL_GPIO_Init+0x2d0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1cc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a48      	ldr	r2, [pc, #288]	; (8001438 <HAL_GPIO_Init+0x2d4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1c8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_GPIO_Init+0x2d8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1c4>
 8001324:	2304      	movs	r3, #4
 8001326:	e008      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001328:	2307      	movs	r3, #7
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 800132c:	2303      	movs	r3, #3
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1d6>
 8001338:	2300      	movs	r3, #0
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800134a:	4938      	ldr	r1, [pc, #224]	; (800142c <HAL_GPIO_Init+0x2c8>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800137c:	4a30      	ldr	r2, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 80013ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d2:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 80013dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x2dc>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f aeab 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40010000 	.word	0x40010000
 8001430:	48000400 	.word	0x48000400
 8001434:	48000800 	.word	0x48000800
 8001438:	48000c00 	.word	0x48000c00
 800143c:	48001000 	.word	0x48001000
 8001440:	58000800 	.word	0x58000800

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001460:	e002      	b.n	8001468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001476:	b08b      	sub	sp, #44	; 0x2c
 8001478:	af06      	add	r7, sp, #24
 800147a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0dd      	b.n	8001642 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fada 	bl	8000a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 feb5 	bl	8004222 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e04d      	b.n	800155a <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	3305      	adds	r3, #5
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3304      	adds	r3, #4
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	b298      	uxth	r0, r3
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	333a      	adds	r3, #58	; 0x3a
 80014fe:	4602      	mov	r2, r0
 8001500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3307      	adds	r3, #7
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	333c      	adds	r3, #60	; 0x3c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3344      	adds	r3, #68	; 0x44
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	3301      	adds	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3ac      	bcc.n	80014be <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e044      	b.n	80015f4 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3b5      	bcc.n	800156a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	687e      	ldr	r6, [r7, #4]
 8001606:	466d      	mov	r5, sp
 8001608:	f106 0410 	add.w	r4, r6, #16
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001614:	e885 0003 	stmia.w	r5, {r0, r1}
 8001618:	1d33      	adds	r3, r6, #4
 800161a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f002 fe1b 	bl	8004258 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f805 	bl	800164a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800164a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800166e:	b29b      	uxth	r3, r3
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001682:	b29b      	uxth	r3, r3
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80016aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	58000800 	.word	0x58000800

080016c8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <LL_EXTI_DisableIT_0_31+0x28>)
 80016d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	43db      	mvns	r3, r3
 80016da:	4905      	ldr	r1, [pc, #20]	; (80016f0 <LL_EXTI_DisableIT_0_31+0x28>)
 80016dc:	4013      	ands	r3, r2
 80016de:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	58000800 	.word	0x58000800

080016f4 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80016fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	43db      	mvns	r3, r3
 8001706:	4905      	ldr	r1, [pc, #20]	; (800171c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001708:	4013      	ands	r3, r2
 800170a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	58000800 	.word	0x58000800

08001720 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4904      	ldr	r1, [pc, #16]	; (8001740 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]

}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	58000800 	.word	0x58000800

08001744 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	43db      	mvns	r3, r3
 8001754:	4904      	ldr	r1, [pc, #16]	; (8001768 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001756:	4013      	ands	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	58000800 	.word	0x58000800

0800176c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	58000800 	.word	0x58000800

08001790 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4904      	ldr	r1, [pc, #16]	; (80017b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	58000800 	.word	0x58000800

080017b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	58000400 	.word	0x58000400

080017d8 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_PWR_ConfigPVD+0x80>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 020e 	bic.w	r2, r3, #14
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	491a      	ldr	r1, [pc, #104]	; (8001858 <HAL_PWR_ConfigPVD+0x80>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80017f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017f6:	f7ff ff67 	bl	80016c8 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80017fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80017fe:	f7ff ff79 	bl	80016f4 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001802:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001806:	f7ff ffc3 	bl	8001790 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800180a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800180e:	f7ff ff99 	bl	8001744 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800181e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001822:	f7ff ff3d 	bl	80016a0 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001832:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001836:	f7ff ff73 	bl	8001720 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001846:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800184a:	f7ff ff8f 	bl	800176c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58000400 	.word	0x58000400

0800185c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_PWR_EnablePVD+0x1c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_PWR_EnablePVD+0x1c>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6053      	str	r3, [r2, #4]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	58000400 	.word	0x58000400

0800187c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_PWREx_GetVoltageRange+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	58000400 	.word	0x58000400

08001898 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800190a:	d101      	bne.n	8001910 <LL_RCC_HSE_IsReady+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_RCC_HSE_IsReady+0x1a>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196a:	d101      	bne.n	8001970 <LL_RCC_HSI_IsReady+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_HSI_IsReady+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d101      	bne.n	8001a02 <LL_RCC_HSI48_IsReady+0x18>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_RCC_HSI48_IsReady+0x1a>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d101      	bne.n	8001aae <LL_RCC_LSE_IsReady+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_RCC_LSE_IsReady+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d101      	bne.n	8001b16 <LL_RCC_LSI1_IsReady+0x18>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <LL_RCC_LSI1_IsReady+0x1a>
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d101      	bne.n	8001b7e <LL_RCC_LSI2_IsReady+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_RCC_LSI2_IsReady+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d101      	bne.n	8001c0a <LL_RCC_MSI_IsReady+0x16>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_RCC_MSI_IsReady+0x18>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c4e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2bb0      	cmp	r3, #176	; 0xb0
 8001c54:	d901      	bls.n	8001c5a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c56:	23b0      	movs	r3, #176	; 0xb0
 8001c58:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 0203 	bic.w	r2, r3, #3
 8001ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e70:	d101      	bne.n	8001e76 <LL_RCC_PLL_IsReady+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_RCC_PLL_IsReady+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef6:	d101      	bne.n	8001efc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f1c:	d101      	bne.n	8001f22 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d101      	bne.n	8001f48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f66:	d101      	bne.n	8001f6c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f8a:	d101      	bne.n	8001f90 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b08d      	sub	sp, #52	; 0x34
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e363      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 808d 	beq.w	80020d6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fbc:	f7ff fe7d 	bl	8001cba <LL_RCC_GetSysClkSource>
 8001fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc2:	f7ff ff83 	bl	8001ecc <LL_RCC_PLL_GetMainSource>
 8001fc6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x3e>
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d147      	bne.n	8002064 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d144      	bne.n	8002064 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e347      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001fea:	f7ff fe28 	bl	8001c3e <LL_RCC_MSI_GetRange>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d914      	bls.n	800201e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fd61 	bl	8002ac0 <RCC_SetFlashLatencyFromMSIRange>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e336      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fe02 	bl	8001c16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fe26 	bl	8001c68 <LL_RCC_MSI_SetCalibTrimming>
 800201c:	e013      	b.n	8002046 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fdf7 	bl	8001c16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fe1b 	bl	8001c68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fd42 	bl	8002ac0 <RCC_SetFlashLatencyFromMSIRange>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e317      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002046:	f000 fcc9 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 800204a:	4603      	mov	r3, r0
 800204c:	4aa4      	ldr	r2, [pc, #656]	; (80022e0 <HAL_RCC_OscConfig+0x344>)
 800204e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002050:	4ba4      	ldr	r3, [pc, #656]	; (80022e4 <HAL_RCC_OscConfig+0x348>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fd6d 	bl	8000b34 <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d039      	beq.n	80020d4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e308      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01e      	beq.n	80020aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206c:	f7ff fda4 	bl	8001bb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002070:	f7fe ff80 	bl	8000f74 <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002078:	f7fe ff7c 	bl	8000f74 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e2f5      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800208a:	f7ff fdb3 	bl	8001bf4 <LL_RCC_MSI_IsReady>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f1      	beq.n	8002078 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fdbc 	bl	8001c16 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fde0 	bl	8001c68 <LL_RCC_MSI_SetCalibTrimming>
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020aa:	f7ff fd94 	bl	8001bd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ae:	f7fe ff61 	bl	8000f74 <HAL_GetTick>
 80020b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b6:	f7fe ff5d 	bl	8000f74 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e2d6      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020c8:	f7ff fd94 	bl	8001bf4 <LL_RCC_MSI_IsReady>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f1      	bne.n	80020b6 <HAL_RCC_OscConfig+0x11a>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d047      	beq.n	8002172 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	f7ff fdea 	bl	8001cba <LL_RCC_GetSysClkSource>
 80020e6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e8:	f7ff fef0 	bl	8001ecc <LL_RCC_PLL_GetMainSource>
 80020ec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_OscConfig+0x164>
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d108      	bne.n	800210c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d134      	bne.n	8002172 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e2b4      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d102      	bne.n	800211c <HAL_RCC_OscConfig+0x180>
 8002116:	f7ff fbd1 	bl	80018bc <LL_RCC_HSE_Enable>
 800211a:	e001      	b.n	8002120 <HAL_RCC_OscConfig+0x184>
 800211c:	f7ff fbdd 	bl	80018da <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff24 	bl	8000f74 <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe ff20 	bl	8000f74 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e299      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002142:	f7ff fbd9 	bl	80018f8 <LL_RCC_HSE_IsReady>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f1      	beq.n	8002130 <HAL_RCC_OscConfig+0x194>
 800214c:	e011      	b.n	8002172 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe ff11 	bl	8000f74 <HAL_GetTick>
 8002152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002156:	f7fe ff0d 	bl	8000f74 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e286      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002168:	f7ff fbc6 	bl	80018f8 <LL_RCC_HSE_IsReady>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f1      	bne.n	8002156 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d04c      	beq.n	8002218 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217e:	f7ff fd9c 	bl	8001cba <LL_RCC_GetSysClkSource>
 8002182:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002184:	f7ff fea2 	bl	8001ecc <LL_RCC_PLL_GetMainSource>
 8002188:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x200>
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d10e      	bne.n	80021b4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d10b      	bne.n	80021b4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e266      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fbe5 	bl	800197c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021b2:	e031      	b.n	8002218 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d019      	beq.n	80021f0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	f7ff fbae 	bl	800191c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fed8 	bl	8000f74 <HAL_GetTick>
 80021c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fed4 	bl	8000f74 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e24d      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021da:	f7ff fbbd 	bl	8001958 <LL_RCC_HSI_IsReady>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f1      	beq.n	80021c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fbc7 	bl	800197c <LL_RCC_HSI_SetCalibTrimming>
 80021ee:	e013      	b.n	8002218 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f0:	f7ff fba3 	bl	800193a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe febe 	bl	8000f74 <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7fe feba 	bl	8000f74 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e233      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800220e:	f7ff fba3 	bl	8001958 <LL_RCC_HSI_IsReady>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f1      	bne.n	80021fc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a3 	beq.w	8002378 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d076      	beq.n	8002328 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d046      	beq.n	80022d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002246:	f7ff fc5a 	bl	8001afe <LL_RCC_LSI1_IsReady>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d113      	bne.n	8002278 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002250:	f7ff fc33 	bl	8001aba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002254:	f7fe fe8e 	bl	8000f74 <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800225c:	f7fe fe8a 	bl	8000f74 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e203      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800226e:	f7ff fc46 	bl	8001afe <LL_RCC_LSI1_IsReady>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f1      	beq.n	800225c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002278:	f7ff fc53 	bl	8001b22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fe7a 	bl	8000f74 <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002284:	f7fe fe76 	bl	8000f74 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b03      	cmp	r3, #3
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1ef      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002296:	f7ff fc66 	bl	8001b66 <LL_RCC_LSI2_IsReady>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f1      	beq.n	8002284 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fc70 	bl	8001b8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022aa:	f7ff fc17 	bl	8001adc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe61 	bl	8000f74 <HAL_GetTick>
 80022b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022b6:	f7fe fe5d 	bl	8000f74 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1d6      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022c8:	f7ff fc19 	bl	8001afe <LL_RCC_LSI1_IsReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f1      	bne.n	80022b6 <HAL_RCC_OscConfig+0x31a>
 80022d2:	e051      	b.n	8002378 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022d4:	f7ff fbf1 	bl	8001aba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe4c 	bl	8000f74 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022de:	e00c      	b.n	80022fa <HAL_RCC_OscConfig+0x35e>
 80022e0:	20000004 	.word	0x20000004
 80022e4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022e8:	f7fe fe44 	bl	8000f74 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1bd      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022fa:	f7ff fc00 	bl	8001afe <LL_RCC_LSI1_IsReady>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f1      	beq.n	80022e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002304:	f7ff fc1e 	bl	8001b44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800230a:	f7fe fe33 	bl	8000f74 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1ac      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800231c:	f7ff fc23 	bl	8001b66 <LL_RCC_LSI2_IsReady>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f1      	bne.n	800230a <HAL_RCC_OscConfig+0x36e>
 8002326:	e027      	b.n	8002378 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002328:	f7ff fc0c 	bl	8001b44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fe22 	bl	8000f74 <HAL_GetTick>
 8002330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002334:	f7fe fe1e 	bl	8000f74 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b03      	cmp	r3, #3
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e197      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002346:	f7ff fc0e 	bl	8001b66 <LL_RCC_LSI2_IsReady>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f1      	bne.n	8002334 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002350:	f7ff fbc4 	bl	8001adc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe fe0e 	bl	8000f74 <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800235c:	f7fe fe0a 	bl	8000f74 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e183      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800236e:	f7ff fbc6 	bl	8001afe <LL_RCC_LSI1_IsReady>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f1      	bne.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d05b      	beq.n	800243c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002384:	4ba7      	ldr	r3, [pc, #668]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002390:	f7ff fa12 	bl	80017b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002394:	f7fe fdee 	bl	8000f74 <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe fdea 	bl	8000f74 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e163      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b9d      	ldr	r3, [pc, #628]	; (8002624 <HAL_RCC_OscConfig+0x688>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_OscConfig+0x42c>
 80023c2:	f7ff fb24 	bl	8001a0e <LL_RCC_LSE_Enable>
 80023c6:	e00c      	b.n	80023e2 <HAL_RCC_OscConfig+0x446>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d104      	bne.n	80023da <HAL_RCC_OscConfig+0x43e>
 80023d0:	f7ff fb3f 	bl	8001a52 <LL_RCC_LSE_EnableBypass>
 80023d4:	f7ff fb1b 	bl	8001a0e <LL_RCC_LSE_Enable>
 80023d8:	e003      	b.n	80023e2 <HAL_RCC_OscConfig+0x446>
 80023da:	f7ff fb29 	bl	8001a30 <LL_RCC_LSE_Disable>
 80023de:	f7ff fb49 	bl	8001a74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fdc3 	bl	8000f74 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fdbf 	bl	8000f74 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e136      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002408:	f7ff fb45 	bl	8001a96 <LL_RCC_LSE_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ef      	beq.n	80023f2 <HAL_RCC_OscConfig+0x456>
 8002412:	e013      	b.n	800243c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fdae 	bl	8000f74 <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fdaa 	bl	8000f74 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e121      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002432:	f7ff fb30 	bl	8001a96 <LL_RCC_LSE_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ef      	bne.n	800241c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	d014      	beq.n	800247a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002450:	f7ff faa9 	bl	80019a6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe fd8e 	bl	8000f74 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800245c:	f7fe fd8a 	bl	8000f74 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e103      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800246e:	f7ff fabc 	bl	80019ea <LL_RCC_HSI48_IsReady>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f1      	beq.n	800245c <HAL_RCC_OscConfig+0x4c0>
 8002478:	e013      	b.n	80024a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800247a:	f7ff faa5 	bl	80019c8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247e:	f7fe fd79 	bl	8000f74 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002486:	f7fe fd75 	bl	8000f74 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0ee      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002498:	f7ff faa7 	bl	80019ea <LL_RCC_HSI48_IsReady>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f1      	bne.n	8002486 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80e4 	beq.w	8002674 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ac:	f7ff fc05 	bl	8001cba <LL_RCC_GetSysClkSource>
 80024b0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	2b02      	cmp	r3, #2
 80024c0:	f040 80b4 	bne.w	800262c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d123      	bne.n	800251a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d11c      	bne.n	800251a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d114      	bne.n	800251a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d10d      	bne.n	800251a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d05d      	beq.n	80025d6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d058      	beq.n	80025d2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0a1      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002532:	f7ff fc85 	bl	8001e40 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002536:	f7fe fd1d 	bl	8000f74 <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fd19 	bl	8000f74 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e092      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ef      	bne.n	800253e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x68c>)
 8002566:	4013      	ands	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002576:	0212      	lsls	r2, r2, #8
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002584:	4311      	orrs	r1, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800258a:	430a      	orrs	r2, r1
 800258c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002594:	f7ff fc45 	bl	8001e22 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a8:	f7fe fce4 	bl	8000f74 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fce0 	bl	8000f74 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e059      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ef      	beq.n	80025b0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	e050      	b.n	8002674 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e04f      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d147      	bne.n	8002674 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025e4:	f7ff fc1d 	bl	8001e22 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f8:	f7fe fcbc 	bl	8000f74 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe fcb8 	bl	8000f74 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e031      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x664>
 8002620:	e028      	b.n	8002674 <HAL_RCC_OscConfig+0x6d8>
 8002622:	bf00      	nop
 8002624:	58000400 	.word	0x58000400
 8002628:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d01e      	beq.n	8002670 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	f7ff fc05 	bl	8001e40 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fc9d 	bl	8000f74 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fc99 	bl	8000f74 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e012      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1ef      	bne.n	800263e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_OscConfig+0x6e4>)
 800266a:	4013      	ands	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
 800266e:	e001      	b.n	8002674 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3734      	adds	r7, #52	; 0x34
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop
 8002680:	eefefffc 	.word	0xeefefffc

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e12d      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b98      	ldr	r3, [pc, #608]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d91b      	bls.n	80026de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b95      	ldr	r3, [pc, #596]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4993      	ldr	r1, [pc, #588]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b6:	f7fe fc5d 	bl	8000f74 <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026be:	f7fe fc59 	bl	8000f74 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e111      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff faef 	bl	8001cd2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fc3e 	bl	8000f74 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026fc:	f7fe fc3a 	bl	8000f74 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0f2      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800270e:	f7ff fbe9 	bl	8001ee4 <LL_RCC_IsActiveFlag_HPRE>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f1      	beq.n	80026fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fae6 	bl	8001cfa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800272e:	f7fe fc21 	bl	8000f74 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002736:	f7fe fc1d 	bl	8000f74 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0d5      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002748:	f7ff fbde 	bl	8001f08 <LL_RCC_IsActiveFlag_C2HPRE>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f1      	beq.n	8002736 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fadf 	bl	8001d26 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002768:	f7fe fc04 	bl	8000f74 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002770:	f7fe fc00 	bl	8000f74 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0b8      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002782:	f7ff fbd4 	bl	8001f2e <LL_RCC_IsActiveFlag_SHDHPRE>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f1      	beq.n	8002770 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d016      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fad9 	bl	8001d54 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027a2:	f7fe fbe7 	bl	8000f74 <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027aa:	f7fe fbe3 	bl	8000f74 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e09b      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027bc:	f7ff fbca 	bl	8001f54 <LL_RCC_IsActiveFlag_PPRE1>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f1      	beq.n	80027aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d017      	beq.n	8002802 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff facf 	bl	8001d7c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027de:	f7fe fbc9 	bl	8000f74 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027e6:	f7fe fbc5 	bl	8000f74 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e07d      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027f8:	f7ff fbbe 	bl	8001f78 <LL_RCC_IsActiveFlag_PPRE2>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f1      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d043      	beq.n	8002896 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d106      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002816:	f7ff f86f 	bl	80018f8 <LL_RCC_HSE_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d11e      	bne.n	800285e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e067      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d106      	bne.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800282c:	f7ff fb17 	bl	8001e5e <LL_RCC_PLL_IsReady>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e05c      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002842:	f7ff f9d7 	bl	8001bf4 <LL_RCC_MSI_IsReady>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e051      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002850:	f7ff f882 	bl	8001958 <LL_RCC_HSI_IsReady>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e04a      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fa15 	bl	8001c92 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe fb84 	bl	8000f74 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe fb80 	bl	8000f74 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e036      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	f7ff fa18 	bl	8001cba <LL_RCC_GetSysClkSource>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	429a      	cmp	r2, r3
 8002894:	d1ec      	bne.n	8002870 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d21b      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0207 	bic.w	r2, r3, #7
 80028ac:	4913      	ldr	r1, [pc, #76]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b4:	f7fe fb5e 	bl	8000f74 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028bc:	f7fe fb5a 	bl	8000f74 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e012      	b.n	80028f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x278>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1ef      	bne.n	80028bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028dc:	f000 f87e 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <HAL_RCC_ClockConfig+0x27c>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028e6:	f7fe fb51 	bl	8000f8c <HAL_GetTickPrio>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f921 	bl	8000b34 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	58004000 	.word	0x58004000
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290a:	f7ff f9d6 	bl	8001cba <LL_RCC_GetSysClkSource>
 800290e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002916:	f7ff f992 	bl	8001c3e <LL_RCC_MSI_GetRange>
 800291a:	4603      	mov	r3, r0
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e04b      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b04      	cmp	r3, #4
 8002930:	d102      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e045      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d10a      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800293e:	f7fe ffab 	bl	8001898 <LL_RCC_HSE_IsEnabledDiv2>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e03a      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e037      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002954:	f7ff faba 	bl	8001ecc <LL_RCC_PLL_GetMainSource>
 8002958:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d003      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x64>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x6a>
 8002966:	e00d      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800296a:	60bb      	str	r3, [r7, #8]
        break;
 800296c:	e015      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800296e:	f7fe ff93 	bl	8001898 <LL_RCC_HSE_IsEnabledDiv2>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800297a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800297c:	e00d      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002980:	60bb      	str	r3, [r7, #8]
        break;
 8002982:	e00a      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002984:	f7ff f95b 	bl	8001c3e <LL_RCC_MSI_GetRange>
 8002988:	4603      	mov	r3, r0
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	60bb      	str	r3, [r7, #8]
        break;
 8002998:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800299a:	f7ff fa72 	bl	8001e82 <LL_RCC_PLL_GetN>
 800299e:	4602      	mov	r2, r0
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	fb03 f402 	mul.w	r4, r3, r2
 80029a6:	f7ff fa85 	bl	8001eb4 <LL_RCC_PLL_GetDivider>
 80029aa:	4603      	mov	r3, r0
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	3301      	adds	r3, #1
 80029b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80029b4:	f7ff fa72 	bl	8001e9c <LL_RCC_PLL_GetR>
 80029b8:	4603      	mov	r3, r0
 80029ba:	0f5b      	lsrs	r3, r3, #29
 80029bc:	3301      	adds	r3, #1
 80029be:	fbb4 f3f3 	udiv	r3, r4, r3
 80029c2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029c4:	68fb      	ldr	r3, [r7, #12]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	080082fc 	.word	0x080082fc
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	01e84800 	.word	0x01e84800

080029dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b598      	push	{r3, r4, r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029e0:	f7ff ff90 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80029e4:	4604      	mov	r4, r0
 80029e6:	f7ff f9dd 	bl	8001da4 <LL_RCC_GetAHBPrescaler>
 80029ea:	4603      	mov	r3, r0
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x24>)
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd98      	pop	{r3, r4, r7, pc}
 8002a00:	0800829c 	.word	0x0800829c

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b598      	push	{r3, r4, r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a08:	f7ff ffe8 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	f7ff f9f0 	bl	8001df2 <LL_RCC_GetAPB1Prescaler>
 8002a12:	4603      	mov	r3, r0
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd98      	pop	{r3, r4, r7, pc}
 8002a2c:	080082dc 	.word	0x080082dc

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b598      	push	{r3, r4, r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a34:	f7ff ffd2 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a38:	4604      	mov	r4, r0
 8002a3a:	f7ff f9e6 	bl	8001e0a <LL_RCC_GetAPB2Prescaler>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0adb      	lsrs	r3, r3, #11
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd98      	pop	{r3, r4, r7, pc}
 8002a58:	080082dc 	.word	0x080082dc

08002a5c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	226f      	movs	r2, #111	; 0x6f
 8002a6a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002a6c:	f7ff f925 	bl	8001cba <LL_RCC_GetSysClkSource>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002a76:	f7ff f995 	bl	8001da4 <LL_RCC_GetAHBPrescaler>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002a80:	f7ff f9b7 	bl	8001df2 <LL_RCC_GetAPB1Prescaler>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002a8a:	f7ff f9be 	bl	8001e0a <LL_RCC_GetAPB2Prescaler>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002a94:	f7ff f992 	bl	8001dbc <LL_C2_RCC_GetAHBPrescaler>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002a9e:	f7ff f99a 	bl	8001dd6 <LL_RCC_GetAHB4Prescaler>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_RCC_GetClockConfig+0x60>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0207 	and.w	r2, r3, #7
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	58004000 	.word	0x58004000

08002ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2bb0      	cmp	r3, #176	; 0xb0
 8002acc:	d903      	bls.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e007      	b.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ae6:	f7ff f976 	bl	8001dd6 <LL_RCC_GetAHB4Prescaler>
 8002aea:	4603      	mov	r3, r0
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0c9c      	lsrs	r4, r3, #18
 8002b0a:	f7fe feb7 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4620      	mov	r0, r4
 8002b14:	f000 f80c 	bl	8002b30 <RCC_SetFlashLatency>
 8002b18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	bf00      	nop
 8002b24:	080082fc 	.word	0x080082fc
 8002b28:	0800829c 	.word	0x0800829c
 8002b2c:	431bde83 	.word	0x431bde83

08002b30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b093      	sub	sp, #76	; 0x4c
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <RCC_SetFlashLatency+0xe8>)
 8002b3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b46:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <RCC_SetFlashLatency+0xec>)
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <RCC_SetFlashLatency+0xf0>)
 8002b54:	f107 040c 	add.w	r4, r7, #12
 8002b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b5e:	2300      	movs	r3, #0
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b68:	d11a      	bne.n	8002ba0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6e:	e013      	b.n	8002b98 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	3348      	adds	r3, #72	; 0x48
 8002b76:	443b      	add	r3, r7
 8002b78:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d807      	bhi.n	8002b92 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3348      	adds	r3, #72	; 0x48
 8002b88:	443b      	add	r3, r7
 8002b8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b90:	e020      	b.n	8002bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b94:	3301      	adds	r3, #1
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d9e8      	bls.n	8002b70 <RCC_SetFlashLatency+0x40>
 8002b9e:	e019      	b.n	8002bd4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	e013      	b.n	8002bce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	3348      	adds	r3, #72	; 0x48
 8002bac:	443b      	add	r3, r7
 8002bae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d807      	bhi.n	8002bc8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	3348      	adds	r3, #72	; 0x48
 8002bbe:	443b      	add	r3, r7
 8002bc0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bc6:	e005      	b.n	8002bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bca:	3301      	adds	r3, #1
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d9e8      	bls.n	8002ba6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <RCC_SetFlashLatency+0xf4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	4911      	ldr	r1, [pc, #68]	; (8002c24 <RCC_SetFlashLatency+0xf4>)
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002be4:	f7fe f9c6 	bl	8000f74 <HAL_GetTick>
 8002be8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bea:	e008      	b.n	8002bfe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bec:	f7fe f9c2 	bl	8000f74 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e007      	b.n	8002c0e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <RCC_SetFlashLatency+0xf4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1ef      	bne.n	8002bec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	374c      	adds	r7, #76	; 0x4c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	08008258 	.word	0x08008258
 8002c1c:	08008268 	.word	0x08008268
 8002c20:	08008274 	.word	0x08008274
 8002c24:	58004000 	.word	0x58004000

08002c28 <LL_RCC_LSE_IsEnabled>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <LL_RCC_LSE_IsEnabled+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_LSE_IsReady>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d101      	bne.n	8002c64 <LL_RCC_LSE_IsReady+0x18>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_RCC_LSE_IsReady+0x1a>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6013      	str	r3, [r2, #0]
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_SetRFWKPClockSource>:
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_SetSMPSClockSource>:
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f023 0203 	bic.w	r2, r3, #3
 8002ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_SetSMPSPrescaler>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_SetUSARTClockSource>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_RCC_SetLPUARTClockSource>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_SetI2CClockSource>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_SetLPTIMClockSource>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	43db      	mvns	r3, r3
 8002db4:	401a      	ands	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_SetSAIClockSource>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_RCC_SetRNGClockSource>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_RCC_SetCLK48ClockSource>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_RCC_SetUSBClockSource>:
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffe3 	bl	8002e28 <LL_RCC_SetCLK48ClockSource>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <LL_RCC_SetADCClockSource>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_RCC_SetRTCClockSource>:
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_GetRTCClockSource>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_ForceBackupDomainReset>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_ReleaseBackupDomainReset>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_PLLSAI1_Enable>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_PLLSAI1_Disable>:
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f50:	6013      	str	r3, [r2, #0]
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_PLLSAI1_IsReady>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6e:	d101      	bne.n	8002f74 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d034      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fa4:	d021      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002fa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002faa:	d81b      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb0:	d01d      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb6:	d815      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc0:	d110      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fd2:	e00d      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f94d 	bl	8003278 <RCCEx_PLLSAI1_ConfigNP>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
        break;
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fee8 	bl	8002dd0 <LL_RCC_SetSAIClockSource>
 8003000:	e001      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003002:	7ffb      	ldrb	r3, [r7, #31]
 8003004:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	d046      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003012:	f7ff ff56 	bl	8002ec2 <LL_RCC_GetRTCClockSource>
 8003016:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	429a      	cmp	r2, r3
 8003020:	d03c      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003022:	f7fe fbc9 	bl	80017b8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff30 	bl	8002e96 <LL_RCC_SetRTCClockSource>
 8003036:	e02e      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003042:	f7ff ff4b 	bl	8002edc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003046:	f7ff ff5a 	bl	8002efe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003062:	f7ff fde1 	bl	8002c28 <LL_RCC_LSE_IsEnabled>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d114      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306c:	f7fd ff82 	bl	8000f74 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003072:	e00b      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fd ff7e 	bl	8000f74 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d902      	bls.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	77fb      	strb	r3, [r7, #31]
              break;
 800308a:	e004      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800308c:	f7ff fdde 	bl	8002c4c <LL_RCC_LSE_IsReady>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d1ee      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	77bb      	strb	r3, [r7, #30]
 800309a:	e001      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fe2a 	bl	8002d0a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fe35 	bl	8002d36 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe5d 	bl	8002d9c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fe52 	bl	8002d9c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fe2a 	bl	8002d62 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe1f 	bl	8002d62 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d022      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fe8d 	bl	8002e54 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003142:	d107      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f8e3 	bl	800332e <RCCEx_PLLSAI1_ConfigNQ>
 8003168:	4603      	mov	r3, r0
 800316a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800316c:	7ffb      	ldrb	r3, [r7, #31]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02b      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003194:	d003      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe2a 	bl	8002dfc <LL_RCC_SetRNGClockSource>
 80031a8:	e00a      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff fe21 	bl	8002dfc <LL_RCC_SetRNGClockSource>
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff fe34 	bl	8002e28 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031c8:	d107      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d022      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe3d 	bl	8002e6a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f8:	d107      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003212:	d10b      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f8e3 	bl	80033e4 <RCCEx_PLLSAI1_ConfigNR>
 800321e:	4603      	mov	r3, r0
 8003220:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003228:	7ffb      	ldrb	r3, [r7, #31]
 800322a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fd26 	bl	8002c8e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fd45 	bl	8002ce2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fd2c 	bl	8002cba <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003262:	7fbb      	ldrb	r3, [r7, #30]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003270:	f7ff fcfe 	bl	8002c70 <LL_RCC_MSI_EnablePLLMode>
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003284:	f7ff fe5b 	bl	8002f3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003288:	f7fd fe74 	bl	8000f74 <HAL_GetTick>
 800328c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800328e:	e009      	b.n	80032a4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003290:	f7fd fe70 	bl	8000f74 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d902      	bls.n	80032a4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	73fb      	strb	r3, [r7, #15]
      break;
 80032a2:	e004      	b.n	80032ae <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032a4:	f7ff fe5a 	bl	8002f5c <LL_RCC_PLLSAI1_IsReady>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d137      	bne.n	8003324 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c8:	4313      	orrs	r3, r2
 80032ca:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032de:	4313      	orrs	r3, r2
 80032e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032e2:	f7ff fe1d 	bl	8002f20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e6:	f7fd fe45 	bl	8000f74 <HAL_GetTick>
 80032ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032ec:	e009      	b.n	8003302 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ee:	f7fd fe41 	bl	8000f74 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d902      	bls.n	8003302 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003300:	e004      	b.n	800330c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003302:	f7ff fe2b 	bl	8002f5c <LL_RCC_PLLSAI1_IsReady>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d1f0      	bne.n	80032ee <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003320:	4313      	orrs	r3, r2
 8003322:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800333a:	f7ff fe00 	bl	8002f3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800333e:	f7fd fe19 	bl	8000f74 <HAL_GetTick>
 8003342:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003344:	e009      	b.n	800335a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003346:	f7fd fe15 	bl	8000f74 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d902      	bls.n	800335a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e004      	b.n	8003364 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800335a:	f7ff fdff 	bl	8002f5c <LL_RCC_PLLSAI1_IsReady>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d137      	bne.n	80033da <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003394:	4313      	orrs	r3, r2
 8003396:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003398:	f7ff fdc2 	bl	8002f20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fd fdea 	bl	8000f74 <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033a2:	e009      	b.n	80033b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a4:	f7fd fde6 	bl	8000f74 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	73fb      	strb	r3, [r7, #15]
        break;
 80033b6:	e004      	b.n	80033c2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033b8:	f7ff fdd0 	bl	8002f5c <LL_RCC_PLLSAI1_IsReady>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d1f0      	bne.n	80033a4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d6:	4313      	orrs	r3, r2
 80033d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033f0:	f7ff fda5 	bl	8002f3e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033f4:	f7fd fdbe 	bl	8000f74 <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033fa:	e009      	b.n	8003410 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033fc:	f7fd fdba 	bl	8000f74 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	73fb      	strb	r3, [r7, #15]
      break;
 800340e:	e004      	b.n	800341a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003410:	f7ff fda4 	bl	8002f5c <LL_RCC_PLLSAI1_IsReady>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d137      	bne.n	8003490 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003434:	4313      	orrs	r3, r2
 8003436:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800344e:	f7ff fd67 	bl	8002f20 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003452:	f7fd fd8f 	bl	8000f74 <HAL_GetTick>
 8003456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003458:	e009      	b.n	800346e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800345a:	f7fd fd8b 	bl	8000f74 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d902      	bls.n	800346e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	73fb      	strb	r3, [r7, #15]
        break;
 800346c:	e004      	b.n	8003478 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800346e:	f7ff fd75 	bl	8002f5c <LL_RCC_PLLSAI1_IsReady>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d1f0      	bne.n	800345a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348c:	4313      	orrs	r3, r2
 800348e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e049      	b.n	8003540 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f841 	bl	8003548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 f9d5 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d001      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e036      	b.n	80035e2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_TIM_Base_Start_IT+0x94>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x44>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d115      	bne.n	80035cc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_TIM_Base_Start_IT+0x98>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d015      	beq.n	80035de <HAL_TIM_Base_Start_IT+0x82>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d011      	beq.n	80035de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	e008      	b.n	80035de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e000      	b.n	80035e0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	00010007 	.word	0x00010007

080035f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d122      	bne.n	8003654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d11b      	bne.n	8003654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0202 	mvn.w	r2, #2
 8003624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f905 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8f7 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f908 	bl	800385e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0204 	mvn.w	r2, #4
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8db 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8cd 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8de 	bl	800385e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0208 	mvn.w	r2, #8
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8b1 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8a3 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8b4 	bl	800385e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0210 	mvn.w	r2, #16
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2208      	movs	r2, #8
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f887 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f879 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f88a 	bl	800385e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0201 	mvn.w	r2, #1
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd f8aa 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d107      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8de 	bl	8003964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b6:	d10e      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8d1 	bl	8003978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d10e      	bne.n	8003802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f838 	bl	8003872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b20      	cmp	r3, #32
 800380e:	d10e      	bne.n	800382e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0220 	mvn.w	r2, #32
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f891 	bl	8003950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_Base_SetConfig+0x20>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d108      	bne.n	80038ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_Base_SetConfig+0x52>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0x52>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <TIM_Base_SetConfig+0xc0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0x52>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <TIM_Base_SetConfig+0xc4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d108      	bne.n	80038ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0xa0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <TIM_Base_SetConfig+0xc0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0xa0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <TIM_Base_SetConfig+0xc4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	615a      	str	r2, [r3, #20]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_RCC_GetUSARTClockSource>:
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4013      	ands	r3, r2
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_RCC_GetLPUARTClockSource>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4013      	ands	r3, r2
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e042      	b.n	8003a64 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fc ffeb 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f82c 	bl	8003a6c <UART_SetConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e022      	b.n	8003a64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa46 	bl	8003eb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 facd 	bl	8003ffc <UART_CheckIdleState>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b08c      	sub	sp, #48	; 0x30
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4baf      	ldr	r3, [pc, #700]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4aa4      	ldr	r2, [pc, #656]	; (8003d5c <UART_SetConfig+0x2f0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ae2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f023 010f 	bic.w	r1, r3, #15
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a95      	ldr	r2, [pc, #596]	; (8003d60 <UART_SetConfig+0x2f4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d125      	bne.n	8003b5c <UART_SetConfig+0xf0>
 8003b10:	2003      	movs	r0, #3
 8003b12:	f7ff ff3b 	bl	800398c <LL_RCC_GetUSARTClockSource>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d81b      	bhi.n	8003b54 <UART_SetConfig+0xe8>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0xb8>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b45 	.word	0x08003b45
 8003b2c:	08003b3d 	.word	0x08003b3d
 8003b30:	08003b4d 	.word	0x08003b4d
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e042      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e03e      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003b44:	2304      	movs	r3, #4
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	e03a      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b52:	e036      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003b54:	2310      	movs	r3, #16
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5a:	e032      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7e      	ldr	r2, [pc, #504]	; (8003d5c <UART_SetConfig+0x2f0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d12a      	bne.n	8003bbc <UART_SetConfig+0x150>
 8003b66:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003b6a:	f7ff ff1f 	bl	80039ac <LL_RCC_GetLPUARTClockSource>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b74:	d01a      	beq.n	8003bac <UART_SetConfig+0x140>
 8003b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b7a:	d81b      	bhi.n	8003bb4 <UART_SetConfig+0x148>
 8003b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b80:	d00c      	beq.n	8003b9c <UART_SetConfig+0x130>
 8003b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b86:	d815      	bhi.n	8003bb4 <UART_SetConfig+0x148>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <UART_SetConfig+0x128>
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d008      	beq.n	8003ba4 <UART_SetConfig+0x138>
 8003b92:	e00f      	b.n	8003bb4 <UART_SetConfig+0x148>
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9a:	e012      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e00e      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e00a      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003bac:	2308      	movs	r3, #8
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb2:	e006      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bba:	e002      	b.n	8003bc2 <UART_SetConfig+0x156>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a65      	ldr	r2, [pc, #404]	; (8003d5c <UART_SetConfig+0x2f0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	f040 8097 	bne.w	8003cfc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d823      	bhi.n	8003c1e <UART_SetConfig+0x1b2>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0x170>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c0f 	.word	0x08003c0f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c1f 	.word	0x08003c1f
 8003bfc:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7fe ff00 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c06:	e010      	b.n	8003c2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <UART_SetConfig+0x2f8>)
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c0c:	e00d      	b.n	8003c2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe fe79 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c14:	e009      	b.n	8003c2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c1c:	e005      	b.n	8003c2a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 812a 	beq.w	8003e86 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	4a4c      	ldr	r2, [pc, #304]	; (8003d68 <UART_SetConfig+0x2fc>)
 8003c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d305      	bcc.n	8003c62 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d903      	bls.n	8003c6a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c68:	e10d      	b.n	8003e86 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	60fa      	str	r2, [r7, #12]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <UART_SetConfig+0x2fc>)
 8003c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2200      	movs	r2, #0
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c8c:	f7fc fac8 	bl	8000220 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	020b      	lsls	r3, r1, #8
 8003ca2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ca6:	0202      	lsls	r2, r0, #8
 8003ca8:	6979      	ldr	r1, [r7, #20]
 8003caa:	6849      	ldr	r1, [r1, #4]
 8003cac:	0849      	lsrs	r1, r1, #1
 8003cae:	2000      	movs	r0, #0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	eb12 0804 	adds.w	r8, r2, r4
 8003cb8:	eb43 0905 	adc.w	r9, r3, r5
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	469a      	mov	sl, r3
 8003cc4:	4693      	mov	fp, r2
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	465b      	mov	r3, fp
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc faa7 	bl	8000220 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ce0:	d308      	bcc.n	8003cf4 <UART_SetConfig+0x288>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce8:	d204      	bcs.n	8003cf4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	e0c8      	b.n	8003e86 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cfa:	e0c4      	b.n	8003e86 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d16d      	bne.n	8003de2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	2b07      	cmp	r3, #7
 8003d0e:	d82d      	bhi.n	8003d6c <UART_SetConfig+0x300>
 8003d10:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <UART_SetConfig+0x2ac>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d39 	.word	0x08003d39
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d6d 	.word	0x08003d6d
 8003d24:	08003d47 	.word	0x08003d47
 8003d28:	08003d6d 	.word	0x08003d6d
 8003d2c:	08003d6d 	.word	0x08003d6d
 8003d30:	08003d6d 	.word	0x08003d6d
 8003d34:	08003d4f 	.word	0x08003d4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7fe fe7a 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d3e:	e01b      	b.n	8003d78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <UART_SetConfig+0x2f8>)
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d44:	e018      	b.n	8003d78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d46:	f7fe fddd 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d4c:	e014      	b.n	8003d78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d54:	e010      	b.n	8003d78 <UART_SetConfig+0x30c>
 8003d56:	bf00      	nop
 8003d58:	cfff69f3 	.word	0xcfff69f3
 8003d5c:	40008000 	.word	0x40008000
 8003d60:	40013800 	.word	0x40013800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	0800833c 	.word	0x0800833c
      default:
        pclk = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8083 	beq.w	8003e86 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	4a4a      	ldr	r2, [pc, #296]	; (8003eb0 <UART_SetConfig+0x444>)
 8003d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d92:	005a      	lsls	r2, r3, #1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	441a      	add	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	d916      	bls.n	8003dda <UART_SetConfig+0x36e>
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d212      	bcs.n	8003dda <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f023 030f 	bic.w	r3, r3, #15
 8003dbc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	8bfb      	ldrh	r3, [r7, #30]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	8bfa      	ldrh	r2, [r7, #30]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	e055      	b.n	8003e86 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003de0:	e051      	b.n	8003e86 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	d822      	bhi.n	8003e32 <UART_SetConfig+0x3c6>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x388>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e15 	.word	0x08003e15
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e23 	.word	0x08003e23
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e33 	.word	0x08003e33
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fe0c 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1a:	e010      	b.n	8003e3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <UART_SetConfig+0x448>)
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e20:	e00d      	b.n	8003e3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fd6f 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e28:	e009      	b.n	8003e3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e30:	e005      	b.n	8003e3e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <UART_SetConfig+0x444>)
 8003e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	441a      	add	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	2b0f      	cmp	r3, #15
 8003e6c:	d908      	bls.n	8003e80 <UART_SetConfig+0x414>
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e74:	d204      	bcs.n	8003e80 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	e002      	b.n	8003e86 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003ea2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3730      	adds	r7, #48	; 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb0:	0800833c 	.word	0x0800833c
 8003eb4:	00f42400 	.word	0x00f42400

08003eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01a      	beq.n	8003fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb6:	d10a      	bne.n	8003fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800400c:	f7fc ffb2 	bl	8000f74 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d10e      	bne.n	800403e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f82f 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e025      	b.n	800408a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d10e      	bne.n	800406a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f819 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e00f      	b.n	800408a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b09c      	sub	sp, #112	; 0x70
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a2:	e0a9      	b.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	f000 80a5 	beq.w	80041f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fc ff61 	bl	8000f74 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80040be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d140      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004116:	64ba      	str	r2, [r7, #72]	; 0x48
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800411c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e069      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d051      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004162:	d149      	bne.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800416c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
 800418e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e6      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	613b      	str	r3, [r7, #16]
   return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041c0:	623a      	str	r2, [r7, #32]
 80041c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e010      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	429a      	cmp	r2, r3
 8004214:	f43f af46 	beq.w	80040a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3770      	adds	r7, #112	; 0x70
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800422a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800422e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	b29b      	uxth	r3, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	4013      	ands	r3, r2
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004258:	b084      	sub	sp, #16
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	f107 0014 	add.w	r0, r7, #20
 8004266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	b004      	add	sp, #16
 8004298:	4770      	bx	lr
	...

0800429c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SysTick_Handler+0x1c>)
 80042a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042a4:	f001 fe26 	bl	8005ef4 <xTaskGetSchedulerState>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d001      	beq.n	80042b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042ae:	f002 fc23 	bl	8006af8 <xPortSysTickHandler>
  }
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80042cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4a06      	ldr	r2, [pc, #24]	; (80042ec <vApplicationGetIdleTaskMemory+0x30>)
 80042d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2280      	movs	r2, #128	; 0x80
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000474 	.word	0x20000474
 80042ec:	20000530 	.word	0x20000530

080042f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a07      	ldr	r2, [pc, #28]	; (800431c <vApplicationGetTimerTaskMemory+0x2c>)
 8004300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4a06      	ldr	r2, [pc, #24]	; (8004320 <vApplicationGetTimerTaskMemory+0x30>)
 8004306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430e:	601a      	str	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20000730 	.word	0x20000730
 8004320:	200007ec 	.word	0x200007ec

08004324 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800432a:	2020      	movs	r0, #32
 800432c:	f002 fc74 	bl	8006c18 <pvPortMalloc>
 8004330:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f983 	bl	800464e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800434e:	687b      	ldr	r3, [r7, #4]
	}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b090      	sub	sp, #64	; 0x40
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <xEventGroupWaitBits+0x56>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	61fb      	str	r3, [r7, #28]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <xEventGroupWaitBits+0x72>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	61bb      	str	r3, [r7, #24]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ca:	f001 fd93 	bl	8005ef4 <xTaskGetSchedulerState>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <xEventGroupWaitBits+0x82>
 80043d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <xEventGroupWaitBits+0x86>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <xEventGroupWaitBits+0x88>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <xEventGroupWaitBits+0xa2>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	617b      	str	r3, [r7, #20]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80043fa:	f001 f8f1 	bl	80055e0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800440a:	f000 f8fe 	bl	800460a <prvTestWaitCondition>
 800440e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800441a:	2300      	movs	r3, #0
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d028      	beq.n	8004476 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	43db      	mvns	r3, r3
 800442c:	401a      	ands	r2, r3
 800442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e020      	b.n	8004476 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	633b      	str	r3, [r7, #48]	; 0x30
 8004442:	e018      	b.n	8004476 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	1d18      	adds	r0, r3, #4
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	4313      	orrs	r3, r2
 800446a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446c:	4619      	mov	r1, r3
 800446e:	f001 fab5 	bl	80059dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004476:	f001 f8c1 	bl	80055fc <xTaskResumeAll>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d031      	beq.n	80044e6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <xEventGroupWaitBits+0x198>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004498:	f001 fdb8 	bl	800600c <uxTaskResetEventItemValue>
 800449c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11a      	bne.n	80044de <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80044a8:	f002 fa94 	bl	80069d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044b8:	f000 f8a7 	bl	800460a <prvTestWaitCondition>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	401a      	ands	r2, r3
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80044da:	f002 faab 	bl	8006a34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3740      	adds	r7, #64	; 0x40
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	; 0x38
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80044fe:	2300      	movs	r3, #0
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <xEventGroupSetBits+0x32>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <xEventGroupSetBits+0x52>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	3304      	adds	r3, #4
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	3308      	adds	r3, #8
 8004550:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004552:	f001 f845 	bl	80055e0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	431a      	orrs	r2, r3
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004568:	e03c      	b.n	80045e4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800456a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004580:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004588:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d108      	bne.n	80045a6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a4:	e008      	b.n	80045b8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d101      	bne.n	80045b8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045d8:	4619      	mov	r1, r3
 80045da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045dc:	f001 faca 	bl	8005b74 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80045e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1be      	bne.n	800456a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	43db      	mvns	r3, r3
 80045f4:	401a      	ands	r2, r3
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80045fa:	f000 ffff 	bl	80055fc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	681b      	ldr	r3, [r3, #0]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3738      	adds	r7, #56	; 0x38
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800460a:	b480      	push	{r7}
 800460c:	b087      	sub	sp, #28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e007      	b.n	8004640 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4013      	ands	r3, r2
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d101      	bne.n	8004640 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004640:	697b      	ldr	r3, [r7, #20]
}
 8004642:	4618      	mov	r0, r3
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f103 0208 	add.w	r2, r3, #8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 0208 	add.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f103 0208 	add.w	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d103      	bne.n	8004710 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e00c      	b.n	800472a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3308      	adds	r3, #8
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e002      	b.n	800471e <vListInsert+0x2e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d2f6      	bcs.n	8004718 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6892      	ldr	r2, [r2, #8]
 8004778:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6852      	ldr	r2, [r2, #4]
 8004782:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d103      	bne.n	8004796 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60bb      	str	r3, [r7, #8]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047e2:	f002 f8f7 	bl	80069d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	441a      	add	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	3b01      	subs	r3, #1
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	441a      	add	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d114      	bne.n	8004862 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3310      	adds	r3, #16
 8004844:	4618      	mov	r0, r3
 8004846:	f001 f931 	bl	8005aac <xTaskRemoveFromEventList>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d012      	beq.n	8004876 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <xQueueGenericReset+0xcc>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	e009      	b.n	8004876 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3310      	adds	r3, #16
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fef1 	bl	800464e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff feec 	bl	800464e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004876:	f002 f8dd 	bl	8006a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	; 0x38
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <xQueueGenericCreateStatic+0x52>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <xQueueGenericCreateStatic+0x56>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <xQueueGenericCreateStatic+0x58>
 80048de:	2300      	movs	r3, #0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	623b      	str	r3, [r7, #32]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <xQueueGenericCreateStatic+0x7e>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <xQueueGenericCreateStatic+0x82>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <xQueueGenericCreateStatic+0x84>
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	61fb      	str	r3, [r7, #28]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004926:	2350      	movs	r3, #80	; 0x50
 8004928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b50      	cmp	r3, #80	; 0x50
 800492e:	d00a      	beq.n	8004946 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	61bb      	str	r3, [r7, #24]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004946:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800495a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f805 	bl	8004978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004970:	4618      	mov	r0, r3
 8004972:	3730      	adds	r7, #48	; 0x30
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e002      	b.n	800499a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049a6:	2101      	movs	r1, #1
 80049a8:	69b8      	ldr	r0, [r7, #24]
 80049aa:	f7ff ff05 	bl	80047b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <xQueueGenericSend+0x32>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <xQueueGenericSend+0x40>
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <xQueueGenericSend+0x44>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <xQueueGenericSend+0x46>
 8004a04:	2300      	movs	r3, #0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <xQueueGenericSend+0x60>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSend+0x6e>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <xQueueGenericSend+0x72>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericSend+0x74>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xQueueGenericSend+0x8e>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	623b      	str	r3, [r7, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a4e:	f001 fa51 	bl	8005ef4 <xTaskGetSchedulerState>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <xQueueGenericSend+0x9e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <xQueueGenericSend+0xa2>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <xQueueGenericSend+0xa4>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueGenericSend+0xbe>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	61fb      	str	r3, [r7, #28]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a7e:	f001 ffa9 	bl	80069d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d302      	bcc.n	8004a94 <xQueueGenericSend+0xd4>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d129      	bne.n	8004ae8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a9a:	f000 fa0b 	bl	8004eb4 <prvCopyDataToQueue>
 8004a9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	3324      	adds	r3, #36	; 0x24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fffd 	bl	8005aac <xTaskRemoveFromEventList>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ab8:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <xQueueGenericSend+0x1f8>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	e00a      	b.n	8004ae0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <xQueueGenericSend+0x1f8>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ae0:	f001 ffa8 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e063      	b.n	8004bb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aee:	f001 ffa1 	bl	8006a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e05c      	b.n	8004bb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 f899 	bl	8005c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b06:	2301      	movs	r3, #1
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b0a:	f001 ff93 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b0e:	f000 fd67 	bl	80055e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b12:	f001 ff5f 	bl	80069d4 <vPortEnterCritical>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d103      	bne.n	8004b2c <xQueueGenericSend+0x16c>
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d103      	bne.n	8004b42 <xQueueGenericSend+0x182>
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b42:	f001 ff77 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b46:	1d3a      	adds	r2, r7, #4
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 f888 	bl	8005c64 <xTaskCheckForTimeOut>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d124      	bne.n	8004ba4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b5c:	f000 faa2 	bl	80050a4 <prvIsQueueFull>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	3310      	adds	r3, #16
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 ff10 	bl	8005994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b76:	f000 fa2d 	bl	8004fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b7a:	f000 fd3f 	bl	80055fc <xTaskResumeAll>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f af7c 	bne.w	8004a7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <xQueueGenericSend+0x1f8>)
 8004b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	e772      	b.n	8004a7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9a:	f000 fa1b 	bl	8004fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b9e:	f000 fd2d 	bl	80055fc <xTaskResumeAll>
 8004ba2:	e76c      	b.n	8004a7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba6:	f000 fa15 	bl	8004fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004baa:	f000 fd27 	bl	80055fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3738      	adds	r7, #56	; 0x38
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b090      	sub	sp, #64	; 0x40
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <xQueueGenericSendFromISR+0x3c>
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <xQueueGenericSendFromISR+0x40>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <xQueueGenericSendFromISR+0x42>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d103      	bne.n	8004c26 <xQueueGenericSendFromISR+0x6a>
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <xQueueGenericSendFromISR+0x6e>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueGenericSendFromISR+0x70>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	623b      	str	r3, [r7, #32]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c46:	f001 ffa7 	bl	8006b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61fa      	str	r2, [r7, #28]
 8004c60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d302      	bcc.n	8004c78 <xQueueGenericSendFromISR+0xbc>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d12f      	bne.n	8004cd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c8e:	f000 f911 	bl	8004eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d112      	bne.n	8004cc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 feff 	bl	8005aac <xTaskRemoveFromEventList>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00e      	beq.n	8004cd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e007      	b.n	8004cd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	b25a      	sxtb	r2, r3
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cd6:	e001      	b.n	8004cdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ce6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3740      	adds	r7, #64	; 0x40
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	; 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <xQueueReceive+0x30>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	623b      	str	r3, [r7, #32]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <xQueueReceive+0x3e>
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <xQueueReceive+0x42>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <xQueueReceive+0x44>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <xQueueReceive+0x5e>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61fb      	str	r3, [r7, #28]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d52:	f001 f8cf 	bl	8005ef4 <xTaskGetSchedulerState>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <xQueueReceive+0x6e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <xQueueReceive+0x72>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <xQueueReceive+0x74>
 8004d66:	2300      	movs	r3, #0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <xQueueReceive+0x8e>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	61bb      	str	r3, [r7, #24]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d82:	f001 fe27 	bl	80069d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01f      	beq.n	8004dd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d96:	f000 f8f7 	bl	8004f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1e5a      	subs	r2, r3, #1
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00f      	beq.n	8004dca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	3310      	adds	r3, #16
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fe7c 	bl	8005aac <xTaskRemoveFromEventList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dba:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <xQueueReceive+0x1bc>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dca:	f001 fe33 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e069      	b.n	8004ea6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dd8:	f001 fe2c 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e062      	b.n	8004ea6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004de6:	f107 0310 	add.w	r3, r7, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 ff24 	bl	8005c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004df4:	f001 fe1e 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004df8:	f000 fbf2 	bl	80055e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dfc:	f001 fdea 	bl	80069d4 <vPortEnterCritical>
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d103      	bne.n	8004e16 <xQueueReceive+0x122>
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e1c:	b25b      	sxtb	r3, r3
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d103      	bne.n	8004e2c <xQueueReceive+0x138>
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e2c:	f001 fe02 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e30:	1d3a      	adds	r2, r7, #4
 8004e32:	f107 0310 	add.w	r3, r7, #16
 8004e36:	4611      	mov	r1, r2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 ff13 	bl	8005c64 <xTaskCheckForTimeOut>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d123      	bne.n	8004e8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e46:	f000 f917 	bl	8005078 <prvIsQueueEmpty>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d017      	beq.n	8004e80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	3324      	adds	r3, #36	; 0x24
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fd9b 	bl	8005994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e60:	f000 f8b8 	bl	8004fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e64:	f000 fbca 	bl	80055fc <xTaskResumeAll>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d189      	bne.n	8004d82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <xQueueReceive+0x1bc>)
 8004e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	e780      	b.n	8004d82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e82:	f000 f8a7 	bl	8004fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e86:	f000 fbb9 	bl	80055fc <xTaskResumeAll>
 8004e8a:	e77a      	b.n	8004d82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8e:	f000 f8a1 	bl	8004fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e92:	f000 fbb3 	bl	80055fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e98:	f000 f8ee 	bl	8005078 <prvIsQueueEmpty>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f43f af6f 	beq.w	8004d82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3730      	adds	r7, #48	; 0x30
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d14d      	bne.n	8004f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 f826 	bl	8005f30 <xTaskPriorityDisinherit>
 8004ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	e043      	b.n	8004f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d119      	bne.n	8004f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6858      	ldr	r0, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	461a      	mov	r2, r3
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	f002 f997 	bl	8007232 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	441a      	add	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d32b      	bcc.n	8004f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	e026      	b.n	8004f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68d8      	ldr	r0, [r3, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	461a      	mov	r2, r3
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	f002 f97d 	bl	8007232 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	425b      	negs	r3, r3
 8004f42:	441a      	add	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d207      	bcs.n	8004f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	441a      	add	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d105      	bne.n	8004f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f7e:	697b      	ldr	r3, [r7, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	441a      	add	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d303      	bcc.n	8004fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68d9      	ldr	r1, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	f002 f933 	bl	8007232 <memcpy>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fdc:	f001 fcfa 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fe8:	e011      	b.n	800500e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3324      	adds	r3, #36	; 0x24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fd58 	bl	8005aac <xTaskRemoveFromEventList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005002:	f000 fe91 	bl	8005d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	3b01      	subs	r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800500e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dce9      	bgt.n	8004fea <prvUnlockQueue+0x16>
 8005016:	e000      	b.n	800501a <prvUnlockQueue+0x46>
					break;
 8005018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	22ff      	movs	r2, #255	; 0xff
 800501e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005022:	f001 fd07 	bl	8006a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005026:	f001 fcd5 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005032:	e011      	b.n	8005058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3310      	adds	r3, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fd33 	bl	8005aac <xTaskRemoveFromEventList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800504c:	f000 fe6c 	bl	8005d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	3b01      	subs	r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dce9      	bgt.n	8005034 <prvUnlockQueue+0x60>
 8005060:	e000      	b.n	8005064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800506c:	f001 fce2 	bl	8006a34 <vPortExitCritical>
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005080:	f001 fca8 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e001      	b.n	8005096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005096:	f001 fccd 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ac:	f001 fc92 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d102      	bne.n	80050c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e001      	b.n	80050c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050c6:	f001 fcb5 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 80050ca:	68fb      	ldr	r3, [r7, #12]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e014      	b.n	800510e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050e4:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <vQueueAddToRegistry+0x50>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050f0:	490c      	ldr	r1, [pc, #48]	; (8005124 <vQueueAddToRegistry+0x50>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <vQueueAddToRegistry+0x50>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005106:	e006      	b.n	8005116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b07      	cmp	r3, #7
 8005112:	d9e7      	bls.n	80050e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000bec 	.word	0x20000bec

08005128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005138:	f001 fc4c 	bl	80069d4 <vPortEnterCritical>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005142:	b25b      	sxtb	r3, r3
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d103      	bne.n	8005152 <vQueueWaitForMessageRestricted+0x2a>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005158:	b25b      	sxtb	r3, r3
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d103      	bne.n	8005168 <vQueueWaitForMessageRestricted+0x40>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005168:	f001 fc64 	bl	8006a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3324      	adds	r3, #36	; 0x24
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fc69 	bl	8005a54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f7ff ff26 	bl	8004fd4 <prvUnlockQueue>
	}
 8005188:	bf00      	nop
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af04      	add	r7, sp, #16
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	623b      	str	r3, [r7, #32]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61fb      	str	r3, [r7, #28]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051d6:	23bc      	movs	r3, #188	; 0xbc
 80051d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2bbc      	cmp	r3, #188	; 0xbc
 80051de:	d00a      	beq.n	80051f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61bb      	str	r3, [r7, #24]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01e      	beq.n	800523c <xTaskCreateStatic+0xac>
 80051fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800520c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	2202      	movs	r2, #2
 8005212:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005216:	2300      	movs	r3, #0
 8005218:	9303      	str	r3, [sp, #12]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	9302      	str	r3, [sp, #8]
 800521e:	f107 0314 	add.w	r3, r7, #20
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f850 	bl	80052d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005236:	f000 f8f3 	bl	8005420 <prvAddNewTaskToReadyList>
 800523a:	e001      	b.n	8005240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005240:	697b      	ldr	r3, [r7, #20]
	}
 8005242:	4618      	mov	r0, r3
 8005244:	3728      	adds	r7, #40	; 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800524a:	b580      	push	{r7, lr}
 800524c:	b08c      	sub	sp, #48	; 0x30
 800524e:	af04      	add	r7, sp, #16
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fcda 	bl	8006c18 <pvPortMalloc>
 8005264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00e      	beq.n	800528a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800526c:	20bc      	movs	r0, #188	; 0xbc
 800526e:	f001 fcd3 	bl	8006c18 <pvPortMalloc>
 8005272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
 8005280:	e005      	b.n	800528e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f001 fd94 	bl	8006db0 <vPortFree>
 8005288:	e001      	b.n	800528e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	2300      	movs	r3, #0
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f80e 	bl	80052d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b8:	69f8      	ldr	r0, [r7, #28]
 80052ba:	f000 f8b1 	bl	8005420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052be:	2301      	movs	r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e002      	b.n	80052ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ca:	69bb      	ldr	r3, [r7, #24]
	}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	461a      	mov	r2, r3
 80052ec:	21a5      	movs	r1, #165	; 0xa5
 80052ee:	f001 ffae 	bl	800724e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	3b01      	subs	r3, #1
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f023 0307 	bic.w	r3, r3, #7
 800530a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	617b      	str	r3, [r7, #20]
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01f      	beq.n	8005372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e012      	b.n	800535e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	7819      	ldrb	r1, [r3, #0]
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	3334      	adds	r3, #52	; 0x34
 8005348:	460a      	mov	r2, r1
 800534a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b0f      	cmp	r3, #15
 8005362:	d9e9      	bls.n	8005338 <prvInitialiseNewTask+0x64>
 8005364:	e000      	b.n	8005368 <prvInitialiseNewTask+0x94>
			{
				break;
 8005366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005370:	e003      	b.n	800537a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b37      	cmp	r3, #55	; 0x37
 800537e:	d901      	bls.n	8005384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005380:	2337      	movs	r3, #55	; 0x37
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	3304      	adds	r3, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f977 	bl	800468e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	3318      	adds	r3, #24
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff f972 	bl	800468e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	3354      	adds	r3, #84	; 0x54
 80053d4:	2260      	movs	r2, #96	; 0x60
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 ff38 	bl	800724e <memset>
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <prvInitialiseNewTask+0x140>)
 80053e2:	659a      	str	r2, [r3, #88]	; 0x58
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <prvInitialiseNewTask+0x144>)
 80053e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	4a0b      	ldr	r2, [pc, #44]	; (800541c <prvInitialiseNewTask+0x148>)
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	69b8      	ldr	r0, [r7, #24]
 80053f6:	f001 f9c3 	bl	8006780 <pxPortInitialiseStack>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800540c:	bf00      	nop
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	08008374 	.word	0x08008374
 8005418:	08008394 	.word	0x08008394
 800541c:	08008354 	.word	0x08008354

08005420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005428:	f001 fad4 	bl	80069d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800542c:	4b2d      	ldr	r3, [pc, #180]	; (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 8005434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005436:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800543e:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d110      	bne.n	800546e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800544c:	f000 fc90 	bl	8005d70 <prvInitialiseTaskLists>
 8005450:	e00d      	b.n	800546e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005452:	4b26      	ldr	r3, [pc, #152]	; (80054ec <prvAddNewTaskToReadyList+0xcc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800545a:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d802      	bhi.n	800546e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005468:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <prvAddNewTaskToReadyList+0xd0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <prvAddNewTaskToReadyList+0xd0>)
 8005476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <prvAddNewTaskToReadyList+0xd0>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <prvAddNewTaskToReadyList+0xd4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d903      	bls.n	8005494 <prvAddNewTaskToReadyList+0x74>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <prvAddNewTaskToReadyList+0xd4>)
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <prvAddNewTaskToReadyList+0xd8>)
 80054a2:	441a      	add	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f7ff f8fc 	bl	80046a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054b0:	f001 fac0 	bl	8006a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <prvAddNewTaskToReadyList+0xcc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <prvAddNewTaskToReadyList+0xc8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d207      	bcs.n	80054da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <prvAddNewTaskToReadyList+0xdc>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20001100 	.word	0x20001100
 80054e8:	20000c2c 	.word	0x20000c2c
 80054ec:	2000110c 	.word	0x2000110c
 80054f0:	2000111c 	.word	0x2000111c
 80054f4:	20001108 	.word	0x20001108
 80054f8:	20000c30 	.word	0x20000c30
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800550e:	463a      	mov	r2, r7
 8005510:	1d39      	adds	r1, r7, #4
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fed0 	bl	80042bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	9202      	str	r2, [sp, #8]
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	2300      	movs	r3, #0
 800552c:	460a      	mov	r2, r1
 800552e:	4924      	ldr	r1, [pc, #144]	; (80055c0 <vTaskStartScheduler+0xc0>)
 8005530:	4824      	ldr	r0, [pc, #144]	; (80055c4 <vTaskStartScheduler+0xc4>)
 8005532:	f7ff fe2d 	bl	8005190 <xTaskCreateStatic>
 8005536:	4603      	mov	r3, r0
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <vTaskStartScheduler+0xc8>)
 800553a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800553c:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <vTaskStartScheduler+0xc8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005544:	2301      	movs	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e001      	b.n	800554e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d102      	bne.n	800555a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005554:	f000 fdc6 	bl	80060e4 <xTimerCreateTimerTask>
 8005558:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d11b      	bne.n	8005598 <vTaskStartScheduler+0x98>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	613b      	str	r3, [r7, #16]
}
 8005572:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005574:	4b15      	ldr	r3, [pc, #84]	; (80055cc <vTaskStartScheduler+0xcc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3354      	adds	r3, #84	; 0x54
 800557a:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <vTaskStartScheduler+0xd0>)
 800557c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <vTaskStartScheduler+0xd4>)
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <vTaskStartScheduler+0xd8>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <vTaskStartScheduler+0xdc>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005592:	f001 f97d 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005596:	e00e      	b.n	80055b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d10a      	bne.n	80055b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	60fb      	str	r3, [r7, #12]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <vTaskStartScheduler+0xb4>
}
 80055b6:	bf00      	nop
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	08008284 	.word	0x08008284
 80055c4:	08005d41 	.word	0x08005d41
 80055c8:	20001124 	.word	0x20001124
 80055cc:	20000c2c 	.word	0x20000c2c
 80055d0:	20000014 	.word	0x20000014
 80055d4:	20001120 	.word	0x20001120
 80055d8:	2000110c 	.word	0x2000110c
 80055dc:	20001104 	.word	0x20001104

080055e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <vTaskSuspendAll+0x18>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <vTaskSuspendAll+0x18>)
 80055ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20001128 	.word	0x20001128

080055fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800560a:	4b42      	ldr	r3, [pc, #264]	; (8005714 <xTaskResumeAll+0x118>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <xTaskResumeAll+0x2c>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	603b      	str	r3, [r7, #0]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005628:	f001 f9d4 	bl	80069d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800562c:	4b39      	ldr	r3, [pc, #228]	; (8005714 <xTaskResumeAll+0x118>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3b01      	subs	r3, #1
 8005632:	4a38      	ldr	r2, [pc, #224]	; (8005714 <xTaskResumeAll+0x118>)
 8005634:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <xTaskResumeAll+0x118>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d162      	bne.n	8005704 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <xTaskResumeAll+0x11c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d05e      	beq.n	8005704 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005646:	e02f      	b.n	80056a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	4b34      	ldr	r3, [pc, #208]	; (800571c <xTaskResumeAll+0x120>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3318      	adds	r3, #24
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff f884 	bl	8004762 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3304      	adds	r3, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff f87f 	bl	8004762 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	4b2d      	ldr	r3, [pc, #180]	; (8005720 <xTaskResumeAll+0x124>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d903      	bls.n	8005678 <xTaskResumeAll+0x7c>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4a2a      	ldr	r2, [pc, #168]	; (8005720 <xTaskResumeAll+0x124>)
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4a27      	ldr	r2, [pc, #156]	; (8005724 <xTaskResumeAll+0x128>)
 8005686:	441a      	add	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f7ff f80a 	bl	80046a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	4b23      	ldr	r3, [pc, #140]	; (8005728 <xTaskResumeAll+0x12c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <xTaskResumeAll+0x130>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a8:	4b1c      	ldr	r3, [pc, #112]	; (800571c <xTaskResumeAll+0x120>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1cb      	bne.n	8005648 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056b6:	f000 fbfd 	bl	8005eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056ba:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <xTaskResumeAll+0x134>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d010      	beq.n	80056e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056c6:	f000 f847 	bl	8005758 <xTaskIncrementTick>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <xTaskResumeAll+0x130>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f1      	bne.n	80056c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056e2:	4b13      	ldr	r3, [pc, #76]	; (8005730 <xTaskResumeAll+0x134>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <xTaskResumeAll+0x130>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d009      	beq.n	8005704 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <xTaskResumeAll+0x138>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005704:	f001 f996 	bl	8006a34 <vPortExitCritical>

	return xAlreadyYielded;
 8005708:	68bb      	ldr	r3, [r7, #8]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20001128 	.word	0x20001128
 8005718:	20001100 	.word	0x20001100
 800571c:	200010c0 	.word	0x200010c0
 8005720:	20001108 	.word	0x20001108
 8005724:	20000c30 	.word	0x20000c30
 8005728:	20000c2c 	.word	0x20000c2c
 800572c:	20001114 	.word	0x20001114
 8005730:	20001110 	.word	0x20001110
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <xTaskGetTickCount+0x1c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005744:	687b      	ldr	r3, [r7, #4]
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20001104 	.word	0x20001104

08005758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005762:	4b4f      	ldr	r3, [pc, #316]	; (80058a0 <xTaskIncrementTick+0x148>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 808f 	bne.w	800588a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800576c:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <xTaskIncrementTick+0x14c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005774:	4a4b      	ldr	r2, [pc, #300]	; (80058a4 <xTaskIncrementTick+0x14c>)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d120      	bne.n	80057c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005780:	4b49      	ldr	r3, [pc, #292]	; (80058a8 <xTaskIncrementTick+0x150>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	603b      	str	r3, [r7, #0]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xTaskIncrementTick+0x46>
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <xTaskIncrementTick+0x150>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <xTaskIncrementTick+0x154>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3f      	ldr	r2, [pc, #252]	; (80058a8 <xTaskIncrementTick+0x150>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4a3f      	ldr	r2, [pc, #252]	; (80058ac <xTaskIncrementTick+0x154>)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <xTaskIncrementTick+0x158>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a3d      	ldr	r2, [pc, #244]	; (80058b0 <xTaskIncrementTick+0x158>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	f000 fb79 	bl	8005eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057c2:	4b3c      	ldr	r3, [pc, #240]	; (80058b4 <xTaskIncrementTick+0x15c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d349      	bcc.n	8005860 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <xTaskIncrementTick+0x150>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <xTaskIncrementTick+0x15c>)
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	601a      	str	r2, [r3, #0]
					break;
 80057de:	e03f      	b.n	8005860 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <xTaskIncrementTick+0x150>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d203      	bcs.n	8005800 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057f8:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <xTaskIncrementTick+0x15c>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057fe:	e02f      	b.n	8005860 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe ffac 	bl	8004762 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	3318      	adds	r3, #24
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe ffa3 	bl	8004762 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <xTaskIncrementTick+0x160>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d903      	bls.n	8005830 <xTaskIncrementTick+0xd8>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <xTaskIncrementTick+0x160>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <xTaskIncrementTick+0x164>)
 800583e:	441a      	add	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe ff2e 	bl	80046a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <xTaskIncrementTick+0x168>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d3b8      	bcc.n	80057cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800585a:	2301      	movs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585e:	e7b5      	b.n	80057cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <xTaskIncrementTick+0x168>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	4915      	ldr	r1, [pc, #84]	; (80058bc <xTaskIncrementTick+0x164>)
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d901      	bls.n	800587c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <xTaskIncrementTick+0x16c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e004      	b.n	8005894 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800588a:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <xTaskIncrementTick+0x170>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	4a0d      	ldr	r2, [pc, #52]	; (80058c8 <xTaskIncrementTick+0x170>)
 8005892:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005894:	697b      	ldr	r3, [r7, #20]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20001128 	.word	0x20001128
 80058a4:	20001104 	.word	0x20001104
 80058a8:	200010b8 	.word	0x200010b8
 80058ac:	200010bc 	.word	0x200010bc
 80058b0:	20001118 	.word	0x20001118
 80058b4:	20001120 	.word	0x20001120
 80058b8:	20001108 	.word	0x20001108
 80058bc:	20000c30 	.word	0x20000c30
 80058c0:	20000c2c 	.word	0x20000c2c
 80058c4:	20001114 	.word	0x20001114
 80058c8:	20001110 	.word	0x20001110

080058cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <vTaskSwitchContext+0xb0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058da:	4b29      	ldr	r3, [pc, #164]	; (8005980 <vTaskSwitchContext+0xb4>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058e0:	e046      	b.n	8005970 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058e2:	4b27      	ldr	r3, [pc, #156]	; (8005980 <vTaskSwitchContext+0xb4>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e8:	4b26      	ldr	r3, [pc, #152]	; (8005984 <vTaskSwitchContext+0xb8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e010      	b.n	8005912 <vTaskSwitchContext+0x46>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <vTaskSwitchContext+0x40>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	607b      	str	r3, [r7, #4]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <vTaskSwitchContext+0x3e>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	491d      	ldr	r1, [pc, #116]	; (8005988 <vTaskSwitchContext+0xbc>)
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0e4      	beq.n	80058f0 <vTaskSwitchContext+0x24>
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4a15      	ldr	r2, [pc, #84]	; (8005988 <vTaskSwitchContext+0xbc>)
 8005932:	4413      	add	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	3308      	adds	r3, #8
 8005948:	429a      	cmp	r2, r3
 800594a:	d104      	bne.n	8005956 <vTaskSwitchContext+0x8a>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a0b      	ldr	r2, [pc, #44]	; (800598c <vTaskSwitchContext+0xc0>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <vTaskSwitchContext+0xb8>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <vTaskSwitchContext+0xc0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3354      	adds	r3, #84	; 0x54
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <vTaskSwitchContext+0xc4>)
 800596e:	6013      	str	r3, [r2, #0]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	20001128 	.word	0x20001128
 8005980:	20001114 	.word	0x20001114
 8005984:	20001108 	.word	0x20001108
 8005988:	20000c30 	.word	0x20000c30
 800598c:	20000c2c 	.word	0x20000c2c
 8005990:	20000014 	.word	0x20000014

08005994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <vTaskPlaceOnEventList+0x44>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3318      	adds	r3, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fe fe94 	bl	80046f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059c8:	2101      	movs	r1, #1
 80059ca:	6838      	ldr	r0, [r7, #0]
 80059cc:	f000 fb36 	bl	800603c <prvAddCurrentTaskToDelayedList>
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000c2c 	.word	0x20000c2c

080059dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	617b      	str	r3, [r7, #20]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005a04:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <vTaskPlaceOnUnorderedEventList+0x70>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	613b      	str	r3, [r7, #16]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a2c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3318      	adds	r3, #24
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7fe fe36 	bl	80046a8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fafc 	bl	800603c <prvAddCurrentTaskToDelayedList>
}
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20001128 	.word	0x20001128
 8005a50:	20000c2c 	.word	0x20000c2c

08005a54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	617b      	str	r3, [r7, #20]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3318      	adds	r3, #24
 8005a82:	4619      	mov	r1, r3
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7fe fe0f 	bl	80046a8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f000 facf 	bl	800603c <prvAddCurrentTaskToDelayedList>
	}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000c2c 	.word	0x20000c2c

08005aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60fb      	str	r3, [r7, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	3318      	adds	r3, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fe40 	bl	8004762 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae2:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <xTaskRemoveFromEventList+0xb0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11d      	bne.n	8005b26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fe37 	bl	8004762 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4b19      	ldr	r3, [pc, #100]	; (8005b60 <xTaskRemoveFromEventList+0xb4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d903      	bls.n	8005b08 <xTaskRemoveFromEventList+0x5c>
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <xTaskRemoveFromEventList+0xb4>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <xTaskRemoveFromEventList+0xb8>)
 8005b16:	441a      	add	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe fdc2 	bl	80046a8 <vListInsertEnd>
 8005b24:	e005      	b.n	8005b32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	3318      	adds	r3, #24
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	480e      	ldr	r0, [pc, #56]	; (8005b68 <xTaskRemoveFromEventList+0xbc>)
 8005b2e:	f7fe fdbb 	bl	80046a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <xTaskRemoveFromEventList+0xc0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d905      	bls.n	8005b4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <xTaskRemoveFromEventList+0xc4>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e001      	b.n	8005b50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b50:	697b      	ldr	r3, [r7, #20]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20001128 	.word	0x20001128
 8005b60:	20001108 	.word	0x20001108
 8005b64:	20000c30 	.word	0x20000c30
 8005b68:	200010c0 	.word	0x200010c0
 8005b6c:	20000c2c 	.word	0x20000c2c
 8005b70:	20001114 	.word	0x20001114

08005b74 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005b7e:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	613b      	str	r3, [r7, #16]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fe fdca 	bl	8004762 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fdc5 	bl	8004762 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d903      	bls.n	8005bec <vTaskRemoveFromUnorderedEventList+0x78>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005bfa:	441a      	add	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7fe fd50 	bl	80046a8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d902      	bls.n	8005c1c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005c16:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
	}
}
 8005c1c:	bf00      	nop
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20001128 	.word	0x20001128
 8005c28:	20001108 	.word	0x20001108
 8005c2c:	20000c30 	.word	0x20000c30
 8005c30:	20000c2c 	.word	0x20000c2c
 8005c34:	20001114 	.word	0x20001114

08005c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <vTaskInternalSetTimeOutState+0x24>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <vTaskInternalSetTimeOutState+0x28>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	605a      	str	r2, [r3, #4]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20001118 	.word	0x20001118
 8005c60:	20001104 	.word	0x20001104

08005c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	613b      	str	r3, [r7, #16]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ca6:	f000 fe95 	bl	80069d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <xTaskCheckForTimeOut+0xbc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d102      	bne.n	8005cca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	e023      	b.n	8005d12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <xTaskCheckForTimeOut+0xc0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d007      	beq.n	8005ce6 <xTaskCheckForTimeOut+0x82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e015      	b.n	8005d12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d20b      	bcs.n	8005d08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff9b 	bl	8005c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	e004      	b.n	8005d12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d12:	f000 fe8f 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20001104 	.word	0x20001104
 8005d24:	20001118 	.word	0x20001118

08005d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <vTaskMissedYield+0x14>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20001114 	.word	0x20001114

08005d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d48:	f000 f852 	bl	8005df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <prvIdleTask+0x28>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d9f9      	bls.n	8005d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <prvIdleTask+0x2c>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d64:	e7f0      	b.n	8005d48 <prvIdleTask+0x8>
 8005d66:	bf00      	nop
 8005d68:	20000c30 	.word	0x20000c30
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	e00c      	b.n	8005d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <prvInitialiseTaskLists+0x60>)
 8005d88:	4413      	add	r3, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fc5f 	bl	800464e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3301      	adds	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b37      	cmp	r3, #55	; 0x37
 8005d9a:	d9ef      	bls.n	8005d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d9c:	480d      	ldr	r0, [pc, #52]	; (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005d9e:	f7fe fc56 	bl	800464e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005da2:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005da4:	f7fe fc53 	bl	800464e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da8:	480c      	ldr	r0, [pc, #48]	; (8005ddc <prvInitialiseTaskLists+0x6c>)
 8005daa:	f7fe fc50 	bl	800464e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dae:	480c      	ldr	r0, [pc, #48]	; (8005de0 <prvInitialiseTaskLists+0x70>)
 8005db0:	f7fe fc4d 	bl	800464e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005db4:	480b      	ldr	r0, [pc, #44]	; (8005de4 <prvInitialiseTaskLists+0x74>)
 8005db6:	f7fe fc4a 	bl	800464e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvInitialiseTaskLists+0x78>)
 8005dbc:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <prvInitialiseTaskLists+0x7c>)
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000c30 	.word	0x20000c30
 8005dd4:	20001090 	.word	0x20001090
 8005dd8:	200010a4 	.word	0x200010a4
 8005ddc:	200010c0 	.word	0x200010c0
 8005de0:	200010d4 	.word	0x200010d4
 8005de4:	200010ec 	.word	0x200010ec
 8005de8:	200010b8 	.word	0x200010b8
 8005dec:	200010bc 	.word	0x200010bc

08005df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df6:	e019      	b.n	8005e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df8:	f000 fdec 	bl	80069d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <prvCheckTasksWaitingTermination+0x50>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fcaa 	bl	8004762 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e22:	f000 fe07 	bl	8006a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f810 	bl	8005e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e1      	bne.n	8005df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200010d4 	.word	0x200010d4
 8005e44:	20001100 	.word	0x20001100
 8005e48:	200010e8 	.word	0x200010e8

08005e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3354      	adds	r3, #84	; 0x54
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fb31 	bl	80074c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d108      	bne.n	8005e7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 ff9f 	bl	8006db0 <vPortFree>
				vPortFree( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 ff9c 	bl	8006db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e78:	e018      	b.n	8005eac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d103      	bne.n	8005e8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 ff93 	bl	8006db0 <vPortFree>
	}
 8005e8a:	e00f      	b.n	8005eac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d00a      	beq.n	8005eac <prvDeleteTCB+0x60>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <prvDeleteTCB+0x5e>
	}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eba:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <prvResetNextTaskUnblockTime+0x38>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ecc:	e008      	b.n	8005ee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <prvResetNextTaskUnblockTime+0x38>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ede:	6013      	str	r3, [r2, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	200010b8 	.word	0x200010b8
 8005ef0:	20001120 	.word	0x20001120

08005ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <xTaskGetSchedulerState+0x34>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f02:	2301      	movs	r3, #1
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	e008      	b.n	8005f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <xTaskGetSchedulerState+0x38>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f10:	2302      	movs	r3, #2
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	e001      	b.n	8005f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f1a:	687b      	ldr	r3, [r7, #4]
	}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	2000110c 	.word	0x2000110c
 8005f2c:	20001128 	.word	0x20001128

08005f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d056      	beq.n	8005ff4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <xTaskPriorityDisinherit+0xd0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d00a      	beq.n	8005f66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60bb      	str	r3, [r7, #8]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d02c      	beq.n	8005ff4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d128      	bne.n	8005ff4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fbdb 	bl	8004762 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <xTaskPriorityDisinherit+0xd4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <xTaskPriorityDisinherit+0xa4>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a0c      	ldr	r2, [pc, #48]	; (8006004 <xTaskPriorityDisinherit+0xd4>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a09      	ldr	r2, [pc, #36]	; (8006008 <xTaskPriorityDisinherit+0xd8>)
 8005fe2:	441a      	add	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fe fb5c 	bl	80046a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ff4:	697b      	ldr	r3, [r7, #20]
	}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000c2c 	.word	0x20000c2c
 8006004:	20001108 	.word	0x20001108
 8006008:	20000c30 	.word	0x20000c30

0800600c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <uxTaskResetEventItemValue+0x2c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601a:	4b07      	ldr	r3, [pc, #28]	; (8006038 <uxTaskResetEventItemValue+0x2c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <uxTaskResetEventItemValue+0x2c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006028:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800602a:	687b      	ldr	r3, [r7, #4]
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20000c2c 	.word	0x20000c2c

0800603c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006046:	4b21      	ldr	r3, [pc, #132]	; (80060cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800604c:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3304      	adds	r3, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fb85 	bl	8004762 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d10a      	bne.n	8006076 <prvAddCurrentTaskToDelayedList+0x3a>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4819      	ldr	r0, [pc, #100]	; (80060d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006070:	f7fe fb1a 	bl	80046a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006074:	e026      	b.n	80060c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4413      	add	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800607e:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	429a      	cmp	r2, r3
 800608c:	d209      	bcs.n	80060a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fb28 	bl	80046f0 <vListInsert>
}
 80060a0:	e010      	b.n	80060c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7fe fb1e 	bl	80046f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d202      	bcs.n	80060c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6013      	str	r3, [r2, #0]
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20001104 	.word	0x20001104
 80060d0:	20000c2c 	.word	0x20000c2c
 80060d4:	200010ec 	.word	0x200010ec
 80060d8:	200010bc 	.word	0x200010bc
 80060dc:	200010b8 	.word	0x200010b8
 80060e0:	20001120 	.word	0x20001120

080060e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060ee:	f000 fb07 	bl	8006700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <xTimerCreateTimerTask+0x80>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d021      	beq.n	800613e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006102:	1d3a      	adds	r2, r7, #4
 8006104:	f107 0108 	add.w	r1, r7, #8
 8006108:	f107 030c 	add.w	r3, r7, #12
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe f8ef 	bl	80042f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	9202      	str	r2, [sp, #8]
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	2302      	movs	r3, #2
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	2300      	movs	r3, #0
 8006122:	460a      	mov	r2, r1
 8006124:	4910      	ldr	r1, [pc, #64]	; (8006168 <xTimerCreateTimerTask+0x84>)
 8006126:	4811      	ldr	r0, [pc, #68]	; (800616c <xTimerCreateTimerTask+0x88>)
 8006128:	f7ff f832 	bl	8005190 <xTaskCreateStatic>
 800612c:	4603      	mov	r3, r0
 800612e:	4a10      	ldr	r2, [pc, #64]	; (8006170 <xTimerCreateTimerTask+0x8c>)
 8006130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <xTimerCreateTimerTask+0x8c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800613a:	2301      	movs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	613b      	str	r3, [r7, #16]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800615a:	697b      	ldr	r3, [r7, #20]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	2000115c 	.word	0x2000115c
 8006168:	0800828c 	.word	0x0800828c
 800616c:	080062a9 	.word	0x080062a9
 8006170:	20001160 	.word	0x20001160

08006174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	623b      	str	r3, [r7, #32]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <xTimerGenericCommand+0x98>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d02a      	beq.n	8006200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b05      	cmp	r3, #5
 80061ba:	dc18      	bgt.n	80061ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061bc:	f7ff fe9a 	bl	8005ef4 <xTaskGetSchedulerState>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d109      	bne.n	80061da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <xTimerGenericCommand+0x98>)
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f107 0110 	add.w	r1, r7, #16
 80061ce:	2300      	movs	r3, #0
 80061d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d2:	f7fe fbf5 	bl	80049c0 <xQueueGenericSend>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24
 80061d8:	e012      	b.n	8006200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <xTimerGenericCommand+0x98>)
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f107 0110 	add.w	r1, r7, #16
 80061e2:	2300      	movs	r3, #0
 80061e4:	2200      	movs	r2, #0
 80061e6:	f7fe fbeb 	bl	80049c0 <xQueueGenericSend>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24
 80061ec:	e008      	b.n	8006200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061ee:	4b07      	ldr	r3, [pc, #28]	; (800620c <xTimerGenericCommand+0x98>)
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f107 0110 	add.w	r1, r7, #16
 80061f6:	2300      	movs	r3, #0
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	f7fe fcdf 	bl	8004bbc <xQueueGenericSendFromISR>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006202:	4618      	mov	r0, r3
 8006204:	3728      	adds	r7, #40	; 0x28
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	2000115c 	.word	0x2000115c

08006210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800621a:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <prvProcessExpiredTimer+0x94>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3304      	adds	r3, #4
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fa9a 	bl	8004762 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d022      	beq.n	8006282 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	18d1      	adds	r1, r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	6978      	ldr	r0, [r7, #20]
 800624a:	f000 f8d1 	bl	80063f0 <prvInsertTimerInActiveList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01f      	beq.n	8006294 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006254:	2300      	movs	r3, #0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	2100      	movs	r1, #0
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	f7ff ff88 	bl	8006174 <xTimerGenericCommand>
 8006264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d113      	bne.n	8006294 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	6978      	ldr	r0, [r7, #20]
 800629a:	4798      	blx	r3
}
 800629c:	bf00      	nop
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20001154 	.word	0x20001154

080062a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062b0:	f107 0308 	add.w	r3, r7, #8
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f857 	bl	8006368 <prvGetNextExpireTime>
 80062ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4619      	mov	r1, r3
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f803 	bl	80062cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062c6:	f000 f8d5 	bl	8006474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062ca:	e7f1      	b.n	80062b0 <prvTimerTask+0x8>

080062cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062d6:	f7ff f983 	bl	80055e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062da:	f107 0308 	add.w	r3, r7, #8
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f866 	bl	80063b0 <prvSampleTimeNow>
 80062e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d130      	bne.n	800634e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <prvProcessTimerOrBlockTask+0x3c>
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d806      	bhi.n	8006308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062fa:	f7ff f97f 	bl	80055fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff85 	bl	8006210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006306:	e024      	b.n	8006352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <prvProcessTimerOrBlockTask+0x90>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <prvProcessTimerOrBlockTask+0x50>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <prvProcessTimerOrBlockTask+0x52>
 800631c:	2300      	movs	r3, #0
 800631e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <prvProcessTimerOrBlockTask+0x94>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	f7fe fefb 	bl	8005128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006332:	f7ff f963 	bl	80055fc <xTaskResumeAll>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <prvProcessTimerOrBlockTask+0x98>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	f3bf 8f6f 	isb	sy
}
 800634c:	e001      	b.n	8006352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800634e:	f7ff f955 	bl	80055fc <xTaskResumeAll>
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20001158 	.word	0x20001158
 8006360:	2000115c 	.word	0x2000115c
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006370:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <prvGetNextExpireTime+0x44>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <prvGetNextExpireTime+0x16>
 800637a:	2201      	movs	r2, #1
 800637c:	e000      	b.n	8006380 <prvGetNextExpireTime+0x18>
 800637e:	2200      	movs	r2, #0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <prvGetNextExpireTime+0x44>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e001      	b.n	800639c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20001154 	.word	0x20001154

080063b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063b8:	f7ff f9be 	bl	8005738 <xTaskGetTickCount>
 80063bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <prvSampleTimeNow+0x3c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d205      	bcs.n	80063d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063c8:	f000 f936 	bl	8006638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e002      	b.n	80063da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063da:	4a04      	ldr	r2, [pc, #16]	; (80063ec <prvSampleTimeNow+0x3c>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063e0:	68fb      	ldr	r3, [r7, #12]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20001164 	.word	0x20001164

080063f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d812      	bhi.n	800643c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e01b      	b.n	8006462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <prvInsertTimerInActiveList+0x7c>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fe f95b 	bl	80046f0 <vListInsert>
 800643a:	e012      	b.n	8006462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d206      	bcs.n	8006452 <prvInsertTimerInActiveList+0x62>
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e007      	b.n	8006462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <prvInsertTimerInActiveList+0x80>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fe f947 	bl	80046f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006462:	697b      	ldr	r3, [r7, #20]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20001158 	.word	0x20001158
 8006470:	20001154 	.word	0x20001154

08006474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08e      	sub	sp, #56	; 0x38
 8006478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800647a:	e0ca      	b.n	8006612 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da18      	bge.n	80064b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	3304      	adds	r3, #4
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	61fb      	str	r3, [r7, #28]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064aa:	6850      	ldr	r0, [r2, #4]
 80064ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ae:	6892      	ldr	r2, [r2, #8]
 80064b0:	4611      	mov	r1, r2
 80064b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f2c0 80aa 	blt.w	8006610 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f948 	bl	8004762 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064d2:	463b      	mov	r3, r7
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff ff6b 	bl	80063b0 <prvSampleTimeNow>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b09      	cmp	r3, #9
 80064e0:	f200 8097 	bhi.w	8006612 <prvProcessReceivedCommands+0x19e>
 80064e4:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <prvProcessReceivedCommands+0x78>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006515 	.word	0x08006515
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006515 	.word	0x08006515
 80064f8:	08006589 	.word	0x08006589
 80064fc:	0800659d 	.word	0x0800659d
 8006500:	080065e7 	.word	0x080065e7
 8006504:	08006515 	.word	0x08006515
 8006508:	08006515 	.word	0x08006515
 800650c:	08006589 	.word	0x08006589
 8006510:	0800659d 	.word	0x0800659d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	18d1      	adds	r1, r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006534:	f7ff ff5c 	bl	80063f0 <prvInsertTimerInActiveList>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d069      	beq.n	8006612 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05e      	beq.n	8006612 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	441a      	add	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	2100      	movs	r1, #0
 8006564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006566:	f7ff fe05 	bl	8006174 <xTimerGenericCommand>
 800656a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d14f      	bne.n	8006612 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	61bb      	str	r3, [r7, #24]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800659a:	e03a      	b.n	8006612 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	617b      	str	r3, [r7, #20]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	18d1      	adds	r1, r2, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e0:	f7ff ff06 	bl	80063f0 <prvInsertTimerInActiveList>
					break;
 80065e4:	e015      	b.n	8006612 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f6:	f000 fbdb 	bl	8006db0 <vPortFree>
 80065fa:	e00a      	b.n	8006612 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800660e:	e000      	b.n	8006612 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <prvProcessReceivedCommands+0x1c0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	1d39      	adds	r1, r7, #4
 8006618:	2200      	movs	r2, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fb6a 	bl	8004cf4 <xQueueReceive>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	f47f af2a 	bne.w	800647c <prvProcessReceivedCommands+0x8>
	}
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	3730      	adds	r7, #48	; 0x30
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	2000115c 	.word	0x2000115c

08006638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800663e:	e048      	b.n	80066d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006640:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664a:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe f882 	bl	8004762 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d02e      	beq.n	80066d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d90e      	bls.n	80066a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006692:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fe f827 	bl	80046f0 <vListInsert>
 80066a2:	e016      	b.n	80066d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066a4:	2300      	movs	r3, #0
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	2300      	movs	r3, #0
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	2100      	movs	r1, #0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fd60 	bl	8006174 <xTimerGenericCommand>
 80066b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	603b      	str	r3, [r7, #0]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1b1      	bne.n	8006640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <prvSwitchTimerLists+0xc4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <prvSwitchTimerLists+0xc0>)
 80066e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <prvSwitchTimerLists+0xc4>)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20001154 	.word	0x20001154
 80066fc:	20001158 	.word	0x20001158

08006700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006706:	f000 f965 	bl	80069d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800670a:	4b15      	ldr	r3, [pc, #84]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d120      	bne.n	8006754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006712:	4814      	ldr	r0, [pc, #80]	; (8006764 <prvCheckForValidListAndQueue+0x64>)
 8006714:	f7fd ff9b 	bl	800464e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006718:	4813      	ldr	r0, [pc, #76]	; (8006768 <prvCheckForValidListAndQueue+0x68>)
 800671a:	f7fd ff98 	bl	800464e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <prvCheckForValidListAndQueue+0x6c>)
 8006720:	4a10      	ldr	r2, [pc, #64]	; (8006764 <prvCheckForValidListAndQueue+0x64>)
 8006722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <prvCheckForValidListAndQueue+0x70>)
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <prvCheckForValidListAndQueue+0x68>)
 8006728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800672a:	2300      	movs	r3, #0
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <prvCheckForValidListAndQueue+0x74>)
 8006730:	4a11      	ldr	r2, [pc, #68]	; (8006778 <prvCheckForValidListAndQueue+0x78>)
 8006732:	2110      	movs	r1, #16
 8006734:	200a      	movs	r0, #10
 8006736:	f7fe f8a7 	bl	8004888 <xQueueGenericCreateStatic>
 800673a:	4603      	mov	r3, r0
 800673c:	4a08      	ldr	r2, [pc, #32]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 800673e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <prvCheckForValidListAndQueue+0x60>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	490b      	ldr	r1, [pc, #44]	; (800677c <prvCheckForValidListAndQueue+0x7c>)
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fcc0 	bl	80050d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006754:	f000 f96e 	bl	8006a34 <vPortExitCritical>
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	2000115c 	.word	0x2000115c
 8006764:	2000112c 	.word	0x2000112c
 8006768:	20001140 	.word	0x20001140
 800676c:	20001154 	.word	0x20001154
 8006770:	20001158 	.word	0x20001158
 8006774:	20001208 	.word	0x20001208
 8006778:	20001168 	.word	0x20001168
 800677c:	08008294 	.word	0x08008294

08006780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b04      	subs	r3, #4
 8006790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b04      	subs	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067b0:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <pxPortInitialiseStack+0x64>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3b14      	subs	r3, #20
 80067ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b04      	subs	r3, #4
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f06f 0202 	mvn.w	r2, #2
 80067ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b20      	subs	r3, #32
 80067d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067d6:	68fb      	ldr	r3, [r7, #12]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	080067e9 	.word	0x080067e9

080067e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <prvTaskExitError+0x54>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d00a      	beq.n	8006812 <prvTaskExitError+0x2a>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <prvTaskExitError+0x28>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006826:	bf00      	nop
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0fc      	beq.n	8006828 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	20000010 	.word	0x20000010

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	20000c2c 	.word	0x20000c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006896:	4b46      	ldr	r3, [pc, #280]	; (80069b0 <xPortStartScheduler+0x120>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <xPortStartScheduler+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10a      	bne.n	80068b6 <xPortStartScheduler+0x26>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068b6:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <xPortStartScheduler+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <xPortStartScheduler+0x128>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10a      	bne.n	80068d6 <xPortStartScheduler+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60fb      	str	r3, [r7, #12]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <xPortStartScheduler+0x12c>)
 80068d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <xPortStartScheduler+0x130>)
 80068fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xPortStartScheduler+0x134>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006904:	e009      	b.n	800691a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <xPortStartScheduler+0x134>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <xPortStartScheduler+0x134>)
 800690e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d0ef      	beq.n	8006906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <xPortStartScheduler+0x134>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00a      	beq.n	8006948 <xPortStartScheduler+0xb8>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <xPortStartScheduler+0x134>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <xPortStartScheduler+0x134>)
 8006950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <xPortStartScheduler+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <xPortStartScheduler+0x134>)
 800695c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006966:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xPortStartScheduler+0x138>)
 800696c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <xPortStartScheduler+0x138>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <xPortStartScheduler+0x138>)
 8006978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800697c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800697e:	f000 f8dd 	bl	8006b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <xPortStartScheduler+0x13c>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006988:	f000 f8fc 	bl	8006b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <xPortStartScheduler+0x140>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0f      	ldr	r2, [pc, #60]	; (80069d0 <xPortStartScheduler+0x140>)
 8006992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006998:	f7ff ff66 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800699c:	f7fe ff96 	bl	80058cc <vTaskSwitchContext>
	prvTaskExitError();
 80069a0:	f7ff ff22 	bl	80067e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	410fc271 	.word	0x410fc271
 80069b8:	410fc270 	.word	0x410fc270
 80069bc:	e000e400 	.word	0xe000e400
 80069c0:	20001258 	.word	0x20001258
 80069c4:	2000125c 	.word	0x2000125c
 80069c8:	e000ed20 	.word	0xe000ed20
 80069cc:	20000010 	.word	0x20000010
 80069d0:	e000ef34 	.word	0xe000ef34

080069d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <vPortEnterCritical+0x58>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10f      	bne.n	8006a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortEnterCritical+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	603b      	str	r3, [r7, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vPortEnterCritical+0x4a>
	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000010 	.word	0x20000010
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <vPortExitCritical+0x50>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <vPortExitCritical+0x24>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <vPortExitCritical+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vPortExitCritical+0x50>)
 8006a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <vPortExitCritical+0x50>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <vPortExitCritical+0x42>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000010 	.word	0x20000010
	...

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe ff04 	bl	80058cc <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	20000c2c 	.word	0x20000c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b12:	f7fe fe21 	bl	8005758 <xTaskIncrementTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <xPortSysTickHandler+0x40>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <vPortSetupTimerInterrupt+0x38>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <vPortSetupTimerInterrupt+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vPortSetupTimerInterrupt+0x40>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <vPortSetupTimerInterrupt+0x44>)
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010
 8006b74:	e000e018 	.word	0xe000e018
 8006b78:	20000004 	.word	0x20000004
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	e000e014 	.word	0xe000e014

08006b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b94 <vPortEnableVFP+0x10>
 8006b88:	6801      	ldr	r1, [r0, #0]
 8006b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b8e:	6001      	str	r1, [r0, #0]
 8006b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b92:	bf00      	nop
 8006b94:	e000ed88 	.word	0xe000ed88

08006b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d914      	bls.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <vPortValidateInterruptPriority+0x70>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <vPortValidateInterruptPriority+0x74>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20a      	bcs.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <vPortValidateInterruptPriority+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <vPortValidateInterruptPriority+0x7c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d90a      	bls.n	8006bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	603b      	str	r3, [r7, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <vPortValidateInterruptPriority+0x60>
	}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000e3f0 	.word	0xe000e3f0
 8006c0c:	20001258 	.word	0x20001258
 8006c10:	e000ed0c 	.word	0xe000ed0c
 8006c14:	2000125c 	.word	0x2000125c

08006c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c24:	f7fe fcdc 	bl	80055e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c28:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <pvPortMalloc+0x180>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c30:	f000 f920 	bl	8006e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c34:	4b59      	ldr	r3, [pc, #356]	; (8006d9c <pvPortMalloc+0x184>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8093 	bne.w	8006d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01d      	beq.n	8006c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c48:	2208      	movs	r2, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	3308      	adds	r3, #8
 8006c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <pvPortMalloc+0x6c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d06e      	beq.n	8006d68 <pvPortMalloc+0x150>
 8006c8a:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <pvPortMalloc+0x188>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d869      	bhi.n	8006d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c98:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9e:	e004      	b.n	8006caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <pvPortMalloc+0xa4>
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f1      	bne.n	8006ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <pvPortMalloc+0x180>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d050      	beq.n	8006d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	4413      	add	r3, r2
 8006cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d91f      	bls.n	8006d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <pvPortMalloc+0xf8>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	613b      	str	r3, [r7, #16]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d22:	69b8      	ldr	r0, [r7, #24]
 8006d24:	f000 f908 	bl	8006f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <pvPortMalloc+0x188>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <pvPortMalloc+0x188>)
 8006d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <pvPortMalloc+0x188>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <pvPortMalloc+0x190>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d203      	bcs.n	8006d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <pvPortMalloc+0x188>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <pvPortMalloc+0x190>)
 8006d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <pvPortMalloc+0x184>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x194>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <pvPortMalloc+0x194>)
 8006d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d68:	f7fe fc48 	bl	80055fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <pvPortMalloc+0x174>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <pvPortMalloc+0x172>
	return pvReturn;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20001e68 	.word	0x20001e68
 8006d9c:	20001e7c 	.word	0x20001e7c
 8006da0:	20001e6c 	.word	0x20001e6c
 8006da4:	20001e60 	.word	0x20001e60
 8006da8:	20001e70 	.word	0x20001e70
 8006dac:	20001e74 	.word	0x20001e74

08006db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <vPortFree+0xb8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <vPortFree+0x44>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60fb      	str	r3, [r7, #12]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <vPortFree+0x62>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <vPortFree+0xb8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11a      	bne.n	8006e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <vPortFree+0xb8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e38:	f7fe fbd2 	bl	80055e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <vPortFree+0xbc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <vPortFree+0xbc>)
 8006e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f000 f874 	bl	8006f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <vPortFree+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <vPortFree+0xc0>)
 8006e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e5a:	f7fe fbcf 	bl	80055fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5e:	bf00      	nop
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20001e7c 	.word	0x20001e7c
 8006e6c:	20001e6c 	.word	0x20001e6c
 8006e70:	20001e78 	.word	0x20001e78

08006e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <prvHeapInit+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <prvHeapInit+0xac>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <prvHeapInit+0xb0>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <prvHeapInit+0xb0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvHeapInit+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvHeapInit+0xb4>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <prvHeapInit+0xb8>)
 8006f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvHeapInit+0xbc>)
 8006f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvHeapInit+0xc0>)
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20001260 	.word	0x20001260
 8006f24:	20001e60 	.word	0x20001e60
 8006f28:	20001e68 	.word	0x20001e68
 8006f2c:	20001e70 	.word	0x20001e70
 8006f30:	20001e6c 	.word	0x20001e6c
 8006f34:	20001e7c 	.word	0x20001e7c

08006f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <prvInsertBlockIntoFreeList+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <prvInsertBlockIntoFreeList+0x14>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d8f7      	bhi.n	8006f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d108      	bne.n	8006f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	441a      	add	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d118      	bne.n	8006fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00d      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e008      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20001e60 	.word	0x20001e60
 8006fe8:	20001e68 	.word	0x20001e68

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000014 	.word	0x20000014

08006ff8 <std>:
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8007002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007006:	6083      	str	r3, [r0, #8]
 8007008:	8181      	strh	r1, [r0, #12]
 800700a:	6643      	str	r3, [r0, #100]	; 0x64
 800700c:	81c2      	strh	r2, [r0, #14]
 800700e:	6183      	str	r3, [r0, #24]
 8007010:	4619      	mov	r1, r3
 8007012:	2208      	movs	r2, #8
 8007014:	305c      	adds	r0, #92	; 0x5c
 8007016:	f000 f91a 	bl	800724e <memset>
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <std+0x38>)
 800701c:	6263      	str	r3, [r4, #36]	; 0x24
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <std+0x3c>)
 8007020:	62a3      	str	r3, [r4, #40]	; 0x28
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <std+0x40>)
 8007024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <std+0x44>)
 8007028:	6224      	str	r4, [r4, #32]
 800702a:	6323      	str	r3, [r4, #48]	; 0x30
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	08007599 	.word	0x08007599
 8007034:	080075bb 	.word	0x080075bb
 8007038:	080075f3 	.word	0x080075f3
 800703c:	08007617 	.word	0x08007617

08007040 <_cleanup_r>:
 8007040:	4901      	ldr	r1, [pc, #4]	; (8007048 <_cleanup_r+0x8>)
 8007042:	f000 b8af 	b.w	80071a4 <_fwalk_reent>
 8007046:	bf00      	nop
 8007048:	080078f1 	.word	0x080078f1

0800704c <__sfmoreglue>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	2268      	movs	r2, #104	; 0x68
 8007050:	1e4d      	subs	r5, r1, #1
 8007052:	4355      	muls	r5, r2
 8007054:	460e      	mov	r6, r1
 8007056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800705a:	f000 f921 	bl	80072a0 <_malloc_r>
 800705e:	4604      	mov	r4, r0
 8007060:	b140      	cbz	r0, 8007074 <__sfmoreglue+0x28>
 8007062:	2100      	movs	r1, #0
 8007064:	e9c0 1600 	strd	r1, r6, [r0]
 8007068:	300c      	adds	r0, #12
 800706a:	60a0      	str	r0, [r4, #8]
 800706c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007070:	f000 f8ed 	bl	800724e <memset>
 8007074:	4620      	mov	r0, r4
 8007076:	bd70      	pop	{r4, r5, r6, pc}

08007078 <__sfp_lock_acquire>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__sfp_lock_acquire+0x8>)
 800707a:	f000 b8d8 	b.w	800722e <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20001e81 	.word	0x20001e81

08007084 <__sfp_lock_release>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__sfp_lock_release+0x8>)
 8007086:	f000 b8d3 	b.w	8007230 <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20001e81 	.word	0x20001e81

08007090 <__sinit_lock_acquire>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__sinit_lock_acquire+0x8>)
 8007092:	f000 b8cc 	b.w	800722e <__retarget_lock_acquire_recursive>
 8007096:	bf00      	nop
 8007098:	20001e82 	.word	0x20001e82

0800709c <__sinit_lock_release>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__sinit_lock_release+0x8>)
 800709e:	f000 b8c7 	b.w	8007230 <__retarget_lock_release_recursive>
 80070a2:	bf00      	nop
 80070a4:	20001e82 	.word	0x20001e82

080070a8 <__sinit>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	f7ff fff0 	bl	8007090 <__sinit_lock_acquire>
 80070b0:	69a3      	ldr	r3, [r4, #24]
 80070b2:	b11b      	cbz	r3, 80070bc <__sinit+0x14>
 80070b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b8:	f7ff bff0 	b.w	800709c <__sinit_lock_release>
 80070bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070c0:	6523      	str	r3, [r4, #80]	; 0x50
 80070c2:	4b13      	ldr	r3, [pc, #76]	; (8007110 <__sinit+0x68>)
 80070c4:	4a13      	ldr	r2, [pc, #76]	; (8007114 <__sinit+0x6c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	bf04      	itt	eq
 80070ce:	2301      	moveq	r3, #1
 80070d0:	61a3      	streq	r3, [r4, #24]
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 f820 	bl	8007118 <__sfp>
 80070d8:	6060      	str	r0, [r4, #4]
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 f81c 	bl	8007118 <__sfp>
 80070e0:	60a0      	str	r0, [r4, #8]
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 f818 	bl	8007118 <__sfp>
 80070e8:	2200      	movs	r2, #0
 80070ea:	60e0      	str	r0, [r4, #12]
 80070ec:	2104      	movs	r1, #4
 80070ee:	6860      	ldr	r0, [r4, #4]
 80070f0:	f7ff ff82 	bl	8006ff8 <std>
 80070f4:	68a0      	ldr	r0, [r4, #8]
 80070f6:	2201      	movs	r2, #1
 80070f8:	2109      	movs	r1, #9
 80070fa:	f7ff ff7d 	bl	8006ff8 <std>
 80070fe:	68e0      	ldr	r0, [r4, #12]
 8007100:	2202      	movs	r2, #2
 8007102:	2112      	movs	r1, #18
 8007104:	f7ff ff78 	bl	8006ff8 <std>
 8007108:	2301      	movs	r3, #1
 800710a:	61a3      	str	r3, [r4, #24]
 800710c:	e7d2      	b.n	80070b4 <__sinit+0xc>
 800710e:	bf00      	nop
 8007110:	080083b4 	.word	0x080083b4
 8007114:	08007041 	.word	0x08007041

08007118 <__sfp>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	4607      	mov	r7, r0
 800711c:	f7ff ffac 	bl	8007078 <__sfp_lock_acquire>
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <__sfp+0x84>)
 8007122:	681e      	ldr	r6, [r3, #0]
 8007124:	69b3      	ldr	r3, [r6, #24]
 8007126:	b913      	cbnz	r3, 800712e <__sfp+0x16>
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff ffbd 	bl	80070a8 <__sinit>
 800712e:	3648      	adds	r6, #72	; 0x48
 8007130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007134:	3b01      	subs	r3, #1
 8007136:	d503      	bpl.n	8007140 <__sfp+0x28>
 8007138:	6833      	ldr	r3, [r6, #0]
 800713a:	b30b      	cbz	r3, 8007180 <__sfp+0x68>
 800713c:	6836      	ldr	r6, [r6, #0]
 800713e:	e7f7      	b.n	8007130 <__sfp+0x18>
 8007140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007144:	b9d5      	cbnz	r5, 800717c <__sfp+0x64>
 8007146:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <__sfp+0x88>)
 8007148:	60e3      	str	r3, [r4, #12]
 800714a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800714e:	6665      	str	r5, [r4, #100]	; 0x64
 8007150:	f000 f86c 	bl	800722c <__retarget_lock_init_recursive>
 8007154:	f7ff ff96 	bl	8007084 <__sfp_lock_release>
 8007158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800715c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007160:	6025      	str	r5, [r4, #0]
 8007162:	61a5      	str	r5, [r4, #24]
 8007164:	2208      	movs	r2, #8
 8007166:	4629      	mov	r1, r5
 8007168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800716c:	f000 f86f 	bl	800724e <memset>
 8007170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007178:	4620      	mov	r0, r4
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717c:	3468      	adds	r4, #104	; 0x68
 800717e:	e7d9      	b.n	8007134 <__sfp+0x1c>
 8007180:	2104      	movs	r1, #4
 8007182:	4638      	mov	r0, r7
 8007184:	f7ff ff62 	bl	800704c <__sfmoreglue>
 8007188:	4604      	mov	r4, r0
 800718a:	6030      	str	r0, [r6, #0]
 800718c:	2800      	cmp	r0, #0
 800718e:	d1d5      	bne.n	800713c <__sfp+0x24>
 8007190:	f7ff ff78 	bl	8007084 <__sfp_lock_release>
 8007194:	230c      	movs	r3, #12
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	e7ee      	b.n	8007178 <__sfp+0x60>
 800719a:	bf00      	nop
 800719c:	080083b4 	.word	0x080083b4
 80071a0:	ffff0001 	.word	0xffff0001

080071a4 <_fwalk_reent>:
 80071a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a8:	4606      	mov	r6, r0
 80071aa:	4688      	mov	r8, r1
 80071ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071b0:	2700      	movs	r7, #0
 80071b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b6:	f1b9 0901 	subs.w	r9, r9, #1
 80071ba:	d505      	bpl.n	80071c8 <_fwalk_reent+0x24>
 80071bc:	6824      	ldr	r4, [r4, #0]
 80071be:	2c00      	cmp	r4, #0
 80071c0:	d1f7      	bne.n	80071b2 <_fwalk_reent+0xe>
 80071c2:	4638      	mov	r0, r7
 80071c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c8:	89ab      	ldrh	r3, [r5, #12]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d907      	bls.n	80071de <_fwalk_reent+0x3a>
 80071ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071d2:	3301      	adds	r3, #1
 80071d4:	d003      	beq.n	80071de <_fwalk_reent+0x3a>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	47c0      	blx	r8
 80071dc:	4307      	orrs	r7, r0
 80071de:	3568      	adds	r5, #104	; 0x68
 80071e0:	e7e9      	b.n	80071b6 <_fwalk_reent+0x12>
	...

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4d0d      	ldr	r5, [pc, #52]	; (800721c <__libc_init_array+0x38>)
 80071e8:	4c0d      	ldr	r4, [pc, #52]	; (8007220 <__libc_init_array+0x3c>)
 80071ea:	1b64      	subs	r4, r4, r5
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	2600      	movs	r6, #0
 80071f0:	42a6      	cmp	r6, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	4d0b      	ldr	r5, [pc, #44]	; (8007224 <__libc_init_array+0x40>)
 80071f6:	4c0c      	ldr	r4, [pc, #48]	; (8007228 <__libc_init_array+0x44>)
 80071f8:	f000 ffa8 	bl	800814c <_init>
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	2600      	movs	r6, #0
 8007202:	42a6      	cmp	r6, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	f855 3b04 	ldr.w	r3, [r5], #4
 800720c:	4798      	blx	r3
 800720e:	3601      	adds	r6, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	f855 3b04 	ldr.w	r3, [r5], #4
 8007216:	4798      	blx	r3
 8007218:	3601      	adds	r6, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	080083f4 	.word	0x080083f4
 8007220:	080083f4 	.word	0x080083f4
 8007224:	080083f4 	.word	0x080083f4
 8007228:	080083f8 	.word	0x080083f8

0800722c <__retarget_lock_init_recursive>:
 800722c:	4770      	bx	lr

0800722e <__retarget_lock_acquire_recursive>:
 800722e:	4770      	bx	lr

08007230 <__retarget_lock_release_recursive>:
 8007230:	4770      	bx	lr

08007232 <memcpy>:
 8007232:	440a      	add	r2, r1
 8007234:	4291      	cmp	r1, r2
 8007236:	f100 33ff 	add.w	r3, r0, #4294967295
 800723a:	d100      	bne.n	800723e <memcpy+0xc>
 800723c:	4770      	bx	lr
 800723e:	b510      	push	{r4, lr}
 8007240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007248:	4291      	cmp	r1, r2
 800724a:	d1f9      	bne.n	8007240 <memcpy+0xe>
 800724c:	bd10      	pop	{r4, pc}

0800724e <memset>:
 800724e:	4402      	add	r2, r0
 8007250:	4603      	mov	r3, r0
 8007252:	4293      	cmp	r3, r2
 8007254:	d100      	bne.n	8007258 <memset+0xa>
 8007256:	4770      	bx	lr
 8007258:	f803 1b01 	strb.w	r1, [r3], #1
 800725c:	e7f9      	b.n	8007252 <memset+0x4>
	...

08007260 <sbrk_aligned>:
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	4e0e      	ldr	r6, [pc, #56]	; (800729c <sbrk_aligned+0x3c>)
 8007264:	460c      	mov	r4, r1
 8007266:	6831      	ldr	r1, [r6, #0]
 8007268:	4605      	mov	r5, r0
 800726a:	b911      	cbnz	r1, 8007272 <sbrk_aligned+0x12>
 800726c:	f000 f984 	bl	8007578 <_sbrk_r>
 8007270:	6030      	str	r0, [r6, #0]
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	f000 f97f 	bl	8007578 <_sbrk_r>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d00a      	beq.n	8007294 <sbrk_aligned+0x34>
 800727e:	1cc4      	adds	r4, r0, #3
 8007280:	f024 0403 	bic.w	r4, r4, #3
 8007284:	42a0      	cmp	r0, r4
 8007286:	d007      	beq.n	8007298 <sbrk_aligned+0x38>
 8007288:	1a21      	subs	r1, r4, r0
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f974 	bl	8007578 <_sbrk_r>
 8007290:	3001      	adds	r0, #1
 8007292:	d101      	bne.n	8007298 <sbrk_aligned+0x38>
 8007294:	f04f 34ff 	mov.w	r4, #4294967295
 8007298:	4620      	mov	r0, r4
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	20001e88 	.word	0x20001e88

080072a0 <_malloc_r>:
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	1ccd      	adds	r5, r1, #3
 80072a6:	f025 0503 	bic.w	r5, r5, #3
 80072aa:	3508      	adds	r5, #8
 80072ac:	2d0c      	cmp	r5, #12
 80072ae:	bf38      	it	cc
 80072b0:	250c      	movcc	r5, #12
 80072b2:	2d00      	cmp	r5, #0
 80072b4:	4607      	mov	r7, r0
 80072b6:	db01      	blt.n	80072bc <_malloc_r+0x1c>
 80072b8:	42a9      	cmp	r1, r5
 80072ba:	d905      	bls.n	80072c8 <_malloc_r+0x28>
 80072bc:	230c      	movs	r3, #12
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	2600      	movs	r6, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c8:	4e2e      	ldr	r6, [pc, #184]	; (8007384 <_malloc_r+0xe4>)
 80072ca:	f000 fbc5 	bl	8007a58 <__malloc_lock>
 80072ce:	6833      	ldr	r3, [r6, #0]
 80072d0:	461c      	mov	r4, r3
 80072d2:	bb34      	cbnz	r4, 8007322 <_malloc_r+0x82>
 80072d4:	4629      	mov	r1, r5
 80072d6:	4638      	mov	r0, r7
 80072d8:	f7ff ffc2 	bl	8007260 <sbrk_aligned>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	4604      	mov	r4, r0
 80072e0:	d14d      	bne.n	800737e <_malloc_r+0xde>
 80072e2:	6834      	ldr	r4, [r6, #0]
 80072e4:	4626      	mov	r6, r4
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	d140      	bne.n	800736c <_malloc_r+0xcc>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	4631      	mov	r1, r6
 80072ee:	4638      	mov	r0, r7
 80072f0:	eb04 0803 	add.w	r8, r4, r3
 80072f4:	f000 f940 	bl	8007578 <_sbrk_r>
 80072f8:	4580      	cmp	r8, r0
 80072fa:	d13a      	bne.n	8007372 <_malloc_r+0xd2>
 80072fc:	6821      	ldr	r1, [r4, #0]
 80072fe:	3503      	adds	r5, #3
 8007300:	1a6d      	subs	r5, r5, r1
 8007302:	f025 0503 	bic.w	r5, r5, #3
 8007306:	3508      	adds	r5, #8
 8007308:	2d0c      	cmp	r5, #12
 800730a:	bf38      	it	cc
 800730c:	250c      	movcc	r5, #12
 800730e:	4629      	mov	r1, r5
 8007310:	4638      	mov	r0, r7
 8007312:	f7ff ffa5 	bl	8007260 <sbrk_aligned>
 8007316:	3001      	adds	r0, #1
 8007318:	d02b      	beq.n	8007372 <_malloc_r+0xd2>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	442b      	add	r3, r5
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	e00e      	b.n	8007340 <_malloc_r+0xa0>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	1b52      	subs	r2, r2, r5
 8007326:	d41e      	bmi.n	8007366 <_malloc_r+0xc6>
 8007328:	2a0b      	cmp	r2, #11
 800732a:	d916      	bls.n	800735a <_malloc_r+0xba>
 800732c:	1961      	adds	r1, r4, r5
 800732e:	42a3      	cmp	r3, r4
 8007330:	6025      	str	r5, [r4, #0]
 8007332:	bf18      	it	ne
 8007334:	6059      	strne	r1, [r3, #4]
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	bf08      	it	eq
 800733a:	6031      	streq	r1, [r6, #0]
 800733c:	5162      	str	r2, [r4, r5]
 800733e:	604b      	str	r3, [r1, #4]
 8007340:	4638      	mov	r0, r7
 8007342:	f104 060b 	add.w	r6, r4, #11
 8007346:	f000 fb8d 	bl	8007a64 <__malloc_unlock>
 800734a:	f026 0607 	bic.w	r6, r6, #7
 800734e:	1d23      	adds	r3, r4, #4
 8007350:	1af2      	subs	r2, r6, r3
 8007352:	d0b6      	beq.n	80072c2 <_malloc_r+0x22>
 8007354:	1b9b      	subs	r3, r3, r6
 8007356:	50a3      	str	r3, [r4, r2]
 8007358:	e7b3      	b.n	80072c2 <_malloc_r+0x22>
 800735a:	6862      	ldr	r2, [r4, #4]
 800735c:	42a3      	cmp	r3, r4
 800735e:	bf0c      	ite	eq
 8007360:	6032      	streq	r2, [r6, #0]
 8007362:	605a      	strne	r2, [r3, #4]
 8007364:	e7ec      	b.n	8007340 <_malloc_r+0xa0>
 8007366:	4623      	mov	r3, r4
 8007368:	6864      	ldr	r4, [r4, #4]
 800736a:	e7b2      	b.n	80072d2 <_malloc_r+0x32>
 800736c:	4634      	mov	r4, r6
 800736e:	6876      	ldr	r6, [r6, #4]
 8007370:	e7b9      	b.n	80072e6 <_malloc_r+0x46>
 8007372:	230c      	movs	r3, #12
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	4638      	mov	r0, r7
 8007378:	f000 fb74 	bl	8007a64 <__malloc_unlock>
 800737c:	e7a1      	b.n	80072c2 <_malloc_r+0x22>
 800737e:	6025      	str	r5, [r4, #0]
 8007380:	e7de      	b.n	8007340 <_malloc_r+0xa0>
 8007382:	bf00      	nop
 8007384:	20001e84 	.word	0x20001e84

08007388 <iprintf>:
 8007388:	b40f      	push	{r0, r1, r2, r3}
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <iprintf+0x2c>)
 800738c:	b513      	push	{r0, r1, r4, lr}
 800738e:	681c      	ldr	r4, [r3, #0]
 8007390:	b124      	cbz	r4, 800739c <iprintf+0x14>
 8007392:	69a3      	ldr	r3, [r4, #24]
 8007394:	b913      	cbnz	r3, 800739c <iprintf+0x14>
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff fe86 	bl	80070a8 <__sinit>
 800739c:	ab05      	add	r3, sp, #20
 800739e:	9a04      	ldr	r2, [sp, #16]
 80073a0:	68a1      	ldr	r1, [r4, #8]
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 fbd9 	bl	8007b5c <_vfiprintf_r>
 80073aa:	b002      	add	sp, #8
 80073ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b0:	b004      	add	sp, #16
 80073b2:	4770      	bx	lr
 80073b4:	20000014 	.word	0x20000014

080073b8 <_puts_r>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	460e      	mov	r6, r1
 80073bc:	4605      	mov	r5, r0
 80073be:	b118      	cbz	r0, 80073c8 <_puts_r+0x10>
 80073c0:	6983      	ldr	r3, [r0, #24]
 80073c2:	b90b      	cbnz	r3, 80073c8 <_puts_r+0x10>
 80073c4:	f7ff fe70 	bl	80070a8 <__sinit>
 80073c8:	69ab      	ldr	r3, [r5, #24]
 80073ca:	68ac      	ldr	r4, [r5, #8]
 80073cc:	b913      	cbnz	r3, 80073d4 <_puts_r+0x1c>
 80073ce:	4628      	mov	r0, r5
 80073d0:	f7ff fe6a 	bl	80070a8 <__sinit>
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <_puts_r+0xd0>)
 80073d6:	429c      	cmp	r4, r3
 80073d8:	d120      	bne.n	800741c <_puts_r+0x64>
 80073da:	686c      	ldr	r4, [r5, #4]
 80073dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d405      	bmi.n	80073ee <_puts_r+0x36>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	0598      	lsls	r0, r3, #22
 80073e6:	d402      	bmi.n	80073ee <_puts_r+0x36>
 80073e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ea:	f7ff ff20 	bl	800722e <__retarget_lock_acquire_recursive>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	0719      	lsls	r1, r3, #28
 80073f2:	d51d      	bpl.n	8007430 <_puts_r+0x78>
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b1db      	cbz	r3, 8007430 <_puts_r+0x78>
 80073f8:	3e01      	subs	r6, #1
 80073fa:	68a3      	ldr	r3, [r4, #8]
 80073fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007400:	3b01      	subs	r3, #1
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	bb39      	cbnz	r1, 8007456 <_puts_r+0x9e>
 8007406:	2b00      	cmp	r3, #0
 8007408:	da38      	bge.n	800747c <_puts_r+0xc4>
 800740a:	4622      	mov	r2, r4
 800740c:	210a      	movs	r1, #10
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f906 	bl	8007620 <__swbuf_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d011      	beq.n	800743c <_puts_r+0x84>
 8007418:	250a      	movs	r5, #10
 800741a:	e011      	b.n	8007440 <_puts_r+0x88>
 800741c:	4b1b      	ldr	r3, [pc, #108]	; (800748c <_puts_r+0xd4>)
 800741e:	429c      	cmp	r4, r3
 8007420:	d101      	bne.n	8007426 <_puts_r+0x6e>
 8007422:	68ac      	ldr	r4, [r5, #8]
 8007424:	e7da      	b.n	80073dc <_puts_r+0x24>
 8007426:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <_puts_r+0xd8>)
 8007428:	429c      	cmp	r4, r3
 800742a:	bf08      	it	eq
 800742c:	68ec      	ldreq	r4, [r5, #12]
 800742e:	e7d5      	b.n	80073dc <_puts_r+0x24>
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f958 	bl	80076e8 <__swsetup_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	d0dd      	beq.n	80073f8 <_puts_r+0x40>
 800743c:	f04f 35ff 	mov.w	r5, #4294967295
 8007440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007442:	07da      	lsls	r2, r3, #31
 8007444:	d405      	bmi.n	8007452 <_puts_r+0x9a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	059b      	lsls	r3, r3, #22
 800744a:	d402      	bmi.n	8007452 <_puts_r+0x9a>
 800744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744e:	f7ff feef 	bl	8007230 <__retarget_lock_release_recursive>
 8007452:	4628      	mov	r0, r5
 8007454:	bd70      	pop	{r4, r5, r6, pc}
 8007456:	2b00      	cmp	r3, #0
 8007458:	da04      	bge.n	8007464 <_puts_r+0xac>
 800745a:	69a2      	ldr	r2, [r4, #24]
 800745c:	429a      	cmp	r2, r3
 800745e:	dc06      	bgt.n	800746e <_puts_r+0xb6>
 8007460:	290a      	cmp	r1, #10
 8007462:	d004      	beq.n	800746e <_puts_r+0xb6>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	7019      	strb	r1, [r3, #0]
 800746c:	e7c5      	b.n	80073fa <_puts_r+0x42>
 800746e:	4622      	mov	r2, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f8d5 	bl	8007620 <__swbuf_r>
 8007476:	3001      	adds	r0, #1
 8007478:	d1bf      	bne.n	80073fa <_puts_r+0x42>
 800747a:	e7df      	b.n	800743c <_puts_r+0x84>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	250a      	movs	r5, #10
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	6022      	str	r2, [r4, #0]
 8007484:	701d      	strb	r5, [r3, #0]
 8007486:	e7db      	b.n	8007440 <_puts_r+0x88>
 8007488:	08008374 	.word	0x08008374
 800748c:	08008394 	.word	0x08008394
 8007490:	08008354 	.word	0x08008354

08007494 <puts>:
 8007494:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <puts+0xc>)
 8007496:	4601      	mov	r1, r0
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	f7ff bf8d 	b.w	80073b8 <_puts_r>
 800749e:	bf00      	nop
 80074a0:	20000014 	.word	0x20000014

080074a4 <cleanup_glue>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	460c      	mov	r4, r1
 80074a8:	6809      	ldr	r1, [r1, #0]
 80074aa:	4605      	mov	r5, r0
 80074ac:	b109      	cbz	r1, 80074b2 <cleanup_glue+0xe>
 80074ae:	f7ff fff9 	bl	80074a4 <cleanup_glue>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ba:	f000 bad9 	b.w	8007a70 <_free_r>
	...

080074c0 <_reclaim_reent>:
 80074c0:	4b2c      	ldr	r3, [pc, #176]	; (8007574 <_reclaim_reent+0xb4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4283      	cmp	r3, r0
 80074c6:	b570      	push	{r4, r5, r6, lr}
 80074c8:	4604      	mov	r4, r0
 80074ca:	d051      	beq.n	8007570 <_reclaim_reent+0xb0>
 80074cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074ce:	b143      	cbz	r3, 80074e2 <_reclaim_reent+0x22>
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d14a      	bne.n	800756c <_reclaim_reent+0xac>
 80074d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	b111      	cbz	r1, 80074e2 <_reclaim_reent+0x22>
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 fac7 	bl	8007a70 <_free_r>
 80074e2:	6961      	ldr	r1, [r4, #20]
 80074e4:	b111      	cbz	r1, 80074ec <_reclaim_reent+0x2c>
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 fac2 	bl	8007a70 <_free_r>
 80074ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074ee:	b111      	cbz	r1, 80074f6 <_reclaim_reent+0x36>
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fabd 	bl	8007a70 <_free_r>
 80074f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074f8:	b111      	cbz	r1, 8007500 <_reclaim_reent+0x40>
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fab8 	bl	8007a70 <_free_r>
 8007500:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007502:	b111      	cbz	r1, 800750a <_reclaim_reent+0x4a>
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fab3 	bl	8007a70 <_free_r>
 800750a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800750c:	b111      	cbz	r1, 8007514 <_reclaim_reent+0x54>
 800750e:	4620      	mov	r0, r4
 8007510:	f000 faae 	bl	8007a70 <_free_r>
 8007514:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007516:	b111      	cbz	r1, 800751e <_reclaim_reent+0x5e>
 8007518:	4620      	mov	r0, r4
 800751a:	f000 faa9 	bl	8007a70 <_free_r>
 800751e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007520:	b111      	cbz	r1, 8007528 <_reclaim_reent+0x68>
 8007522:	4620      	mov	r0, r4
 8007524:	f000 faa4 	bl	8007a70 <_free_r>
 8007528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752a:	b111      	cbz	r1, 8007532 <_reclaim_reent+0x72>
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fa9f 	bl	8007a70 <_free_r>
 8007532:	69a3      	ldr	r3, [r4, #24]
 8007534:	b1e3      	cbz	r3, 8007570 <_reclaim_reent+0xb0>
 8007536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007538:	4620      	mov	r0, r4
 800753a:	4798      	blx	r3
 800753c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800753e:	b1b9      	cbz	r1, 8007570 <_reclaim_reent+0xb0>
 8007540:	4620      	mov	r0, r4
 8007542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007546:	f7ff bfad 	b.w	80074a4 <cleanup_glue>
 800754a:	5949      	ldr	r1, [r1, r5]
 800754c:	b941      	cbnz	r1, 8007560 <_reclaim_reent+0xa0>
 800754e:	3504      	adds	r5, #4
 8007550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007552:	2d80      	cmp	r5, #128	; 0x80
 8007554:	68d9      	ldr	r1, [r3, #12]
 8007556:	d1f8      	bne.n	800754a <_reclaim_reent+0x8a>
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fa89 	bl	8007a70 <_free_r>
 800755e:	e7ba      	b.n	80074d6 <_reclaim_reent+0x16>
 8007560:	680e      	ldr	r6, [r1, #0]
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fa84 	bl	8007a70 <_free_r>
 8007568:	4631      	mov	r1, r6
 800756a:	e7ef      	b.n	800754c <_reclaim_reent+0x8c>
 800756c:	2500      	movs	r5, #0
 800756e:	e7ef      	b.n	8007550 <_reclaim_reent+0x90>
 8007570:	bd70      	pop	{r4, r5, r6, pc}
 8007572:	bf00      	nop
 8007574:	20000014 	.word	0x20000014

08007578 <_sbrk_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d06      	ldr	r5, [pc, #24]	; (8007594 <_sbrk_r+0x1c>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 fbb0 	bl	8000ce8 <_sbrk>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_sbrk_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_sbrk_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20001e8c 	.word	0x20001e8c

08007598 <__sread>:
 8007598:	b510      	push	{r4, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	f000 fda0 	bl	80080e4 <_read_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	bfab      	itete	ge
 80075a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075aa:	89a3      	ldrhlt	r3, [r4, #12]
 80075ac:	181b      	addge	r3, r3, r0
 80075ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075b2:	bfac      	ite	ge
 80075b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075b6:	81a3      	strhlt	r3, [r4, #12]
 80075b8:	bd10      	pop	{r4, pc}

080075ba <__swrite>:
 80075ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	461f      	mov	r7, r3
 80075c0:	898b      	ldrh	r3, [r1, #12]
 80075c2:	05db      	lsls	r3, r3, #23
 80075c4:	4605      	mov	r5, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	4616      	mov	r6, r2
 80075ca:	d505      	bpl.n	80075d8 <__swrite+0x1e>
 80075cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d0:	2302      	movs	r3, #2
 80075d2:	2200      	movs	r2, #0
 80075d4:	f000 f9c8 	bl	8007968 <_lseek_r>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	4628      	mov	r0, r5
 80075ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ee:	f000 b869 	b.w	80076c4 <_write_r>

080075f2 <__sseek>:
 80075f2:	b510      	push	{r4, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	f000 f9b5 	bl	8007968 <_lseek_r>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	bf15      	itete	ne
 8007604:	6560      	strne	r0, [r4, #84]	; 0x54
 8007606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800760a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800760e:	81a3      	strheq	r3, [r4, #12]
 8007610:	bf18      	it	ne
 8007612:	81a3      	strhne	r3, [r4, #12]
 8007614:	bd10      	pop	{r4, pc}

08007616 <__sclose>:
 8007616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761a:	f000 b8d3 	b.w	80077c4 <_close_r>
	...

08007620 <__swbuf_r>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	460e      	mov	r6, r1
 8007624:	4614      	mov	r4, r2
 8007626:	4605      	mov	r5, r0
 8007628:	b118      	cbz	r0, 8007632 <__swbuf_r+0x12>
 800762a:	6983      	ldr	r3, [r0, #24]
 800762c:	b90b      	cbnz	r3, 8007632 <__swbuf_r+0x12>
 800762e:	f7ff fd3b 	bl	80070a8 <__sinit>
 8007632:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <__swbuf_r+0x98>)
 8007634:	429c      	cmp	r4, r3
 8007636:	d12b      	bne.n	8007690 <__swbuf_r+0x70>
 8007638:	686c      	ldr	r4, [r5, #4]
 800763a:	69a3      	ldr	r3, [r4, #24]
 800763c:	60a3      	str	r3, [r4, #8]
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	071a      	lsls	r2, r3, #28
 8007642:	d52f      	bpl.n	80076a4 <__swbuf_r+0x84>
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	b36b      	cbz	r3, 80076a4 <__swbuf_r+0x84>
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	1ac0      	subs	r0, r0, r3
 800764e:	6963      	ldr	r3, [r4, #20]
 8007650:	b2f6      	uxtb	r6, r6
 8007652:	4283      	cmp	r3, r0
 8007654:	4637      	mov	r7, r6
 8007656:	dc04      	bgt.n	8007662 <__swbuf_r+0x42>
 8007658:	4621      	mov	r1, r4
 800765a:	4628      	mov	r0, r5
 800765c:	f000 f948 	bl	80078f0 <_fflush_r>
 8007660:	bb30      	cbnz	r0, 80076b0 <__swbuf_r+0x90>
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	3b01      	subs	r3, #1
 8007666:	60a3      	str	r3, [r4, #8]
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	701e      	strb	r6, [r3, #0]
 8007670:	6963      	ldr	r3, [r4, #20]
 8007672:	3001      	adds	r0, #1
 8007674:	4283      	cmp	r3, r0
 8007676:	d004      	beq.n	8007682 <__swbuf_r+0x62>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	07db      	lsls	r3, r3, #31
 800767c:	d506      	bpl.n	800768c <__swbuf_r+0x6c>
 800767e:	2e0a      	cmp	r6, #10
 8007680:	d104      	bne.n	800768c <__swbuf_r+0x6c>
 8007682:	4621      	mov	r1, r4
 8007684:	4628      	mov	r0, r5
 8007686:	f000 f933 	bl	80078f0 <_fflush_r>
 800768a:	b988      	cbnz	r0, 80076b0 <__swbuf_r+0x90>
 800768c:	4638      	mov	r0, r7
 800768e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <__swbuf_r+0x9c>)
 8007692:	429c      	cmp	r4, r3
 8007694:	d101      	bne.n	800769a <__swbuf_r+0x7a>
 8007696:	68ac      	ldr	r4, [r5, #8]
 8007698:	e7cf      	b.n	800763a <__swbuf_r+0x1a>
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <__swbuf_r+0xa0>)
 800769c:	429c      	cmp	r4, r3
 800769e:	bf08      	it	eq
 80076a0:	68ec      	ldreq	r4, [r5, #12]
 80076a2:	e7ca      	b.n	800763a <__swbuf_r+0x1a>
 80076a4:	4621      	mov	r1, r4
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f81e 	bl	80076e8 <__swsetup_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d0cb      	beq.n	8007648 <__swbuf_r+0x28>
 80076b0:	f04f 37ff 	mov.w	r7, #4294967295
 80076b4:	e7ea      	b.n	800768c <__swbuf_r+0x6c>
 80076b6:	bf00      	nop
 80076b8:	08008374 	.word	0x08008374
 80076bc:	08008394 	.word	0x08008394
 80076c0:	08008354 	.word	0x08008354

080076c4 <_write_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4d07      	ldr	r5, [pc, #28]	; (80076e4 <_write_r+0x20>)
 80076c8:	4604      	mov	r4, r0
 80076ca:	4608      	mov	r0, r1
 80076cc:	4611      	mov	r1, r2
 80076ce:	2200      	movs	r2, #0
 80076d0:	602a      	str	r2, [r5, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f7f9 fab7 	bl	8000c46 <_write>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_write_r+0x1e>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_write_r+0x1e>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	20001e8c 	.word	0x20001e8c

080076e8 <__swsetup_r>:
 80076e8:	4b32      	ldr	r3, [pc, #200]	; (80077b4 <__swsetup_r+0xcc>)
 80076ea:	b570      	push	{r4, r5, r6, lr}
 80076ec:	681d      	ldr	r5, [r3, #0]
 80076ee:	4606      	mov	r6, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	b125      	cbz	r5, 80076fe <__swsetup_r+0x16>
 80076f4:	69ab      	ldr	r3, [r5, #24]
 80076f6:	b913      	cbnz	r3, 80076fe <__swsetup_r+0x16>
 80076f8:	4628      	mov	r0, r5
 80076fa:	f7ff fcd5 	bl	80070a8 <__sinit>
 80076fe:	4b2e      	ldr	r3, [pc, #184]	; (80077b8 <__swsetup_r+0xd0>)
 8007700:	429c      	cmp	r4, r3
 8007702:	d10f      	bne.n	8007724 <__swsetup_r+0x3c>
 8007704:	686c      	ldr	r4, [r5, #4]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800770c:	0719      	lsls	r1, r3, #28
 800770e:	d42c      	bmi.n	800776a <__swsetup_r+0x82>
 8007710:	06dd      	lsls	r5, r3, #27
 8007712:	d411      	bmi.n	8007738 <__swsetup_r+0x50>
 8007714:	2309      	movs	r3, #9
 8007716:	6033      	str	r3, [r6, #0]
 8007718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	f04f 30ff 	mov.w	r0, #4294967295
 8007722:	e03e      	b.n	80077a2 <__swsetup_r+0xba>
 8007724:	4b25      	ldr	r3, [pc, #148]	; (80077bc <__swsetup_r+0xd4>)
 8007726:	429c      	cmp	r4, r3
 8007728:	d101      	bne.n	800772e <__swsetup_r+0x46>
 800772a:	68ac      	ldr	r4, [r5, #8]
 800772c:	e7eb      	b.n	8007706 <__swsetup_r+0x1e>
 800772e:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <__swsetup_r+0xd8>)
 8007730:	429c      	cmp	r4, r3
 8007732:	bf08      	it	eq
 8007734:	68ec      	ldreq	r4, [r5, #12]
 8007736:	e7e6      	b.n	8007706 <__swsetup_r+0x1e>
 8007738:	0758      	lsls	r0, r3, #29
 800773a:	d512      	bpl.n	8007762 <__swsetup_r+0x7a>
 800773c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800773e:	b141      	cbz	r1, 8007752 <__swsetup_r+0x6a>
 8007740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007744:	4299      	cmp	r1, r3
 8007746:	d002      	beq.n	800774e <__swsetup_r+0x66>
 8007748:	4630      	mov	r0, r6
 800774a:	f000 f991 	bl	8007a70 <_free_r>
 800774e:	2300      	movs	r3, #0
 8007750:	6363      	str	r3, [r4, #52]	; 0x34
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	2300      	movs	r3, #0
 800775c:	6063      	str	r3, [r4, #4]
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f043 0308 	orr.w	r3, r3, #8
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	b94b      	cbnz	r3, 8007782 <__swsetup_r+0x9a>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007778:	d003      	beq.n	8007782 <__swsetup_r+0x9a>
 800777a:	4621      	mov	r1, r4
 800777c:	4630      	mov	r0, r6
 800777e:	f000 f92b 	bl	80079d8 <__smakebuf_r>
 8007782:	89a0      	ldrh	r0, [r4, #12]
 8007784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007788:	f010 0301 	ands.w	r3, r0, #1
 800778c:	d00a      	beq.n	80077a4 <__swsetup_r+0xbc>
 800778e:	2300      	movs	r3, #0
 8007790:	60a3      	str	r3, [r4, #8]
 8007792:	6963      	ldr	r3, [r4, #20]
 8007794:	425b      	negs	r3, r3
 8007796:	61a3      	str	r3, [r4, #24]
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	b943      	cbnz	r3, 80077ae <__swsetup_r+0xc6>
 800779c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077a0:	d1ba      	bne.n	8007718 <__swsetup_r+0x30>
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	0781      	lsls	r1, r0, #30
 80077a6:	bf58      	it	pl
 80077a8:	6963      	ldrpl	r3, [r4, #20]
 80077aa:	60a3      	str	r3, [r4, #8]
 80077ac:	e7f4      	b.n	8007798 <__swsetup_r+0xb0>
 80077ae:	2000      	movs	r0, #0
 80077b0:	e7f7      	b.n	80077a2 <__swsetup_r+0xba>
 80077b2:	bf00      	nop
 80077b4:	20000014 	.word	0x20000014
 80077b8:	08008374 	.word	0x08008374
 80077bc:	08008394 	.word	0x08008394
 80077c0:	08008354 	.word	0x08008354

080077c4 <_close_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d06      	ldr	r5, [pc, #24]	; (80077e0 <_close_r+0x1c>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7f9 fa55 	bl	8000c7e <_close>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_close_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_close_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20001e8c 	.word	0x20001e8c

080077e4 <__sflush_r>:
 80077e4:	898a      	ldrh	r2, [r1, #12]
 80077e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ea:	4605      	mov	r5, r0
 80077ec:	0710      	lsls	r0, r2, #28
 80077ee:	460c      	mov	r4, r1
 80077f0:	d458      	bmi.n	80078a4 <__sflush_r+0xc0>
 80077f2:	684b      	ldr	r3, [r1, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dc05      	bgt.n	8007804 <__sflush_r+0x20>
 80077f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dc02      	bgt.n	8007804 <__sflush_r+0x20>
 80077fe:	2000      	movs	r0, #0
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007806:	2e00      	cmp	r6, #0
 8007808:	d0f9      	beq.n	80077fe <__sflush_r+0x1a>
 800780a:	2300      	movs	r3, #0
 800780c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007810:	682f      	ldr	r7, [r5, #0]
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	d032      	beq.n	800787c <__sflush_r+0x98>
 8007816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	075a      	lsls	r2, r3, #29
 800781c:	d505      	bpl.n	800782a <__sflush_r+0x46>
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	1ac0      	subs	r0, r0, r3
 8007822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007824:	b10b      	cbz	r3, 800782a <__sflush_r+0x46>
 8007826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007828:	1ac0      	subs	r0, r0, r3
 800782a:	2300      	movs	r3, #0
 800782c:	4602      	mov	r2, r0
 800782e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007830:	6a21      	ldr	r1, [r4, #32]
 8007832:	4628      	mov	r0, r5
 8007834:	47b0      	blx	r6
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	d106      	bne.n	800784a <__sflush_r+0x66>
 800783c:	6829      	ldr	r1, [r5, #0]
 800783e:	291d      	cmp	r1, #29
 8007840:	d82c      	bhi.n	800789c <__sflush_r+0xb8>
 8007842:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <__sflush_r+0x108>)
 8007844:	40ca      	lsrs	r2, r1
 8007846:	07d6      	lsls	r6, r2, #31
 8007848:	d528      	bpl.n	800789c <__sflush_r+0xb8>
 800784a:	2200      	movs	r2, #0
 800784c:	6062      	str	r2, [r4, #4]
 800784e:	04d9      	lsls	r1, r3, #19
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	6022      	str	r2, [r4, #0]
 8007854:	d504      	bpl.n	8007860 <__sflush_r+0x7c>
 8007856:	1c42      	adds	r2, r0, #1
 8007858:	d101      	bne.n	800785e <__sflush_r+0x7a>
 800785a:	682b      	ldr	r3, [r5, #0]
 800785c:	b903      	cbnz	r3, 8007860 <__sflush_r+0x7c>
 800785e:	6560      	str	r0, [r4, #84]	; 0x54
 8007860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007862:	602f      	str	r7, [r5, #0]
 8007864:	2900      	cmp	r1, #0
 8007866:	d0ca      	beq.n	80077fe <__sflush_r+0x1a>
 8007868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800786c:	4299      	cmp	r1, r3
 800786e:	d002      	beq.n	8007876 <__sflush_r+0x92>
 8007870:	4628      	mov	r0, r5
 8007872:	f000 f8fd 	bl	8007a70 <_free_r>
 8007876:	2000      	movs	r0, #0
 8007878:	6360      	str	r0, [r4, #52]	; 0x34
 800787a:	e7c1      	b.n	8007800 <__sflush_r+0x1c>
 800787c:	6a21      	ldr	r1, [r4, #32]
 800787e:	2301      	movs	r3, #1
 8007880:	4628      	mov	r0, r5
 8007882:	47b0      	blx	r6
 8007884:	1c41      	adds	r1, r0, #1
 8007886:	d1c7      	bne.n	8007818 <__sflush_r+0x34>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0c4      	beq.n	8007818 <__sflush_r+0x34>
 800788e:	2b1d      	cmp	r3, #29
 8007890:	d001      	beq.n	8007896 <__sflush_r+0xb2>
 8007892:	2b16      	cmp	r3, #22
 8007894:	d101      	bne.n	800789a <__sflush_r+0xb6>
 8007896:	602f      	str	r7, [r5, #0]
 8007898:	e7b1      	b.n	80077fe <__sflush_r+0x1a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	e7ad      	b.n	8007800 <__sflush_r+0x1c>
 80078a4:	690f      	ldr	r7, [r1, #16]
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	d0a9      	beq.n	80077fe <__sflush_r+0x1a>
 80078aa:	0793      	lsls	r3, r2, #30
 80078ac:	680e      	ldr	r6, [r1, #0]
 80078ae:	bf08      	it	eq
 80078b0:	694b      	ldreq	r3, [r1, #20]
 80078b2:	600f      	str	r7, [r1, #0]
 80078b4:	bf18      	it	ne
 80078b6:	2300      	movne	r3, #0
 80078b8:	eba6 0807 	sub.w	r8, r6, r7
 80078bc:	608b      	str	r3, [r1, #8]
 80078be:	f1b8 0f00 	cmp.w	r8, #0
 80078c2:	dd9c      	ble.n	80077fe <__sflush_r+0x1a>
 80078c4:	6a21      	ldr	r1, [r4, #32]
 80078c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078c8:	4643      	mov	r3, r8
 80078ca:	463a      	mov	r2, r7
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b0      	blx	r6
 80078d0:	2800      	cmp	r0, #0
 80078d2:	dc06      	bgt.n	80078e2 <__sflush_r+0xfe>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	e78e      	b.n	8007800 <__sflush_r+0x1c>
 80078e2:	4407      	add	r7, r0
 80078e4:	eba8 0800 	sub.w	r8, r8, r0
 80078e8:	e7e9      	b.n	80078be <__sflush_r+0xda>
 80078ea:	bf00      	nop
 80078ec:	20400001 	.word	0x20400001

080078f0 <_fflush_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	690b      	ldr	r3, [r1, #16]
 80078f4:	4605      	mov	r5, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	b913      	cbnz	r3, 8007900 <_fflush_r+0x10>
 80078fa:	2500      	movs	r5, #0
 80078fc:	4628      	mov	r0, r5
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	b118      	cbz	r0, 800790a <_fflush_r+0x1a>
 8007902:	6983      	ldr	r3, [r0, #24]
 8007904:	b90b      	cbnz	r3, 800790a <_fflush_r+0x1a>
 8007906:	f7ff fbcf 	bl	80070a8 <__sinit>
 800790a:	4b14      	ldr	r3, [pc, #80]	; (800795c <_fflush_r+0x6c>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d11b      	bne.n	8007948 <_fflush_r+0x58>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0ef      	beq.n	80078fa <_fflush_r+0xa>
 800791a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800791c:	07d0      	lsls	r0, r2, #31
 800791e:	d404      	bmi.n	800792a <_fflush_r+0x3a>
 8007920:	0599      	lsls	r1, r3, #22
 8007922:	d402      	bmi.n	800792a <_fflush_r+0x3a>
 8007924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007926:	f7ff fc82 	bl	800722e <__retarget_lock_acquire_recursive>
 800792a:	4628      	mov	r0, r5
 800792c:	4621      	mov	r1, r4
 800792e:	f7ff ff59 	bl	80077e4 <__sflush_r>
 8007932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007934:	07da      	lsls	r2, r3, #31
 8007936:	4605      	mov	r5, r0
 8007938:	d4e0      	bmi.n	80078fc <_fflush_r+0xc>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	059b      	lsls	r3, r3, #22
 800793e:	d4dd      	bmi.n	80078fc <_fflush_r+0xc>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f7ff fc75 	bl	8007230 <__retarget_lock_release_recursive>
 8007946:	e7d9      	b.n	80078fc <_fflush_r+0xc>
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <_fflush_r+0x70>)
 800794a:	429c      	cmp	r4, r3
 800794c:	d101      	bne.n	8007952 <_fflush_r+0x62>
 800794e:	68ac      	ldr	r4, [r5, #8]
 8007950:	e7df      	b.n	8007912 <_fflush_r+0x22>
 8007952:	4b04      	ldr	r3, [pc, #16]	; (8007964 <_fflush_r+0x74>)
 8007954:	429c      	cmp	r4, r3
 8007956:	bf08      	it	eq
 8007958:	68ec      	ldreq	r4, [r5, #12]
 800795a:	e7da      	b.n	8007912 <_fflush_r+0x22>
 800795c:	08008374 	.word	0x08008374
 8007960:	08008394 	.word	0x08008394
 8007964:	08008354 	.word	0x08008354

08007968 <_lseek_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d07      	ldr	r5, [pc, #28]	; (8007988 <_lseek_r+0x20>)
 800796c:	4604      	mov	r4, r0
 800796e:	4608      	mov	r0, r1
 8007970:	4611      	mov	r1, r2
 8007972:	2200      	movs	r2, #0
 8007974:	602a      	str	r2, [r5, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	f7f9 f9a8 	bl	8000ccc <_lseek>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_lseek_r+0x1e>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_lseek_r+0x1e>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	20001e8c 	.word	0x20001e8c

0800798c <__swhatbuf_r>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	460e      	mov	r6, r1
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	2900      	cmp	r1, #0
 8007996:	b096      	sub	sp, #88	; 0x58
 8007998:	4614      	mov	r4, r2
 800799a:	461d      	mov	r5, r3
 800799c:	da08      	bge.n	80079b0 <__swhatbuf_r+0x24>
 800799e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	061a      	lsls	r2, r3, #24
 80079a8:	d410      	bmi.n	80079cc <__swhatbuf_r+0x40>
 80079aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ae:	e00e      	b.n	80079ce <__swhatbuf_r+0x42>
 80079b0:	466a      	mov	r2, sp
 80079b2:	f000 fba9 	bl	8008108 <_fstat_r>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	dbf1      	blt.n	800799e <__swhatbuf_r+0x12>
 80079ba:	9a01      	ldr	r2, [sp, #4]
 80079bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079c4:	425a      	negs	r2, r3
 80079c6:	415a      	adcs	r2, r3
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	e7ee      	b.n	80079aa <__swhatbuf_r+0x1e>
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	2000      	movs	r0, #0
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	b016      	add	sp, #88	; 0x58
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080079d8 <__smakebuf_r>:
 80079d8:	898b      	ldrh	r3, [r1, #12]
 80079da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079dc:	079d      	lsls	r5, r3, #30
 80079de:	4606      	mov	r6, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	d507      	bpl.n	80079f4 <__smakebuf_r+0x1c>
 80079e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	2301      	movs	r3, #1
 80079ee:	6163      	str	r3, [r4, #20]
 80079f0:	b002      	add	sp, #8
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	ab01      	add	r3, sp, #4
 80079f6:	466a      	mov	r2, sp
 80079f8:	f7ff ffc8 	bl	800798c <__swhatbuf_r>
 80079fc:	9900      	ldr	r1, [sp, #0]
 80079fe:	4605      	mov	r5, r0
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff fc4d 	bl	80072a0 <_malloc_r>
 8007a06:	b948      	cbnz	r0, 8007a1c <__smakebuf_r+0x44>
 8007a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0c:	059a      	lsls	r2, r3, #22
 8007a0e:	d4ef      	bmi.n	80079f0 <__smakebuf_r+0x18>
 8007a10:	f023 0303 	bic.w	r3, r3, #3
 8007a14:	f043 0302 	orr.w	r3, r3, #2
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	e7e3      	b.n	80079e4 <__smakebuf_r+0xc>
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <__smakebuf_r+0x7c>)
 8007a1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	6020      	str	r0, [r4, #0]
 8007a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	9b00      	ldr	r3, [sp, #0]
 8007a2c:	6163      	str	r3, [r4, #20]
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	6120      	str	r0, [r4, #16]
 8007a32:	b15b      	cbz	r3, 8007a4c <__smakebuf_r+0x74>
 8007a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f000 fb77 	bl	800812c <_isatty_r>
 8007a3e:	b128      	cbz	r0, 8007a4c <__smakebuf_r+0x74>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f023 0303 	bic.w	r3, r3, #3
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	89a0      	ldrh	r0, [r4, #12]
 8007a4e:	4305      	orrs	r5, r0
 8007a50:	81a5      	strh	r5, [r4, #12]
 8007a52:	e7cd      	b.n	80079f0 <__smakebuf_r+0x18>
 8007a54:	08007041 	.word	0x08007041

08007a58 <__malloc_lock>:
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <__malloc_lock+0x8>)
 8007a5a:	f7ff bbe8 	b.w	800722e <__retarget_lock_acquire_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20001e80 	.word	0x20001e80

08007a64 <__malloc_unlock>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__malloc_unlock+0x8>)
 8007a66:	f7ff bbe3 	b.w	8007230 <__retarget_lock_release_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	20001e80 	.word	0x20001e80

08007a70 <_free_r>:
 8007a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d044      	beq.n	8007b00 <_free_r+0x90>
 8007a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a7a:	9001      	str	r0, [sp, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a82:	bfb8      	it	lt
 8007a84:	18e4      	addlt	r4, r4, r3
 8007a86:	f7ff ffe7 	bl	8007a58 <__malloc_lock>
 8007a8a:	4a1e      	ldr	r2, [pc, #120]	; (8007b04 <_free_r+0x94>)
 8007a8c:	9801      	ldr	r0, [sp, #4]
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	b933      	cbnz	r3, 8007aa0 <_free_r+0x30>
 8007a92:	6063      	str	r3, [r4, #4]
 8007a94:	6014      	str	r4, [r2, #0]
 8007a96:	b003      	add	sp, #12
 8007a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a9c:	f7ff bfe2 	b.w	8007a64 <__malloc_unlock>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d908      	bls.n	8007ab6 <_free_r+0x46>
 8007aa4:	6825      	ldr	r5, [r4, #0]
 8007aa6:	1961      	adds	r1, r4, r5
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf01      	itttt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	1949      	addeq	r1, r1, r5
 8007ab2:	6021      	streq	r1, [r4, #0]
 8007ab4:	e7ed      	b.n	8007a92 <_free_r+0x22>
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b10b      	cbz	r3, 8007ac0 <_free_r+0x50>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d9fa      	bls.n	8007ab6 <_free_r+0x46>
 8007ac0:	6811      	ldr	r1, [r2, #0]
 8007ac2:	1855      	adds	r5, r2, r1
 8007ac4:	42a5      	cmp	r5, r4
 8007ac6:	d10b      	bne.n	8007ae0 <_free_r+0x70>
 8007ac8:	6824      	ldr	r4, [r4, #0]
 8007aca:	4421      	add	r1, r4
 8007acc:	1854      	adds	r4, r2, r1
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	6011      	str	r1, [r2, #0]
 8007ad2:	d1e0      	bne.n	8007a96 <_free_r+0x26>
 8007ad4:	681c      	ldr	r4, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	6053      	str	r3, [r2, #4]
 8007ada:	4421      	add	r1, r4
 8007adc:	6011      	str	r1, [r2, #0]
 8007ade:	e7da      	b.n	8007a96 <_free_r+0x26>
 8007ae0:	d902      	bls.n	8007ae8 <_free_r+0x78>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	6003      	str	r3, [r0, #0]
 8007ae6:	e7d6      	b.n	8007a96 <_free_r+0x26>
 8007ae8:	6825      	ldr	r5, [r4, #0]
 8007aea:	1961      	adds	r1, r4, r5
 8007aec:	428b      	cmp	r3, r1
 8007aee:	bf04      	itt	eq
 8007af0:	6819      	ldreq	r1, [r3, #0]
 8007af2:	685b      	ldreq	r3, [r3, #4]
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	bf04      	itt	eq
 8007af8:	1949      	addeq	r1, r1, r5
 8007afa:	6021      	streq	r1, [r4, #0]
 8007afc:	6054      	str	r4, [r2, #4]
 8007afe:	e7ca      	b.n	8007a96 <_free_r+0x26>
 8007b00:	b003      	add	sp, #12
 8007b02:	bd30      	pop	{r4, r5, pc}
 8007b04:	20001e84 	.word	0x20001e84

08007b08 <__sfputc_r>:
 8007b08:	6893      	ldr	r3, [r2, #8]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	b410      	push	{r4}
 8007b10:	6093      	str	r3, [r2, #8]
 8007b12:	da08      	bge.n	8007b26 <__sfputc_r+0x1e>
 8007b14:	6994      	ldr	r4, [r2, #24]
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	db01      	blt.n	8007b1e <__sfputc_r+0x16>
 8007b1a:	290a      	cmp	r1, #10
 8007b1c:	d103      	bne.n	8007b26 <__sfputc_r+0x1e>
 8007b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b22:	f7ff bd7d 	b.w	8007620 <__swbuf_r>
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	1c58      	adds	r0, r3, #1
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	7019      	strb	r1, [r3, #0]
 8007b2e:	4608      	mov	r0, r1
 8007b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <__sfputs_r>:
 8007b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b38:	4606      	mov	r6, r0
 8007b3a:	460f      	mov	r7, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	18d5      	adds	r5, r2, r3
 8007b40:	42ac      	cmp	r4, r5
 8007b42:	d101      	bne.n	8007b48 <__sfputs_r+0x12>
 8007b44:	2000      	movs	r0, #0
 8007b46:	e007      	b.n	8007b58 <__sfputs_r+0x22>
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	463a      	mov	r2, r7
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7ff ffda 	bl	8007b08 <__sfputc_r>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d1f3      	bne.n	8007b40 <__sfputs_r+0xa>
 8007b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b5c <_vfiprintf_r>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	460d      	mov	r5, r1
 8007b62:	b09d      	sub	sp, #116	; 0x74
 8007b64:	4614      	mov	r4, r2
 8007b66:	4698      	mov	r8, r3
 8007b68:	4606      	mov	r6, r0
 8007b6a:	b118      	cbz	r0, 8007b74 <_vfiprintf_r+0x18>
 8007b6c:	6983      	ldr	r3, [r0, #24]
 8007b6e:	b90b      	cbnz	r3, 8007b74 <_vfiprintf_r+0x18>
 8007b70:	f7ff fa9a 	bl	80070a8 <__sinit>
 8007b74:	4b89      	ldr	r3, [pc, #548]	; (8007d9c <_vfiprintf_r+0x240>)
 8007b76:	429d      	cmp	r5, r3
 8007b78:	d11b      	bne.n	8007bb2 <_vfiprintf_r+0x56>
 8007b7a:	6875      	ldr	r5, [r6, #4]
 8007b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b7e:	07d9      	lsls	r1, r3, #31
 8007b80:	d405      	bmi.n	8007b8e <_vfiprintf_r+0x32>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_vfiprintf_r+0x32>
 8007b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8a:	f7ff fb50 	bl	800722e <__retarget_lock_acquire_recursive>
 8007b8e:	89ab      	ldrh	r3, [r5, #12]
 8007b90:	071b      	lsls	r3, r3, #28
 8007b92:	d501      	bpl.n	8007b98 <_vfiprintf_r+0x3c>
 8007b94:	692b      	ldr	r3, [r5, #16]
 8007b96:	b9eb      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x78>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff fda4 	bl	80076e8 <__swsetup_r>
 8007ba0:	b1c0      	cbz	r0, 8007bd4 <_vfiprintf_r+0x78>
 8007ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba4:	07dc      	lsls	r4, r3, #31
 8007ba6:	d50e      	bpl.n	8007bc6 <_vfiprintf_r+0x6a>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b01d      	add	sp, #116	; 0x74
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	4b7b      	ldr	r3, [pc, #492]	; (8007da0 <_vfiprintf_r+0x244>)
 8007bb4:	429d      	cmp	r5, r3
 8007bb6:	d101      	bne.n	8007bbc <_vfiprintf_r+0x60>
 8007bb8:	68b5      	ldr	r5, [r6, #8]
 8007bba:	e7df      	b.n	8007b7c <_vfiprintf_r+0x20>
 8007bbc:	4b79      	ldr	r3, [pc, #484]	; (8007da4 <_vfiprintf_r+0x248>)
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	bf08      	it	eq
 8007bc2:	68f5      	ldreq	r5, [r6, #12]
 8007bc4:	e7da      	b.n	8007b7c <_vfiprintf_r+0x20>
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	0598      	lsls	r0, r3, #22
 8007bca:	d4ed      	bmi.n	8007ba8 <_vfiprintf_r+0x4c>
 8007bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bce:	f7ff fb2f 	bl	8007230 <__retarget_lock_release_recursive>
 8007bd2:	e7e9      	b.n	8007ba8 <_vfiprintf_r+0x4c>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be2:	2330      	movs	r3, #48	; 0x30
 8007be4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007da8 <_vfiprintf_r+0x24c>
 8007be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bec:	f04f 0901 	mov.w	r9, #1
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	469a      	mov	sl, r3
 8007bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf8:	b10a      	cbz	r2, 8007bfe <_vfiprintf_r+0xa2>
 8007bfa:	2a25      	cmp	r2, #37	; 0x25
 8007bfc:	d1f9      	bne.n	8007bf2 <_vfiprintf_r+0x96>
 8007bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007c02:	d00b      	beq.n	8007c1c <_vfiprintf_r+0xc0>
 8007c04:	465b      	mov	r3, fp
 8007c06:	4622      	mov	r2, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ff93 	bl	8007b36 <__sfputs_r>
 8007c10:	3001      	adds	r0, #1
 8007c12:	f000 80aa 	beq.w	8007d6a <_vfiprintf_r+0x20e>
 8007c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c18:	445a      	add	r2, fp
 8007c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80a2 	beq.w	8007d6a <_vfiprintf_r+0x20e>
 8007c26:	2300      	movs	r3, #0
 8007c28:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c30:	f10a 0a01 	add.w	sl, sl, #1
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	9307      	str	r3, [sp, #28]
 8007c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c3e:	4654      	mov	r4, sl
 8007c40:	2205      	movs	r2, #5
 8007c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c46:	4858      	ldr	r0, [pc, #352]	; (8007da8 <_vfiprintf_r+0x24c>)
 8007c48:	f7f8 fa9a 	bl	8000180 <memchr>
 8007c4c:	9a04      	ldr	r2, [sp, #16]
 8007c4e:	b9d8      	cbnz	r0, 8007c88 <_vfiprintf_r+0x12c>
 8007c50:	06d1      	lsls	r1, r2, #27
 8007c52:	bf44      	itt	mi
 8007c54:	2320      	movmi	r3, #32
 8007c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5a:	0713      	lsls	r3, r2, #28
 8007c5c:	bf44      	itt	mi
 8007c5e:	232b      	movmi	r3, #43	; 0x2b
 8007c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c64:	f89a 3000 	ldrb.w	r3, [sl]
 8007c68:	2b2a      	cmp	r3, #42	; 0x2a
 8007c6a:	d015      	beq.n	8007c98 <_vfiprintf_r+0x13c>
 8007c6c:	9a07      	ldr	r2, [sp, #28]
 8007c6e:	4654      	mov	r4, sl
 8007c70:	2000      	movs	r0, #0
 8007c72:	f04f 0c0a 	mov.w	ip, #10
 8007c76:	4621      	mov	r1, r4
 8007c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c7c:	3b30      	subs	r3, #48	; 0x30
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d94e      	bls.n	8007d20 <_vfiprintf_r+0x1c4>
 8007c82:	b1b0      	cbz	r0, 8007cb2 <_vfiprintf_r+0x156>
 8007c84:	9207      	str	r2, [sp, #28]
 8007c86:	e014      	b.n	8007cb2 <_vfiprintf_r+0x156>
 8007c88:	eba0 0308 	sub.w	r3, r0, r8
 8007c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	9304      	str	r3, [sp, #16]
 8007c94:	46a2      	mov	sl, r4
 8007c96:	e7d2      	b.n	8007c3e <_vfiprintf_r+0xe2>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	1d19      	adds	r1, r3, #4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	9103      	str	r1, [sp, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bfbb      	ittet	lt
 8007ca4:	425b      	neglt	r3, r3
 8007ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8007caa:	9307      	strge	r3, [sp, #28]
 8007cac:	9307      	strlt	r3, [sp, #28]
 8007cae:	bfb8      	it	lt
 8007cb0:	9204      	strlt	r2, [sp, #16]
 8007cb2:	7823      	ldrb	r3, [r4, #0]
 8007cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb6:	d10c      	bne.n	8007cd2 <_vfiprintf_r+0x176>
 8007cb8:	7863      	ldrb	r3, [r4, #1]
 8007cba:	2b2a      	cmp	r3, #42	; 0x2a
 8007cbc:	d135      	bne.n	8007d2a <_vfiprintf_r+0x1ce>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	1d1a      	adds	r2, r3, #4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	9203      	str	r2, [sp, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfb8      	it	lt
 8007cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cce:	3402      	adds	r4, #2
 8007cd0:	9305      	str	r3, [sp, #20]
 8007cd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007db8 <_vfiprintf_r+0x25c>
 8007cd6:	7821      	ldrb	r1, [r4, #0]
 8007cd8:	2203      	movs	r2, #3
 8007cda:	4650      	mov	r0, sl
 8007cdc:	f7f8 fa50 	bl	8000180 <memchr>
 8007ce0:	b140      	cbz	r0, 8007cf4 <_vfiprintf_r+0x198>
 8007ce2:	2340      	movs	r3, #64	; 0x40
 8007ce4:	eba0 000a 	sub.w	r0, r0, sl
 8007ce8:	fa03 f000 	lsl.w	r0, r3, r0
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	4303      	orrs	r3, r0
 8007cf0:	3401      	adds	r4, #1
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf8:	482c      	ldr	r0, [pc, #176]	; (8007dac <_vfiprintf_r+0x250>)
 8007cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cfe:	2206      	movs	r2, #6
 8007d00:	f7f8 fa3e 	bl	8000180 <memchr>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d03f      	beq.n	8007d88 <_vfiprintf_r+0x22c>
 8007d08:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <_vfiprintf_r+0x254>)
 8007d0a:	bb1b      	cbnz	r3, 8007d54 <_vfiprintf_r+0x1f8>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	3307      	adds	r3, #7
 8007d10:	f023 0307 	bic.w	r3, r3, #7
 8007d14:	3308      	adds	r3, #8
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1a:	443b      	add	r3, r7
 8007d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1e:	e767      	b.n	8007bf0 <_vfiprintf_r+0x94>
 8007d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d24:	460c      	mov	r4, r1
 8007d26:	2001      	movs	r0, #1
 8007d28:	e7a5      	b.n	8007c76 <_vfiprintf_r+0x11a>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	3401      	adds	r4, #1
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	4619      	mov	r1, r3
 8007d32:	f04f 0c0a 	mov.w	ip, #10
 8007d36:	4620      	mov	r0, r4
 8007d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d3c:	3a30      	subs	r2, #48	; 0x30
 8007d3e:	2a09      	cmp	r2, #9
 8007d40:	d903      	bls.n	8007d4a <_vfiprintf_r+0x1ee>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0c5      	beq.n	8007cd2 <_vfiprintf_r+0x176>
 8007d46:	9105      	str	r1, [sp, #20]
 8007d48:	e7c3      	b.n	8007cd2 <_vfiprintf_r+0x176>
 8007d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4e:	4604      	mov	r4, r0
 8007d50:	2301      	movs	r3, #1
 8007d52:	e7f0      	b.n	8007d36 <_vfiprintf_r+0x1da>
 8007d54:	ab03      	add	r3, sp, #12
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	462a      	mov	r2, r5
 8007d5a:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <_vfiprintf_r+0x258>)
 8007d5c:	a904      	add	r1, sp, #16
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f3af 8000 	nop.w
 8007d64:	4607      	mov	r7, r0
 8007d66:	1c78      	adds	r0, r7, #1
 8007d68:	d1d6      	bne.n	8007d18 <_vfiprintf_r+0x1bc>
 8007d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d6c:	07d9      	lsls	r1, r3, #31
 8007d6e:	d405      	bmi.n	8007d7c <_vfiprintf_r+0x220>
 8007d70:	89ab      	ldrh	r3, [r5, #12]
 8007d72:	059a      	lsls	r2, r3, #22
 8007d74:	d402      	bmi.n	8007d7c <_vfiprintf_r+0x220>
 8007d76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d78:	f7ff fa5a 	bl	8007230 <__retarget_lock_release_recursive>
 8007d7c:	89ab      	ldrh	r3, [r5, #12]
 8007d7e:	065b      	lsls	r3, r3, #25
 8007d80:	f53f af12 	bmi.w	8007ba8 <_vfiprintf_r+0x4c>
 8007d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d86:	e711      	b.n	8007bac <_vfiprintf_r+0x50>
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <_vfiprintf_r+0x258>)
 8007d90:	a904      	add	r1, sp, #16
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f880 	bl	8007e98 <_printf_i>
 8007d98:	e7e4      	b.n	8007d64 <_vfiprintf_r+0x208>
 8007d9a:	bf00      	nop
 8007d9c:	08008374 	.word	0x08008374
 8007da0:	08008394 	.word	0x08008394
 8007da4:	08008354 	.word	0x08008354
 8007da8:	080083b8 	.word	0x080083b8
 8007dac:	080083c2 	.word	0x080083c2
 8007db0:	00000000 	.word	0x00000000
 8007db4:	08007b37 	.word	0x08007b37
 8007db8:	080083be 	.word	0x080083be

08007dbc <_printf_common>:
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	4699      	mov	r9, r3
 8007dc4:	688a      	ldr	r2, [r1, #8]
 8007dc6:	690b      	ldr	r3, [r1, #16]
 8007dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bfb8      	it	lt
 8007dd0:	4613      	movlt	r3, r2
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dd8:	4607      	mov	r7, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	b10a      	cbz	r2, 8007de2 <_printf_common+0x26>
 8007dde:	3301      	adds	r3, #1
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	0699      	lsls	r1, r3, #26
 8007de6:	bf42      	ittt	mi
 8007de8:	6833      	ldrmi	r3, [r6, #0]
 8007dea:	3302      	addmi	r3, #2
 8007dec:	6033      	strmi	r3, [r6, #0]
 8007dee:	6825      	ldr	r5, [r4, #0]
 8007df0:	f015 0506 	ands.w	r5, r5, #6
 8007df4:	d106      	bne.n	8007e04 <_printf_common+0x48>
 8007df6:	f104 0a19 	add.w	sl, r4, #25
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	6832      	ldr	r2, [r6, #0]
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dc26      	bgt.n	8007e52 <_printf_common+0x96>
 8007e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e08:	1e13      	subs	r3, r2, #0
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	0692      	lsls	r2, r2, #26
 8007e12:	d42b      	bmi.n	8007e6c <_printf_common+0xb0>
 8007e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e18:	4649      	mov	r1, r9
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d01e      	beq.n	8007e60 <_printf_common+0xa4>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	68e5      	ldr	r5, [r4, #12]
 8007e26:	6832      	ldr	r2, [r6, #0]
 8007e28:	f003 0306 	and.w	r3, r3, #6
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	bf08      	it	eq
 8007e30:	1aad      	subeq	r5, r5, r2
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	6922      	ldr	r2, [r4, #16]
 8007e36:	bf0c      	ite	eq
 8007e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e3c:	2500      	movne	r5, #0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bfc4      	itt	gt
 8007e42:	1a9b      	subgt	r3, r3, r2
 8007e44:	18ed      	addgt	r5, r5, r3
 8007e46:	2600      	movs	r6, #0
 8007e48:	341a      	adds	r4, #26
 8007e4a:	42b5      	cmp	r5, r6
 8007e4c:	d11a      	bne.n	8007e84 <_printf_common+0xc8>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e008      	b.n	8007e64 <_printf_common+0xa8>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4652      	mov	r2, sl
 8007e56:	4649      	mov	r1, r9
 8007e58:	4638      	mov	r0, r7
 8007e5a:	47c0      	blx	r8
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d103      	bne.n	8007e68 <_printf_common+0xac>
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	3501      	adds	r5, #1
 8007e6a:	e7c6      	b.n	8007dfa <_printf_common+0x3e>
 8007e6c:	18e1      	adds	r1, r4, r3
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	2030      	movs	r0, #48	; 0x30
 8007e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e76:	4422      	add	r2, r4
 8007e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e80:	3302      	adds	r3, #2
 8007e82:	e7c7      	b.n	8007e14 <_printf_common+0x58>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4622      	mov	r2, r4
 8007e88:	4649      	mov	r1, r9
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c0      	blx	r8
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d0e6      	beq.n	8007e60 <_printf_common+0xa4>
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7d9      	b.n	8007e4a <_printf_common+0x8e>
	...

08007e98 <_printf_i>:
 8007e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	7e0f      	ldrb	r7, [r1, #24]
 8007e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea0:	2f78      	cmp	r7, #120	; 0x78
 8007ea2:	4691      	mov	r9, r2
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	469a      	mov	sl, r3
 8007eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eae:	d807      	bhi.n	8007ec0 <_printf_i+0x28>
 8007eb0:	2f62      	cmp	r7, #98	; 0x62
 8007eb2:	d80a      	bhi.n	8007eca <_printf_i+0x32>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	f000 80d8 	beq.w	800806a <_printf_i+0x1d2>
 8007eba:	2f58      	cmp	r7, #88	; 0x58
 8007ebc:	f000 80a3 	beq.w	8008006 <_printf_i+0x16e>
 8007ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ec8:	e03a      	b.n	8007f40 <_printf_i+0xa8>
 8007eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ece:	2b15      	cmp	r3, #21
 8007ed0:	d8f6      	bhi.n	8007ec0 <_printf_i+0x28>
 8007ed2:	a101      	add	r1, pc, #4	; (adr r1, 8007ed8 <_printf_i+0x40>)
 8007ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007ec1 	.word	0x08007ec1
 8007ee4:	08007ec1 	.word	0x08007ec1
 8007ee8:	08007ec1 	.word	0x08007ec1
 8007eec:	08007ec1 	.word	0x08007ec1
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	08007ec1 	.word	0x08007ec1
 8007ef8:	08007ec1 	.word	0x08007ec1
 8007efc:	08007ec1 	.word	0x08007ec1
 8007f00:	08007ec1 	.word	0x08007ec1
 8007f04:	08008051 	.word	0x08008051
 8007f08:	08007f75 	.word	0x08007f75
 8007f0c:	08008033 	.word	0x08008033
 8007f10:	08007ec1 	.word	0x08007ec1
 8007f14:	08007ec1 	.word	0x08007ec1
 8007f18:	08008073 	.word	0x08008073
 8007f1c:	08007ec1 	.word	0x08007ec1
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007ec1 	.word	0x08007ec1
 8007f28:	08007ec1 	.word	0x08007ec1
 8007f2c:	0800803b 	.word	0x0800803b
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0a3      	b.n	800808c <_printf_i+0x1f4>
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	6829      	ldr	r1, [r5, #0]
 8007f48:	0606      	lsls	r6, r0, #24
 8007f4a:	f101 0304 	add.w	r3, r1, #4
 8007f4e:	d50a      	bpl.n	8007f66 <_printf_i+0xce>
 8007f50:	680e      	ldr	r6, [r1, #0]
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	da03      	bge.n	8007f60 <_printf_i+0xc8>
 8007f58:	232d      	movs	r3, #45	; 0x2d
 8007f5a:	4276      	negs	r6, r6
 8007f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f60:	485e      	ldr	r0, [pc, #376]	; (80080dc <_printf_i+0x244>)
 8007f62:	230a      	movs	r3, #10
 8007f64:	e019      	b.n	8007f9a <_printf_i+0x102>
 8007f66:	680e      	ldr	r6, [r1, #0]
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f6e:	bf18      	it	ne
 8007f70:	b236      	sxthne	r6, r6
 8007f72:	e7ef      	b.n	8007f54 <_printf_i+0xbc>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1d19      	adds	r1, r3, #4
 8007f7a:	6029      	str	r1, [r5, #0]
 8007f7c:	0601      	lsls	r1, r0, #24
 8007f7e:	d501      	bpl.n	8007f84 <_printf_i+0xec>
 8007f80:	681e      	ldr	r6, [r3, #0]
 8007f82:	e002      	b.n	8007f8a <_printf_i+0xf2>
 8007f84:	0646      	lsls	r6, r0, #25
 8007f86:	d5fb      	bpl.n	8007f80 <_printf_i+0xe8>
 8007f88:	881e      	ldrh	r6, [r3, #0]
 8007f8a:	4854      	ldr	r0, [pc, #336]	; (80080dc <_printf_i+0x244>)
 8007f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f8e:	bf0c      	ite	eq
 8007f90:	2308      	moveq	r3, #8
 8007f92:	230a      	movne	r3, #10
 8007f94:	2100      	movs	r1, #0
 8007f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f9a:	6865      	ldr	r5, [r4, #4]
 8007f9c:	60a5      	str	r5, [r4, #8]
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	bfa2      	ittt	ge
 8007fa2:	6821      	ldrge	r1, [r4, #0]
 8007fa4:	f021 0104 	bicge.w	r1, r1, #4
 8007fa8:	6021      	strge	r1, [r4, #0]
 8007faa:	b90e      	cbnz	r6, 8007fb0 <_printf_i+0x118>
 8007fac:	2d00      	cmp	r5, #0
 8007fae:	d04d      	beq.n	800804c <_printf_i+0x1b4>
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fb6:	fb03 6711 	mls	r7, r3, r1, r6
 8007fba:	5dc7      	ldrb	r7, [r0, r7]
 8007fbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fc0:	4637      	mov	r7, r6
 8007fc2:	42bb      	cmp	r3, r7
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	d9f4      	bls.n	8007fb2 <_printf_i+0x11a>
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d10b      	bne.n	8007fe4 <_printf_i+0x14c>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	07de      	lsls	r6, r3, #31
 8007fd0:	d508      	bpl.n	8007fe4 <_printf_i+0x14c>
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	6861      	ldr	r1, [r4, #4]
 8007fd6:	4299      	cmp	r1, r3
 8007fd8:	bfde      	ittt	le
 8007fda:	2330      	movle	r3, #48	; 0x30
 8007fdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fe4:	1b52      	subs	r2, r2, r5
 8007fe6:	6122      	str	r2, [r4, #16]
 8007fe8:	f8cd a000 	str.w	sl, [sp]
 8007fec:	464b      	mov	r3, r9
 8007fee:	aa03      	add	r2, sp, #12
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	f7ff fee2 	bl	8007dbc <_printf_common>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d14c      	bne.n	8008096 <_printf_i+0x1fe>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b004      	add	sp, #16
 8008002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008006:	4835      	ldr	r0, [pc, #212]	; (80080dc <_printf_i+0x244>)
 8008008:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800800c:	6829      	ldr	r1, [r5, #0]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	f851 6b04 	ldr.w	r6, [r1], #4
 8008014:	6029      	str	r1, [r5, #0]
 8008016:	061d      	lsls	r5, r3, #24
 8008018:	d514      	bpl.n	8008044 <_printf_i+0x1ac>
 800801a:	07df      	lsls	r7, r3, #31
 800801c:	bf44      	itt	mi
 800801e:	f043 0320 	orrmi.w	r3, r3, #32
 8008022:	6023      	strmi	r3, [r4, #0]
 8008024:	b91e      	cbnz	r6, 800802e <_printf_i+0x196>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	f023 0320 	bic.w	r3, r3, #32
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	2310      	movs	r3, #16
 8008030:	e7b0      	b.n	8007f94 <_printf_i+0xfc>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	f043 0320 	orr.w	r3, r3, #32
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	2378      	movs	r3, #120	; 0x78
 800803c:	4828      	ldr	r0, [pc, #160]	; (80080e0 <_printf_i+0x248>)
 800803e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008042:	e7e3      	b.n	800800c <_printf_i+0x174>
 8008044:	0659      	lsls	r1, r3, #25
 8008046:	bf48      	it	mi
 8008048:	b2b6      	uxthmi	r6, r6
 800804a:	e7e6      	b.n	800801a <_printf_i+0x182>
 800804c:	4615      	mov	r5, r2
 800804e:	e7bb      	b.n	8007fc8 <_printf_i+0x130>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	6826      	ldr	r6, [r4, #0]
 8008054:	6961      	ldr	r1, [r4, #20]
 8008056:	1d18      	adds	r0, r3, #4
 8008058:	6028      	str	r0, [r5, #0]
 800805a:	0635      	lsls	r5, r6, #24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	d501      	bpl.n	8008064 <_printf_i+0x1cc>
 8008060:	6019      	str	r1, [r3, #0]
 8008062:	e002      	b.n	800806a <_printf_i+0x1d2>
 8008064:	0670      	lsls	r0, r6, #25
 8008066:	d5fb      	bpl.n	8008060 <_printf_i+0x1c8>
 8008068:	8019      	strh	r1, [r3, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	4615      	mov	r5, r2
 8008070:	e7ba      	b.n	8007fe8 <_printf_i+0x150>
 8008072:	682b      	ldr	r3, [r5, #0]
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	602a      	str	r2, [r5, #0]
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	2100      	movs	r1, #0
 800807e:	4628      	mov	r0, r5
 8008080:	f7f8 f87e 	bl	8000180 <memchr>
 8008084:	b108      	cbz	r0, 800808a <_printf_i+0x1f2>
 8008086:	1b40      	subs	r0, r0, r5
 8008088:	6060      	str	r0, [r4, #4]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	6123      	str	r3, [r4, #16]
 800808e:	2300      	movs	r3, #0
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008094:	e7a8      	b.n	8007fe8 <_printf_i+0x150>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	462a      	mov	r2, r5
 800809a:	4649      	mov	r1, r9
 800809c:	4640      	mov	r0, r8
 800809e:	47d0      	blx	sl
 80080a0:	3001      	adds	r0, #1
 80080a2:	d0ab      	beq.n	8007ffc <_printf_i+0x164>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	079b      	lsls	r3, r3, #30
 80080a8:	d413      	bmi.n	80080d2 <_printf_i+0x23a>
 80080aa:	68e0      	ldr	r0, [r4, #12]
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	4298      	cmp	r0, r3
 80080b0:	bfb8      	it	lt
 80080b2:	4618      	movlt	r0, r3
 80080b4:	e7a4      	b.n	8008000 <_printf_i+0x168>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4632      	mov	r2, r6
 80080ba:	4649      	mov	r1, r9
 80080bc:	4640      	mov	r0, r8
 80080be:	47d0      	blx	sl
 80080c0:	3001      	adds	r0, #1
 80080c2:	d09b      	beq.n	8007ffc <_printf_i+0x164>
 80080c4:	3501      	adds	r5, #1
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	9903      	ldr	r1, [sp, #12]
 80080ca:	1a5b      	subs	r3, r3, r1
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	dcf2      	bgt.n	80080b6 <_printf_i+0x21e>
 80080d0:	e7eb      	b.n	80080aa <_printf_i+0x212>
 80080d2:	2500      	movs	r5, #0
 80080d4:	f104 0619 	add.w	r6, r4, #25
 80080d8:	e7f5      	b.n	80080c6 <_printf_i+0x22e>
 80080da:	bf00      	nop
 80080dc:	080083c9 	.word	0x080083c9
 80080e0:	080083da 	.word	0x080083da

080080e4 <_read_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_read_r+0x20>)
 80080e8:	4604      	mov	r4, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	602a      	str	r2, [r5, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f7f8 fd8a 	bl	8000c0c <_read>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_read_r+0x1e>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_read_r+0x1e>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20001e8c 	.word	0x20001e8c

08008108 <_fstat_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_fstat_r+0x20>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f7f8 fdbe 	bl	8000c96 <_fstat>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d102      	bne.n	8008124 <_fstat_r+0x1c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b103      	cbz	r3, 8008124 <_fstat_r+0x1c>
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	20001e8c 	.word	0x20001e8c

0800812c <_isatty_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_isatty_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f8 fdbd 	bl	8000cb6 <_isatty>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_isatty_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_isatty_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20001e8c 	.word	0x20001e8c

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
