
27_UARTRxInterrupt_ReceivePkt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007c38  08007c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08007e14  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e68  20000078  08007e88  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001ee0  08007e88  00021ee0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000267c4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047da  00000000  00000000  0004686c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002218  00000000  00000000  0004b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002070  00000000  00000000  0004d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024cd1  00000000  00000000  0004f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020a23  00000000  00000000  00073fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee57b  00000000  00000000  000949c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00182f3f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009578  00000000  00000000  00182f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007c20 	.word	0x08007c20

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007c20 	.word	0x08007c20

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <adc_init>:
 *      Author: cdsmi
 */
#include "stm32wbxx_hal.h"
#include "adc.h"

void adc_init(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1U<<0);			//= 0x00000001 (Enable clock for GPIOA)  |= means that only the bits that we want to change will change
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6493      	str	r3, [r2, #72]	; 0x48
	RCC->APB2ENR |= (1U<<8); 			//Enable clock for ADC1
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000546:	6613      	str	r3, [r2, #96]	; 0x60

	GPIOA->MODER |= 0xC;				//1100 (Set PA1 as analog)
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	f043 030c 	orr.w	r3, r3, #12
 8000556:	6013      	str	r3, [r2, #0]

	ADC1->CR = 0;						//Software trigger(CR : Control Register)
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <adc_init+0x5c>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = 1;						//Conversion sequence starts at ch 1
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <adc_init+0x5c>)
 8000560:	2201      	movs	r2, #1
 8000562:	639a      	str	r2, [r3, #56]	; 0x38
	ADC1->SQR1 = 0;						//Conversion sequence length 1
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <adc_init+0x5c>)
 8000566:	2200      	movs	r2, #0
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->CR |= 1;						//Enable ADC1
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <adc_init+0x5c>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <adc_init+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6093      	str	r3, [r2, #8]
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50040000 	.word	0x50040000

08000584 <gpio_init>:
//
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void gpio_init(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
//	Enable GPIOC clock
	RCC->AHB1ENR |= 4;	//4 = 0b 0100 => Port D =0, Port C = 1, Port B = 0, Port A = 0.
 8000588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6493      	str	r3, [r2, #72]	; 0x48

}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db0b      	blt.n	80005ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 021f 	and.w	r2, r3, #31
 80005bc:	4907      	ldr	r1, [pc, #28]	; (80005dc <__NVIC_EnableIRQ+0x38>)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	095b      	lsrs	r3, r3, #5
 80005c4:	2001      	movs	r0, #1
 80005c6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db0a      	blt.n	800060a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <__NVIC_SetPriority+0x4c>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	0112      	lsls	r2, r2, #4
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	440b      	add	r3, r1
 8000604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000608:	e00a      	b.n	8000620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <__NVIC_SetPriority+0x50>)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	3b04      	subs	r3, #4
 8000618:	0112      	lsls	r2, r2, #4
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	440b      	add	r3, r1
 800061e:	761a      	strb	r2, [r3, #24]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800063c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000644:	f023 0218 	bic.w	r2, r3, #24
 8000648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800066e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000684:	68fb      	ldr	r3, [r7, #12]
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:

void HandlerTask(void *pvParameters);
int32_t start_rx_interrupt(uint8_t *buffer, uint_fast16_t Len);

int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af02      	add	r7, sp, #8

  HAL_Init();
 800069a:	f000 fca9 	bl	8000ff0 <HAL_Init>
  SystemClock_Config();
 800069e:	f000 f8f7 	bl	8000890 <SystemClock_Config>
  MX_GPIO_Init();
 80006a2:	f000 f993 	bl	80009cc <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006a6:	f000 f969 	bl	800097c <MX_USB_PCD_Init>
  LPUART1_UART_TX_Init();
 80006aa:	f000 fc0d 	bl	8000ec8 <LPUART1_UART_TX_Init>
  gpio_init();
 80006ae:	f7ff ff69 	bl	8000584 <gpio_init>
  adc_init();
 80006b2:	f7ff ff37 	bl	8000524 <adc_init>

  rxDone = xSemaphoreCreateBinary();
 80006b6:	2203      	movs	r2, #3
 80006b8:	2100      	movs	r1, #0
 80006ba:	2001      	movs	r0, #1
 80006bc:	f004 f838 	bl	8004730 <xQueueGenericCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <main+0x5c>)
 80006c4:	6013      	str	r3, [r2, #0]

  xTaskCreate(
 80006c6:	2300      	movs	r3, #0
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2303      	movs	r3, #3
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <main+0x60>)
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <main+0x64>)
 80006d6:	f004 fe7e 	bl	80053d6 <xTaskCreate>
		  STACK_SIZE,
		  NULL,
		  tskIDLE_PRIORITY + 3,
		  NULL);

  uart2_BytesReceived = xQueueCreate(10, sizeof(char));
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	200a      	movs	r0, #10
 80006e0:	f004 f826 	bl	8004730 <xQueueGenericCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <main+0x68>)
 80006e8:	6013      	str	r3, [r2, #0]



  vTaskStartScheduler();
 80006ea:	f004 ffcf 	bl	800568c <vTaskStartScheduler>

  while (1)
 80006ee:	e7fe      	b.n	80006ee <main+0x5a>
 80006f0:	20000390 	.word	0x20000390
 80006f4:	08007c38 	.word	0x08007c38
 80006f8:	08000771 	.word	0x08000771
 80006fc:	2000038c 	.word	0x2000038c

08000700 <start_rx_interrupt>:
  }
  /* USER CODE END 3 */
}

int32_t start_rx_interrupt(uint8_t *buffer, uint_fast16_t Len)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	if( !rxInProgress && (buffer != NULL))
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <start_rx_interrupt+0x5c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d11e      	bne.n	8000750 <start_rx_interrupt+0x50>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d01b      	beq.n	8000750 <start_rx_interrupt+0x50>
	{
		rxInProgress = 1;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <start_rx_interrupt+0x5c>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
		rxLen = Len;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <start_rx_interrupt+0x60>)
 8000724:	801a      	strh	r2, [r3, #0]
		rxBuff = buffer;
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <start_rx_interrupt+0x64>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6013      	str	r3, [r2, #0]
		rxItr = 0;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <start_rx_interrupt+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	801a      	strh	r2, [r3, #0]

		LPUART1->CR1 |= 0x0020;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <start_rx_interrupt+0x6c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <start_rx_interrupt+0x6c>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	6013      	str	r3, [r2, #0]
		NVIC_SetPriority(LPUART1_IRQn, 6);
 800073e:	2106      	movs	r1, #6
 8000740:	2025      	movs	r0, #37	; 0x25
 8000742:	f7ff ff4d 	bl	80005e0 <__NVIC_SetPriority>
		NVIC_EnableIRQ(LPUART1_IRQn);
 8000746:	2025      	movs	r0, #37	; 0x25
 8000748:	f7ff ff2c 	bl	80005a4 <__NVIC_EnableIRQ>
		return 0;
 800074c:	2300      	movs	r3, #0
 800074e:	e001      	b.n	8000754 <start_rx_interrupt+0x54>
	}
	return -1;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000394 	.word	0x20000394
 8000760:	20000398 	.word	0x20000398
 8000764:	2000039c 	.word	0x2000039c
 8000768:	200003a0 	.word	0x200003a0
 800076c:	40008000 	.word	0x40008000

08000770 <HandlerTask>:

uint8_t rxData[EXPECTED_PKT_LEN];
char rxCode[50] = {0};

void HandlerTask(void *pvParameters)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	LPUART1_UART_RX_Init();
 8000778:	f000 fbd4 	bl	8000f24 <LPUART1_UART_RX_Init>

	for(uint32_t i = 0; i < EXPECTED_PKT_LEN; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e007      	b.n	8000792 <HandlerTask+0x22>
	{
		rxData[i] = 0;
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <HandlerTask+0x70>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < EXPECTED_PKT_LEN; i++)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d9f4      	bls.n	8000782 <HandlerTask+0x12>
	}

	const TickType_t timeout = pdMS_TO_TICKS(5000);
 8000798:	f241 3388 	movw	r3, #5000	; 0x1388
 800079c:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		start_rx_interrupt(rxData, EXPECTED_PKT_LEN);
 800079e:	2105      	movs	r1, #5
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <HandlerTask+0x70>)
 80007a2:	f7ff ffad 	bl	8000700 <start_rx_interrupt>

		if(xSemaphoreTake(rxDone, timeout) == pdPASS)
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HandlerTask+0x74>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fb23 	bl	8004df8 <xQueueSemaphoreTake>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d10d      	bne.n	80007d4 <HandlerTask+0x64>
		{
			if(EXPECTED_PKT_LEN == rxItr)
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <HandlerTask+0x78>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b05      	cmp	r3, #5
 80007be:	d104      	bne.n	80007ca <HandlerTask+0x5a>
			{
				sprintf(rxCode, " Received");
 80007c0:	490a      	ldr	r1, [pc, #40]	; (80007ec <HandlerTask+0x7c>)
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <HandlerTask+0x80>)
 80007c4:	f006 fe72 	bl	80074ac <siprintf>
 80007c8:	e7e9      	b.n	800079e <HandlerTask+0x2e>
			}
			else
			{
				sprintf(rxCode, " Length Mismatch");
 80007ca:	490a      	ldr	r1, [pc, #40]	; (80007f4 <HandlerTask+0x84>)
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <HandlerTask+0x80>)
 80007ce:	f006 fe6d 	bl	80074ac <siprintf>
 80007d2:	e7e4      	b.n	800079e <HandlerTask+0x2e>
			}
		}
		else
		{
			sprintf(rxCode, " Timeout");
 80007d4:	4908      	ldr	r1, [pc, #32]	; (80007f8 <HandlerTask+0x88>)
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <HandlerTask+0x80>)
 80007d8:	f006 fe68 	bl	80074ac <siprintf>
		start_rx_interrupt(rxData, EXPECTED_PKT_LEN);
 80007dc:	e7df      	b.n	800079e <HandlerTask+0x2e>
 80007de:	bf00      	nop
 80007e0:	200003a4 	.word	0x200003a4
 80007e4:	20000390 	.word	0x20000390
 80007e8:	200003a0 	.word	0x200003a0
 80007ec:	08007c48 	.word	0x08007c48
 80007f0:	200003ac 	.word	0x200003ac
 80007f4:	08007c54 	.word	0x08007c54
 80007f8:	08007c68 	.word	0x08007c68

080007fc <LPUART1_IRQHandler>:
		}
	}
}

void LPUART1_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]

	if(LPUART1->ISR & 0x0020)
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <LPUART1_IRQHandler+0x78>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	2b00      	cmp	r3, #0
 8000810:	d021      	beq.n	8000856 <LPUART1_IRQHandler+0x5a>
	{
		uint8_t tempVal = (uint8_t)LPUART1->RDR;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <LPUART1_IRQHandler+0x78>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	71fb      	strb	r3, [r7, #7]
		if(rxInProgress)
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <LPUART1_IRQHandler+0x7c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d01a      	beq.n	8000856 <LPUART1_IRQHandler+0x5a>
		{
			rxBuff[rxItr++] = tempVal;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <LPUART1_IRQHandler+0x80>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <LPUART1_IRQHandler+0x84>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	1c59      	adds	r1, r3, #1
 800082a:	b288      	uxth	r0, r1
 800082c:	4914      	ldr	r1, [pc, #80]	; (8000880 <LPUART1_IRQHandler+0x84>)
 800082e:	8008      	strh	r0, [r1, #0]
 8000830:	4413      	add	r3, r2
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	701a      	strb	r2, [r3, #0]
			if(rxItr >= rxLen)
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <LPUART1_IRQHandler+0x84>)
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <LPUART1_IRQHandler+0x88>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d309      	bcc.n	8000856 <LPUART1_IRQHandler+0x5a>
			{
				rxInProgress = 0;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <LPUART1_IRQHandler+0x7c>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
				xSemaphoreGiveFromISR(rxDone, &xHigherPriorityTaskWoken);
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <LPUART1_IRQHandler+0x8c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	463a      	mov	r2, r7
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f964 	bl	8004b1e <xQueueGiveFromISR>
			}
		}
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d007      	beq.n	800086c <LPUART1_IRQHandler+0x70>
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <LPUART1_IRQHandler+0x90>)
 800085e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	f3bf 8f4f 	dsb	sy
 8000868:	f3bf 8f6f 	isb	sy
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40008000 	.word	0x40008000
 8000878:	20000394 	.word	0x20000394
 800087c:	2000039c 	.word	0x2000039c
 8000880:	200003a0 	.word	0x200003a0
 8000884:	20000398 	.word	0x20000398
 8000888:	20000390 	.word	0x20000390
 800088c:	e000ed04 	.word	0xe000ed04

08000890 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09a      	sub	sp, #104	; 0x68
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2248      	movs	r2, #72	; 0x48
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fcee 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80008b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008c4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80008c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	f023 0303 	bic.w	r3, r3, #3
 80008d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008da:	f000 ffdf 	bl	800189c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fea8 	bl	8000634 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <SystemClock_Config+0xe8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <SystemClock_Config+0xe8>)
 80008ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <SystemClock_Config+0xe8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000900:	2327      	movs	r3, #39	; 0x27
 8000902:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800090a:	2301      	movs	r3, #1
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800091c:	2300      	movs	r3, #0
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fba7 	bl	8002080 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000938:	f000 f8b2 	bl	8000aa0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800093c:	236f      	movs	r3, #111	; 0x6f
 800093e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000940:	2302      	movs	r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f001 ff03 	bl	8002768 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000968:	f000 f89a 	bl	8000aa0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800096c:	f002 fcf0 	bl	8003350 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000970:	bf00      	nop
 8000972:	3768      	adds	r7, #104	; 0x68
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58000400 	.word	0x58000400

0800097c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <MX_USB_PCD_Init+0x4c>)
 8000984:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 8000988:	2208      	movs	r2, #8
 800098a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 800098e:	2202      	movs	r2, #2
 8000990:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 8000994:	2202      	movs	r2, #2
 8000996:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_USB_PCD_Init+0x48>)
 80009b2:	f000 fdd1 	bl	8001558 <HAL_PCD_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80009bc:	f000 f870 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000094 	.word	0x20000094
 80009c8:	40006800 	.word	0x40006800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	2004      	movs	r0, #4
 80009e2:	f7ff fe3d 	bl	8000660 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fe3a 	bl	8000660 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff fe37 	bl	8000660 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2008      	movs	r0, #8
 80009f4:	f7ff fe34 	bl	8000660 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2123      	movs	r1, #35	; 0x23
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <MX_GPIO_Init+0xa4>)
 80009fe:	f000 fd93 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a02:	2310      	movs	r3, #16
 8000a04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <MX_GPIO_Init+0xa8>)
 8000a14:	f000 fc18 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a18:	2323      	movs	r3, #35	; 0x23
 8000a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0xa4>)
 8000a2e:	f000 fc0b 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a32:	2303      	movs	r3, #3
 8000a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0xac>)
 8000a44:	f000 fc00 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a48:	23c0      	movs	r3, #192	; 0xc0
 8000a4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MX_GPIO_Init+0xa4>)
 8000a62:	f000 fbf1 	bl	8001248 <HAL_GPIO_Init>

}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	48000400 	.word	0x48000400
 8000a74:	48000800 	.word	0x48000800
 8000a78:	48000c00 	.word	0x48000c00

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8e:	f000 facf 	bl	8001030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>

08000aaa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4013      	ands	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b00:	68fb      	ldr	r3, [r7, #12]
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	f06f 0001 	mvn.w	r0, #1
 8000b56:	f000 fb4f 	bl	80011f8 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000b62:	463b      	mov	r3, r7
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fea9 	bl	80018bc <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000b6a:	f000 fee9 	bl	8001940 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09c      	sub	sp, #112	; 0x70
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2250      	movs	r2, #80	; 0x50
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f006 fb71 	bl	8007280 <memset>
  if(huart->Instance==LPUART1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_UART_MspInit+0x84>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d124      	bne.n	8000bf2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 fa55 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc0:	f7ff ff6e 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff ffa2 	bl	8000b0e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff6d 	bl	8000aaa <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000be0:	2308      	movs	r3, #8
 8000be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f000 fb2b 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3770      	adds	r7, #112	; 0x70
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40008000 	.word	0x40008000

08000c00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09c      	sub	sp, #112	; 0x70
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2250      	movs	r2, #80	; 0x50
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f006 fb2d 	bl	8007280 <memset>
  if(hpcd->Instance==USB)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_PCD_MspInit+0xa8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d136      	bne.n	8000c9e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c36:	2318      	movs	r3, #24
 8000c38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fa01 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c68:	f7ff ff1a 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ff1c 	bl	8000aaa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c84:	230a      	movs	r3, #10
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f000 fad9 	bl	8001248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c96:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c9a:	f7ff ff1f 	bl	8000adc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3770      	adds	r7, #112	; 0x70
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40006800 	.word	0x40006800

08000cac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2019      	movs	r0, #25
 8000cf6:	f000 fa7f 	bl	80011f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 fa96 	bl	800122c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d04:	f7ff ffd2 	bl	8000cac <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d08:	f107 0208 	add.w	r2, r7, #8
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 ff14 	bl	8002b40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d18:	f001 fefc 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8000d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <HAL_InitTick+0x8c>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_InitTick+0x90>)
 8000d2e:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <HAL_InitTick+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_InitTick+0x90>)
 8000d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_InitTick+0x90>)
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_InitTick+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_InitTick+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <HAL_InitTick+0x90>)
 8000d4e:	f002 fc16 	bl	800357e <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d104      	bne.n	8000d62 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_InitTick+0x90>)
 8000d5a:	f002 fc71 	bl	8003640 <HAL_TIM_Base_Start_IT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3730      	adds	r7, #48	; 0x30
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	200003e0 	.word	0x200003e0
 8000d74:	40012c00 	.word	0x40012c00

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000daa:	f002 fc97 	bl	80036dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200003e0 	.word	0x200003e0

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f006 fa10 	bl	800720c <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20030000 	.word	0x20030000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	2000042c 	.word	0x2000042c
 8000e20:	20001ee0 	.word	0x20001ee0

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <SystemInit+0x98>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <SystemInit+0x98>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <SystemInit+0x9c>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6e:	f023 0305 	bic.w	r3, r3, #5
 8000e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <SystemInit+0xa0>)
 8000e90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <SystemInit+0xa0>)
 8000e98:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	faf6fefb 	.word	0xfaf6fefb
 8000ec4:	22041000 	.word	0x22041000

08000ec8 <LPUART1_UART_TX_Init>:
#include "uart.h"

UART_HandleTypeDef hlpuart1;

void LPUART1_UART_TX_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <LPUART1_UART_TX_Init+0x58>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <LPUART1_UART_TX_Init+0x54>)
 8000f12:	f002 fdcd 	bl	8003ab0 <HAL_UART_Init>
  {
  }
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000430 	.word	0x20000430
 8000f20:	40008000 	.word	0x40008000

08000f24 <LPUART1_UART_RX_Init>:

void LPUART1_UART_RX_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <LPUART1_UART_RX_Init+0x58>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <LPUART1_UART_RX_Init+0x54>)
 8000f6e:	f002 fd9f 	bl	8003ab0 <HAL_UART_Init>
  {
  }
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000430 	.word	0x20000430
 8000f7c:	40008000 	.word	0x40008000

08000f80 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f80:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f82:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f84:	3304      	adds	r3, #4

08000f86 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f86:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f88:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f8a:	d3f9      	bcc.n	8000f80 <CopyDataInit>
  bx lr
 8000f8c:	4770      	bx	lr

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f8e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f90:	3004      	adds	r0, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f92:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>
  bx lr
 8000f96:	4770      	bx	lr

08000f98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f7ff ff42 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <LoopForever+0x8>)
 8000fa2:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <LoopForever+0xc>)
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <LoopForever+0x10>)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f7ff ffed 	bl	8000f86 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopForever+0x14>)
 8000fae:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <LoopForever+0x18>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f7ff ffee 	bl	8000f92 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <LoopForever+0x1c>)
 8000fb8:	490b      	ldr	r1, [pc, #44]	; (8000fe8 <LoopForever+0x20>)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f7ff ffe9 	bl	8000f92 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc0:	f006 f92a 	bl	8007218 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000fc4:	f7ff fb66 	bl	8000694 <main>

08000fc8 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc8:	e7fe      	b.n	8000fc8 <LoopForever>
 8000fca:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000fcc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	20000078 	.word	0x20000078
 8000fd8:	08007e14 	.word	0x08007e14
  INIT_BSS _sbss, _ebss
 8000fdc:	20000078 	.word	0x20000078
 8000fe0:	20001ee0 	.word	0x20001ee0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fe4:	20030000 	.word	0x20030000
 8000fe8:	20030000 	.word	0x20030000

08000fec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_Init+0x3c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_Init+0x3c>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f8eb 	bl	80011e2 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100c:	200f      	movs	r0, #15
 800100e:	f7ff fe67 	bl	8000ce0 <HAL_InitTick>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	e001      	b.n	8001022 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101e:	f7ff fd8f 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001022:	79fb      	ldrb	r3, [r7, #7]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58004000 	.word	0x58004000

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	200004c0 	.word	0x200004c0

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200004c0 	.word	0x200004c0

08001070 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTickPrio+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff4c 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001206:	f7ff ff63 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 800120a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff ffb3 	bl	800117c <NVIC_EncodePriority>
 8001216:	4602      	mov	r2, r0
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff82 	bl	8001128 <__NVIC_SetPriority>
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff56 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e14c      	b.n	80014f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 813e 	beq.w	80014ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d005      	beq.n	8001288 <HAL_GPIO_Init+0x40>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 0201 	and.w	r2, r3, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d017      	beq.n	8001326 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d123      	bne.n	800137a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0203 	and.w	r2, r3, #3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8098 	beq.w	80014ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013bc:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013e6:	d019      	beq.n	800141c <HAL_GPIO_Init+0x1d4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d013      	beq.n	8001418 <HAL_GPIO_Init+0x1d0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1cc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_GPIO_Init+0x2d4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1c8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_GPIO_Init+0x2d8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1c4>
 8001408:	2304      	movs	r3, #4
 800140a:	e008      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 800140c:	2307      	movs	r3, #7
 800140e:	e006      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 8001410:	2303      	movs	r3, #3
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 8001414:	2302      	movs	r3, #2
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x1d6>
 800141c:	2300      	movs	r3, #0
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142e:	4938      	ldr	r1, [pc, #224]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001460:	4a30      	ldr	r2, [pc, #192]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800148a:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 8001492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b6:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f47f aeab 	bne.w	8001258 <HAL_GPIO_Init+0x10>
  }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40010000 	.word	0x40010000
 8001514:	48000400 	.word	0x48000400
 8001518:	48000800 	.word	0x48000800
 800151c:	48000c00 	.word	0x48000c00
 8001520:	48001000 	.word	0x48001000
 8001524:	58000800 	.word	0x58000800

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af06      	add	r7, sp, #24
 800155e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0dd      	b.n	8001726 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fb3e 	bl	8000c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 feb5 	bl	8004306 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e04d      	b.n	800163e <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	3305      	adds	r3, #5
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	b298      	uxth	r0, r3
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	333a      	adds	r3, #58	; 0x3a
 80015e2:	4602      	mov	r2, r0
 80015e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3307      	adds	r3, #7
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	333c      	adds	r3, #60	; 0x3c
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3340      	adds	r3, #64	; 0x40
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3344      	adds	r3, #68	; 0x44
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3ac      	bcc.n	80015a2 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e044      	b.n	80016d8 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f203 136f 	addw	r3, r3, #367	; 0x16f
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	3301      	adds	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3b5      	bcc.n	800164e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	687e      	ldr	r6, [r7, #4]
 80016ea:	466d      	mov	r5, sp
 80016ec:	f106 0410 	add.w	r4, r6, #16
 80016f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016fc:	1d33      	adds	r3, r6, #4
 80016fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f002 fe1b 	bl	800433c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f805 	bl	800172e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800172e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001752:	b29b      	uxth	r3, r3
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001766:	b29b      	uxth	r3, r3
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_EXTI_EnableIT_0_31+0x24>)
 800178e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001792:	4905      	ldr	r1, [pc, #20]	; (80017a8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4313      	orrs	r3, r2
 8001798:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	58000800 	.word	0x58000800

080017ac <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <LL_EXTI_DisableIT_0_31+0x28>)
 80017b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4905      	ldr	r1, [pc, #20]	; (80017d4 <LL_EXTI_DisableIT_0_31+0x28>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	58000800 	.word	0x58000800

080017d8 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80017e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4905      	ldr	r1, [pc, #20]	; (8001800 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	58000800 	.word	0x58000800

08001804 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4904      	ldr	r1, [pc, #16]	; (8001824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]

}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	58000800 	.word	0x58000800

08001828 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	43db      	mvns	r3, r3
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800183a:	4013      	ands	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	58000800 	.word	0x58000800

08001850 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	58000800 	.word	0x58000800

08001874 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	43db      	mvns	r3, r3
 8001884:	4904      	ldr	r1, [pc, #16]	; (8001898 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001886:	4013      	ands	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	58000800 	.word	0x58000800

0800189c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	58000400 	.word	0x58000400

080018bc <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_PWR_ConfigPVD+0x80>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 020e 	bic.w	r2, r3, #14
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	491a      	ldr	r1, [pc, #104]	; (800193c <HAL_PWR_ConfigPVD+0x80>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80018d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018da:	f7ff ff67 	bl	80017ac <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80018de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018e2:	f7ff ff79 	bl	80017d8 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80018e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ea:	f7ff ffc3 	bl	8001874 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80018ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018f2:	f7ff ff99 	bl	8001828 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001902:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001906:	f7ff ff3d 	bl	8001784 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001916:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800191a:	f7ff ff73 	bl	8001804 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800192a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800192e:	f7ff ff8f 	bl	8001850 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58000400 	.word	0x58000400

08001940 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_PWR_EnablePVD+0x1c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_PWR_EnablePVD+0x1c>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6053      	str	r3, [r2, #4]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	58000400 	.word	0x58000400

08001960 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_PWREx_GetVoltageRange+0x18>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	58000400 	.word	0x58000400

0800197c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800198e:	d101      	bne.n	8001994 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ee:	d101      	bne.n	80019f4 <LL_RCC_HSE_IsReady+0x18>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_RCC_HSE_IsReady+0x1a>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a30:	6013      	str	r3, [r2, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d101      	bne.n	8001a54 <LL_RCC_HSI_IsReady+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_RCC_HSI_IsReady+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d101      	bne.n	8001ae6 <LL_RCC_HSI48_IsReady+0x18>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_RCC_HSI48_IsReady+0x1a>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_LSE_IsReady+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_LSE_IsReady+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d101      	bne.n	8001bfa <LL_RCC_LSI1_IsReady+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_RCC_LSI1_IsReady+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d101      	bne.n	8001c62 <LL_RCC_LSI2_IsReady+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_RCC_LSI2_IsReady+0x1a>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d101      	bne.n	8001cee <LL_RCC_MSI_IsReady+0x16>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_RCC_MSI_IsReady+0x18>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2bb0      	cmp	r3, #176	; 0xb0
 8001d38:	d901      	bls.n	8001d3e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d3a:	23b0      	movs	r3, #176	; 0xb0
 8001d3c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 0203 	bic.w	r2, r3, #3
 8001d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f54:	d101      	bne.n	8001f5a <LL_RCC_PLL_IsReady+0x18>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_RCC_PLL_IsReady+0x1a>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0303 	and.w	r3, r3, #3
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d101      	bne.n	8001fe0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002000:	d101      	bne.n	8002006 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	d101      	bne.n	800202c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800204a:	d101      	bne.n	8002050 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800206e:	d101      	bne.n	8002074 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b08d      	sub	sp, #52	; 0x34
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e363      	b.n	800275a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 808d 	beq.w	80021ba <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a0:	f7ff fe7d 	bl	8001d9e <LL_RCC_GetSysClkSource>
 80020a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a6:	f7ff ff83 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 80020aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x3e>
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d147      	bne.n	8002148 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d144      	bne.n	8002148 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e347      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020ce:	f7ff fe28 	bl	8001d22 <LL_RCC_MSI_GetRange>
 80020d2:	4603      	mov	r3, r0
 80020d4:	429c      	cmp	r4, r3
 80020d6:	d914      	bls.n	8002102 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd61 	bl	8002ba4 <RCC_SetFlashLatencyFromMSIRange>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e336      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe02 	bl	8001cfa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fe26 	bl	8001d4c <LL_RCC_MSI_SetCalibTrimming>
 8002100:	e013      	b.n	800212a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fdf7 	bl	8001cfa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fe1b 	bl	8001d4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd42 	bl	8002ba4 <RCC_SetFlashLatencyFromMSIRange>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e317      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800212a:	f000 fcc9 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 800212e:	4603      	mov	r3, r0
 8002130:	4aa4      	ldr	r2, [pc, #656]	; (80023c4 <HAL_RCC_OscConfig+0x344>)
 8002132:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002134:	4ba4      	ldr	r3, [pc, #656]	; (80023c8 <HAL_RCC_OscConfig+0x348>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fdd1 	bl	8000ce0 <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d039      	beq.n	80021b8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e308      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01e      	beq.n	800218e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002150:	f7ff fda4 	bl	8001c9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002154:	f7fe ff80 	bl	8001058 <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215c:	f7fe ff7c 	bl	8001058 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e2f5      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800216e:	f7ff fdb3 	bl	8001cd8 <LL_RCC_MSI_IsReady>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f1      	beq.n	800215c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdbc 	bl	8001cfa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fde0 	bl	8001d4c <LL_RCC_MSI_SetCalibTrimming>
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800218e:	f7ff fd94 	bl	8001cba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002192:	f7fe ff61 	bl	8001058 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219a:	f7fe ff5d 	bl	8001058 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e2d6      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021ac:	f7ff fd94 	bl	8001cd8 <LL_RCC_MSI_IsReady>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f1      	bne.n	800219a <HAL_RCC_OscConfig+0x11a>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d047      	beq.n	8002256 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	f7ff fdea 	bl	8001d9e <LL_RCC_GetSysClkSource>
 80021ca:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	f7ff fef0 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 80021d0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x164>
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d134      	bne.n	8002256 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e2b4      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x180>
 80021fa:	f7ff fbd1 	bl	80019a0 <LL_RCC_HSE_Enable>
 80021fe:	e001      	b.n	8002204 <HAL_RCC_OscConfig+0x184>
 8002200:	f7ff fbdd 	bl	80019be <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe ff24 	bl	8001058 <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe ff20 	bl	8001058 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e299      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002226:	f7ff fbd9 	bl	80019dc <LL_RCC_HSE_IsReady>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f1      	beq.n	8002214 <HAL_RCC_OscConfig+0x194>
 8002230:	e011      	b.n	8002256 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe ff11 	bl	8001058 <HAL_GetTick>
 8002236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223a:	f7fe ff0d 	bl	8001058 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e286      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800224c:	f7ff fbc6 	bl	80019dc <LL_RCC_HSE_IsReady>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f1      	bne.n	800223a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d04c      	beq.n	80022fc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	f7ff fd9c 	bl	8001d9e <LL_RCC_GetSysClkSource>
 8002266:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002268:	f7ff fea2 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 800226c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d005      	beq.n	8002280 <HAL_RCC_OscConfig+0x200>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d10e      	bne.n	8002298 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d10b      	bne.n	8002298 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e266      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbe5 	bl	8001a60 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002296:	e031      	b.n	80022fc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	f7ff fbae 	bl	8001a00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7fe fed8 	bl	8001058 <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7fe fed4 	bl	8001058 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e24d      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022be:	f7ff fbbd 	bl	8001a3c <LL_RCC_HSI_IsReady>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f1      	beq.n	80022ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fbc7 	bl	8001a60 <LL_RCC_HSI_SetCalibTrimming>
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d4:	f7ff fba3 	bl	8001a1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe febe 	bl	8001058 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe feba 	bl	8001058 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e233      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022f2:	f7ff fba3 	bl	8001a3c <LL_RCC_HSI_IsReady>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f1      	bne.n	80022e0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a3 	beq.w	800245c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d076      	beq.n	800240c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d046      	beq.n	80023b8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800232a:	f7ff fc5a 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d113      	bne.n	800235c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002334:	f7ff fc33 	bl	8001b9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002338:	f7fe fe8e 	bl	8001058 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002340:	f7fe fe8a 	bl	8001058 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e203      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002352:	f7ff fc46 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f1      	beq.n	8002340 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800235c:	f7ff fc53 	bl	8001c06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fe7a 	bl	8001058 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002368:	f7fe fe76 	bl	8001058 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b03      	cmp	r3, #3
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1ef      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800237a:	f7ff fc66 	bl	8001c4a <LL_RCC_LSI2_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc70 	bl	8001c6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800238e:	f7ff fc17 	bl	8001bc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fe61 	bl	8001058 <HAL_GetTick>
 8002396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800239a:	f7fe fe5d 	bl	8001058 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1d6      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023ac:	f7ff fc19 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f1      	bne.n	800239a <HAL_RCC_OscConfig+0x31a>
 80023b6:	e051      	b.n	800245c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023b8:	f7ff fbf1 	bl	8001b9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fe4c 	bl	8001058 <HAL_GetTick>
 80023c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023c2:	e00c      	b.n	80023de <HAL_RCC_OscConfig+0x35e>
 80023c4:	20000004 	.word	0x20000004
 80023c8:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023cc:	f7fe fe44 	bl	8001058 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1bd      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023de:	f7ff fc00 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023e8:	f7ff fc1e 	bl	8001c28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023ee:	f7fe fe33 	bl	8001058 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1ac      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002400:	f7ff fc23 	bl	8001c4a <LL_RCC_LSI2_IsReady>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f1      	bne.n	80023ee <HAL_RCC_OscConfig+0x36e>
 800240a:	e027      	b.n	800245c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800240c:	f7ff fc0c 	bl	8001c28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fe22 	bl	8001058 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002418:	f7fe fe1e 	bl	8001058 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b03      	cmp	r3, #3
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e197      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800242a:	f7ff fc0e 	bl	8001c4a <LL_RCC_LSI2_IsReady>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f1      	bne.n	8002418 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002434:	f7ff fbc4 	bl	8001bc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fe0e 	bl	8001058 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002440:	f7fe fe0a 	bl	8001058 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e183      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002452:	f7ff fbc6 	bl	8001be2 <LL_RCC_LSI1_IsReady>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f1      	bne.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	4ba7      	ldr	r3, [pc, #668]	; (8002708 <HAL_RCC_OscConfig+0x688>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d114      	bne.n	800249e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002474:	f7ff fa12 	bl	800189c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7fe fdee 	bl	8001058 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe fdea 	bl	8001058 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e163      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b9d      	ldr	r3, [pc, #628]	; (8002708 <HAL_RCC_OscConfig+0x688>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_OscConfig+0x42c>
 80024a6:	f7ff fb24 	bl	8001af2 <LL_RCC_LSE_Enable>
 80024aa:	e00c      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d104      	bne.n	80024be <HAL_RCC_OscConfig+0x43e>
 80024b4:	f7ff fb3f 	bl	8001b36 <LL_RCC_LSE_EnableBypass>
 80024b8:	f7ff fb1b 	bl	8001af2 <LL_RCC_LSE_Enable>
 80024bc:	e003      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
 80024be:	f7ff fb29 	bl	8001b14 <LL_RCC_LSE_Disable>
 80024c2:	f7ff fb49 	bl	8001b58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d014      	beq.n	80024f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fdc3 	bl	8001058 <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fdbf 	bl	8001058 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e136      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024ec:	f7ff fb45 	bl	8001b7a <LL_RCC_LSE_IsReady>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ef      	beq.n	80024d6 <HAL_RCC_OscConfig+0x456>
 80024f6:	e013      	b.n	8002520 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fdae 	bl	8001058 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fdaa 	bl	8001058 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e121      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002516:	f7ff fb30 	bl	8001b7a <LL_RCC_LSE_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ef      	bne.n	8002500 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02c      	beq.n	8002586 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d014      	beq.n	800255e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002534:	f7ff faa9 	bl	8001a8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe fd8e 	bl	8001058 <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002540:	f7fe fd8a 	bl	8001058 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e103      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002552:	f7ff fabc 	bl	8001ace <LL_RCC_HSI48_IsReady>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f1      	beq.n	8002540 <HAL_RCC_OscConfig+0x4c0>
 800255c:	e013      	b.n	8002586 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800255e:	f7ff faa5 	bl	8001aac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7fe fd79 	bl	8001058 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256a:	f7fe fd75 	bl	8001058 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0ee      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800257c:	f7ff faa7 	bl	8001ace <LL_RCC_HSI48_IsReady>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f1      	bne.n	800256a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80e4 	beq.w	8002758 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002590:	f7ff fc05 	bl	8001d9e <LL_RCC_GetSysClkSource>
 8002594:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f040 80b4 	bne.w	8002710 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d123      	bne.n	80025fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d11c      	bne.n	80025fe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d114      	bne.n	80025fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d10d      	bne.n	80025fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d05d      	beq.n	80026ba <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d058      	beq.n	80026b6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0a1      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002616:	f7ff fc85 	bl	8001f24 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800261a:	f7fe fd1d 	bl	8001058 <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fd19 	bl	8001058 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e092      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ef      	bne.n	8002622 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_RCC_OscConfig+0x68c>)
 800264a:	4013      	ands	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265a:	0212      	lsls	r2, r2, #8
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800266e:	430a      	orrs	r2, r1
 8002670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002678:	f7ff fc45 	bl	8001f06 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800268c:	f7fe fce4 	bl	8001058 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fce0 	bl	8001058 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e059      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b4:	e050      	b.n	8002758 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e04f      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d147      	bne.n	8002758 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c8:	f7ff fc1d 	bl	8001f06 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026dc:	f7fe fcbc 	bl	8001058 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe fcb8 	bl	8001058 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e031      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <HAL_RCC_OscConfig+0x664>
 8002704:	e028      	b.n	8002758 <HAL_RCC_OscConfig+0x6d8>
 8002706:	bf00      	nop
 8002708:	58000400 	.word	0x58000400
 800270c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d01e      	beq.n	8002754 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	f7ff fc05 	bl	8001f24 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fc9d 	bl	8001058 <HAL_GetTick>
 800271e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe fc99 	bl	8001058 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e012      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ef      	bne.n	8002722 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_OscConfig+0x6e4>)
 800274e:	4013      	ands	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
 8002752:	e001      	b.n	8002758 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3734      	adds	r7, #52	; 0x34
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}
 8002762:	bf00      	nop
 8002764:	eefefffc 	.word	0xeefefffc

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e12d      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b98      	ldr	r3, [pc, #608]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d91b      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b95      	ldr	r3, [pc, #596]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4993      	ldr	r1, [pc, #588]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279a:	f7fe fc5d 	bl	8001058 <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027a2:	f7fe fc59 	bl	8001058 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e111      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b4:	4b8a      	ldr	r3, [pc, #552]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d1ef      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff faef 	bl	8001db6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fc3e 	bl	8001058 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027e0:	f7fe fc3a 	bl	8001058 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0f2      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027f2:	f7ff fbe9 	bl	8001fc8 <LL_RCC_IsActiveFlag_HPRE>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f1      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d016      	beq.n	8002836 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fae6 	bl	8001dde <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002812:	f7fe fc21 	bl	8001058 <HAL_GetTick>
 8002816:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800281a:	f7fe fc1d 	bl	8001058 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0d5      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800282c:	f7ff fbde 	bl	8001fec <LL_RCC_IsActiveFlag_C2HPRE>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f1      	beq.n	800281a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fadf 	bl	8001e0a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800284c:	f7fe fc04 	bl	8001058 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002854:	f7fe fc00 	bl	8001058 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0b8      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002866:	f7ff fbd4 	bl	8002012 <LL_RCC_IsActiveFlag_SHDHPRE>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f1      	beq.n	8002854 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d016      	beq.n	80028aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fad9 	bl	8001e38 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002886:	f7fe fbe7 	bl	8001058 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800288e:	f7fe fbe3 	bl	8001058 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e09b      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028a0:	f7ff fbca 	bl	8002038 <LL_RCC_IsActiveFlag_PPRE1>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f1      	beq.n	800288e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d017      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff facf 	bl	8001e60 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fbc9 	bl	8001058 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028ca:	f7fe fbc5 	bl	8001058 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e07d      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028dc:	f7ff fbbe 	bl	800205c <LL_RCC_IsActiveFlag_PPRE2>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f1      	beq.n	80028ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d043      	beq.n	800297a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80028fa:	f7ff f86f 	bl	80019dc <LL_RCC_HSE_IsReady>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11e      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e067      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d106      	bne.n	800291e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002910:	f7ff fb17 	bl	8001f42 <LL_RCC_PLL_IsReady>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e05c      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002926:	f7ff f9d7 	bl	8001cd8 <LL_RCC_MSI_IsReady>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e051      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002934:	f7ff f882 	bl	8001a3c <LL_RCC_HSI_IsReady>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e04a      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fa15 	bl	8001d76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe fb84 	bl	8001058 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fb80 	bl	8001058 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e036      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	f7ff fa18 	bl	8001d9e <LL_RCC_GetSysClkSource>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	429a      	cmp	r2, r3
 8002978:	d1ec      	bne.n	8002954 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d21b      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	4913      	ldr	r1, [pc, #76]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7fe fb5e 	bl	8001058 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029a0:	f7fe fb5a 	bl	8001058 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e012      	b.n	80029d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x278>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1ef      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029c0:	f000 f87e 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_RCC_ClockConfig+0x27c>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029ca:	f7fe fb51 	bl	8001070 <HAL_GetTickPrio>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe f985 	bl	8000ce0 <HAL_InitTick>
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	58004000 	.word	0x58004000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ee:	f7ff f9d6 	bl	8001d9e <LL_RCC_GetSysClkSource>
 80029f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029fa:	f7ff f992 	bl	8001d22 <LL_RCC_MSI_GetRange>
 80029fe:	4603      	mov	r3, r0
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e04b      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e045      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d10a      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a22:	f7fe ffab 	bl	800197c <LL_RCC_HSE_IsEnabledDiv2>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e03a      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e037      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a38:	f7ff faba 	bl	8001fb0 <LL_RCC_PLL_GetMainSource>
 8002a3c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d003      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x64>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a4a:	e00d      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a4e:	60bb      	str	r3, [r7, #8]
        break;
 8002a50:	e015      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a52:	f7fe ff93 	bl	800197c <LL_RCC_HSE_IsEnabledDiv2>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a5e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a60:	e00d      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a64:	60bb      	str	r3, [r7, #8]
        break;
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a68:	f7ff f95b 	bl	8001d22 <LL_RCC_MSI_GetRange>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	60bb      	str	r3, [r7, #8]
        break;
 8002a7c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a7e:	f7ff fa72 	bl	8001f66 <LL_RCC_PLL_GetN>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	fb03 f402 	mul.w	r4, r3, r2
 8002a8a:	f7ff fa85 	bl	8001f98 <LL_RCC_PLL_GetDivider>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	3301      	adds	r3, #1
 8002a94:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a98:	f7ff fa72 	bl	8001f80 <LL_RCC_PLL_GetR>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	0f5b      	lsrs	r3, r3, #29
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08007d18 	.word	0x08007d18
 8002ab8:	00f42400 	.word	0x00f42400
 8002abc:	01e84800 	.word	0x01e84800

08002ac0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b598      	push	{r3, r4, r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ac4:	f7ff ff90 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	f7ff f9dd 	bl	8001e88 <LL_RCC_GetAHBPrescaler>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd98      	pop	{r3, r4, r7, pc}
 8002ae4:	08007cb8 	.word	0x08007cb8

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b598      	push	{r3, r4, r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002aec:	f7ff ffe8 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4604      	mov	r4, r0
 8002af2:	f7ff f9f0 	bl	8001ed6 <LL_RCC_GetAPB1Prescaler>
 8002af6:	4603      	mov	r3, r0
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd98      	pop	{r3, r4, r7, pc}
 8002b10:	08007cf8 	.word	0x08007cf8

08002b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b14:	b598      	push	{r3, r4, r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b18:	f7ff ffd2 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	f7ff f9e6 	bl	8001eee <LL_RCC_GetAPB2Prescaler>
 8002b22:	4603      	mov	r3, r0
 8002b24:	0adb      	lsrs	r3, r3, #11
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd98      	pop	{r3, r4, r7, pc}
 8002b3c:	08007cf8 	.word	0x08007cf8

08002b40 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	226f      	movs	r2, #111	; 0x6f
 8002b4e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002b50:	f7ff f925 	bl	8001d9e <LL_RCC_GetSysClkSource>
 8002b54:	4602      	mov	r2, r0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002b5a:	f7ff f995 	bl	8001e88 <LL_RCC_GetAHBPrescaler>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002b64:	f7ff f9b7 	bl	8001ed6 <LL_RCC_GetAPB1Prescaler>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002b6e:	f7ff f9be 	bl	8001eee <LL_RCC_GetAPB2Prescaler>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002b78:	f7ff f992 	bl	8001ea0 <LL_C2_RCC_GetAHBPrescaler>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002b82:	f7ff f99a 	bl	8001eba <LL_RCC_GetAHB4Prescaler>
 8002b86:	4602      	mov	r2, r0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <HAL_RCC_GetClockConfig+0x60>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0207 	and.w	r2, r3, #7
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	58004000 	.word	0x58004000

08002ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2bb0      	cmp	r3, #176	; 0xb0
 8002bb0:	d903      	bls.n	8002bba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e007      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002bca:	f7ff f976 	bl	8001eba <LL_RCC_GetAHB4Prescaler>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9c      	lsrs	r4, r3, #18
 8002bee:	f7fe feb7 	bl	8001960 <HAL_PWREx_GetVoltageRange>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 f80c 	bl	8002c14 <RCC_SetFlashLatency>
 8002bfc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08007d18 	.word	0x08007d18
 8002c0c:	08007cb8 	.word	0x08007cb8
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b093      	sub	sp, #76	; 0x4c
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <RCC_SetFlashLatency+0xe8>)
 8002c20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c2a:	4a35      	ldr	r2, [pc, #212]	; (8002d00 <RCC_SetFlashLatency+0xec>)
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <RCC_SetFlashLatency+0xf0>)
 8002c38:	f107 040c 	add.w	r4, r7, #12
 8002c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c42:	2300      	movs	r3, #0
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c4c:	d11a      	bne.n	8002c84 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	643b      	str	r3, [r7, #64]	; 0x40
 8002c52:	e013      	b.n	8002c7c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3348      	adds	r3, #72	; 0x48
 8002c5a:	443b      	add	r3, r7
 8002c5c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d807      	bhi.n	8002c76 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	3348      	adds	r3, #72	; 0x48
 8002c6c:	443b      	add	r3, r7
 8002c6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c74:	e020      	b.n	8002cb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c78:	3301      	adds	r3, #1
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d9e8      	bls.n	8002c54 <RCC_SetFlashLatency+0x40>
 8002c82:	e019      	b.n	8002cb8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c88:	e013      	b.n	8002cb2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	3348      	adds	r3, #72	; 0x48
 8002c90:	443b      	add	r3, r7
 8002c92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d807      	bhi.n	8002cac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3348      	adds	r3, #72	; 0x48
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ca8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002caa:	e005      	b.n	8002cb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	3301      	adds	r3, #1
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d9e8      	bls.n	8002c8a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <RCC_SetFlashLatency+0xf4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 0207 	bic.w	r2, r3, #7
 8002cc0:	4911      	ldr	r1, [pc, #68]	; (8002d08 <RCC_SetFlashLatency+0xf4>)
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cc8:	f7fe f9c6 	bl	8001058 <HAL_GetTick>
 8002ccc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cce:	e008      	b.n	8002ce2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cd0:	f7fe f9c2 	bl	8001058 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e007      	b.n	8002cf2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <RCC_SetFlashLatency+0xf4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1ef      	bne.n	8002cd0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	374c      	adds	r7, #76	; 0x4c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08007c74 	.word	0x08007c74
 8002d00:	08007c84 	.word	0x08007c84
 8002d04:	08007c90 	.word	0x08007c90
 8002d08:	58004000 	.word	0x58004000

08002d0c <LL_RCC_LSE_IsEnabled>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <LL_RCC_LSE_IsEnabled+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_RCC_LSE_IsEnabled+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_RCC_LSE_IsReady>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d101      	bne.n	8002d48 <LL_RCC_LSE_IsReady+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_RCC_LSE_IsReady+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_RCC_MSI_EnablePLLMode>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_SetRFWKPClockSource>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_SetSMPSClockSource>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_SetSMPSPrescaler>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_SetUSARTClockSource>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_SetLPUARTClockSource>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_SetI2CClockSource>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_SetLPTIMClockSource>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	43db      	mvns	r3, r3
 8002e98:	401a      	ands	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_SetSAIClockSource>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_SetRNGClockSource>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_SetCLK48ClockSource>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_SetUSBClockSource>:
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffe3 	bl	8002f0c <LL_RCC_SetCLK48ClockSource>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <LL_RCC_SetADCClockSource>:
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_SetRTCClockSource>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_GetRTCClockSource>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_ForceBackupDomainReset>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_RCC_PLLSAI1_Enable>:
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_PLLSAI1_Disable>:
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_RCC_PLLSAI1_IsReady>:
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003052:	d101      	bne.n	8003058 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003070:	2300      	movs	r3, #0
 8003072:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d034      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003088:	d021      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800308a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800308e:	d81b      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003094:	d01d      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309a:	d815      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a4:	d110      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80030b6:	e00d      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f94d 	bl	800335c <RCCEx_PLLSAI1_ConfigNP>
 80030c2:	4603      	mov	r3, r0
 80030c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	77fb      	strb	r3, [r7, #31]
        break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fee8 	bl	8002eb4 <LL_RCC_SetSAIClockSource>
 80030e4:	e001      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e6:	7ffb      	ldrb	r3, [r7, #31]
 80030e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d046      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80030f6:	f7ff ff56 	bl	8002fa6 <LL_RCC_GetRTCClockSource>
 80030fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	429a      	cmp	r2, r3
 8003104:	d03c      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003106:	f7fe fbc9 	bl	800189c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff30 	bl	8002f7a <LL_RCC_SetRTCClockSource>
 800311a:	e02e      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003126:	f7ff ff4b 	bl	8002fc0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800312a:	f7ff ff5a 	bl	8002fe2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800313c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003146:	f7ff fde1 	bl	8002d0c <LL_RCC_LSE_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d114      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003150:	f7fd ff82 	bl	8001058 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003156:	e00b      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fd ff7e 	bl	8001058 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	77fb      	strb	r3, [r7, #31]
              break;
 800316e:	e004      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003170:	f7ff fdde 	bl	8002d30 <LL_RCC_LSE_IsReady>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1ee      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	77bb      	strb	r3, [r7, #30]
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7ffb      	ldrb	r3, [r7, #31]
 8003182:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fe2a 	bl	8002dee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fe35 	bl	8002e1a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe5d 	bl	8002e80 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe52 	bl	8002e80 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fe2a 	bl	8002e46 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe1f 	bl	8002e46 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d022      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe8d 	bl	8002f38 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003226:	d107      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003240:	d10b      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f8e3 	bl	8003412 <RCCEx_PLLSAI1_ConfigNQ>
 800324c:	4603      	mov	r3, r0
 800324e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003256:	7ffb      	ldrb	r3, [r7, #31]
 8003258:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02b      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d008      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003278:	d003      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fe2a 	bl	8002ee0 <LL_RCC_SetRNGClockSource>
 800328c:	e00a      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	2000      	movs	r0, #0
 800329a:	f7ff fe21 	bl	8002ee0 <LL_RCC_SetRNGClockSource>
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff fe34 	bl	8002f0c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80032ac:	d107      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d022      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fe3d 	bl	8002f4e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d107      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f8e3 	bl	80034c8 <RCCEx_PLLSAI1_ConfigNR>
 8003302:	4603      	mov	r3, r0
 8003304:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003306:	7ffb      	ldrb	r3, [r7, #31]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800330c:	7ffb      	ldrb	r3, [r7, #31]
 800330e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fd26 	bl	8002d72 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fd45 	bl	8002dc6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fd2c 	bl	8002d9e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003346:	7fbb      	ldrb	r3, [r7, #30]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003354:	f7ff fcfe 	bl	8002d54 <LL_RCC_MSI_EnablePLLMode>
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}

0800335c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003368:	f7ff fe5b 	bl	8003022 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800336c:	f7fd fe74 	bl	8001058 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003374:	f7fd fe70 	bl	8001058 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
      break;
 8003386:	e004      	b.n	8003392 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003388:	f7ff fe5a 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d137      	bne.n	8003408 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033c6:	f7ff fe1d 	bl	8003004 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ca:	f7fd fe45 	bl	8001058 <HAL_GetTick>
 80033ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033d0:	e009      	b.n	80033e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d2:	f7fd fe41 	bl	8001058 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d902      	bls.n	80033e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	73fb      	strb	r3, [r7, #15]
        break;
 80033e4:	e004      	b.n	80033f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033e6:	f7ff fe2b 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d1f0      	bne.n	80033d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003404:	4313      	orrs	r3, r2
 8003406:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800341e:	f7ff fe00 	bl	8003022 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003422:	f7fd fe19 	bl	8001058 <HAL_GetTick>
 8003426:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003428:	e009      	b.n	800343e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800342a:	f7fd fe15 	bl	8001058 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d902      	bls.n	800343e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	73fb      	strb	r3, [r7, #15]
      break;
 800343c:	e004      	b.n	8003448 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800343e:	f7ff fdff 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d137      	bne.n	80034be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800347c:	f7ff fdc2 	bl	8003004 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fd fdea 	bl	8001058 <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003486:	e009      	b.n	800349c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003488:	f7fd fde6 	bl	8001058 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d902      	bls.n	800349c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	73fb      	strb	r3, [r7, #15]
        break;
 800349a:	e004      	b.n	80034a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800349c:	f7ff fdd0 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d1f0      	bne.n	8003488 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d108      	bne.n	80034be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ba:	4313      	orrs	r3, r2
 80034bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034d4:	f7ff fda5 	bl	8003022 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034d8:	f7fd fdbe 	bl	8001058 <HAL_GetTick>
 80034dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034de:	e009      	b.n	80034f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e0:	f7fd fdba 	bl	8001058 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d902      	bls.n	80034f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	73fb      	strb	r3, [r7, #15]
      break;
 80034f2:	e004      	b.n	80034fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034f4:	f7ff fda4 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d137      	bne.n	8003574 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003518:	4313      	orrs	r3, r2
 800351a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003532:	f7ff fd67 	bl	8003004 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003536:	f7fd fd8f 	bl	8001058 <HAL_GetTick>
 800353a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800353c:	e009      	b.n	8003552 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353e:	f7fd fd8b 	bl	8001058 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d902      	bls.n	8003552 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	73fb      	strb	r3, [r7, #15]
        break;
 8003550:	e004      	b.n	800355c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003552:	f7ff fd75 	bl	8003040 <LL_RCC_PLLSAI1_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d1f0      	bne.n	800353e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003570:	4313      	orrs	r3, r2
 8003572:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e049      	b.n	8003624 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f841 	bl	800362c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f000 f9d5 	bl	800396c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e036      	b.n	80036c6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_TIM_Base_Start_IT+0x94>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x44>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d115      	bne.n	80036b0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_TIM_Base_Start_IT+0x98>)
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b06      	cmp	r3, #6
 8003694:	d015      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x82>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d011      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ae:	e008      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e000      	b.n	80036c4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	00010007 	.word	0x00010007

080036dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d122      	bne.n	8003738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d11b      	bne.n	8003738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0202 	mvn.w	r2, #2
 8003708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f905 	bl	800392e <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8f7 	bl	800391a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f908 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0204 	mvn.w	r2, #4
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8db 	bl	800392e <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8cd 	bl	800391a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f8de 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b08      	cmp	r3, #8
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0208 	mvn.w	r2, #8
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2204      	movs	r2, #4
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8b1 	bl	800392e <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8a3 	bl	800391a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f8b4 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2208      	movs	r2, #8
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f887 	bl	800392e <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f879 	bl	800391a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f88a 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10e      	bne.n	8003860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0201 	mvn.w	r2, #1
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd f90e 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d10e      	bne.n	800388c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d107      	bne.n	800388c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8de 	bl	8003a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389a:	d10e      	bne.n	80038ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8d1 	bl	8003a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d10e      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f838 	bl	8003956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0220 	mvn.w	r2, #32
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f891 	bl	8003a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2a      	ldr	r2, [pc, #168]	; (8003a28 <TIM_Base_SetConfig+0xbc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x20>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <TIM_Base_SetConfig+0xbc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x52>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x52>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <TIM_Base_SetConfig+0xc0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x52>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <TIM_Base_SetConfig+0xc4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <TIM_Base_SetConfig+0xbc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d007      	beq.n	8003a0c <TIM_Base_SetConfig+0xa0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <TIM_Base_SetConfig+0xc0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_Base_SetConfig+0xa0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <TIM_Base_SetConfig+0xc4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_GetUSARTClockSource>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4013      	ands	r3, r2
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_RCC_GetLPUARTClockSource>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4013      	ands	r3, r2
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd f84f 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	; 0x24
 8003ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f82c 	bl	8003b50 <UART_SetConfig>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa46 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 facd 	bl	80040e0 <UART_CheckIdleState>
 8003b46:	4603      	mov	r3, r0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b54:	b08c      	sub	sp, #48	; 0x30
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4baf      	ldr	r3, [pc, #700]	; (8003e3c <UART_SetConfig+0x2ec>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4aa4      	ldr	r2, [pc, #656]	; (8003e40 <UART_SetConfig+0x2f0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bc6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f023 010f 	bic.w	r1, r3, #15
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a95      	ldr	r2, [pc, #596]	; (8003e44 <UART_SetConfig+0x2f4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d125      	bne.n	8003c40 <UART_SetConfig+0xf0>
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	f7ff ff3b 	bl	8003a70 <LL_RCC_GetUSARTClockSource>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d81b      	bhi.n	8003c38 <UART_SetConfig+0xe8>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0xb8>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c31 	.word	0x08003c31
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e042      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e03e      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e03a      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c30:	2308      	movs	r3, #8
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e036      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c3e:	e032      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a7e      	ldr	r2, [pc, #504]	; (8003e40 <UART_SetConfig+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d12a      	bne.n	8003ca0 <UART_SetConfig+0x150>
 8003c4a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003c4e:	f7ff ff1f 	bl	8003a90 <LL_RCC_GetLPUARTClockSource>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c58:	d01a      	beq.n	8003c90 <UART_SetConfig+0x140>
 8003c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c5e:	d81b      	bhi.n	8003c98 <UART_SetConfig+0x148>
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c64:	d00c      	beq.n	8003c80 <UART_SetConfig+0x130>
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d815      	bhi.n	8003c98 <UART_SetConfig+0x148>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <UART_SetConfig+0x128>
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c74:	d008      	beq.n	8003c88 <UART_SetConfig+0x138>
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x148>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e012      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e00e      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e00a      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e006      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e002      	b.n	8003ca6 <UART_SetConfig+0x156>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a65      	ldr	r2, [pc, #404]	; (8003e40 <UART_SetConfig+0x2f0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	f040 8097 	bne.w	8003de0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d823      	bhi.n	8003d02 <UART_SetConfig+0x1b2>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x170>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003d03 	.word	0x08003d03
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003d03 	.word	0x08003d03
 8003cd0:	08003cf3 	.word	0x08003cf3
 8003cd4:	08003d03 	.word	0x08003d03
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d03 	.word	0x08003d03
 8003ce0:	08003cfb 	.word	0x08003cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe ff00 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cea:	e010      	b.n	8003d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cec:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <UART_SetConfig+0x2f8>)
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cf0:	e00d      	b.n	8003d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf2:	f7fe fe79 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cf8:	e009      	b.n	8003d0e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d00:	e005      	b.n	8003d0e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 812a 	beq.w	8003f6a <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <UART_SetConfig+0x2fc>)
 8003d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d305      	bcc.n	8003d46 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d903      	bls.n	8003d4e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d4c:	e10d      	b.n	8003f6a <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2200      	movs	r2, #0
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	60fa      	str	r2, [r7, #12]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <UART_SetConfig+0x2fc>)
 8003d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2200      	movs	r2, #0
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d70:	f7fc fa56 	bl	8000220 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	020b      	lsls	r3, r1, #8
 8003d86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d8a:	0202      	lsls	r2, r0, #8
 8003d8c:	6979      	ldr	r1, [r7, #20]
 8003d8e:	6849      	ldr	r1, [r1, #4]
 8003d90:	0849      	lsrs	r1, r1, #1
 8003d92:	2000      	movs	r0, #0
 8003d94:	460c      	mov	r4, r1
 8003d96:	4605      	mov	r5, r0
 8003d98:	eb12 0804 	adds.w	r8, r2, r4
 8003d9c:	eb43 0905 	adc.w	r9, r3, r5
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	469a      	mov	sl, r3
 8003da8:	4693      	mov	fp, r2
 8003daa:	4652      	mov	r2, sl
 8003dac:	465b      	mov	r3, fp
 8003dae:	4640      	mov	r0, r8
 8003db0:	4649      	mov	r1, r9
 8003db2:	f7fc fa35 	bl	8000220 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4613      	mov	r3, r2
 8003dbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc4:	d308      	bcc.n	8003dd8 <UART_SetConfig+0x288>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dcc:	d204      	bcs.n	8003dd8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	e0c8      	b.n	8003f6a <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dde:	e0c4      	b.n	8003f6a <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	d16d      	bne.n	8003ec6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dee:	3b01      	subs	r3, #1
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d82d      	bhi.n	8003e50 <UART_SetConfig+0x300>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <UART_SetConfig+0x2ac>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e1d 	.word	0x08003e1d
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e2b 	.word	0x08003e2b
 8003e0c:	08003e51 	.word	0x08003e51
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fe7a 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8003e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e22:	e01b      	b.n	8003e5c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <UART_SetConfig+0x2f8>)
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e28:	e018      	b.n	8003e5c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fddd 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e30:	e014      	b.n	8003e5c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e38:	e010      	b.n	8003e5c <UART_SetConfig+0x30c>
 8003e3a:	bf00      	nop
 8003e3c:	cfff69f3 	.word	0xcfff69f3
 8003e40:	40008000 	.word	0x40008000
 8003e44:	40013800 	.word	0x40013800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	08007d58 	.word	0x08007d58
      default:
        pclk = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8083 	beq.w	8003f6a <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	4a4a      	ldr	r2, [pc, #296]	; (8003f94 <UART_SetConfig+0x444>)
 8003e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e76:	005a      	lsls	r2, r3, #1
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	441a      	add	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	2b0f      	cmp	r3, #15
 8003e8e:	d916      	bls.n	8003ebe <UART_SetConfig+0x36e>
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d212      	bcs.n	8003ebe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f023 030f 	bic.w	r3, r3, #15
 8003ea0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	8bfb      	ldrh	r3, [r7, #30]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	8bfa      	ldrh	r2, [r7, #30]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e055      	b.n	8003f6a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ec4:	e051      	b.n	8003f6a <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	2b07      	cmp	r3, #7
 8003ece:	d822      	bhi.n	8003f16 <UART_SetConfig+0x3c6>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x388>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003ef9 	.word	0x08003ef9
 8003edc:	08003f01 	.word	0x08003f01
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f07 	.word	0x08003f07
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f17 	.word	0x08003f17
 8003ef4:	08003f0f 	.word	0x08003f0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7fe fe0c 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003efe:	e010      	b.n	8003f22 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <UART_SetConfig+0x448>)
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fe fd6f 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f0c:	e009      	b.n	8003f22 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f14:	e005      	b.n	8003f22 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f20:	bf00      	nop
    }

    if (pclk != 0U)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <UART_SetConfig+0x444>)
 8003f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d908      	bls.n	8003f64 <UART_SetConfig+0x414>
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d204      	bcs.n	8003f64 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	e002      	b.n	8003f6a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3730      	adds	r7, #48	; 0x30
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f94:	08007d58 	.word	0x08007d58
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409a:	d10a      	bne.n	80040b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f0:	f7fc ffb2 	bl	8001058 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d10e      	bne.n	8004122 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f82f 	bl	8004176 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e025      	b.n	800416e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d10e      	bne.n	800414e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f819 	bl	8004176 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b09c      	sub	sp, #112	; 0x70
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004186:	e0a9      	b.n	80042dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	f000 80a5 	beq.w	80042dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fc ff61 	bl	8001058 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80041a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d140      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e6      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	663b      	str	r3, [r7, #96]	; 0x60
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e5      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e069      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d051      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d149      	bne.n	80042dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004250:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
 8004272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e6      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	613b      	str	r3, [r7, #16]
   return(result);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	66bb      	str	r3, [r7, #104]	; 0x68
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3308      	adds	r3, #8
 80042a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042a4:	623a      	str	r2, [r7, #32]
 80042a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	69f9      	ldr	r1, [r7, #28]
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e010      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	f43f af46 	beq.w	8004188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3770      	adds	r7, #112	; 0x70
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800430e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004312:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	b29b      	uxth	r3, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	b29b      	uxth	r3, r3
 8004324:	4013      	ands	r3, r2
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800433c:	b084      	sub	sp, #16
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	f107 0014 	add.w	r0, r7, #20
 800434a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	b004      	add	sp, #16
 800437c:	4770      	bx	lr
	...

08004380 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <SysTick_Handler+0x1c>)
 8004386:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004388:	f001 fddc 	bl	8005f44 <xTaskGetSchedulerState>
 800438c:	4603      	mov	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004392:	f002 fcc1 	bl	8006d18 <xPortSysTickHandler>
  }
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	e000e010 	.word	0xe000e010

080043a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <vApplicationGetIdleTaskMemory+0x2c>)
 80043b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <vApplicationGetIdleTaskMemory+0x30>)
 80043b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	601a      	str	r2, [r3, #0]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	200004c4 	.word	0x200004c4
 80043d0:	20000580 	.word	0x20000580

080043d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <vApplicationGetTimerTaskMemory+0x2c>)
 80043e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4a06      	ldr	r2, [pc, #24]	; (8004404 <vApplicationGetTimerTaskMemory+0x30>)
 80043ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000780 	.word	0x20000780
 8004404:	2000083c 	.word	0x2000083c

08004408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f103 0208 	add.w	r2, r3, #8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f103 0208 	add.w	r2, r3, #8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 0208 	add.w	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d103      	bne.n	80044ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e00c      	b.n	80044e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3308      	adds	r3, #8
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e002      	b.n	80044d8 <vListInsert+0x2e>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d2f6      	bcs.n	80044d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d103      	bne.n	8004550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800459a:	f002 fb2b 	bl	8006bf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	3b01      	subs	r3, #1
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	22ff      	movs	r2, #255	; 0xff
 80045e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d114      	bne.n	800461a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01a      	beq.n	800462e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3310      	adds	r3, #16
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fadf 	bl	8005bc0 <xTaskRemoveFromEventList>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <xQueueGenericReset+0xcc>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	e009      	b.n	800462e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3310      	adds	r3, #16
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fef2 	bl	8004408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff feed 	bl	8004408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800462e:	f002 fb11 	bl	8006c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004632:	2301      	movs	r3, #1
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	; 0x38
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <xQueueGenericCreateStatic+0x52>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <xQueueGenericCreateStatic+0x56>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueGenericCreateStatic+0x58>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	623b      	str	r3, [r7, #32]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <xQueueGenericCreateStatic+0x7e>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <xQueueGenericCreateStatic+0x82>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueGenericCreateStatic+0x84>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	61fb      	str	r3, [r7, #28]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046de:	2350      	movs	r3, #80	; 0x50
 80046e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d00a      	beq.n	80046fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	61bb      	str	r3, [r7, #24]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004712:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f83f 	bl	80047a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004728:	4618      	mov	r0, r3
 800472a:	3730      	adds	r7, #48	; 0x30
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	613b      	str	r3, [r7, #16]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3350      	adds	r3, #80	; 0x50
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fb65 	bl	8006e38 <pvPortMalloc>
 800476e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d011      	beq.n	800479a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3350      	adds	r3, #80	; 0x50
 800477e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004788:	79fa      	ldrb	r2, [r7, #7]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f805 	bl	80047a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800479a:	69bb      	ldr	r3, [r7, #24]
	}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e002      	b.n	80047c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047d2:	2101      	movs	r1, #1
 80047d4:	69b8      	ldr	r0, [r7, #24]
 80047d6:	f7ff fecb 	bl	8004570 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08e      	sub	sp, #56	; 0x38
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047fa:	2300      	movs	r3, #0
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xQueueGenericSend+0x32>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <xQueueGenericSend+0x40>
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <xQueueGenericSend+0x44>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <xQueueGenericSend+0x46>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <xQueueGenericSend+0x60>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d103      	bne.n	800485a <xQueueGenericSend+0x6e>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <xQueueGenericSend+0x72>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <xQueueGenericSend+0x74>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xQueueGenericSend+0x8e>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	623b      	str	r3, [r7, #32]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800487a:	f001 fb63 	bl	8005f44 <xTaskGetSchedulerState>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <xQueueGenericSend+0x9e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <xQueueGenericSend+0xa2>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <xQueueGenericSend+0xa4>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xQueueGenericSend+0xbe>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	61fb      	str	r3, [r7, #28]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048aa:	f002 f9a3 	bl	8006bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <xQueueGenericSend+0xd4>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d129      	bne.n	8004914 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c6:	f000 fbbb 	bl	8005040 <prvCopyDataToQueue>
 80048ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	3324      	adds	r3, #36	; 0x24
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f971 	bl	8005bc0 <xTaskRemoveFromEventList>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d013      	beq.n	800490c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048e4:	4b3f      	ldr	r3, [pc, #252]	; (80049e4 <xQueueGenericSend+0x1f8>)
 80048e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	e00a      	b.n	800490c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <xQueueGenericSend+0x1f8>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800490c:	f002 f9a2 	bl	8006c54 <vPortExitCritical>
				return pdPASS;
 8004910:	2301      	movs	r3, #1
 8004912:	e063      	b.n	80049dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800491a:	f002 f99b 	bl	8006c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800491e:	2300      	movs	r3, #0
 8004920:	e05c      	b.n	80049dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	4618      	mov	r0, r3
 800492e:	f001 f9ab 	bl	8005c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004936:	f002 f98d 	bl	8006c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800493a:	f000 ff17 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800493e:	f002 f959 	bl	8006bf4 <vPortEnterCritical>
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004948:	b25b      	sxtb	r3, r3
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d103      	bne.n	8004958 <xQueueGenericSend+0x16c>
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495e:	b25b      	sxtb	r3, r3
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d103      	bne.n	800496e <xQueueGenericSend+0x182>
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800496e:	f002 f971 	bl	8006c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004972:	1d3a      	adds	r2, r7, #4
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f001 f99a 	bl	8005cb4 <xTaskCheckForTimeOut>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d124      	bne.n	80049d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004988:	f000 fc52 	bl	8005230 <prvIsQueueFull>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d018      	beq.n	80049c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	3310      	adds	r3, #16
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f8c0 	bl	8005b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a2:	f000 fbdd 	bl	8005160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049a6:	f000 feef 	bl	8005788 <xTaskResumeAll>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f af7c 	bne.w	80048aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <xQueueGenericSend+0x1f8>)
 80049b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	e772      	b.n	80048aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049c6:	f000 fbcb 	bl	8005160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ca:	f000 fedd 	bl	8005788 <xTaskResumeAll>
 80049ce:	e76c      	b.n	80048aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d2:	f000 fbc5 	bl	8005160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049d6:	f000 fed7 	bl	8005788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3738      	adds	r7, #56	; 0x38
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	; 0x40
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <xQueueGenericSendFromISR+0x3c>
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <xQueueGenericSendFromISR+0x40>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <xQueueGenericSendFromISR+0x42>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <xQueueGenericSendFromISR+0x6a>
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <xQueueGenericSendFromISR+0x6e>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericSendFromISR+0x70>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a72:	f002 f9a1 	bl	8006db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a76:	f3ef 8211 	mrs	r2, BASEPRI
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61fa      	str	r2, [r7, #28]
 8004a8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <xQueueGenericSendFromISR+0xbc>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d12f      	bne.n	8004b04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aba:	f000 fac1 	bl	8005040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004abe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d112      	bne.n	8004aee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d016      	beq.n	8004afe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	3324      	adds	r3, #36	; 0x24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 f873 	bl	8005bc0 <xTaskRemoveFromEventList>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e007      	b.n	8004afe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004aee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004af2:	3301      	adds	r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	b25a      	sxtb	r2, r3
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004afe:	2301      	movs	r3, #1
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b02:	e001      	b.n	8004b08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3740      	adds	r7, #64	; 0x40
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b08e      	sub	sp, #56	; 0x38
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	623b      	str	r3, [r7, #32]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	61fb      	str	r3, [r7, #28]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <xQueueGiveFromISR+0x58>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <xQueueGiveFromISR+0x5c>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGiveFromISR+0x5e>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	61bb      	str	r3, [r7, #24]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b96:	f002 f90f 	bl	8006db8 <vPortValidateInterruptPriority>
	__asm volatile
 8004b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	617a      	str	r2, [r7, #20]
 8004bb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004bb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d22b      	bcs.n	8004c1e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d112      	bne.n	8004c08 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 ffe6 	bl	8005bc0 <xTaskRemoveFromEventList>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00e      	beq.n	8004c18 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e007      	b.n	8004c18 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	b25a      	sxtb	r2, r3
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1c:	e001      	b.n	8004c22 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f383 8811 	msr	BASEPRI, r3
}
 8004c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3738      	adds	r7, #56	; 0x38
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <xQueueReceive+0x30>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	623b      	str	r3, [r7, #32]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <xQueueReceive+0x3e>
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <xQueueReceive+0x42>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <xQueueReceive+0x44>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <xQueueReceive+0x5e>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	61fb      	str	r3, [r7, #28]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c96:	f001 f955 	bl	8005f44 <xTaskGetSchedulerState>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xQueueReceive+0x6e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <xQueueReceive+0x72>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueReceive+0x74>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueReceive+0x8e>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	61bb      	str	r3, [r7, #24]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cc6:	f001 ff95 	bl	8006bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01f      	beq.n	8004d16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cda:	f000 fa1b 	bl	8005114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00f      	beq.n	8004d0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	3310      	adds	r3, #16
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 ff64 	bl	8005bc0 <xTaskRemoveFromEventList>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <xQueueReceive+0x1bc>)
 8004d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d0e:	f001 ffa1 	bl	8006c54 <vPortExitCritical>
				return pdPASS;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e069      	b.n	8004dea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d1c:	f001 ff9a 	bl	8006c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e062      	b.n	8004dea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d2a:	f107 0310 	add.w	r3, r7, #16
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ffaa 	bl	8005c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d38:	f001 ff8c 	bl	8006c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d3c:	f000 fd16 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d40:	f001 ff58 	bl	8006bf4 <vPortEnterCritical>
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d103      	bne.n	8004d5a <xQueueReceive+0x122>
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d103      	bne.n	8004d70 <xQueueReceive+0x138>
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d70:	f001 ff70 	bl	8006c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d74:	1d3a      	adds	r2, r7, #4
 8004d76:	f107 0310 	add.w	r3, r7, #16
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 ff99 	bl	8005cb4 <xTaskCheckForTimeOut>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d123      	bne.n	8004dd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d8a:	f000 fa3b 	bl	8005204 <prvIsQueueEmpty>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d017      	beq.n	8004dc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	3324      	adds	r3, #36	; 0x24
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 febf 	bl	8005b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da4:	f000 f9dc 	bl	8005160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004da8:	f000 fcee 	bl	8005788 <xTaskResumeAll>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d189      	bne.n	8004cc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004db2:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <xQueueReceive+0x1bc>)
 8004db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	e780      	b.n	8004cc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc6:	f000 f9cb 	bl	8005160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dca:	f000 fcdd 	bl	8005788 <xTaskResumeAll>
 8004dce:	e77a      	b.n	8004cc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd2:	f000 f9c5 	bl	8005160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dd6:	f000 fcd7 	bl	8005788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ddc:	f000 fa12 	bl	8005204 <prvIsQueueEmpty>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f43f af6f 	beq.w	8004cc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004de8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3730      	adds	r7, #48	; 0x30
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08e      	sub	sp, #56	; 0x38
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	623b      	str	r3, [r7, #32]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	61fb      	str	r3, [r7, #28]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e48:	f001 f87c 	bl	8005f44 <xTaskGetSchedulerState>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <xQueueSemaphoreTake+0x60>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <xQueueSemaphoreTake+0x64>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <xQueueSemaphoreTake+0x66>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61bb      	str	r3, [r7, #24]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e78:	f001 febc 	bl	8006bf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d024      	beq.n	8004ed2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	1e5a      	subs	r2, r3, #1
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e98:	f001 f9ca 	bl	8006230 <pvTaskIncrementMutexHeldCount>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00f      	beq.n	8004eca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	3310      	adds	r3, #16
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fe86 	bl	8005bc0 <xTaskRemoveFromEventList>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eba:	4b54      	ldr	r3, [pc, #336]	; (800500c <xQueueSemaphoreTake+0x214>)
 8004ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eca:	f001 fec3 	bl	8006c54 <vPortExitCritical>
				return pdPASS;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e097      	b.n	8005002 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d111      	bne.n	8004efc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ef4:	f001 feae 	bl	8006c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e082      	b.n	8005002 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f02:	f107 030c 	add.w	r3, r7, #12
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 febe 	bl	8005c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f10:	f001 fea0 	bl	8006c54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f14:	f000 fc2a 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f18:	f001 fe6c 	bl	8006bf4 <vPortEnterCritical>
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d103      	bne.n	8004f32 <xQueueSemaphoreTake+0x13a>
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f38:	b25b      	sxtb	r3, r3
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d103      	bne.n	8004f48 <xQueueSemaphoreTake+0x150>
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f48:	f001 fe84 	bl	8006c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	f107 030c 	add.w	r3, r7, #12
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fead 	bl	8005cb4 <xTaskCheckForTimeOut>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d132      	bne.n	8004fc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f62:	f000 f94f 	bl	8005204 <prvIsQueueEmpty>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d026      	beq.n	8004fba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004f74:	f001 fe3e 	bl	8006bf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 ffff 	bl	8005f80 <xTaskPriorityInherit>
 8004f82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f84:	f001 fe66 	bl	8006c54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	3324      	adds	r3, #36	; 0x24
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fdc5 	bl	8005b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f98:	f000 f8e2 	bl	8005160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f9c:	f000 fbf4 	bl	8005788 <xTaskResumeAll>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f47f af68 	bne.w	8004e78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004fa8:	4b18      	ldr	r3, [pc, #96]	; (800500c <xQueueSemaphoreTake+0x214>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	e75e      	b.n	8004e78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fbc:	f000 f8d0 	bl	8005160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fc0:	f000 fbe2 	bl	8005788 <xTaskResumeAll>
 8004fc4:	e758      	b.n	8004e78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fc8:	f000 f8ca 	bl	8005160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fcc:	f000 fbdc 	bl	8005788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fd2:	f000 f917 	bl	8005204 <prvIsQueueEmpty>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f43f af4d 	beq.w	8004e78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004fe4:	f001 fe06 	bl	8006bf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fea:	f000 f811 	bl	8005010 <prvGetDisinheritPriorityAfterTimeout>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f898 	bl	800612c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ffc:	f001 fe2a 	bl	8006c54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005002:	4618      	mov	r0, r3
 8005004:	3738      	adds	r7, #56	; 0x38
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e001      	b.n	8005032 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005032:	68fb      	ldr	r3, [r7, #12]
	}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d14d      	bne.n	8005102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fff0 	bl	8006050 <xTaskPriorityDisinherit>
 8005070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	e043      	b.n	8005102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d119      	bne.n	80050b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6858      	ldr	r0, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	461a      	mov	r2, r3
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	f002 f8ea 	bl	8007264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	441a      	add	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d32b      	bcc.n	8005102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	e026      	b.n	8005102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68d8      	ldr	r0, [r3, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	461a      	mov	r2, r3
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	f002 f8d0 	bl	8007264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	425b      	negs	r3, r3
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d207      	bcs.n	80050f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	425b      	negs	r3, r3
 80050ea:	441a      	add	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d105      	bne.n	8005102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3b01      	subs	r3, #1
 8005100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800510a:	697b      	ldr	r3, [r7, #20]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d303      	bcc.n	8005148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68d9      	ldr	r1, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	461a      	mov	r2, r3
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f002 f886 	bl	8007264 <memcpy>
	}
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005168:	f001 fd44 	bl	8006bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005174:	e011      	b.n	800519a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d012      	beq.n	80051a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3324      	adds	r3, #36	; 0x24
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fd1c 	bl	8005bc0 <xTaskRemoveFromEventList>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800518e:	f000 fdf3 	bl	8005d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	3b01      	subs	r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800519a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dce9      	bgt.n	8005176 <prvUnlockQueue+0x16>
 80051a2:	e000      	b.n	80051a6 <prvUnlockQueue+0x46>
					break;
 80051a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	22ff      	movs	r2, #255	; 0xff
 80051aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051ae:	f001 fd51 	bl	8006c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051b2:	f001 fd1f 	bl	8006bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051be:	e011      	b.n	80051e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d012      	beq.n	80051ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3310      	adds	r3, #16
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fcf7 	bl	8005bc0 <xTaskRemoveFromEventList>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051d8:	f000 fdce 	bl	8005d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	3b01      	subs	r3, #1
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dce9      	bgt.n	80051c0 <prvUnlockQueue+0x60>
 80051ec:	e000      	b.n	80051f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051f8:	f001 fd2c 	bl	8006c54 <vPortExitCritical>
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800520c:	f001 fcf2 	bl	8006bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e001      	b.n	8005222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005222:	f001 fd17 	bl	8006c54 <vPortExitCritical>

	return xReturn;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005238:	f001 fcdc 	bl	8006bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	429a      	cmp	r2, r3
 8005246:	d102      	bne.n	800524e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e001      	b.n	8005252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005252:	f001 fcff 	bl	8006c54 <vPortExitCritical>

	return xReturn;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e014      	b.n	800529a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005270:	4a0f      	ldr	r2, [pc, #60]	; (80052b0 <vQueueAddToRegistry+0x50>)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800527c:	490c      	ldr	r1, [pc, #48]	; (80052b0 <vQueueAddToRegistry+0x50>)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <vQueueAddToRegistry+0x50>)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005292:	e006      	b.n	80052a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b07      	cmp	r3, #7
 800529e:	d9e7      	bls.n	8005270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000c3c 	.word	0x20000c3c

080052b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052c4:	f001 fc96 	bl	8006bf4 <vPortEnterCritical>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ce:	b25b      	sxtb	r3, r3
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d4:	d103      	bne.n	80052de <vQueueWaitForMessageRestricted+0x2a>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e4:	b25b      	sxtb	r3, r3
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d103      	bne.n	80052f4 <vQueueWaitForMessageRestricted+0x40>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f4:	f001 fcae 	bl	8006c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3324      	adds	r3, #36	; 0x24
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fc2d 	bl	8005b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800530e:	6978      	ldr	r0, [r7, #20]
 8005310:	f7ff ff26 	bl	8005160 <prvUnlockQueue>
	}
 8005314:	bf00      	nop
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08e      	sub	sp, #56	; 0x38
 8005320:	af04      	add	r7, sp, #16
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	623b      	str	r3, [r7, #32]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xTaskCreateStatic+0x46>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005362:	23bc      	movs	r3, #188	; 0xbc
 8005364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2bbc      	cmp	r3, #188	; 0xbc
 800536a:	d00a      	beq.n	8005382 <xTaskCreateStatic+0x66>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	61bb      	str	r3, [r7, #24]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005382:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01e      	beq.n	80053c8 <xTaskCreateStatic+0xac>
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	2202      	movs	r2, #2
 800539e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053a2:	2300      	movs	r3, #0
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	f107 0314 	add.w	r3, r7, #20
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f850 	bl	8005460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053c2:	f000 f8f3 	bl	80055ac <prvAddNewTaskToReadyList>
 80053c6:	e001      	b.n	80053cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
	}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b08c      	sub	sp, #48	; 0x30
 80053da:	af04      	add	r7, sp, #16
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 fd24 	bl	8006e38 <pvPortMalloc>
 80053f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00e      	beq.n	8005416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053f8:	20bc      	movs	r0, #188	; 0xbc
 80053fa:	f001 fd1d 	bl	8006e38 <pvPortMalloc>
 80053fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
 800540c:	e005      	b.n	800541a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800540e:	6978      	ldr	r0, [r7, #20]
 8005410:	f001 fdde 	bl	8006fd0 <vPortFree>
 8005414:	e001      	b.n	800541a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d017      	beq.n	8005450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	2300      	movs	r3, #0
 800542c:	9303      	str	r3, [sp, #12]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	9302      	str	r3, [sp, #8]
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f80e 	bl	8005460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005444:	69f8      	ldr	r0, [r7, #28]
 8005446:	f000 f8b1 	bl	80055ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800544a:	2301      	movs	r3, #1
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e002      	b.n	8005456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005456:	69bb      	ldr	r3, [r7, #24]
	}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	461a      	mov	r2, r3
 8005478:	21a5      	movs	r1, #165	; 0xa5
 800547a:	f001 ff01 	bl	8007280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005488:	3b01      	subs	r3, #1
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	617b      	str	r3, [r7, #20]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01f      	beq.n	80054fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	e012      	b.n	80054ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	7819      	ldrb	r1, [r3, #0]
 80054cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	3334      	adds	r3, #52	; 0x34
 80054d4:	460a      	mov	r2, r1
 80054d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d006      	beq.n	80054f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d9e9      	bls.n	80054c4 <prvInitialiseNewTask+0x64>
 80054f0:	e000      	b.n	80054f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80054f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054fc:	e003      	b.n	8005506 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	2b37      	cmp	r3, #55	; 0x37
 800550a:	d901      	bls.n	8005510 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800550c:	2337      	movs	r3, #55	; 0x37
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	2200      	movs	r2, #0
 8005520:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe ff8e 	bl	8004448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	3318      	adds	r3, #24
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe ff89 	bl	8004448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2200      	movs	r2, #0
 8005558:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	3354      	adds	r3, #84	; 0x54
 8005560:	2260      	movs	r2, #96	; 0x60
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f001 fe8b 	bl	8007280 <memset>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <prvInitialiseNewTask+0x140>)
 800556e:	659a      	str	r2, [r3, #88]	; 0x58
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	4a0c      	ldr	r2, [pc, #48]	; (80055a4 <prvInitialiseNewTask+0x144>)
 8005574:	65da      	str	r2, [r3, #92]	; 0x5c
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <prvInitialiseNewTask+0x148>)
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	69b8      	ldr	r0, [r7, #24]
 8005582:	f001 fa0b 	bl	800699c <pxPortInitialiseStack>
 8005586:	4602      	mov	r2, r0
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005598:	bf00      	nop
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	08007d90 	.word	0x08007d90
 80055a4:	08007db0 	.word	0x08007db0
 80055a8:	08007d70 	.word	0x08007d70

080055ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055b4:	f001 fb1e 	bl	8006bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055b8:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <prvAddNewTaskToReadyList+0xc4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a2c      	ldr	r2, [pc, #176]	; (8005670 <prvAddNewTaskToReadyList+0xc4>)
 80055c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055c2:	4b2c      	ldr	r3, [pc, #176]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ca:	4a2a      	ldr	r2, [pc, #168]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d0:	4b27      	ldr	r3, [pc, #156]	; (8005670 <prvAddNewTaskToReadyList+0xc4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d110      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055d8:	f000 fbf2 	bl	8005dc0 <prvInitialiseTaskLists>
 80055dc:	e00d      	b.n	80055fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055de:	4b26      	ldr	r3, [pc, #152]	; (8005678 <prvAddNewTaskToReadyList+0xcc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055e6:	4b23      	ldr	r3, [pc, #140]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d802      	bhi.n	80055fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055f4:	4a1f      	ldr	r2, [pc, #124]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055fa:	4b20      	ldr	r3, [pc, #128]	; (800567c <prvAddNewTaskToReadyList+0xd0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a1e      	ldr	r2, [pc, #120]	; (800567c <prvAddNewTaskToReadyList+0xd0>)
 8005602:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <prvAddNewTaskToReadyList+0xd0>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <prvAddNewTaskToReadyList+0xd4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d903      	bls.n	8005620 <prvAddNewTaskToReadyList+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a18      	ldr	r2, [pc, #96]	; (8005680 <prvAddNewTaskToReadyList+0xd4>)
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <prvAddNewTaskToReadyList+0xd8>)
 800562e:	441a      	add	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fe ff13 	bl	8004462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800563c:	f001 fb0a 	bl	8006c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <prvAddNewTaskToReadyList+0xcc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00e      	beq.n	8005666 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvAddNewTaskToReadyList+0xc8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	429a      	cmp	r2, r3
 8005654:	d207      	bcs.n	8005666 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <prvAddNewTaskToReadyList+0xdc>)
 8005658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20001150 	.word	0x20001150
 8005674:	20000c7c 	.word	0x20000c7c
 8005678:	2000115c 	.word	0x2000115c
 800567c:	2000116c 	.word	0x2000116c
 8005680:	20001158 	.word	0x20001158
 8005684:	20000c80 	.word	0x20000c80
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800569a:	463a      	mov	r2, r7
 800569c:	1d39      	adds	r1, r7, #4
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fe7c 	bl	80043a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	9202      	str	r2, [sp, #8]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	460a      	mov	r2, r1
 80056ba:	4924      	ldr	r1, [pc, #144]	; (800574c <vTaskStartScheduler+0xc0>)
 80056bc:	4824      	ldr	r0, [pc, #144]	; (8005750 <vTaskStartScheduler+0xc4>)
 80056be:	f7ff fe2d 	bl	800531c <xTaskCreateStatic>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4a23      	ldr	r2, [pc, #140]	; (8005754 <vTaskStartScheduler+0xc8>)
 80056c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056c8:	4b22      	ldr	r3, [pc, #136]	; (8005754 <vTaskStartScheduler+0xc8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e001      	b.n	80056da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056e0:	f000 fe0e 	bl	8006300 <xTimerCreateTimerTask>
 80056e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d11b      	bne.n	8005724 <vTaskStartScheduler+0x98>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
}
 80056fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <vTaskStartScheduler+0xcc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3354      	adds	r3, #84	; 0x54
 8005706:	4a15      	ldr	r2, [pc, #84]	; (800575c <vTaskStartScheduler+0xd0>)
 8005708:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <vTaskStartScheduler+0xd4>)
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <vTaskStartScheduler+0xd8>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <vTaskStartScheduler+0xdc>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800571e:	f001 f9c7 	bl	8006ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005722:	e00e      	b.n	8005742 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d10a      	bne.n	8005742 <vTaskStartScheduler+0xb6>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	60fb      	str	r3, [r7, #12]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <vTaskStartScheduler+0xb4>
}
 8005742:	bf00      	nop
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	08007ca0 	.word	0x08007ca0
 8005750:	08005d91 	.word	0x08005d91
 8005754:	20001174 	.word	0x20001174
 8005758:	20000c7c 	.word	0x20000c7c
 800575c:	20000014 	.word	0x20000014
 8005760:	20001170 	.word	0x20001170
 8005764:	2000115c 	.word	0x2000115c
 8005768:	20001154 	.word	0x20001154

0800576c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <vTaskSuspendAll+0x18>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a03      	ldr	r2, [pc, #12]	; (8005784 <vTaskSuspendAll+0x18>)
 8005778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800577a:	bf00      	nop
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20001178 	.word	0x20001178

08005788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005796:	4b42      	ldr	r3, [pc, #264]	; (80058a0 <xTaskResumeAll+0x118>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	603b      	str	r3, [r7, #0]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057b4:	f001 fa1e 	bl	8006bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057b8:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <xTaskResumeAll+0x118>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <xTaskResumeAll+0x118>)
 80057c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <xTaskResumeAll+0x118>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d162      	bne.n	8005890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ca:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <xTaskResumeAll+0x11c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d05e      	beq.n	8005890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d2:	e02f      	b.n	8005834 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <xTaskResumeAll+0x120>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3318      	adds	r3, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fe9b 	bl	800451c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fe96 	bl	800451c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <xTaskResumeAll+0x124>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d903      	bls.n	8005804 <xTaskResumeAll+0x7c>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <xTaskResumeAll+0x124>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <xTaskResumeAll+0x128>)
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3304      	adds	r3, #4
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe fe21 	bl	8004462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <xTaskResumeAll+0x12c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	429a      	cmp	r2, r3
 800582c:	d302      	bcc.n	8005834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <xTaskResumeAll+0x130>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <xTaskResumeAll+0x120>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1cb      	bne.n	80057d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005842:	f000 fb5f 	bl	8005f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <xTaskResumeAll+0x134>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005852:	f000 f847 	bl	80058e4 <xTaskIncrementTick>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <xTaskResumeAll+0x130>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3b01      	subs	r3, #1
 8005866:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f1      	bne.n	8005852 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <xTaskResumeAll+0x134>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <xTaskResumeAll+0x130>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800587c:	2301      	movs	r3, #1
 800587e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <xTaskResumeAll+0x138>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005890:	f001 f9e0 	bl	8006c54 <vPortExitCritical>

	return xAlreadyYielded;
 8005894:	68bb      	ldr	r3, [r7, #8]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20001178 	.word	0x20001178
 80058a4:	20001150 	.word	0x20001150
 80058a8:	20001110 	.word	0x20001110
 80058ac:	20001158 	.word	0x20001158
 80058b0:	20000c80 	.word	0x20000c80
 80058b4:	20000c7c 	.word	0x20000c7c
 80058b8:	20001164 	.word	0x20001164
 80058bc:	20001160 	.word	0x20001160
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <xTaskGetTickCount+0x1c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058d0:	687b      	ldr	r3, [r7, #4]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20001154 	.word	0x20001154

080058e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	4b4f      	ldr	r3, [pc, #316]	; (8005a2c <xTaskIncrementTick+0x148>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 808f 	bne.w	8005a16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f8:	4b4d      	ldr	r3, [pc, #308]	; (8005a30 <xTaskIncrementTick+0x14c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005900:	4a4b      	ldr	r2, [pc, #300]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d120      	bne.n	800594e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800590c:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <xTaskIncrementTick+0x150>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <xTaskIncrementTick+0x48>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	603b      	str	r3, [r7, #0]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xTaskIncrementTick+0x46>
 800592c:	4b41      	ldr	r3, [pc, #260]	; (8005a34 <xTaskIncrementTick+0x150>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a3f      	ldr	r2, [pc, #252]	; (8005a34 <xTaskIncrementTick+0x150>)
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4a3f      	ldr	r2, [pc, #252]	; (8005a38 <xTaskIncrementTick+0x154>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b3e      	ldr	r3, [pc, #248]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a3d      	ldr	r2, [pc, #244]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	f000 fadb 	bl	8005f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800594e:	4b3c      	ldr	r3, [pc, #240]	; (8005a40 <xTaskIncrementTick+0x15c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d349      	bcc.n	80059ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005958:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <xTaskIncrementTick+0x150>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <xTaskIncrementTick+0x15c>)
 8005964:	f04f 32ff 	mov.w	r2, #4294967295
 8005968:	601a      	str	r2, [r3, #0]
					break;
 800596a:	e03f      	b.n	80059ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596c:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <xTaskIncrementTick+0x150>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d203      	bcs.n	800598c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005984:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <xTaskIncrementTick+0x15c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800598a:	e02f      	b.n	80059ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fdc3 	bl	800451c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3318      	adds	r3, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fdba 	bl	800451c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d903      	bls.n	80059bc <xTaskIncrementTick+0xd8>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059ca:	441a      	add	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7fe fd45 	bl	8004462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <xTaskIncrementTick+0x168>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d3b8      	bcc.n	8005958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ea:	e7b5      	b.n	8005958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ec:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <xTaskIncrementTick+0x168>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4915      	ldr	r1, [pc, #84]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d901      	bls.n	8005a08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <xTaskIncrementTick+0x16c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e004      	b.n	8005a20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <xTaskIncrementTick+0x170>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <xTaskIncrementTick+0x170>)
 8005a1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a20:	697b      	ldr	r3, [r7, #20]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20001178 	.word	0x20001178
 8005a30:	20001154 	.word	0x20001154
 8005a34:	20001108 	.word	0x20001108
 8005a38:	2000110c 	.word	0x2000110c
 8005a3c:	20001168 	.word	0x20001168
 8005a40:	20001170 	.word	0x20001170
 8005a44:	20001158 	.word	0x20001158
 8005a48:	20000c80 	.word	0x20000c80
 8005a4c:	20000c7c 	.word	0x20000c7c
 8005a50:	20001164 	.word	0x20001164
 8005a54:	20001160 	.word	0x20001160

08005a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <vTaskSwitchContext+0xb0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a66:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <vTaskSwitchContext+0xb4>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a6c:	e046      	b.n	8005afc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <vTaskSwitchContext+0xb4>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a74:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <vTaskSwitchContext+0xb8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e010      	b.n	8005a9e <vTaskSwitchContext+0x46>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	607b      	str	r3, [r7, #4]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <vTaskSwitchContext+0x3e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	491d      	ldr	r1, [pc, #116]	; (8005b14 <vTaskSwitchContext+0xbc>)
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0e4      	beq.n	8005a7c <vTaskSwitchContext+0x24>
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <vTaskSwitchContext+0xbc>)
 8005abe:	4413      	add	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d104      	bne.n	8005ae2 <vTaskSwitchContext+0x8a>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <vTaskSwitchContext+0xc0>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <vTaskSwitchContext+0xb8>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <vTaskSwitchContext+0xc0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3354      	adds	r3, #84	; 0x54
 8005af8:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <vTaskSwitchContext+0xc4>)
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20001178 	.word	0x20001178
 8005b0c:	20001164 	.word	0x20001164
 8005b10:	20001158 	.word	0x20001158
 8005b14:	20000c80 	.word	0x20000c80
 8005b18:	20000c7c 	.word	0x20000c7c
 8005b1c:	20000014 	.word	0x20000014

08005b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b46:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <vTaskPlaceOnEventList+0x44>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fe fcab 	bl	80044aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b54:	2101      	movs	r1, #1
 8005b56:	6838      	ldr	r0, [r7, #0]
 8005b58:	f000 fb7e 	bl	8006258 <prvAddCurrentTaskToDelayedList>
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20000c7c 	.word	0x20000c7c

08005b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	617b      	str	r3, [r7, #20]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3318      	adds	r3, #24
 8005b96:	4619      	mov	r1, r3
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7fe fc62 	bl	8004462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	f000 fb53 	bl	8006258 <prvAddCurrentTaskToDelayedList>
	}
 8005bb2:	bf00      	nop
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000c7c 	.word	0x20000c7c

08005bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60fb      	str	r3, [r7, #12]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	3318      	adds	r3, #24
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fc93 	bl	800451c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <xTaskRemoveFromEventList+0xb0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d11d      	bne.n	8005c3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fc8a 	bl	800451c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <xTaskRemoveFromEventList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <xTaskRemoveFromEventList+0x5c>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <xTaskRemoveFromEventList+0xb4>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <xTaskRemoveFromEventList+0xb8>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fc15 	bl	8004462 <vListInsertEnd>
 8005c38:	e005      	b.n	8005c46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3318      	adds	r3, #24
 8005c3e:	4619      	mov	r1, r3
 8005c40:	480e      	ldr	r0, [pc, #56]	; (8005c7c <xTaskRemoveFromEventList+0xbc>)
 8005c42:	f7fe fc0e 	bl	8004462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <xTaskRemoveFromEventList+0xc0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d905      	bls.n	8005c60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <xTaskRemoveFromEventList+0xc4>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e001      	b.n	8005c64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20001178 	.word	0x20001178
 8005c74:	20001158 	.word	0x20001158
 8005c78:	20000c80 	.word	0x20000c80
 8005c7c:	20001110 	.word	0x20001110
 8005c80:	20000c7c 	.word	0x20000c7c
 8005c84:	20001164 	.word	0x20001164

08005c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <vTaskInternalSetTimeOutState+0x24>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <vTaskInternalSetTimeOutState+0x28>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	605a      	str	r2, [r3, #4]
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20001168 	.word	0x20001168
 8005cb0:	20001154 	.word	0x20001154

08005cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	613b      	str	r3, [r7, #16]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cf6:	f000 ff7d 	bl	8006bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <xTaskCheckForTimeOut+0xbc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d102      	bne.n	8005d1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	e023      	b.n	8005d62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <xTaskCheckForTimeOut+0xc0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d007      	beq.n	8005d36 <xTaskCheckForTimeOut+0x82>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	e015      	b.n	8005d62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d20b      	bcs.n	8005d58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff9b 	bl	8005c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	e004      	b.n	8005d62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d62:	f000 ff77 	bl	8006c54 <vPortExitCritical>

	return xReturn;
 8005d66:	69fb      	ldr	r3, [r7, #28]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20001154 	.word	0x20001154
 8005d74:	20001168 	.word	0x20001168

08005d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <vTaskMissedYield+0x14>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20001164 	.word	0x20001164

08005d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d98:	f000 f852 	bl	8005e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <prvIdleTask+0x28>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d9f9      	bls.n	8005d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <prvIdleTask+0x2c>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005db4:	e7f0      	b.n	8005d98 <prvIdleTask+0x8>
 8005db6:	bf00      	nop
 8005db8:	20000c80 	.word	0x20000c80
 8005dbc:	e000ed04 	.word	0xe000ed04

08005dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	607b      	str	r3, [r7, #4]
 8005dca:	e00c      	b.n	8005de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <prvInitialiseTaskLists+0x60>)
 8005dd8:	4413      	add	r3, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fb14 	bl	8004408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3301      	adds	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b37      	cmp	r3, #55	; 0x37
 8005dea:	d9ef      	bls.n	8005dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dec:	480d      	ldr	r0, [pc, #52]	; (8005e24 <prvInitialiseTaskLists+0x64>)
 8005dee:	f7fe fb0b 	bl	8004408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005df2:	480d      	ldr	r0, [pc, #52]	; (8005e28 <prvInitialiseTaskLists+0x68>)
 8005df4:	f7fe fb08 	bl	8004408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005df8:	480c      	ldr	r0, [pc, #48]	; (8005e2c <prvInitialiseTaskLists+0x6c>)
 8005dfa:	f7fe fb05 	bl	8004408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dfe:	480c      	ldr	r0, [pc, #48]	; (8005e30 <prvInitialiseTaskLists+0x70>)
 8005e00:	f7fe fb02 	bl	8004408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e04:	480b      	ldr	r0, [pc, #44]	; (8005e34 <prvInitialiseTaskLists+0x74>)
 8005e06:	f7fe faff 	bl	8004408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <prvInitialiseTaskLists+0x78>)
 8005e0c:	4a05      	ldr	r2, [pc, #20]	; (8005e24 <prvInitialiseTaskLists+0x64>)
 8005e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <prvInitialiseTaskLists+0x7c>)
 8005e12:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <prvInitialiseTaskLists+0x68>)
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000c80 	.word	0x20000c80
 8005e24:	200010e0 	.word	0x200010e0
 8005e28:	200010f4 	.word	0x200010f4
 8005e2c:	20001110 	.word	0x20001110
 8005e30:	20001124 	.word	0x20001124
 8005e34:	2000113c 	.word	0x2000113c
 8005e38:	20001108 	.word	0x20001108
 8005e3c:	2000110c 	.word	0x2000110c

08005e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e46:	e019      	b.n	8005e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e48:	f000 fed4 	bl	8006bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <prvCheckTasksWaitingTermination+0x50>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fb5f 	bl	800451c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <prvCheckTasksWaitingTermination+0x54>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <prvCheckTasksWaitingTermination+0x54>)
 8005e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <prvCheckTasksWaitingTermination+0x58>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <prvCheckTasksWaitingTermination+0x58>)
 8005e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e72:	f000 feef 	bl	8006c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f810 	bl	8005e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <prvCheckTasksWaitingTermination+0x58>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e1      	bne.n	8005e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20001124 	.word	0x20001124
 8005e94:	20001150 	.word	0x20001150
 8005e98:	20001138 	.word	0x20001138

08005e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3354      	adds	r3, #84	; 0x54
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fa93 	bl	80073d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d108      	bne.n	8005eca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f887 	bl	8006fd0 <vPortFree>
				vPortFree( pxTCB );
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 f884 	bl	8006fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ec8:	e018      	b.n	8005efc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d103      	bne.n	8005edc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 f87b 	bl	8006fd0 <vPortFree>
	}
 8005eda:	e00f      	b.n	8005efc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d00a      	beq.n	8005efc <prvDeleteTCB+0x60>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60fb      	str	r3, [r7, #12]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <prvDeleteTCB+0x5e>
	}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f1c:	e008      	b.n	8005f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20001108 	.word	0x20001108
 8005f40:	20001170 	.word	0x20001170

08005f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <xTaskGetSchedulerState+0x34>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f52:	2301      	movs	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	e008      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <xTaskGetSchedulerState+0x38>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f60:	2302      	movs	r3, #2
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	e001      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f6a:	687b      	ldr	r3, [r7, #4]
	}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	2000115c 	.word	0x2000115c
 8005f7c:	20001178 	.word	0x20001178

08005f80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d051      	beq.n	800603a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <xTaskPriorityInherit+0xc4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d241      	bcs.n	8006028 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	db06      	blt.n	8005fba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <xTaskPriorityInherit+0xc4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6959      	ldr	r1, [r3, #20]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <xTaskPriorityInherit+0xc8>)
 8005fcc:	4413      	add	r3, r2
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d122      	bne.n	8006018 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe faa0 	bl	800451c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <xTaskPriorityInherit+0xc4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <xTaskPriorityInherit+0xcc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d903      	bls.n	8005ffa <xTaskPriorityInherit+0x7a>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a15      	ldr	r2, [pc, #84]	; (800604c <xTaskPriorityInherit+0xcc>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4a10      	ldr	r2, [pc, #64]	; (8006048 <xTaskPriorityInherit+0xc8>)
 8006008:	441a      	add	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7fe fa26 	bl	8004462 <vListInsertEnd>
 8006016:	e004      	b.n	8006022 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <xTaskPriorityInherit+0xc4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006022:	2301      	movs	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e008      	b.n	800603a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <xTaskPriorityInherit+0xc4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	429a      	cmp	r2, r3
 8006034:	d201      	bcs.n	800603a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800603a:	68fb      	ldr	r3, [r7, #12]
	}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000c7c 	.word	0x20000c7c
 8006048:	20000c80 	.word	0x20000c80
 800604c:	20001158 	.word	0x20001158

08006050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d056      	beq.n	8006114 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006066:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <xTaskPriorityDisinherit+0xd0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d00a      	beq.n	8006086 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	1e5a      	subs	r2, r3, #1
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d02c      	beq.n	8006114 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d128      	bne.n	8006114 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fa28 	bl	800451c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <xTaskPriorityDisinherit+0xd4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d903      	bls.n	80060f4 <xTaskPriorityDisinherit+0xa4>
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <xTaskPriorityDisinherit+0xd4>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4a09      	ldr	r2, [pc, #36]	; (8006128 <xTaskPriorityDisinherit+0xd8>)
 8006102:	441a      	add	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f7fe f9a9 	bl	8004462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006114:	697b      	ldr	r3, [r7, #20]
	}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000c7c 	.word	0x20000c7c
 8006124:	20001158 	.word	0x20001158
 8006128:	20000c80 	.word	0x20000c80

0800612c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800613a:	2301      	movs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d06a      	beq.n	800621a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d902      	bls.n	8006172 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e002      	b.n	8006178 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006176:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	429a      	cmp	r2, r3
 8006180:	d04b      	beq.n	800621a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	429a      	cmp	r2, r3
 800618a:	d146      	bne.n	800621a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	429a      	cmp	r2, r3
 8006194:	d10a      	bne.n	80061ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60bb      	str	r3, [r7, #8]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	db04      	blt.n	80061ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	6959      	ldr	r1, [r3, #20]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4a13      	ldr	r2, [pc, #76]	; (8006228 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061da:	4413      	add	r3, r2
 80061dc:	4299      	cmp	r1, r3
 80061de:	d11c      	bne.n	800621a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe f999 	bl	800451c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d903      	bls.n	80061fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	4a0c      	ldr	r2, [pc, #48]	; (800622c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4a07      	ldr	r2, [pc, #28]	; (8006228 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800620c:	441a      	add	r2, r3
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f7fe f924 	bl	8004462 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800621a:	bf00      	nop
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000c7c 	.word	0x20000c7c
 8006228:	20000c80 	.word	0x20000c80
 800622c:	20001158 	.word	0x20001158

08006230 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <pvTaskIncrementMutexHeldCount+0x24>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <pvTaskIncrementMutexHeldCount+0x24>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006242:	3201      	adds	r2, #1
 8006244:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006246:	4b03      	ldr	r3, [pc, #12]	; (8006254 <pvTaskIncrementMutexHeldCount+0x24>)
 8006248:	681b      	ldr	r3, [r3, #0]
	}
 800624a:	4618      	mov	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20000c7c 	.word	0x20000c7c

08006258 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006262:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006268:	4b20      	ldr	r3, [pc, #128]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe f954 	bl	800451c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d10a      	bne.n	8006292 <prvAddCurrentTaskToDelayedList+0x3a>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006282:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4819      	ldr	r0, [pc, #100]	; (80062f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800628c:	f7fe f8e9 	bl	8004462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006290:	e026      	b.n	80062e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d209      	bcs.n	80062be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe f8f7 	bl	80044aa <vListInsert>
}
 80062bc:	e010      	b.n	80062e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062be:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <prvAddCurrentTaskToDelayedList+0x94>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f7fe f8ed 	bl	80044aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d202      	bcs.n	80062e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6013      	str	r3, [r2, #0]
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20001154 	.word	0x20001154
 80062ec:	20000c7c 	.word	0x20000c7c
 80062f0:	2000113c 	.word	0x2000113c
 80062f4:	2000110c 	.word	0x2000110c
 80062f8:	20001108 	.word	0x20001108
 80062fc:	20001170 	.word	0x20001170

08006300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800630a:	f000 fb07 	bl	800691c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <xTimerCreateTimerTask+0x80>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d021      	beq.n	800635a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	f107 0108 	add.w	r1, r7, #8
 8006324:	f107 030c 	add.w	r3, r7, #12
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe f853 	bl	80043d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	9202      	str	r2, [sp, #8]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	2302      	movs	r3, #2
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	460a      	mov	r2, r1
 8006340:	4910      	ldr	r1, [pc, #64]	; (8006384 <xTimerCreateTimerTask+0x84>)
 8006342:	4811      	ldr	r0, [pc, #68]	; (8006388 <xTimerCreateTimerTask+0x88>)
 8006344:	f7fe ffea 	bl	800531c <xTaskCreateStatic>
 8006348:	4603      	mov	r3, r0
 800634a:	4a10      	ldr	r2, [pc, #64]	; (800638c <xTimerCreateTimerTask+0x8c>)
 800634c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <xTimerCreateTimerTask+0x8c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006376:	697b      	ldr	r3, [r7, #20]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	200011ac 	.word	0x200011ac
 8006384:	08007ca8 	.word	0x08007ca8
 8006388:	080064c5 	.word	0x080064c5
 800638c:	200011b0 	.word	0x200011b0

08006390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xTimerGenericCommand+0x2e>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063be:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <xTimerGenericCommand+0x98>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d02a      	beq.n	800641c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b05      	cmp	r3, #5
 80063d6:	dc18      	bgt.n	800640a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063d8:	f7ff fdb4 	bl	8005f44 <xTaskGetSchedulerState>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d109      	bne.n	80063f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <xTimerGenericCommand+0x98>)
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	f107 0110 	add.w	r1, r7, #16
 80063ea:	2300      	movs	r3, #0
 80063ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ee:	f7fe f9fd 	bl	80047ec <xQueueGenericSend>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24
 80063f4:	e012      	b.n	800641c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <xTimerGenericCommand+0x98>)
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f107 0110 	add.w	r1, r7, #16
 80063fe:	2300      	movs	r3, #0
 8006400:	2200      	movs	r2, #0
 8006402:	f7fe f9f3 	bl	80047ec <xQueueGenericSend>
 8006406:	6278      	str	r0, [r7, #36]	; 0x24
 8006408:	e008      	b.n	800641c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <xTimerGenericCommand+0x98>)
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	f107 0110 	add.w	r1, r7, #16
 8006412:	2300      	movs	r3, #0
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	f7fe fae7 	bl	80049e8 <xQueueGenericSendFromISR>
 800641a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800641e:	4618      	mov	r0, r3
 8006420:	3728      	adds	r7, #40	; 0x28
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200011ac 	.word	0x200011ac

0800642c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <prvProcessExpiredTimer+0x94>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe f869 	bl	800451c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d022      	beq.n	800649e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	18d1      	adds	r1, r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	6978      	ldr	r0, [r7, #20]
 8006466:	f000 f8d1 	bl	800660c <prvInsertTimerInActiveList>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01f      	beq.n	80064b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	2100      	movs	r1, #0
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff ff88 	bl	8006390 <xTimerGenericCommand>
 8006480:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d113      	bne.n	80064b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	6978      	ldr	r0, [r7, #20]
 80064b6:	4798      	blx	r3
}
 80064b8:	bf00      	nop
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	200011a4 	.word	0x200011a4

080064c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064cc:	f107 0308 	add.w	r3, r7, #8
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f857 	bl	8006584 <prvGetNextExpireTime>
 80064d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4619      	mov	r1, r3
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f803 	bl	80064e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064e2:	f000 f8d5 	bl	8006690 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064e6:	e7f1      	b.n	80064cc <prvTimerTask+0x8>

080064e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064f2:	f7ff f93b 	bl	800576c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f866 	bl	80065cc <prvSampleTimeNow>
 8006500:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d130      	bne.n	800656a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <prvProcessTimerOrBlockTask+0x3c>
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	429a      	cmp	r2, r3
 8006514:	d806      	bhi.n	8006524 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006516:	f7ff f937 	bl	8005788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ff85 	bl	800642c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006522:	e024      	b.n	800656e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <prvProcessTimerOrBlockTask+0x90>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <prvProcessTimerOrBlockTask+0x50>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <prvProcessTimerOrBlockTask+0x52>
 8006538:	2300      	movs	r3, #0
 800653a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <prvProcessTimerOrBlockTask+0x94>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	4619      	mov	r1, r3
 800654a:	f7fe feb3 	bl	80052b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800654e:	f7ff f91b 	bl	8005788 <xTaskResumeAll>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006558:	4b09      	ldr	r3, [pc, #36]	; (8006580 <prvProcessTimerOrBlockTask+0x98>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
}
 8006568:	e001      	b.n	800656e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800656a:	f7ff f90d 	bl	8005788 <xTaskResumeAll>
}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200011a8 	.word	0x200011a8
 800657c:	200011ac 	.word	0x200011ac
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800658c:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <prvGetNextExpireTime+0x44>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <prvGetNextExpireTime+0x16>
 8006596:	2201      	movs	r2, #1
 8006598:	e000      	b.n	800659c <prvGetNextExpireTime+0x18>
 800659a:	2200      	movs	r2, #0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <prvGetNextExpireTime+0x44>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e001      	b.n	80065b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065b8:	68fb      	ldr	r3, [r7, #12]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	200011a4 	.word	0x200011a4

080065cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065d4:	f7ff f976 	bl	80058c4 <xTaskGetTickCount>
 80065d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <prvSampleTimeNow+0x3c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d205      	bcs.n	80065f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065e4:	f000 f936 	bl	8006854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065f6:	4a04      	ldr	r2, [pc, #16]	; (8006608 <prvSampleTimeNow+0x3c>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200011b4 	.word	0x200011b4

0800660c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d812      	bhi.n	8006658 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	1ad2      	subs	r2, r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e01b      	b.n	800667e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <prvInsertTimerInActiveList+0x7c>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fd ff2a 	bl	80044aa <vListInsert>
 8006656:	e012      	b.n	800667e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d206      	bcs.n	800666e <prvInsertTimerInActiveList+0x62>
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e007      	b.n	800667e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <prvInsertTimerInActiveList+0x80>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fd ff16 	bl	80044aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800667e:	697b      	ldr	r3, [r7, #20]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	200011a8 	.word	0x200011a8
 800668c:	200011a4 	.word	0x200011a4

08006690 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08e      	sub	sp, #56	; 0x38
 8006694:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006696:	e0ca      	b.n	800682e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da18      	bge.n	80066d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	3304      	adds	r3, #4
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	61fb      	str	r3, [r7, #28]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c6:	6850      	ldr	r0, [r2, #4]
 80066c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ca:	6892      	ldr	r2, [r2, #8]
 80066cc:	4611      	mov	r1, r2
 80066ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f2c0 80aa 	blt.w	800682c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	3304      	adds	r3, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fd ff17 	bl	800451c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066ee:	463b      	mov	r3, r7
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ff6b 	bl	80065cc <prvSampleTimeNow>
 80066f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b09      	cmp	r3, #9
 80066fc:	f200 8097 	bhi.w	800682e <prvProcessReceivedCommands+0x19e>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <prvProcessReceivedCommands+0x78>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	08006731 	.word	0x08006731
 800670c:	08006731 	.word	0x08006731
 8006710:	08006731 	.word	0x08006731
 8006714:	080067a5 	.word	0x080067a5
 8006718:	080067b9 	.word	0x080067b9
 800671c:	08006803 	.word	0x08006803
 8006720:	08006731 	.word	0x08006731
 8006724:	08006731 	.word	0x08006731
 8006728:	080067a5 	.word	0x080067a5
 800672c:	080067b9 	.word	0x080067b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	18d1      	adds	r1, r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006750:	f7ff ff5c 	bl	800660c <prvInsertTimerInActiveList>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d069      	beq.n	800682e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006760:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05e      	beq.n	800682e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	441a      	add	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	2100      	movs	r1, #0
 8006780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006782:	f7ff fe05 	bl	8006390 <xTimerGenericCommand>
 8006786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d14f      	bne.n	800682e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	61bb      	str	r3, [r7, #24]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067b6:	e03a      	b.n	800682e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	617b      	str	r3, [r7, #20]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	18d1      	adds	r1, r2, r3
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fc:	f7ff ff06 	bl	800660c <prvInsertTimerInActiveList>
					break;
 8006800:	e015      	b.n	800682e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006812:	f000 fbdd 	bl	8006fd0 <vPortFree>
 8006816:	e00a      	b.n	800682e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	b2da      	uxtb	r2, r3
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800682a:	e000      	b.n	800682e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800682c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <prvProcessReceivedCommands+0x1c0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	1d39      	adds	r1, r7, #4
 8006834:	2200      	movs	r2, #0
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe f9fe 	bl	8004c38 <xQueueReceive>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	f47f af2a 	bne.w	8006698 <prvProcessReceivedCommands+0x8>
	}
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	3730      	adds	r7, #48	; 0x30
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	200011ac 	.word	0x200011ac

08006854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800685a:	e048      	b.n	80068ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <prvSwitchTimerLists+0xc0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006866:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <prvSwitchTimerLists+0xc0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3304      	adds	r3, #4
 8006874:	4618      	mov	r0, r3
 8006876:	f7fd fe51 	bl	800451c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02e      	beq.n	80068ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d90e      	bls.n	80068c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ae:	4b19      	ldr	r3, [pc, #100]	; (8006914 <prvSwitchTimerLists+0xc0>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7fd fdf6 	bl	80044aa <vListInsert>
 80068be:	e016      	b.n	80068ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	2100      	movs	r1, #0
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fd60 	bl	8006390 <xTimerGenericCommand>
 80068d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	603b      	str	r3, [r7, #0]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <prvSwitchTimerLists+0xc0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1b1      	bne.n	800685c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <prvSwitchTimerLists+0xc0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <prvSwitchTimerLists+0xc4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a04      	ldr	r2, [pc, #16]	; (8006914 <prvSwitchTimerLists+0xc0>)
 8006904:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006906:	4a04      	ldr	r2, [pc, #16]	; (8006918 <prvSwitchTimerLists+0xc4>)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	200011a4 	.word	0x200011a4
 8006918:	200011a8 	.word	0x200011a8

0800691c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006922:	f000 f967 	bl	8006bf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <prvCheckForValidListAndQueue+0x60>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d120      	bne.n	8006970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800692e:	4814      	ldr	r0, [pc, #80]	; (8006980 <prvCheckForValidListAndQueue+0x64>)
 8006930:	f7fd fd6a 	bl	8004408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006934:	4813      	ldr	r0, [pc, #76]	; (8006984 <prvCheckForValidListAndQueue+0x68>)
 8006936:	f7fd fd67 	bl	8004408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <prvCheckForValidListAndQueue+0x6c>)
 800693c:	4a10      	ldr	r2, [pc, #64]	; (8006980 <prvCheckForValidListAndQueue+0x64>)
 800693e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006940:	4b12      	ldr	r3, [pc, #72]	; (800698c <prvCheckForValidListAndQueue+0x70>)
 8006942:	4a10      	ldr	r2, [pc, #64]	; (8006984 <prvCheckForValidListAndQueue+0x68>)
 8006944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006946:	2300      	movs	r3, #0
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <prvCheckForValidListAndQueue+0x74>)
 800694c:	4a11      	ldr	r2, [pc, #68]	; (8006994 <prvCheckForValidListAndQueue+0x78>)
 800694e:	2110      	movs	r1, #16
 8006950:	200a      	movs	r0, #10
 8006952:	f7fd fe75 	bl	8004640 <xQueueGenericCreateStatic>
 8006956:	4603      	mov	r3, r0
 8006958:	4a08      	ldr	r2, [pc, #32]	; (800697c <prvCheckForValidListAndQueue+0x60>)
 800695a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <prvCheckForValidListAndQueue+0x60>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <prvCheckForValidListAndQueue+0x60>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	490b      	ldr	r1, [pc, #44]	; (8006998 <prvCheckForValidListAndQueue+0x7c>)
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fc78 	bl	8005260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006970:	f000 f970 	bl	8006c54 <vPortExitCritical>
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	200011ac 	.word	0x200011ac
 8006980:	2000117c 	.word	0x2000117c
 8006984:	20001190 	.word	0x20001190
 8006988:	200011a4 	.word	0x200011a4
 800698c:	200011a8 	.word	0x200011a8
 8006990:	20001258 	.word	0x20001258
 8006994:	200011b8 	.word	0x200011b8
 8006998:	08007cb0 	.word	0x08007cb0

0800699c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3b04      	subs	r3, #4
 80069ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3b04      	subs	r3, #4
 80069ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f023 0201 	bic.w	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069cc:	4a0c      	ldr	r2, [pc, #48]	; (8006a00 <pxPortInitialiseStack+0x64>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3b14      	subs	r3, #20
 80069d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f06f 0202 	mvn.w	r2, #2
 80069ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b20      	subs	r3, #32
 80069f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	08006a05 	.word	0x08006a05

08006a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <prvTaskExitError+0x54>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d00a      	beq.n	8006a2e <prvTaskExitError+0x2a>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <prvTaskExitError+0x28>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60bb      	str	r3, [r7, #8]
}
 8006a40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a42:	bf00      	nop
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0fc      	beq.n	8006a44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	20000010 	.word	0x20000010
 8006a5c:	00000000 	.word	0x00000000

08006a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <pxCurrentTCBConst2>)
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	6808      	ldr	r0, [r1, #0]
 8006a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	f380 8809 	msr	PSP, r0
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	4770      	bx	lr
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst2>:
 8006a80:	20000c7c 	.word	0x20000c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a88:	4808      	ldr	r0, [pc, #32]	; (8006aac <prvPortStartFirstTask+0x24>)
 8006a8a:	6800      	ldr	r0, [r0, #0]
 8006a8c:	6800      	ldr	r0, [r0, #0]
 8006a8e:	f380 8808 	msr	MSP, r0
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f380 8814 	msr	CONTROL, r0
 8006a9a:	b662      	cpsie	i
 8006a9c:	b661      	cpsie	f
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	df00      	svc	0
 8006aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006aaa:	bf00      	nop
 8006aac:	e000ed08 	.word	0xe000ed08

08006ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ab6:	4b46      	ldr	r3, [pc, #280]	; (8006bd0 <xPortStartScheduler+0x120>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a46      	ldr	r2, [pc, #280]	; (8006bd4 <xPortStartScheduler+0x124>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10a      	bne.n	8006ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	613b      	str	r3, [r7, #16]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ad6:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <xPortStartScheduler+0x120>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <xPortStartScheduler+0x128>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10a      	bne.n	8006af6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	60fb      	str	r3, [r7, #12]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006af6:	4b39      	ldr	r3, [pc, #228]	; (8006bdc <xPortStartScheduler+0x12c>)
 8006af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	22ff      	movs	r2, #255	; 0xff
 8006b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <xPortStartScheduler+0x130>)
 8006b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b1e:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b24:	e009      	b.n	8006b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b26:	4b2f      	ldr	r3, [pc, #188]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d0ef      	beq.n	8006b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b46:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1c3 0307 	rsb	r3, r3, #7
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d00a      	beq.n	8006b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60bb      	str	r3, [r7, #8]
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b68:	4b1e      	ldr	r3, [pc, #120]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b72:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	; (8006be4 <xPortStartScheduler+0x134>)
 8006b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b86:	4b18      	ldr	r3, [pc, #96]	; (8006be8 <xPortStartScheduler+0x138>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <xPortStartScheduler+0x138>)
 8006b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <xPortStartScheduler+0x138>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <xPortStartScheduler+0x138>)
 8006b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b9e:	f000 f8dd 	bl	8006d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <xPortStartScheduler+0x13c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ba8:	f000 f8fc 	bl	8006da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bac:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <xPortStartScheduler+0x140>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0f      	ldr	r2, [pc, #60]	; (8006bf0 <xPortStartScheduler+0x140>)
 8006bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bb8:	f7ff ff66 	bl	8006a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bbc:	f7fe ff4c 	bl	8005a58 <vTaskSwitchContext>
	prvTaskExitError();
 8006bc0:	f7ff ff20 	bl	8006a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	e000ed00 	.word	0xe000ed00
 8006bd4:	410fc271 	.word	0x410fc271
 8006bd8:	410fc270 	.word	0x410fc270
 8006bdc:	e000e400 	.word	0xe000e400
 8006be0:	200012a8 	.word	0x200012a8
 8006be4:	200012ac 	.word	0x200012ac
 8006be8:	e000ed20 	.word	0xe000ed20
 8006bec:	20000010 	.word	0x20000010
 8006bf0:	e000ef34 	.word	0xe000ef34

08006bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
}
 8006c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <vPortEnterCritical+0x58>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3301      	adds	r3, #1
 8006c14:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <vPortEnterCritical+0x58>)
 8006c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c18:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <vPortEnterCritical+0x58>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10f      	bne.n	8006c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <vPortEnterCritical+0x5c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	603b      	str	r3, [r7, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <vPortEnterCritical+0x4a>
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000010 	.word	0x20000010
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c5a:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <vPortExitCritical+0x50>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <vPortExitCritical+0x24>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	607b      	str	r3, [r7, #4]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <vPortExitCritical+0x50>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <vPortExitCritical+0x50>)
 8006c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c82:	4b08      	ldr	r3, [pc, #32]	; (8006ca4 <vPortExitCritical+0x50>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <vPortExitCritical+0x42>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f383 8811 	msr	BASEPRI, r3
}
 8006c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000010 	.word	0x20000010
	...

08006cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cb0:	f3ef 8009 	mrs	r0, PSP
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <pxCurrentTCBConst>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	f01e 0f10 	tst.w	lr, #16
 8006cc0:	bf08      	it	eq
 8006cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	6010      	str	r0, [r2, #0]
 8006ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cd4:	f380 8811 	msr	BASEPRI, r0
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f7fe feba 	bl	8005a58 <vTaskSwitchContext>
 8006ce4:	f04f 0000 	mov.w	r0, #0
 8006ce8:	f380 8811 	msr	BASEPRI, r0
 8006cec:	bc09      	pop	{r0, r3}
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	6808      	ldr	r0, [r1, #0]
 8006cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf6:	f01e 0f10 	tst.w	lr, #16
 8006cfa:	bf08      	it	eq
 8006cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d00:	f380 8809 	msr	PSP, r0
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst>:
 8006d10:	20000c7c 	.word	0x20000c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	607b      	str	r3, [r7, #4]
}
 8006d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d32:	f7fe fdd7 	bl	80058e4 <xTaskIncrementTick>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <xPortSysTickHandler+0x40>)
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	2300      	movs	r3, #0
 8006d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f383 8811 	msr	BASEPRI, r3
}
 8006d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <vPortSetupTimerInterrupt+0x34>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <vPortSetupTimerInterrupt+0x38>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <vPortSetupTimerInterrupt+0x3c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <vPortSetupTimerInterrupt+0x40>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	099b      	lsrs	r3, r3, #6
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <vPortSetupTimerInterrupt+0x44>)
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d7e:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <vPortSetupTimerInterrupt+0x34>)
 8006d80:	2207      	movs	r2, #7
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	e000e010 	.word	0xe000e010
 8006d94:	e000e018 	.word	0xe000e018
 8006d98:	20000004 	.word	0x20000004
 8006d9c:	10624dd3 	.word	0x10624dd3
 8006da0:	e000e014 	.word	0xe000e014

08006da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006db4 <vPortEnableVFP+0x10>
 8006da8:	6801      	ldr	r1, [r0, #0]
 8006daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dae:	6001      	str	r1, [r0, #0]
 8006db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006db2:	bf00      	nop
 8006db4:	e000ed88 	.word	0xe000ed88

08006db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dbe:	f3ef 8305 	mrs	r3, IPSR
 8006dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b0f      	cmp	r3, #15
 8006dc8:	d914      	bls.n	8006df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dca:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <vPortValidateInterruptPriority+0x70>)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dd4:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <vPortValidateInterruptPriority+0x74>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	7afa      	ldrb	r2, [r7, #11]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d20a      	bcs.n	8006df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006df4:	4b0e      	ldr	r3, [pc, #56]	; (8006e30 <vPortValidateInterruptPriority+0x78>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <vPortValidateInterruptPriority+0x7c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d90a      	bls.n	8006e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	603b      	str	r3, [r7, #0]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <vPortValidateInterruptPriority+0x60>
	}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	e000e3f0 	.word	0xe000e3f0
 8006e2c:	200012a8 	.word	0x200012a8
 8006e30:	e000ed0c 	.word	0xe000ed0c
 8006e34:	200012ac 	.word	0x200012ac

08006e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	; 0x28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e44:	f7fe fc92 	bl	800576c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e48:	4b5b      	ldr	r3, [pc, #364]	; (8006fb8 <pvPortMalloc+0x180>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e50:	f000 f920 	bl	8007094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e54:	4b59      	ldr	r3, [pc, #356]	; (8006fbc <pvPortMalloc+0x184>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 8093 	bne.w	8006f88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01d      	beq.n	8006ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e68:	2208      	movs	r2, #8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d014      	beq.n	8006ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f023 0307 	bic.w	r3, r3, #7
 8006e80:	3308      	adds	r3, #8
 8006e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	617b      	str	r3, [r7, #20]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d06e      	beq.n	8006f88 <pvPortMalloc+0x150>
 8006eaa:	4b45      	ldr	r3, [pc, #276]	; (8006fc0 <pvPortMalloc+0x188>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d869      	bhi.n	8006f88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eb4:	4b43      	ldr	r3, [pc, #268]	; (8006fc4 <pvPortMalloc+0x18c>)
 8006eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006eb8:	4b42      	ldr	r3, [pc, #264]	; (8006fc4 <pvPortMalloc+0x18c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ebe:	e004      	b.n	8006eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d903      	bls.n	8006edc <pvPortMalloc+0xa4>
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f1      	bne.n	8006ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006edc:	4b36      	ldr	r3, [pc, #216]	; (8006fb8 <pvPortMalloc+0x180>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d050      	beq.n	8006f88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2208      	movs	r2, #8
 8006eec:	4413      	add	r3, r2
 8006eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	2308      	movs	r3, #8
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d91f      	bls.n	8006f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <pvPortMalloc+0xf8>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	613b      	str	r3, [r7, #16]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f42:	69b8      	ldr	r0, [r7, #24]
 8006f44:	f000 f908 	bl	8007158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f48:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <pvPortMalloc+0x188>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <pvPortMalloc+0x188>)
 8006f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f56:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <pvPortMalloc+0x188>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <pvPortMalloc+0x190>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d203      	bcs.n	8006f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f62:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <pvPortMalloc+0x188>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a18      	ldr	r2, [pc, #96]	; (8006fc8 <pvPortMalloc+0x190>)
 8006f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <pvPortMalloc+0x184>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f7e:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <pvPortMalloc+0x194>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	4a11      	ldr	r2, [pc, #68]	; (8006fcc <pvPortMalloc+0x194>)
 8006f86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f88:	f7fe fbfe 	bl	8005788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <pvPortMalloc+0x174>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <pvPortMalloc+0x172>
	return pvReturn;
 8006fac:	69fb      	ldr	r3, [r7, #28]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20001eb8 	.word	0x20001eb8
 8006fbc:	20001ecc 	.word	0x20001ecc
 8006fc0:	20001ebc 	.word	0x20001ebc
 8006fc4:	20001eb0 	.word	0x20001eb0
 8006fc8:	20001ec0 	.word	0x20001ec0
 8006fcc:	20001ec4 	.word	0x20001ec4

08006fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d04d      	beq.n	800707e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4413      	add	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	4b24      	ldr	r3, [pc, #144]	; (8007088 <vPortFree+0xb8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <vPortFree+0x44>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60fb      	str	r3, [r7, #12]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <vPortFree+0x62>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60bb      	str	r3, [r7, #8]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	4b14      	ldr	r3, [pc, #80]	; (8007088 <vPortFree+0xb8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01e      	beq.n	800707e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11a      	bne.n	800707e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <vPortFree+0xb8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	43db      	mvns	r3, r3
 8007052:	401a      	ands	r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007058:	f7fe fb88 	bl	800576c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <vPortFree+0xbc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4413      	add	r3, r2
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <vPortFree+0xbc>)
 8007068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f000 f874 	bl	8007158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <vPortFree+0xc0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	4a06      	ldr	r2, [pc, #24]	; (8007090 <vPortFree+0xc0>)
 8007078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800707a:	f7fe fb85 	bl	8005788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20001ecc 	.word	0x20001ecc
 800708c:	20001ebc 	.word	0x20001ebc
 8007090:	20001ec8 	.word	0x20001ec8

08007094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800709a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800709e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070a0:	4b27      	ldr	r3, [pc, #156]	; (8007140 <prvHeapInit+0xac>)
 80070a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3307      	adds	r3, #7
 80070b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <prvHeapInit+0xac>)
 80070c4:	4413      	add	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <prvHeapInit+0xb0>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <prvHeapInit+0xb0>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4413      	add	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070e0:	2208      	movs	r2, #8
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1a9b      	subs	r3, r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0307 	bic.w	r3, r3, #7
 80070ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4a15      	ldr	r2, [pc, #84]	; (8007148 <prvHeapInit+0xb4>)
 80070f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070f6:	4b14      	ldr	r3, [pc, #80]	; (8007148 <prvHeapInit+0xb4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <prvHeapInit+0xb4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <prvHeapInit+0xb4>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a0a      	ldr	r2, [pc, #40]	; (800714c <prvHeapInit+0xb8>)
 8007122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4a09      	ldr	r2, [pc, #36]	; (8007150 <prvHeapInit+0xbc>)
 800712a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <prvHeapInit+0xc0>)
 800712e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	200012b0 	.word	0x200012b0
 8007144:	20001eb0 	.word	0x20001eb0
 8007148:	20001eb8 	.word	0x20001eb8
 800714c:	20001ec0 	.word	0x20001ec0
 8007150:	20001ebc 	.word	0x20001ebc
 8007154:	20001ecc 	.word	0x20001ecc

08007158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <prvInsertBlockIntoFreeList+0xac>)
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e002      	b.n	800716c <prvInsertBlockIntoFreeList+0x14>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d8f7      	bhi.n	8007166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d108      	bne.n	800719a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	441a      	add	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d118      	bne.n	80071e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <prvInsertBlockIntoFreeList+0xb0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d00d      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e008      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <prvInsertBlockIntoFreeList+0xb0>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e003      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d002      	beq.n	80071f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20001eb0 	.word	0x20001eb0
 8007208:	20001eb8 	.word	0x20001eb8

0800720c <__errno>:
 800720c:	4b01      	ldr	r3, [pc, #4]	; (8007214 <__errno+0x8>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000014 	.word	0x20000014

08007218 <__libc_init_array>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4d0d      	ldr	r5, [pc, #52]	; (8007250 <__libc_init_array+0x38>)
 800721c:	4c0d      	ldr	r4, [pc, #52]	; (8007254 <__libc_init_array+0x3c>)
 800721e:	1b64      	subs	r4, r4, r5
 8007220:	10a4      	asrs	r4, r4, #2
 8007222:	2600      	movs	r6, #0
 8007224:	42a6      	cmp	r6, r4
 8007226:	d109      	bne.n	800723c <__libc_init_array+0x24>
 8007228:	4d0b      	ldr	r5, [pc, #44]	; (8007258 <__libc_init_array+0x40>)
 800722a:	4c0c      	ldr	r4, [pc, #48]	; (800725c <__libc_init_array+0x44>)
 800722c:	f000 fcf8 	bl	8007c20 <_init>
 8007230:	1b64      	subs	r4, r4, r5
 8007232:	10a4      	asrs	r4, r4, #2
 8007234:	2600      	movs	r6, #0
 8007236:	42a6      	cmp	r6, r4
 8007238:	d105      	bne.n	8007246 <__libc_init_array+0x2e>
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007240:	4798      	blx	r3
 8007242:	3601      	adds	r6, #1
 8007244:	e7ee      	b.n	8007224 <__libc_init_array+0xc>
 8007246:	f855 3b04 	ldr.w	r3, [r5], #4
 800724a:	4798      	blx	r3
 800724c:	3601      	adds	r6, #1
 800724e:	e7f2      	b.n	8007236 <__libc_init_array+0x1e>
 8007250:	08007e0c 	.word	0x08007e0c
 8007254:	08007e0c 	.word	0x08007e0c
 8007258:	08007e0c 	.word	0x08007e0c
 800725c:	08007e10 	.word	0x08007e10

08007260 <__retarget_lock_acquire_recursive>:
 8007260:	4770      	bx	lr

08007262 <__retarget_lock_release_recursive>:
 8007262:	4770      	bx	lr

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <memset>:
 8007280:	4402      	add	r2, r0
 8007282:	4603      	mov	r3, r0
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	f803 1b01 	strb.w	r1, [r3], #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <sbrk_aligned>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	4e0e      	ldr	r6, [pc, #56]	; (80072cc <sbrk_aligned+0x3c>)
 8007294:	460c      	mov	r4, r1
 8007296:	6831      	ldr	r1, [r6, #0]
 8007298:	4605      	mov	r5, r0
 800729a:	b911      	cbnz	r1, 80072a2 <sbrk_aligned+0x12>
 800729c:	f000 f8f6 	bl	800748c <_sbrk_r>
 80072a0:	6030      	str	r0, [r6, #0]
 80072a2:	4621      	mov	r1, r4
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 f8f1 	bl	800748c <_sbrk_r>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d00a      	beq.n	80072c4 <sbrk_aligned+0x34>
 80072ae:	1cc4      	adds	r4, r0, #3
 80072b0:	f024 0403 	bic.w	r4, r4, #3
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d007      	beq.n	80072c8 <sbrk_aligned+0x38>
 80072b8:	1a21      	subs	r1, r4, r0
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f8e6 	bl	800748c <_sbrk_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	d101      	bne.n	80072c8 <sbrk_aligned+0x38>
 80072c4:	f04f 34ff 	mov.w	r4, #4294967295
 80072c8:	4620      	mov	r0, r4
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	20001ed8 	.word	0x20001ed8

080072d0 <_malloc_r>:
 80072d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d4:	1ccd      	adds	r5, r1, #3
 80072d6:	f025 0503 	bic.w	r5, r5, #3
 80072da:	3508      	adds	r5, #8
 80072dc:	2d0c      	cmp	r5, #12
 80072de:	bf38      	it	cc
 80072e0:	250c      	movcc	r5, #12
 80072e2:	2d00      	cmp	r5, #0
 80072e4:	4607      	mov	r7, r0
 80072e6:	db01      	blt.n	80072ec <_malloc_r+0x1c>
 80072e8:	42a9      	cmp	r1, r5
 80072ea:	d905      	bls.n	80072f8 <_malloc_r+0x28>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	2600      	movs	r6, #0
 80072f2:	4630      	mov	r0, r6
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	4e2e      	ldr	r6, [pc, #184]	; (80073b4 <_malloc_r+0xe4>)
 80072fa:	f000 f8f7 	bl	80074ec <__malloc_lock>
 80072fe:	6833      	ldr	r3, [r6, #0]
 8007300:	461c      	mov	r4, r3
 8007302:	bb34      	cbnz	r4, 8007352 <_malloc_r+0x82>
 8007304:	4629      	mov	r1, r5
 8007306:	4638      	mov	r0, r7
 8007308:	f7ff ffc2 	bl	8007290 <sbrk_aligned>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	4604      	mov	r4, r0
 8007310:	d14d      	bne.n	80073ae <_malloc_r+0xde>
 8007312:	6834      	ldr	r4, [r6, #0]
 8007314:	4626      	mov	r6, r4
 8007316:	2e00      	cmp	r6, #0
 8007318:	d140      	bne.n	800739c <_malloc_r+0xcc>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	4631      	mov	r1, r6
 800731e:	4638      	mov	r0, r7
 8007320:	eb04 0803 	add.w	r8, r4, r3
 8007324:	f000 f8b2 	bl	800748c <_sbrk_r>
 8007328:	4580      	cmp	r8, r0
 800732a:	d13a      	bne.n	80073a2 <_malloc_r+0xd2>
 800732c:	6821      	ldr	r1, [r4, #0]
 800732e:	3503      	adds	r5, #3
 8007330:	1a6d      	subs	r5, r5, r1
 8007332:	f025 0503 	bic.w	r5, r5, #3
 8007336:	3508      	adds	r5, #8
 8007338:	2d0c      	cmp	r5, #12
 800733a:	bf38      	it	cc
 800733c:	250c      	movcc	r5, #12
 800733e:	4629      	mov	r1, r5
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ffa5 	bl	8007290 <sbrk_aligned>
 8007346:	3001      	adds	r0, #1
 8007348:	d02b      	beq.n	80073a2 <_malloc_r+0xd2>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	442b      	add	r3, r5
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	e00e      	b.n	8007370 <_malloc_r+0xa0>
 8007352:	6822      	ldr	r2, [r4, #0]
 8007354:	1b52      	subs	r2, r2, r5
 8007356:	d41e      	bmi.n	8007396 <_malloc_r+0xc6>
 8007358:	2a0b      	cmp	r2, #11
 800735a:	d916      	bls.n	800738a <_malloc_r+0xba>
 800735c:	1961      	adds	r1, r4, r5
 800735e:	42a3      	cmp	r3, r4
 8007360:	6025      	str	r5, [r4, #0]
 8007362:	bf18      	it	ne
 8007364:	6059      	strne	r1, [r3, #4]
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	bf08      	it	eq
 800736a:	6031      	streq	r1, [r6, #0]
 800736c:	5162      	str	r2, [r4, r5]
 800736e:	604b      	str	r3, [r1, #4]
 8007370:	4638      	mov	r0, r7
 8007372:	f104 060b 	add.w	r6, r4, #11
 8007376:	f000 f8bf 	bl	80074f8 <__malloc_unlock>
 800737a:	f026 0607 	bic.w	r6, r6, #7
 800737e:	1d23      	adds	r3, r4, #4
 8007380:	1af2      	subs	r2, r6, r3
 8007382:	d0b6      	beq.n	80072f2 <_malloc_r+0x22>
 8007384:	1b9b      	subs	r3, r3, r6
 8007386:	50a3      	str	r3, [r4, r2]
 8007388:	e7b3      	b.n	80072f2 <_malloc_r+0x22>
 800738a:	6862      	ldr	r2, [r4, #4]
 800738c:	42a3      	cmp	r3, r4
 800738e:	bf0c      	ite	eq
 8007390:	6032      	streq	r2, [r6, #0]
 8007392:	605a      	strne	r2, [r3, #4]
 8007394:	e7ec      	b.n	8007370 <_malloc_r+0xa0>
 8007396:	4623      	mov	r3, r4
 8007398:	6864      	ldr	r4, [r4, #4]
 800739a:	e7b2      	b.n	8007302 <_malloc_r+0x32>
 800739c:	4634      	mov	r4, r6
 800739e:	6876      	ldr	r6, [r6, #4]
 80073a0:	e7b9      	b.n	8007316 <_malloc_r+0x46>
 80073a2:	230c      	movs	r3, #12
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	4638      	mov	r0, r7
 80073a8:	f000 f8a6 	bl	80074f8 <__malloc_unlock>
 80073ac:	e7a1      	b.n	80072f2 <_malloc_r+0x22>
 80073ae:	6025      	str	r5, [r4, #0]
 80073b0:	e7de      	b.n	8007370 <_malloc_r+0xa0>
 80073b2:	bf00      	nop
 80073b4:	20001ed4 	.word	0x20001ed4

080073b8 <cleanup_glue>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	460c      	mov	r4, r1
 80073bc:	6809      	ldr	r1, [r1, #0]
 80073be:	4605      	mov	r5, r0
 80073c0:	b109      	cbz	r1, 80073c6 <cleanup_glue+0xe>
 80073c2:	f7ff fff9 	bl	80073b8 <cleanup_glue>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ce:	f000 b899 	b.w	8007504 <_free_r>
	...

080073d4 <_reclaim_reent>:
 80073d4:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <_reclaim_reent+0xb4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4283      	cmp	r3, r0
 80073da:	b570      	push	{r4, r5, r6, lr}
 80073dc:	4604      	mov	r4, r0
 80073de:	d051      	beq.n	8007484 <_reclaim_reent+0xb0>
 80073e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073e2:	b143      	cbz	r3, 80073f6 <_reclaim_reent+0x22>
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d14a      	bne.n	8007480 <_reclaim_reent+0xac>
 80073ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	b111      	cbz	r1, 80073f6 <_reclaim_reent+0x22>
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f887 	bl	8007504 <_free_r>
 80073f6:	6961      	ldr	r1, [r4, #20]
 80073f8:	b111      	cbz	r1, 8007400 <_reclaim_reent+0x2c>
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 f882 	bl	8007504 <_free_r>
 8007400:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007402:	b111      	cbz	r1, 800740a <_reclaim_reent+0x36>
 8007404:	4620      	mov	r0, r4
 8007406:	f000 f87d 	bl	8007504 <_free_r>
 800740a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800740c:	b111      	cbz	r1, 8007414 <_reclaim_reent+0x40>
 800740e:	4620      	mov	r0, r4
 8007410:	f000 f878 	bl	8007504 <_free_r>
 8007414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007416:	b111      	cbz	r1, 800741e <_reclaim_reent+0x4a>
 8007418:	4620      	mov	r0, r4
 800741a:	f000 f873 	bl	8007504 <_free_r>
 800741e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007420:	b111      	cbz	r1, 8007428 <_reclaim_reent+0x54>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f86e 	bl	8007504 <_free_r>
 8007428:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800742a:	b111      	cbz	r1, 8007432 <_reclaim_reent+0x5e>
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f869 	bl	8007504 <_free_r>
 8007432:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007434:	b111      	cbz	r1, 800743c <_reclaim_reent+0x68>
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f864 	bl	8007504 <_free_r>
 800743c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800743e:	b111      	cbz	r1, 8007446 <_reclaim_reent+0x72>
 8007440:	4620      	mov	r0, r4
 8007442:	f000 f85f 	bl	8007504 <_free_r>
 8007446:	69a3      	ldr	r3, [r4, #24]
 8007448:	b1e3      	cbz	r3, 8007484 <_reclaim_reent+0xb0>
 800744a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800744c:	4620      	mov	r0, r4
 800744e:	4798      	blx	r3
 8007450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007452:	b1b9      	cbz	r1, 8007484 <_reclaim_reent+0xb0>
 8007454:	4620      	mov	r0, r4
 8007456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800745a:	f7ff bfad 	b.w	80073b8 <cleanup_glue>
 800745e:	5949      	ldr	r1, [r1, r5]
 8007460:	b941      	cbnz	r1, 8007474 <_reclaim_reent+0xa0>
 8007462:	3504      	adds	r5, #4
 8007464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007466:	2d80      	cmp	r5, #128	; 0x80
 8007468:	68d9      	ldr	r1, [r3, #12]
 800746a:	d1f8      	bne.n	800745e <_reclaim_reent+0x8a>
 800746c:	4620      	mov	r0, r4
 800746e:	f000 f849 	bl	8007504 <_free_r>
 8007472:	e7ba      	b.n	80073ea <_reclaim_reent+0x16>
 8007474:	680e      	ldr	r6, [r1, #0]
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f844 	bl	8007504 <_free_r>
 800747c:	4631      	mov	r1, r6
 800747e:	e7ef      	b.n	8007460 <_reclaim_reent+0x8c>
 8007480:	2500      	movs	r5, #0
 8007482:	e7ef      	b.n	8007464 <_reclaim_reent+0x90>
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	bf00      	nop
 8007488:	20000014 	.word	0x20000014

0800748c <_sbrk_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d06      	ldr	r5, [pc, #24]	; (80074a8 <_sbrk_r+0x1c>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7f9 fc8e 	bl	8000db8 <_sbrk>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_sbrk_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_sbrk_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20001edc 	.word	0x20001edc

080074ac <siprintf>:
 80074ac:	b40e      	push	{r1, r2, r3}
 80074ae:	b500      	push	{lr}
 80074b0:	b09c      	sub	sp, #112	; 0x70
 80074b2:	ab1d      	add	r3, sp, #116	; 0x74
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9006      	str	r0, [sp, #24]
 80074b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <siprintf+0x38>)
 80074be:	9107      	str	r1, [sp, #28]
 80074c0:	9104      	str	r1, [sp, #16]
 80074c2:	4909      	ldr	r1, [pc, #36]	; (80074e8 <siprintf+0x3c>)
 80074c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	a902      	add	r1, sp, #8
 80074d0:	f000 f8c0 	bl	8007654 <_svfiprintf_r>
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	b01c      	add	sp, #112	; 0x70
 80074dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e0:	b003      	add	sp, #12
 80074e2:	4770      	bx	lr
 80074e4:	20000014 	.word	0x20000014
 80074e8:	ffff0208 	.word	0xffff0208

080074ec <__malloc_lock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__malloc_lock+0x8>)
 80074ee:	f7ff beb7 	b.w	8007260 <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20001ed0 	.word	0x20001ed0

080074f8 <__malloc_unlock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_unlock+0x8>)
 80074fa:	f7ff beb2 	b.w	8007262 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20001ed0 	.word	0x20001ed0

08007504 <_free_r>:
 8007504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007506:	2900      	cmp	r1, #0
 8007508:	d044      	beq.n	8007594 <_free_r+0x90>
 800750a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750e:	9001      	str	r0, [sp, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f1a1 0404 	sub.w	r4, r1, #4
 8007516:	bfb8      	it	lt
 8007518:	18e4      	addlt	r4, r4, r3
 800751a:	f7ff ffe7 	bl	80074ec <__malloc_lock>
 800751e:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <_free_r+0x94>)
 8007520:	9801      	ldr	r0, [sp, #4]
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	b933      	cbnz	r3, 8007534 <_free_r+0x30>
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	6014      	str	r4, [r2, #0]
 800752a:	b003      	add	sp, #12
 800752c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007530:	f7ff bfe2 	b.w	80074f8 <__malloc_unlock>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d908      	bls.n	800754a <_free_r+0x46>
 8007538:	6825      	ldr	r5, [r4, #0]
 800753a:	1961      	adds	r1, r4, r5
 800753c:	428b      	cmp	r3, r1
 800753e:	bf01      	itttt	eq
 8007540:	6819      	ldreq	r1, [r3, #0]
 8007542:	685b      	ldreq	r3, [r3, #4]
 8007544:	1949      	addeq	r1, r1, r5
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	e7ed      	b.n	8007526 <_free_r+0x22>
 800754a:	461a      	mov	r2, r3
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	b10b      	cbz	r3, 8007554 <_free_r+0x50>
 8007550:	42a3      	cmp	r3, r4
 8007552:	d9fa      	bls.n	800754a <_free_r+0x46>
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	1855      	adds	r5, r2, r1
 8007558:	42a5      	cmp	r5, r4
 800755a:	d10b      	bne.n	8007574 <_free_r+0x70>
 800755c:	6824      	ldr	r4, [r4, #0]
 800755e:	4421      	add	r1, r4
 8007560:	1854      	adds	r4, r2, r1
 8007562:	42a3      	cmp	r3, r4
 8007564:	6011      	str	r1, [r2, #0]
 8007566:	d1e0      	bne.n	800752a <_free_r+0x26>
 8007568:	681c      	ldr	r4, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	6053      	str	r3, [r2, #4]
 800756e:	4421      	add	r1, r4
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	e7da      	b.n	800752a <_free_r+0x26>
 8007574:	d902      	bls.n	800757c <_free_r+0x78>
 8007576:	230c      	movs	r3, #12
 8007578:	6003      	str	r3, [r0, #0]
 800757a:	e7d6      	b.n	800752a <_free_r+0x26>
 800757c:	6825      	ldr	r5, [r4, #0]
 800757e:	1961      	adds	r1, r4, r5
 8007580:	428b      	cmp	r3, r1
 8007582:	bf04      	itt	eq
 8007584:	6819      	ldreq	r1, [r3, #0]
 8007586:	685b      	ldreq	r3, [r3, #4]
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	bf04      	itt	eq
 800758c:	1949      	addeq	r1, r1, r5
 800758e:	6021      	streq	r1, [r4, #0]
 8007590:	6054      	str	r4, [r2, #4]
 8007592:	e7ca      	b.n	800752a <_free_r+0x26>
 8007594:	b003      	add	sp, #12
 8007596:	bd30      	pop	{r4, r5, pc}
 8007598:	20001ed4 	.word	0x20001ed4

0800759c <__ssputs_r>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	688e      	ldr	r6, [r1, #8]
 80075a2:	429e      	cmp	r6, r3
 80075a4:	4682      	mov	sl, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	4690      	mov	r8, r2
 80075aa:	461f      	mov	r7, r3
 80075ac:	d838      	bhi.n	8007620 <__ssputs_r+0x84>
 80075ae:	898a      	ldrh	r2, [r1, #12]
 80075b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075b4:	d032      	beq.n	800761c <__ssputs_r+0x80>
 80075b6:	6825      	ldr	r5, [r4, #0]
 80075b8:	6909      	ldr	r1, [r1, #16]
 80075ba:	eba5 0901 	sub.w	r9, r5, r1
 80075be:	6965      	ldr	r5, [r4, #20]
 80075c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075c8:	3301      	adds	r3, #1
 80075ca:	444b      	add	r3, r9
 80075cc:	106d      	asrs	r5, r5, #1
 80075ce:	429d      	cmp	r5, r3
 80075d0:	bf38      	it	cc
 80075d2:	461d      	movcc	r5, r3
 80075d4:	0553      	lsls	r3, r2, #21
 80075d6:	d531      	bpl.n	800763c <__ssputs_r+0xa0>
 80075d8:	4629      	mov	r1, r5
 80075da:	f7ff fe79 	bl	80072d0 <_malloc_r>
 80075de:	4606      	mov	r6, r0
 80075e0:	b950      	cbnz	r0, 80075f8 <__ssputs_r+0x5c>
 80075e2:	230c      	movs	r3, #12
 80075e4:	f8ca 3000 	str.w	r3, [sl]
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	6921      	ldr	r1, [r4, #16]
 80075fa:	464a      	mov	r2, r9
 80075fc:	f7ff fe32 	bl	8007264 <memcpy>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	6126      	str	r6, [r4, #16]
 800760e:	6165      	str	r5, [r4, #20]
 8007610:	444e      	add	r6, r9
 8007612:	eba5 0509 	sub.w	r5, r5, r9
 8007616:	6026      	str	r6, [r4, #0]
 8007618:	60a5      	str	r5, [r4, #8]
 800761a:	463e      	mov	r6, r7
 800761c:	42be      	cmp	r6, r7
 800761e:	d900      	bls.n	8007622 <__ssputs_r+0x86>
 8007620:	463e      	mov	r6, r7
 8007622:	6820      	ldr	r0, [r4, #0]
 8007624:	4632      	mov	r2, r6
 8007626:	4641      	mov	r1, r8
 8007628:	f000 faa8 	bl	8007b7c <memmove>
 800762c:	68a3      	ldr	r3, [r4, #8]
 800762e:	1b9b      	subs	r3, r3, r6
 8007630:	60a3      	str	r3, [r4, #8]
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	4433      	add	r3, r6
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	2000      	movs	r0, #0
 800763a:	e7db      	b.n	80075f4 <__ssputs_r+0x58>
 800763c:	462a      	mov	r2, r5
 800763e:	f000 fab7 	bl	8007bb0 <_realloc_r>
 8007642:	4606      	mov	r6, r0
 8007644:	2800      	cmp	r0, #0
 8007646:	d1e1      	bne.n	800760c <__ssputs_r+0x70>
 8007648:	6921      	ldr	r1, [r4, #16]
 800764a:	4650      	mov	r0, sl
 800764c:	f7ff ff5a 	bl	8007504 <_free_r>
 8007650:	e7c7      	b.n	80075e2 <__ssputs_r+0x46>
	...

08007654 <_svfiprintf_r>:
 8007654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	4698      	mov	r8, r3
 800765a:	898b      	ldrh	r3, [r1, #12]
 800765c:	061b      	lsls	r3, r3, #24
 800765e:	b09d      	sub	sp, #116	; 0x74
 8007660:	4607      	mov	r7, r0
 8007662:	460d      	mov	r5, r1
 8007664:	4614      	mov	r4, r2
 8007666:	d50e      	bpl.n	8007686 <_svfiprintf_r+0x32>
 8007668:	690b      	ldr	r3, [r1, #16]
 800766a:	b963      	cbnz	r3, 8007686 <_svfiprintf_r+0x32>
 800766c:	2140      	movs	r1, #64	; 0x40
 800766e:	f7ff fe2f 	bl	80072d0 <_malloc_r>
 8007672:	6028      	str	r0, [r5, #0]
 8007674:	6128      	str	r0, [r5, #16]
 8007676:	b920      	cbnz	r0, 8007682 <_svfiprintf_r+0x2e>
 8007678:	230c      	movs	r3, #12
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e0d1      	b.n	8007826 <_svfiprintf_r+0x1d2>
 8007682:	2340      	movs	r3, #64	; 0x40
 8007684:	616b      	str	r3, [r5, #20]
 8007686:	2300      	movs	r3, #0
 8007688:	9309      	str	r3, [sp, #36]	; 0x24
 800768a:	2320      	movs	r3, #32
 800768c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007690:	f8cd 800c 	str.w	r8, [sp, #12]
 8007694:	2330      	movs	r3, #48	; 0x30
 8007696:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007840 <_svfiprintf_r+0x1ec>
 800769a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800769e:	f04f 0901 	mov.w	r9, #1
 80076a2:	4623      	mov	r3, r4
 80076a4:	469a      	mov	sl, r3
 80076a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076aa:	b10a      	cbz	r2, 80076b0 <_svfiprintf_r+0x5c>
 80076ac:	2a25      	cmp	r2, #37	; 0x25
 80076ae:	d1f9      	bne.n	80076a4 <_svfiprintf_r+0x50>
 80076b0:	ebba 0b04 	subs.w	fp, sl, r4
 80076b4:	d00b      	beq.n	80076ce <_svfiprintf_r+0x7a>
 80076b6:	465b      	mov	r3, fp
 80076b8:	4622      	mov	r2, r4
 80076ba:	4629      	mov	r1, r5
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff ff6d 	bl	800759c <__ssputs_r>
 80076c2:	3001      	adds	r0, #1
 80076c4:	f000 80aa 	beq.w	800781c <_svfiprintf_r+0x1c8>
 80076c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ca:	445a      	add	r2, fp
 80076cc:	9209      	str	r2, [sp, #36]	; 0x24
 80076ce:	f89a 3000 	ldrb.w	r3, [sl]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 80a2 	beq.w	800781c <_svfiprintf_r+0x1c8>
 80076d8:	2300      	movs	r3, #0
 80076da:	f04f 32ff 	mov.w	r2, #4294967295
 80076de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076e2:	f10a 0a01 	add.w	sl, sl, #1
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	9307      	str	r3, [sp, #28]
 80076ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ee:	931a      	str	r3, [sp, #104]	; 0x68
 80076f0:	4654      	mov	r4, sl
 80076f2:	2205      	movs	r2, #5
 80076f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f8:	4851      	ldr	r0, [pc, #324]	; (8007840 <_svfiprintf_r+0x1ec>)
 80076fa:	f7f8 fd41 	bl	8000180 <memchr>
 80076fe:	9a04      	ldr	r2, [sp, #16]
 8007700:	b9d8      	cbnz	r0, 800773a <_svfiprintf_r+0xe6>
 8007702:	06d0      	lsls	r0, r2, #27
 8007704:	bf44      	itt	mi
 8007706:	2320      	movmi	r3, #32
 8007708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800770c:	0711      	lsls	r1, r2, #28
 800770e:	bf44      	itt	mi
 8007710:	232b      	movmi	r3, #43	; 0x2b
 8007712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007716:	f89a 3000 	ldrb.w	r3, [sl]
 800771a:	2b2a      	cmp	r3, #42	; 0x2a
 800771c:	d015      	beq.n	800774a <_svfiprintf_r+0xf6>
 800771e:	9a07      	ldr	r2, [sp, #28]
 8007720:	4654      	mov	r4, sl
 8007722:	2000      	movs	r0, #0
 8007724:	f04f 0c0a 	mov.w	ip, #10
 8007728:	4621      	mov	r1, r4
 800772a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800772e:	3b30      	subs	r3, #48	; 0x30
 8007730:	2b09      	cmp	r3, #9
 8007732:	d94e      	bls.n	80077d2 <_svfiprintf_r+0x17e>
 8007734:	b1b0      	cbz	r0, 8007764 <_svfiprintf_r+0x110>
 8007736:	9207      	str	r2, [sp, #28]
 8007738:	e014      	b.n	8007764 <_svfiprintf_r+0x110>
 800773a:	eba0 0308 	sub.w	r3, r0, r8
 800773e:	fa09 f303 	lsl.w	r3, r9, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	46a2      	mov	sl, r4
 8007748:	e7d2      	b.n	80076f0 <_svfiprintf_r+0x9c>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	1d19      	adds	r1, r3, #4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	9103      	str	r1, [sp, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfbb      	ittet	lt
 8007756:	425b      	neglt	r3, r3
 8007758:	f042 0202 	orrlt.w	r2, r2, #2
 800775c:	9307      	strge	r3, [sp, #28]
 800775e:	9307      	strlt	r3, [sp, #28]
 8007760:	bfb8      	it	lt
 8007762:	9204      	strlt	r2, [sp, #16]
 8007764:	7823      	ldrb	r3, [r4, #0]
 8007766:	2b2e      	cmp	r3, #46	; 0x2e
 8007768:	d10c      	bne.n	8007784 <_svfiprintf_r+0x130>
 800776a:	7863      	ldrb	r3, [r4, #1]
 800776c:	2b2a      	cmp	r3, #42	; 0x2a
 800776e:	d135      	bne.n	80077dc <_svfiprintf_r+0x188>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	9203      	str	r2, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfb8      	it	lt
 800777c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007780:	3402      	adds	r4, #2
 8007782:	9305      	str	r3, [sp, #20]
 8007784:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007850 <_svfiprintf_r+0x1fc>
 8007788:	7821      	ldrb	r1, [r4, #0]
 800778a:	2203      	movs	r2, #3
 800778c:	4650      	mov	r0, sl
 800778e:	f7f8 fcf7 	bl	8000180 <memchr>
 8007792:	b140      	cbz	r0, 80077a6 <_svfiprintf_r+0x152>
 8007794:	2340      	movs	r3, #64	; 0x40
 8007796:	eba0 000a 	sub.w	r0, r0, sl
 800779a:	fa03 f000 	lsl.w	r0, r3, r0
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	4303      	orrs	r3, r0
 80077a2:	3401      	adds	r4, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077aa:	4826      	ldr	r0, [pc, #152]	; (8007844 <_svfiprintf_r+0x1f0>)
 80077ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077b0:	2206      	movs	r2, #6
 80077b2:	f7f8 fce5 	bl	8000180 <memchr>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d038      	beq.n	800782c <_svfiprintf_r+0x1d8>
 80077ba:	4b23      	ldr	r3, [pc, #140]	; (8007848 <_svfiprintf_r+0x1f4>)
 80077bc:	bb1b      	cbnz	r3, 8007806 <_svfiprintf_r+0x1b2>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	3307      	adds	r3, #7
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	3308      	adds	r3, #8
 80077c8:	9303      	str	r3, [sp, #12]
 80077ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077cc:	4433      	add	r3, r6
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	e767      	b.n	80076a2 <_svfiprintf_r+0x4e>
 80077d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077d6:	460c      	mov	r4, r1
 80077d8:	2001      	movs	r0, #1
 80077da:	e7a5      	b.n	8007728 <_svfiprintf_r+0xd4>
 80077dc:	2300      	movs	r3, #0
 80077de:	3401      	adds	r4, #1
 80077e0:	9305      	str	r3, [sp, #20]
 80077e2:	4619      	mov	r1, r3
 80077e4:	f04f 0c0a 	mov.w	ip, #10
 80077e8:	4620      	mov	r0, r4
 80077ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ee:	3a30      	subs	r2, #48	; 0x30
 80077f0:	2a09      	cmp	r2, #9
 80077f2:	d903      	bls.n	80077fc <_svfiprintf_r+0x1a8>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0c5      	beq.n	8007784 <_svfiprintf_r+0x130>
 80077f8:	9105      	str	r1, [sp, #20]
 80077fa:	e7c3      	b.n	8007784 <_svfiprintf_r+0x130>
 80077fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007800:	4604      	mov	r4, r0
 8007802:	2301      	movs	r3, #1
 8007804:	e7f0      	b.n	80077e8 <_svfiprintf_r+0x194>
 8007806:	ab03      	add	r3, sp, #12
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	462a      	mov	r2, r5
 800780c:	4b0f      	ldr	r3, [pc, #60]	; (800784c <_svfiprintf_r+0x1f8>)
 800780e:	a904      	add	r1, sp, #16
 8007810:	4638      	mov	r0, r7
 8007812:	f3af 8000 	nop.w
 8007816:	1c42      	adds	r2, r0, #1
 8007818:	4606      	mov	r6, r0
 800781a:	d1d6      	bne.n	80077ca <_svfiprintf_r+0x176>
 800781c:	89ab      	ldrh	r3, [r5, #12]
 800781e:	065b      	lsls	r3, r3, #25
 8007820:	f53f af2c 	bmi.w	800767c <_svfiprintf_r+0x28>
 8007824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007826:	b01d      	add	sp, #116	; 0x74
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	ab03      	add	r3, sp, #12
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	462a      	mov	r2, r5
 8007832:	4b06      	ldr	r3, [pc, #24]	; (800784c <_svfiprintf_r+0x1f8>)
 8007834:	a904      	add	r1, sp, #16
 8007836:	4638      	mov	r0, r7
 8007838:	f000 f87a 	bl	8007930 <_printf_i>
 800783c:	e7eb      	b.n	8007816 <_svfiprintf_r+0x1c2>
 800783e:	bf00      	nop
 8007840:	08007dd0 	.word	0x08007dd0
 8007844:	08007dda 	.word	0x08007dda
 8007848:	00000000 	.word	0x00000000
 800784c:	0800759d 	.word	0x0800759d
 8007850:	08007dd6 	.word	0x08007dd6

08007854 <_printf_common>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	4616      	mov	r6, r2
 800785a:	4699      	mov	r9, r3
 800785c:	688a      	ldr	r2, [r1, #8]
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007864:	4293      	cmp	r3, r2
 8007866:	bfb8      	it	lt
 8007868:	4613      	movlt	r3, r2
 800786a:	6033      	str	r3, [r6, #0]
 800786c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007870:	4607      	mov	r7, r0
 8007872:	460c      	mov	r4, r1
 8007874:	b10a      	cbz	r2, 800787a <_printf_common+0x26>
 8007876:	3301      	adds	r3, #1
 8007878:	6033      	str	r3, [r6, #0]
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	0699      	lsls	r1, r3, #26
 800787e:	bf42      	ittt	mi
 8007880:	6833      	ldrmi	r3, [r6, #0]
 8007882:	3302      	addmi	r3, #2
 8007884:	6033      	strmi	r3, [r6, #0]
 8007886:	6825      	ldr	r5, [r4, #0]
 8007888:	f015 0506 	ands.w	r5, r5, #6
 800788c:	d106      	bne.n	800789c <_printf_common+0x48>
 800788e:	f104 0a19 	add.w	sl, r4, #25
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	6832      	ldr	r2, [r6, #0]
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	42ab      	cmp	r3, r5
 800789a:	dc26      	bgt.n	80078ea <_printf_common+0x96>
 800789c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078a0:	1e13      	subs	r3, r2, #0
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	2301      	movne	r3, #1
 80078a8:	0692      	lsls	r2, r2, #26
 80078aa:	d42b      	bmi.n	8007904 <_printf_common+0xb0>
 80078ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078b0:	4649      	mov	r1, r9
 80078b2:	4638      	mov	r0, r7
 80078b4:	47c0      	blx	r8
 80078b6:	3001      	adds	r0, #1
 80078b8:	d01e      	beq.n	80078f8 <_printf_common+0xa4>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	68e5      	ldr	r5, [r4, #12]
 80078be:	6832      	ldr	r2, [r6, #0]
 80078c0:	f003 0306 	and.w	r3, r3, #6
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	bf08      	it	eq
 80078c8:	1aad      	subeq	r5, r5, r2
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	6922      	ldr	r2, [r4, #16]
 80078ce:	bf0c      	ite	eq
 80078d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d4:	2500      	movne	r5, #0
 80078d6:	4293      	cmp	r3, r2
 80078d8:	bfc4      	itt	gt
 80078da:	1a9b      	subgt	r3, r3, r2
 80078dc:	18ed      	addgt	r5, r5, r3
 80078de:	2600      	movs	r6, #0
 80078e0:	341a      	adds	r4, #26
 80078e2:	42b5      	cmp	r5, r6
 80078e4:	d11a      	bne.n	800791c <_printf_common+0xc8>
 80078e6:	2000      	movs	r0, #0
 80078e8:	e008      	b.n	80078fc <_printf_common+0xa8>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4652      	mov	r2, sl
 80078ee:	4649      	mov	r1, r9
 80078f0:	4638      	mov	r0, r7
 80078f2:	47c0      	blx	r8
 80078f4:	3001      	adds	r0, #1
 80078f6:	d103      	bne.n	8007900 <_printf_common+0xac>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	3501      	adds	r5, #1
 8007902:	e7c6      	b.n	8007892 <_printf_common+0x3e>
 8007904:	18e1      	adds	r1, r4, r3
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	2030      	movs	r0, #48	; 0x30
 800790a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800790e:	4422      	add	r2, r4
 8007910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007918:	3302      	adds	r3, #2
 800791a:	e7c7      	b.n	80078ac <_printf_common+0x58>
 800791c:	2301      	movs	r3, #1
 800791e:	4622      	mov	r2, r4
 8007920:	4649      	mov	r1, r9
 8007922:	4638      	mov	r0, r7
 8007924:	47c0      	blx	r8
 8007926:	3001      	adds	r0, #1
 8007928:	d0e6      	beq.n	80078f8 <_printf_common+0xa4>
 800792a:	3601      	adds	r6, #1
 800792c:	e7d9      	b.n	80078e2 <_printf_common+0x8e>
	...

08007930 <_printf_i>:
 8007930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	7e0f      	ldrb	r7, [r1, #24]
 8007936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007938:	2f78      	cmp	r7, #120	; 0x78
 800793a:	4691      	mov	r9, r2
 800793c:	4680      	mov	r8, r0
 800793e:	460c      	mov	r4, r1
 8007940:	469a      	mov	sl, r3
 8007942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007946:	d807      	bhi.n	8007958 <_printf_i+0x28>
 8007948:	2f62      	cmp	r7, #98	; 0x62
 800794a:	d80a      	bhi.n	8007962 <_printf_i+0x32>
 800794c:	2f00      	cmp	r7, #0
 800794e:	f000 80d8 	beq.w	8007b02 <_printf_i+0x1d2>
 8007952:	2f58      	cmp	r7, #88	; 0x58
 8007954:	f000 80a3 	beq.w	8007a9e <_printf_i+0x16e>
 8007958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800795c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007960:	e03a      	b.n	80079d8 <_printf_i+0xa8>
 8007962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007966:	2b15      	cmp	r3, #21
 8007968:	d8f6      	bhi.n	8007958 <_printf_i+0x28>
 800796a:	a101      	add	r1, pc, #4	; (adr r1, 8007970 <_printf_i+0x40>)
 800796c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007970:	080079c9 	.word	0x080079c9
 8007974:	080079dd 	.word	0x080079dd
 8007978:	08007959 	.word	0x08007959
 800797c:	08007959 	.word	0x08007959
 8007980:	08007959 	.word	0x08007959
 8007984:	08007959 	.word	0x08007959
 8007988:	080079dd 	.word	0x080079dd
 800798c:	08007959 	.word	0x08007959
 8007990:	08007959 	.word	0x08007959
 8007994:	08007959 	.word	0x08007959
 8007998:	08007959 	.word	0x08007959
 800799c:	08007ae9 	.word	0x08007ae9
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007acb 	.word	0x08007acb
 80079a8:	08007959 	.word	0x08007959
 80079ac:	08007959 	.word	0x08007959
 80079b0:	08007b0b 	.word	0x08007b0b
 80079b4:	08007959 	.word	0x08007959
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007959 	.word	0x08007959
 80079c0:	08007959 	.word	0x08007959
 80079c4:	08007ad3 	.word	0x08007ad3
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	602a      	str	r2, [r5, #0]
 80079d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079d8:	2301      	movs	r3, #1
 80079da:	e0a3      	b.n	8007b24 <_printf_i+0x1f4>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	6829      	ldr	r1, [r5, #0]
 80079e0:	0606      	lsls	r6, r0, #24
 80079e2:	f101 0304 	add.w	r3, r1, #4
 80079e6:	d50a      	bpl.n	80079fe <_printf_i+0xce>
 80079e8:	680e      	ldr	r6, [r1, #0]
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	da03      	bge.n	80079f8 <_printf_i+0xc8>
 80079f0:	232d      	movs	r3, #45	; 0x2d
 80079f2:	4276      	negs	r6, r6
 80079f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f8:	485e      	ldr	r0, [pc, #376]	; (8007b74 <_printf_i+0x244>)
 80079fa:	230a      	movs	r3, #10
 80079fc:	e019      	b.n	8007a32 <_printf_i+0x102>
 80079fe:	680e      	ldr	r6, [r1, #0]
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a06:	bf18      	it	ne
 8007a08:	b236      	sxthne	r6, r6
 8007a0a:	e7ef      	b.n	80079ec <_printf_i+0xbc>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	6820      	ldr	r0, [r4, #0]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	6029      	str	r1, [r5, #0]
 8007a14:	0601      	lsls	r1, r0, #24
 8007a16:	d501      	bpl.n	8007a1c <_printf_i+0xec>
 8007a18:	681e      	ldr	r6, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <_printf_i+0xf2>
 8007a1c:	0646      	lsls	r6, r0, #25
 8007a1e:	d5fb      	bpl.n	8007a18 <_printf_i+0xe8>
 8007a20:	881e      	ldrh	r6, [r3, #0]
 8007a22:	4854      	ldr	r0, [pc, #336]	; (8007b74 <_printf_i+0x244>)
 8007a24:	2f6f      	cmp	r7, #111	; 0x6f
 8007a26:	bf0c      	ite	eq
 8007a28:	2308      	moveq	r3, #8
 8007a2a:	230a      	movne	r3, #10
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a32:	6865      	ldr	r5, [r4, #4]
 8007a34:	60a5      	str	r5, [r4, #8]
 8007a36:	2d00      	cmp	r5, #0
 8007a38:	bfa2      	ittt	ge
 8007a3a:	6821      	ldrge	r1, [r4, #0]
 8007a3c:	f021 0104 	bicge.w	r1, r1, #4
 8007a40:	6021      	strge	r1, [r4, #0]
 8007a42:	b90e      	cbnz	r6, 8007a48 <_printf_i+0x118>
 8007a44:	2d00      	cmp	r5, #0
 8007a46:	d04d      	beq.n	8007ae4 <_printf_i+0x1b4>
 8007a48:	4615      	mov	r5, r2
 8007a4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a52:	5dc7      	ldrb	r7, [r0, r7]
 8007a54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a58:	4637      	mov	r7, r6
 8007a5a:	42bb      	cmp	r3, r7
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	d9f4      	bls.n	8007a4a <_printf_i+0x11a>
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d10b      	bne.n	8007a7c <_printf_i+0x14c>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	07de      	lsls	r6, r3, #31
 8007a68:	d508      	bpl.n	8007a7c <_printf_i+0x14c>
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	6861      	ldr	r1, [r4, #4]
 8007a6e:	4299      	cmp	r1, r3
 8007a70:	bfde      	ittt	le
 8007a72:	2330      	movle	r3, #48	; 0x30
 8007a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a7c:	1b52      	subs	r2, r2, r5
 8007a7e:	6122      	str	r2, [r4, #16]
 8007a80:	f8cd a000 	str.w	sl, [sp]
 8007a84:	464b      	mov	r3, r9
 8007a86:	aa03      	add	r2, sp, #12
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	f7ff fee2 	bl	8007854 <_printf_common>
 8007a90:	3001      	adds	r0, #1
 8007a92:	d14c      	bne.n	8007b2e <_printf_i+0x1fe>
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295
 8007a98:	b004      	add	sp, #16
 8007a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9e:	4835      	ldr	r0, [pc, #212]	; (8007b74 <_printf_i+0x244>)
 8007aa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007aa4:	6829      	ldr	r1, [r5, #0]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007aac:	6029      	str	r1, [r5, #0]
 8007aae:	061d      	lsls	r5, r3, #24
 8007ab0:	d514      	bpl.n	8007adc <_printf_i+0x1ac>
 8007ab2:	07df      	lsls	r7, r3, #31
 8007ab4:	bf44      	itt	mi
 8007ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8007aba:	6023      	strmi	r3, [r4, #0]
 8007abc:	b91e      	cbnz	r6, 8007ac6 <_printf_i+0x196>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	f023 0320 	bic.w	r3, r3, #32
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	2310      	movs	r3, #16
 8007ac8:	e7b0      	b.n	8007a2c <_printf_i+0xfc>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f043 0320 	orr.w	r3, r3, #32
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2378      	movs	r3, #120	; 0x78
 8007ad4:	4828      	ldr	r0, [pc, #160]	; (8007b78 <_printf_i+0x248>)
 8007ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ada:	e7e3      	b.n	8007aa4 <_printf_i+0x174>
 8007adc:	0659      	lsls	r1, r3, #25
 8007ade:	bf48      	it	mi
 8007ae0:	b2b6      	uxthmi	r6, r6
 8007ae2:	e7e6      	b.n	8007ab2 <_printf_i+0x182>
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	e7bb      	b.n	8007a60 <_printf_i+0x130>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	6826      	ldr	r6, [r4, #0]
 8007aec:	6961      	ldr	r1, [r4, #20]
 8007aee:	1d18      	adds	r0, r3, #4
 8007af0:	6028      	str	r0, [r5, #0]
 8007af2:	0635      	lsls	r5, r6, #24
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	d501      	bpl.n	8007afc <_printf_i+0x1cc>
 8007af8:	6019      	str	r1, [r3, #0]
 8007afa:	e002      	b.n	8007b02 <_printf_i+0x1d2>
 8007afc:	0670      	lsls	r0, r6, #25
 8007afe:	d5fb      	bpl.n	8007af8 <_printf_i+0x1c8>
 8007b00:	8019      	strh	r1, [r3, #0]
 8007b02:	2300      	movs	r3, #0
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	4615      	mov	r5, r2
 8007b08:	e7ba      	b.n	8007a80 <_printf_i+0x150>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	602a      	str	r2, [r5, #0]
 8007b10:	681d      	ldr	r5, [r3, #0]
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	2100      	movs	r1, #0
 8007b16:	4628      	mov	r0, r5
 8007b18:	f7f8 fb32 	bl	8000180 <memchr>
 8007b1c:	b108      	cbz	r0, 8007b22 <_printf_i+0x1f2>
 8007b1e:	1b40      	subs	r0, r0, r5
 8007b20:	6060      	str	r0, [r4, #4]
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	2300      	movs	r3, #0
 8007b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2c:	e7a8      	b.n	8007a80 <_printf_i+0x150>
 8007b2e:	6923      	ldr	r3, [r4, #16]
 8007b30:	462a      	mov	r2, r5
 8007b32:	4649      	mov	r1, r9
 8007b34:	4640      	mov	r0, r8
 8007b36:	47d0      	blx	sl
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d0ab      	beq.n	8007a94 <_printf_i+0x164>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	079b      	lsls	r3, r3, #30
 8007b40:	d413      	bmi.n	8007b6a <_printf_i+0x23a>
 8007b42:	68e0      	ldr	r0, [r4, #12]
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	4298      	cmp	r0, r3
 8007b48:	bfb8      	it	lt
 8007b4a:	4618      	movlt	r0, r3
 8007b4c:	e7a4      	b.n	8007a98 <_printf_i+0x168>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4632      	mov	r2, r6
 8007b52:	4649      	mov	r1, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	47d0      	blx	sl
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d09b      	beq.n	8007a94 <_printf_i+0x164>
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	68e3      	ldr	r3, [r4, #12]
 8007b60:	9903      	ldr	r1, [sp, #12]
 8007b62:	1a5b      	subs	r3, r3, r1
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dcf2      	bgt.n	8007b4e <_printf_i+0x21e>
 8007b68:	e7eb      	b.n	8007b42 <_printf_i+0x212>
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	f104 0619 	add.w	r6, r4, #25
 8007b70:	e7f5      	b.n	8007b5e <_printf_i+0x22e>
 8007b72:	bf00      	nop
 8007b74:	08007de1 	.word	0x08007de1
 8007b78:	08007df2 	.word	0x08007df2

08007b7c <memmove>:
 8007b7c:	4288      	cmp	r0, r1
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	eb01 0402 	add.w	r4, r1, r2
 8007b84:	d902      	bls.n	8007b8c <memmove+0x10>
 8007b86:	4284      	cmp	r4, r0
 8007b88:	4623      	mov	r3, r4
 8007b8a:	d807      	bhi.n	8007b9c <memmove+0x20>
 8007b8c:	1e43      	subs	r3, r0, #1
 8007b8e:	42a1      	cmp	r1, r4
 8007b90:	d008      	beq.n	8007ba4 <memmove+0x28>
 8007b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b9a:	e7f8      	b.n	8007b8e <memmove+0x12>
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	428a      	cmp	r2, r1
 8007ba2:	d100      	bne.n	8007ba6 <memmove+0x2a>
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bae:	e7f7      	b.n	8007ba0 <memmove+0x24>

08007bb0 <_realloc_r>:
 8007bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	b921      	cbnz	r1, 8007bc6 <_realloc_r+0x16>
 8007bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	f7ff bb85 	b.w	80072d0 <_malloc_r>
 8007bc6:	b92a      	cbnz	r2, 8007bd4 <_realloc_r+0x24>
 8007bc8:	f7ff fc9c 	bl	8007504 <_free_r>
 8007bcc:	4625      	mov	r5, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd4:	f000 f81b 	bl	8007c0e <_malloc_usable_size_r>
 8007bd8:	4284      	cmp	r4, r0
 8007bda:	4607      	mov	r7, r0
 8007bdc:	d802      	bhi.n	8007be4 <_realloc_r+0x34>
 8007bde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007be2:	d812      	bhi.n	8007c0a <_realloc_r+0x5a>
 8007be4:	4621      	mov	r1, r4
 8007be6:	4640      	mov	r0, r8
 8007be8:	f7ff fb72 	bl	80072d0 <_malloc_r>
 8007bec:	4605      	mov	r5, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d0ed      	beq.n	8007bce <_realloc_r+0x1e>
 8007bf2:	42bc      	cmp	r4, r7
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	bf28      	it	cs
 8007bfa:	463a      	movcs	r2, r7
 8007bfc:	f7ff fb32 	bl	8007264 <memcpy>
 8007c00:	4631      	mov	r1, r6
 8007c02:	4640      	mov	r0, r8
 8007c04:	f7ff fc7e 	bl	8007504 <_free_r>
 8007c08:	e7e1      	b.n	8007bce <_realloc_r+0x1e>
 8007c0a:	4635      	mov	r5, r6
 8007c0c:	e7df      	b.n	8007bce <_realloc_r+0x1e>

08007c0e <_malloc_usable_size_r>:
 8007c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c12:	1f18      	subs	r0, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bfbc      	itt	lt
 8007c18:	580b      	ldrlt	r3, [r1, r0]
 8007c1a:	18c0      	addlt	r0, r0, r3
 8007c1c:	4770      	bx	lr
	...

08007c20 <_init>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	bf00      	nop
 8007c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c26:	bc08      	pop	{r3}
 8007c28:	469e      	mov	lr, r3
 8007c2a:	4770      	bx	lr

08007c2c <_fini>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	bf00      	nop
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr
