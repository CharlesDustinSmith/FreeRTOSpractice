
39_Cmsis-RTOS_osDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080070c0  080070c0  000170c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  0800726c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e2c  20000078  080072e0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001ea4  080072e0  00021ea4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000259b3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000451c  00000000  00000000  00045a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021f0  00000000  00000000  00049f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002078  00000000  00000000  0004c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004ec7  00000000  00000000  0004e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fa63  00000000  00000000  000530a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee411  00000000  00000000  00072b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00160f1b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093d8  00000000  00000000  00160f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080070a8 	.word	0x080070a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080070a8 	.word	0x080070a8

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:

//


int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a4      	sub	sp, #144	; 0x90
 80004e8:	af00      	add	r7, sp, #0

  HAL_Init();
 80004ea:	f000 fc57 	bl	8000d9c <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f8eb 	bl	80006c8 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f9d3 	bl	800089c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f95d 	bl	80007b4 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 f9a7 	bl	800084c <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 80004fe:	f003 ff5b 	bl	80043b8 <osKernelInitialize>

  osThreadAttr_t greenThreadAttribs = {
 8000502:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000506:	2224      	movs	r2, #36	; 0x24
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 fd02 	bl	8006f14 <memset>
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <main+0xe4>)
 8000512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800051c:	2318      	movs	r3, #24
 800051e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 8000522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000526:	2224      	movs	r2, #36	; 0x24
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fcf2 	bl	8006f14 <memset>
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <main+0xe8>)
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
 8000534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800053a:	2319      	movs	r3, #25
 800053c:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal1
  };

  osThreadAttr_t orangeThreadAttribs = {
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	2224      	movs	r2, #36	; 0x24
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f006 fce4 	bl	8006f14 <memset>
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <main+0xec>)
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
 8000556:	231a      	movs	r3, #26
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal2
  };

  osThreadAttr_t blueThreadAttribs = {
 800055a:	463b      	mov	r3, r7
 800055c:	2224      	movs	r2, #36	; 0x24
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f006 fcd7 	bl	8006f14 <memset>
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <main+0xf0>)
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	231b      	movs	r3, #27
 8000572:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal3
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000574:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000578:	461a      	mov	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xf4>)
 800057e:	f003 ff65 	bl	800444c <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0xf8>)
 8000586:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 8000588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800058c:	461a      	mov	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0xfc>)
 8000592:	f003 ff5b 	bl	800444c <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <main+0x100>)
 800059a:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 800059c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a0:	461a      	mov	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x104>)
 80005a6:	f003 ff51 	bl	800444c <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x108>)
 80005ae:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005b0:	463b      	mov	r3, r7
 80005b2:	461a      	mov	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0x10c>)
 80005b8:	f003 ff48 	bl	800444c <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <main+0x110>)
 80005c0:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005c2:	f003 ff1d 	bl	8004400 <osKernelStart>

  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0xe2>
 80005c8:	080070c0 	.word	0x080070c0
 80005cc:	080070cc 	.word	0x080070cc
 80005d0:	080070d8 	.word	0x080070d8
 80005d4:	080070e4 	.word	0x080070e4
 80005d8:	080005f9 	.word	0x080005f9
 80005dc:	20000430 	.word	0x20000430
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	2000042c 	.word	0x2000042c
 80005e8:	08000661 	.word	0x08000661
 80005ec:	20000438 	.word	0x20000438
 80005f0:	08000695 	.word	0x08000695
 80005f4:	20000434 	.word	0x20000434

080005f8 <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <vGreenLedControllerTask+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <vGreenLedControllerTask+0x30>)
 8000608:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e002      	b.n	8000616 <vGreenLedControllerTask+0x1e>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f641 3257 	movw	r2, #6999	; 0x1b57
 800061c:	4293      	cmp	r3, r2
 800061e:	d9f7      	bls.n	8000610 <vGreenLedControllerTask+0x18>
		osDelay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f003 ffa5 	bl	8004570 <osDelay>
		++Green_TaskProfiler;
 8000626:	e7eb      	b.n	8000600 <vGreenLedControllerTask+0x8>
 8000628:	20000424 	.word	0x20000424

0800062c <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Red_TaskProfiler;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <vRedLedControllerTask+0x30>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <vRedLedControllerTask+0x30>)
 800063c:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e002      	b.n	800064a <vRedLedControllerTask+0x1e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000650:	4293      	cmp	r3, r2
 8000652:	d9f7      	bls.n	8000644 <vRedLedControllerTask+0x18>
		osDelay(100);
 8000654:	2064      	movs	r0, #100	; 0x64
 8000656:	f003 ff8b 	bl	8004570 <osDelay>
		++Red_TaskProfiler;
 800065a:	e7eb      	b.n	8000634 <vRedLedControllerTask+0x8>
 800065c:	20000420 	.word	0x20000420

08000660 <vOrangeLedControllerTask>:
	}
}


void vOrangeLedControllerTask(void *pvParameters)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Orange_TaskProfiler;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <vOrangeLedControllerTask+0x30>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <vOrangeLedControllerTask+0x30>)
 8000670:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	e002      	b.n	800067e <vOrangeLedControllerTask+0x1e>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000684:	4293      	cmp	r3, r2
 8000686:	d9f7      	bls.n	8000678 <vOrangeLedControllerTask+0x18>
		osDelay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f003 ff71 	bl	8004570 <osDelay>
		++Orange_TaskProfiler;
 800068e:	e7eb      	b.n	8000668 <vOrangeLedControllerTask+0x8>
 8000690:	2000041c 	.word	0x2000041c

08000694 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Blue_TaskProfiler;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vBlueLedControllerTask+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <vBlueLedControllerTask+0x30>)
 80006a4:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e002      	b.n	80006b2 <vBlueLedControllerTask+0x1e>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d9f7      	bls.n	80006ac <vBlueLedControllerTask+0x18>
		osDelay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f003 ff57 	bl	8004570 <osDelay>
		++Blue_TaskProfiler;
 80006c2:	e7eb      	b.n	800069c <vBlueLedControllerTask+0x8>
 80006c4:	20000428 	.word	0x20000428

080006c8 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09a      	sub	sp, #104	; 0x68
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2248      	movs	r2, #72	; 0x48
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fc1c 	bl	8006f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006fc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	f023 0303 	bic.w	r3, r3, #3
 8000708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000712:	f000 ff99 	bl	8001648 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff feb4 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <SystemClock_Config+0xe8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000724:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <SystemClock_Config+0xe8>)
 8000726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <SystemClock_Config+0xe8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000738:	2327      	movs	r3, #39	; 0x27
 800073a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000754:	2300      	movs	r3, #0
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000758:	2360      	movs	r3, #96	; 0x60
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fb61 	bl	8001e2c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000770:	f000 f8fe 	bl	8000970 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000774:	236f      	movs	r3, #111	; 0x6f
 8000776:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000778:	2302      	movs	r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f001 febd 	bl	8002514 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007a0:	f000 f8e6 	bl	8000970 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a4:	f002 fcaa 	bl	80030fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80007a8:	bf00      	nop
 80007aa:	3768      	adds	r7, #104	; 0x68
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58000400 	.word	0x58000400

080007b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_LPUART1_UART_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007fc:	4811      	ldr	r0, [pc, #68]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007fe:	f003 f82d 	bl	800385c <HAL_UART_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f8b2 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 8000810:	f003 fc88 	bl	8004124 <HAL_UARTEx_SetTxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f8a9 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 8000822:	f003 fcbd 	bl	80041a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800082c:	f000 f8a0 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 8000832:	f003 fc3e 	bl	80040b2 <HAL_UARTEx_DisableFifoMode>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f898 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000094 	.word	0x20000094
 8000848:	40008000 	.word	0x40008000

0800084c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USB_PCD_Init+0x48>)
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <MX_USB_PCD_Init+0x4c>)
 8000854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USB_PCD_Init+0x48>)
 8000858:	2208      	movs	r2, #8
 800085a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_USB_PCD_Init+0x48>)
 800085e:	2202      	movs	r2, #2
 8000860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USB_PCD_Init+0x48>)
 8000864:	2202      	movs	r2, #2
 8000866:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_USB_PCD_Init+0x48>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USB_PCD_Init+0x48>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_USB_PCD_Init+0x48>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USB_PCD_Init+0x48>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_USB_PCD_Init+0x48>)
 8000882:	f000 fd3f 	bl	8001304 <HAL_PCD_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800088c:	f000 f870 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000124 	.word	0x20000124
 8000898:	40006800 	.word	0x40006800

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b0:	2004      	movs	r0, #4
 80008b2:	f7ff fdfd 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fdfa 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff fdf7 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2008      	movs	r0, #8
 80008c4:	f7ff fdf4 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2123      	movs	r1, #35	; 0x23
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_GPIO_Init+0xa4>)
 80008ce:	f000 fd01 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2310      	movs	r3, #16
 80008d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4818      	ldr	r0, [pc, #96]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008e4:	f000 fb86 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80008e8:	2323      	movs	r3, #35	; 0x23
 80008ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4810      	ldr	r0, [pc, #64]	; (8000940 <MX_GPIO_Init+0xa4>)
 80008fe:	f000 fb79 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000902:	2303      	movs	r3, #3
 8000904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0xac>)
 8000914:	f000 fb6e 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000918:	23c0      	movs	r3, #192	; 0xc0
 800091a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000928:	2307      	movs	r3, #7
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_GPIO_Init+0xa4>)
 8000932:	f000 fb5f 	bl	8000ff4 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	48000400 	.word	0x48000400
 8000944:	48000800 	.word	0x48000800
 8000948:	48000c00 	.word	0x48000c00

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 fa3d 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40012c00 	.word	0x40012c00

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>

0800097a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4313      	orrs	r3, r2
 8000990:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80009de:	b480      	push	{r7}
 80009e0:	b085      	sub	sp, #20
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80009e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80009f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4013      	ands	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 fabd 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fe17 	bl	8001668 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000a3a:	f000 fe57 	bl	80016ec <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	; 0x70
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2250      	movs	r2, #80	; 0x50
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 fa53 	bl	8006f14 <memset>
  if(huart->Instance==LPUART1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d124      	bne.n	8000ac2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f9c3 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a90:	f7ff ff6e 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff ffa2 	bl	80009de <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ff6d 	bl	800097a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fa99 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3770      	adds	r7, #112	; 0x70
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40008000 	.word	0x40008000

08000ad0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2250      	movs	r2, #80	; 0x50
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 fa0f 	bl	8006f14 <memset>
  if(hpcd->Instance==USB)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_PCD_MspInit+0xa8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d136      	bne.n	8000b6e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b06:	2318      	movs	r3, #24
 8000b08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b20:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f96f 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000b38:	f7ff ff1a 	bl	8000970 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff ff1c 	bl	800097a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b46:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b54:	230a      	movs	r3, #10
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fa47 	bl	8000ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b66:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b6a:	f7ff ff1f 	bl	80009ac <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3770      	adds	r7, #112	; 0x70
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40006800 	.word	0x40006800

08000b7c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2019      	movs	r0, #25
 8000bc6:	f000 f9ed 	bl	8000fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bca:	2019      	movs	r0, #25
 8000bcc:	f000 fa04 	bl	8000fd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bd4:	f7ff ffd2 	bl	8000b7c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fe82 	bl	80028ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be8:	f001 fe6a 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8000bec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_InitTick+0x8c>)
 8000bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf6:	0c9b      	lsrs	r3, r3, #18
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_InitTick+0x90>)
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_InitTick+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_InitTick+0x90>)
 8000c04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_InitTick+0x90>)
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_InitTick+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_InitTick+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <HAL_InitTick+0x90>)
 8000c1e:	f002 fb84 	bl	800332a <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_InitTick+0x90>)
 8000c2a:	f002 fbdf 	bl	80033ec <HAL_TIM_Base_Start_IT>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	2000043c 	.word	0x2000043c
 8000c44:	40012c00 	.word	0x40012c00

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c7a:	f002 fc05 	bl	8003488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000043c 	.word	0x2000043c

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <SystemInit+0x98>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <SystemInit+0x98>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000cb4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <SystemInit+0x9c>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd2:	f023 0305 	bic.w	r3, r3, #5
 8000cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <SystemInit+0xa0>)
 8000cf4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <SystemInit+0xa0>)
 8000cfc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	faf6fefb 	.word	0xfaf6fefb
 8000d28:	22041000 	.word	0x22041000

08000d2c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d2c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d30:	3304      	adds	r3, #4

08000d32 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d32:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d34:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d36:	d3f9      	bcc.n	8000d2c <CopyDataInit>
  bx lr
 8000d38:	4770      	bx	lr

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d3a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d3c:	3004      	adds	r0, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d3e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>
  bx lr
 8000d42:	4770      	bx	lr

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d48:	f7ff ff9e 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopForever+0x8>)
 8000d4e:	490c      	ldr	r1, [pc, #48]	; (8000d80 <LoopForever+0xc>)
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <LoopForever+0x10>)
 8000d52:	2300      	movs	r3, #0
 8000d54:	f7ff ffed 	bl	8000d32 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <LoopForever+0x14>)
 8000d5a:	490c      	ldr	r1, [pc, #48]	; (8000d8c <LoopForever+0x18>)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f7ff ffee 	bl	8000d3e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <LoopForever+0x1c>)
 8000d64:	490b      	ldr	r1, [pc, #44]	; (8000d94 <LoopForever+0x20>)
 8000d66:	2300      	movs	r3, #0
 8000d68:	f7ff ffe9 	bl	8000d3e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6c:	f006 f89e 	bl	8006eac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000d70:	f7ff fbb8 	bl	80004e4 <main>

08000d74 <LoopForever>:

LoopForever:
  b LoopForever
 8000d74:	e7fe      	b.n	8000d74 <LoopForever>
 8000d76:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000d78:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	20000078 	.word	0x20000078
 8000d84:	0800726c 	.word	0x0800726c
  INIT_BSS _sbss, _ebss
 8000d88:	20000078 	.word	0x20000078
 8000d8c:	20001ea4 	.word	0x20001ea4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d90:	20030000 	.word	0x20030000
 8000d94:	20030000 	.word	0x20030000

08000d98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_Init+0x3c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_Init+0x3c>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db2:	2003      	movs	r0, #3
 8000db4:	f000 f8eb 	bl	8000f8e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db8:	200f      	movs	r0, #15
 8000dba:	f7ff fef9 	bl	8000bb0 <HAL_InitTick>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	e001      	b.n	8000dce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dca:	f7ff fe21 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58004000 	.word	0x58004000

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000488 	.word	0x20000488

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000488 	.word	0x20000488

08000e1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTickPrio+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff4c 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff63 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb3 	bl	8000f28 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff82 	bl	8000ed4 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff56 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e14c      	b.n	800129e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 813e 	beq.w	8001298 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_GPIO_Init+0x40>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 0201 	and.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d017      	beq.n	80010d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0203 	and.w	r2, r3, #3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8098 	beq.w	8001298 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a54      	ldr	r2, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d019      	beq.n	80011c8 <HAL_GPIO_Init+0x1d4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1d0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1cc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2d4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1c8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1c4>
 80011b4:	2304      	movs	r3, #4
 80011b6:	e008      	b.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011bc:	2303      	movs	r3, #3
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011c8:	2300      	movs	r3, #0
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011da:	4938      	ldr	r1, [pc, #224]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800123e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001262:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800126c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f47f aeab 	bne.w	8001004 <HAL_GPIO_Init+0x10>
  }
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40010000 	.word	0x40010000
 80012c0:	48000400 	.word	0x48000400
 80012c4:	48000800 	.word	0x48000800
 80012c8:	48000c00 	.word	0x48000c00
 80012cc:	48001000 	.word	0x48001000
 80012d0:	58000800 	.word	0x58000800

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af06      	add	r7, sp, #24
 800130a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0dd      	b.n	80014d2 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fbd0 	bl	8000ad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 ffb8 	bl	80042b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e04d      	b.n	80013ea <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3305      	adds	r3, #5
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	3304      	adds	r3, #4
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b298      	uxth	r0, r3
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	333a      	adds	r3, #58	; 0x3a
 800138e:	4602      	mov	r2, r0
 8001390:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	3307      	adds	r3, #7
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	333c      	adds	r3, #60	; 0x3c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	3340      	adds	r3, #64	; 0x40
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3344      	adds	r3, #68	; 0x44
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3ac      	bcc.n	800134e <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e044      	b.n	8001484 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3301      	adds	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3b5      	bcc.n	80013fa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	687e      	ldr	r6, [r7, #4]
 8001496:	466d      	mov	r5, sp
 8001498:	f106 0410 	add.w	r4, r6, #16
 800149c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a8:	1d33      	adds	r3, r6, #4
 80014aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f002 ff1e 	bl	80042ee <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f805 	bl	80014da <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001512:	b29b      	uxth	r3, r3
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LL_EXTI_EnableIT_0_31+0x24>)
 800153a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <LL_EXTI_EnableIT_0_31+0x24>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	58000800 	.word	0x58000800

08001558 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <LL_EXTI_DisableIT_0_31+0x28>)
 8001562:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	43db      	mvns	r3, r3
 800156a:	4905      	ldr	r1, [pc, #20]	; (8001580 <LL_EXTI_DisableIT_0_31+0x28>)
 800156c:	4013      	ands	r3, r2
 800156e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	58000800 	.word	0x58000800

08001584 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800158e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	43db      	mvns	r3, r3
 8001596:	4905      	ldr	r1, [pc, #20]	; (80015ac <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001598:	4013      	ands	r3, r2
 800159a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	58000800 	.word	0x58000800

080015b0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]

}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	58000800 	.word	0x58000800

080015d4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	4904      	ldr	r1, [pc, #16]	; (80015f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	58000800 	.word	0x58000800

080015fc <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	58000800 	.word	0x58000800

08001620 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	43db      	mvns	r3, r3
 8001630:	4904      	ldr	r1, [pc, #16]	; (8001644 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001632:	4013      	ands	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	58000800 	.word	0x58000800

08001648 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	58000400 	.word	0x58000400

08001668 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_PWR_ConfigPVD+0x80>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 020e 	bic.w	r2, r3, #14
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	491a      	ldr	r1, [pc, #104]	; (80016e8 <HAL_PWR_ConfigPVD+0x80>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8001682:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001686:	f7ff ff67 	bl	8001558 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800168a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800168e:	f7ff ff79 	bl	8001584 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001692:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001696:	f7ff ffc3 	bl	8001620 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800169a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800169e:	f7ff ff99 	bl	80015d4 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80016ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016b2:	f7ff ff3d 	bl	8001530 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80016c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016c6:	f7ff ff73 	bl	80015b0 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80016d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80016da:	f7ff ff8f 	bl	80015fc <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58000400 	.word	0x58000400

080016ec <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_PWR_EnablePVD+0x1c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_PWR_EnablePVD+0x1c>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6053      	str	r3, [r2, #4]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	58000400 	.word	0x58000400

0800170c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <HAL_PWREx_GetVoltageRange+0x18>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	58000400 	.word	0x58000400

08001728 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800173a:	d101      	bne.n	8001740 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800179a:	d101      	bne.n	80017a0 <LL_RCC_HSE_IsReady+0x18>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <LL_RCC_HSE_IsReady+0x1a>
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	d101      	bne.n	8001800 <LL_RCC_HSI_IsReady+0x18>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <LL_RCC_HSI_IsReady+0x1a>
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d101      	bne.n	8001892 <LL_RCC_HSI48_IsReady+0x18>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_RCC_HSI48_IsReady+0x1a>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b02      	cmp	r3, #2
 8001938:	d101      	bne.n	800193e <LL_RCC_LSE_IsReady+0x18>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_RCC_LSE_IsReady+0x1a>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d101      	bne.n	80019a6 <LL_RCC_LSI1_IsReady+0x18>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_RCC_LSI1_IsReady+0x1a>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d101      	bne.n	8001a0e <LL_RCC_LSI2_IsReady+0x18>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_RCC_LSI2_IsReady+0x1a>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6013      	str	r3, [r2, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d101      	bne.n	8001a9a <LL_RCC_MSI_IsReady+0x16>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_RCC_MSI_IsReady+0x18>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ade:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2bb0      	cmp	r3, #176	; 0xb0
 8001ae4:	d901      	bls.n	8001aea <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001ae6:	23b0      	movs	r3, #176	; 0xb0
 8001ae8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 0203 	bic.w	r2, r3, #3
 8001b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 030c 	and.w	r3, r3, #12
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d00:	d101      	bne.n	8001d06 <LL_RCC_PLL_IsReady+0x18>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_RCC_PLL_IsReady+0x1a>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d86:	d101      	bne.n	8001d8c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dac:	d101      	bne.n	8001db2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd2:	d101      	bne.n	8001dd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df6:	d101      	bne.n	8001dfc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e1a:	d101      	bne.n	8001e20 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b08d      	sub	sp, #52	; 0x34
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e363      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 808d 	beq.w	8001f66 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4c:	f7ff fe7d 	bl	8001b4a <LL_RCC_GetSysClkSource>
 8001e50:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e52:	f7ff ff83 	bl	8001d5c <LL_RCC_PLL_GetMainSource>
 8001e56:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3e>
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d147      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d144      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e347      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e7a:	f7ff fe28 	bl	8001ace <LL_RCC_MSI_GetRange>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	429c      	cmp	r4, r3
 8001e82:	d914      	bls.n	8001eae <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fd61 	bl	8002950 <RCC_SetFlashLatencyFromMSIRange>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e336      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe02 	bl	8001aa6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fe26 	bl	8001af8 <LL_RCC_MSI_SetCalibTrimming>
 8001eac:	e013      	b.n	8001ed6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fdf7 	bl	8001aa6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe1b 	bl	8001af8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fd42 	bl	8002950 <RCC_SetFlashLatencyFromMSIRange>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e317      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ed6:	f000 fcc9 	bl	800286c <HAL_RCC_GetHCLKFreq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4aa4      	ldr	r2, [pc, #656]	; (8002170 <HAL_RCC_OscConfig+0x344>)
 8001ede:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ee0:	4ba4      	ldr	r3, [pc, #656]	; (8002174 <HAL_RCC_OscConfig+0x348>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fe63 	bl	8000bb0 <HAL_InitTick>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d039      	beq.n	8001f64 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e308      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01e      	beq.n	8001f3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001efc:	f7ff fda4 	bl	8001a48 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f00:	f7fe ff80 	bl	8000e04 <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f08:	f7fe ff7c 	bl	8000e04 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e2f5      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f1a:	f7ff fdb3 	bl	8001a84 <LL_RCC_MSI_IsReady>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f1      	beq.n	8001f08 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fdbc 	bl	8001aa6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fde0 	bl	8001af8 <LL_RCC_MSI_SetCalibTrimming>
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f3a:	f7ff fd94 	bl	8001a66 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe ff61 	bl	8000e04 <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f46:	f7fe ff5d 	bl	8000e04 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e2d6      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f58:	f7ff fd94 	bl	8001a84 <LL_RCC_MSI_IsReady>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f1      	bne.n	8001f46 <HAL_RCC_OscConfig+0x11a>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f64:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d047      	beq.n	8002002 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f72:	f7ff fdea 	bl	8001b4a <LL_RCC_GetSysClkSource>
 8001f76:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f78:	f7ff fef0 	bl	8001d5c <LL_RCC_PLL_GetMainSource>
 8001f7c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x164>
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d134      	bne.n	8002002 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e2b4      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x180>
 8001fa6:	f7ff fbd1 	bl	800174c <LL_RCC_HSE_Enable>
 8001faa:	e001      	b.n	8001fb0 <HAL_RCC_OscConfig+0x184>
 8001fac:	f7ff fbdd 	bl	800176a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff24 	bl	8000e04 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7fe ff20 	bl	8000e04 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e299      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fd2:	f7ff fbd9 	bl	8001788 <LL_RCC_HSE_IsReady>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f1      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x194>
 8001fdc:	e011      	b.n	8002002 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff11 	bl	8000e04 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7fe ff0d 	bl	8000e04 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e286      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ff8:	f7ff fbc6 	bl	8001788 <LL_RCC_HSE_IsReady>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d04c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200e:	f7ff fd9c 	bl	8001b4a <LL_RCC_GetSysClkSource>
 8002012:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002014:	f7ff fea2 	bl	8001d5c <LL_RCC_PLL_GetMainSource>
 8002018:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x200>
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d10e      	bne.n	8002044 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e266      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fbe5 	bl	800180c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002042:	e031      	b.n	80020a8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d019      	beq.n	8002080 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	f7ff fbae 	bl	80017ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fed8 	bl	8000e04 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7fe fed4 	bl	8000e04 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e24d      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800206a:	f7ff fbbd 	bl	80017e8 <LL_RCC_HSI_IsReady>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f1      	beq.n	8002058 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fbc7 	bl	800180c <LL_RCC_HSI_SetCalibTrimming>
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002080:	f7ff fba3 	bl	80017ca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe febe 	bl	8000e04 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe feba 	bl	8000e04 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e233      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800209e:	f7ff fba3 	bl	80017e8 <LL_RCC_HSI_IsReady>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f1      	bne.n	800208c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a3 	beq.w	8002208 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d076      	beq.n	80021b8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d046      	beq.n	8002164 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80020d6:	f7ff fc5a 	bl	800198e <LL_RCC_LSI1_IsReady>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d113      	bne.n	8002108 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80020e0:	f7ff fc33 	bl	800194a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e4:	f7fe fe8e 	bl	8000e04 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020ec:	f7fe fe8a 	bl	8000e04 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e203      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020fe:	f7ff fc46 	bl	800198e <LL_RCC_LSI1_IsReady>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f1      	beq.n	80020ec <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002108:	f7ff fc53 	bl	80019b2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fe7a 	bl	8000e04 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002114:	f7fe fe76 	bl	8000e04 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b03      	cmp	r3, #3
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1ef      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002126:	f7ff fc66 	bl	80019f6 <LL_RCC_LSI2_IsReady>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f1      	beq.n	8002114 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fc70 	bl	8001a1a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800213a:	f7ff fc17 	bl	800196c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe fe61 	bl	8000e04 <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002146:	f7fe fe5d 	bl	8000e04 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e1d6      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002158:	f7ff fc19 	bl	800198e <LL_RCC_LSI1_IsReady>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f1      	bne.n	8002146 <HAL_RCC_OscConfig+0x31a>
 8002162:	e051      	b.n	8002208 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002164:	f7ff fbf1 	bl	800194a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fe4c 	bl	8000e04 <HAL_GetTick>
 800216c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800216e:	e00c      	b.n	800218a <HAL_RCC_OscConfig+0x35e>
 8002170:	20000004 	.word	0x20000004
 8002174:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002178:	f7fe fe44 	bl	8000e04 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1bd      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800218a:	f7ff fc00 	bl	800198e <LL_RCC_LSI1_IsReady>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f1      	beq.n	8002178 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002194:	f7ff fc1e 	bl	80019d4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800219a:	f7fe fe33 	bl	8000e04 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1ac      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021ac:	f7ff fc23 	bl	80019f6 <LL_RCC_LSI2_IsReady>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f1      	bne.n	800219a <HAL_RCC_OscConfig+0x36e>
 80021b6:	e027      	b.n	8002208 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80021b8:	f7ff fc0c 	bl	80019d4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe fe22 	bl	8000e04 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021c4:	f7fe fe1e 	bl	8000e04 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e197      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021d6:	f7ff fc0e 	bl	80019f6 <LL_RCC_LSI2_IsReady>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f1      	bne.n	80021c4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80021e0:	f7ff fbc4 	bl	800196c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fe0e 	bl	8000e04 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ec:	f7fe fe0a 	bl	8000e04 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e183      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021fe:	f7ff fbc6 	bl	800198e <LL_RCC_LSI1_IsReady>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f1      	bne.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05b      	beq.n	80022cc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	4ba7      	ldr	r3, [pc, #668]	; (80024b4 <HAL_RCC_OscConfig+0x688>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d114      	bne.n	800224a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002220:	f7ff fa12 	bl	8001648 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002224:	f7fe fdee 	bl	8000e04 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7fe fdea 	bl	8000e04 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e163      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223e:	4b9d      	ldr	r3, [pc, #628]	; (80024b4 <HAL_RCC_OscConfig+0x688>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_RCC_OscConfig+0x42c>
 8002252:	f7ff fb24 	bl	800189e <LL_RCC_LSE_Enable>
 8002256:	e00c      	b.n	8002272 <HAL_RCC_OscConfig+0x446>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d104      	bne.n	800226a <HAL_RCC_OscConfig+0x43e>
 8002260:	f7ff fb3f 	bl	80018e2 <LL_RCC_LSE_EnableBypass>
 8002264:	f7ff fb1b 	bl	800189e <LL_RCC_LSE_Enable>
 8002268:	e003      	b.n	8002272 <HAL_RCC_OscConfig+0x446>
 800226a:	f7ff fb29 	bl	80018c0 <LL_RCC_LSE_Disable>
 800226e:	f7ff fb49 	bl	8001904 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d014      	beq.n	80022a4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fdc3 	bl	8000e04 <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fdbf 	bl	8000e04 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e136      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002298:	f7ff fb45 	bl	8001926 <LL_RCC_LSE_IsReady>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0ef      	beq.n	8002282 <HAL_RCC_OscConfig+0x456>
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fdae 	bl	8000e04 <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe fdaa 	bl	8000e04 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e121      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80022c2:	f7ff fb30 	bl	8001926 <LL_RCC_LSE_IsReady>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ef      	bne.n	80022ac <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d02c      	beq.n	8002332 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d014      	beq.n	800230a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e0:	f7ff faa9 	bl	8001836 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fd8e 	bl	8000e04 <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ec:	f7fe fd8a 	bl	8000e04 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e103      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022fe:	f7ff fabc 	bl	800187a <LL_RCC_HSI48_IsReady>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f1      	beq.n	80022ec <HAL_RCC_OscConfig+0x4c0>
 8002308:	e013      	b.n	8002332 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800230a:	f7ff faa5 	bl	8001858 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7fe fd79 	bl	8000e04 <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002316:	f7fe fd75 	bl	8000e04 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0ee      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002328:	f7ff faa7 	bl	800187a <LL_RCC_HSI48_IsReady>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f1      	bne.n	8002316 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80e4 	beq.w	8002504 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233c:	f7ff fc05 	bl	8001b4a <LL_RCC_GetSysClkSource>
 8002340:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	2b02      	cmp	r3, #2
 8002350:	f040 80b4 	bne.w	80024bc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0203 	and.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	429a      	cmp	r2, r3
 8002360:	d123      	bne.n	80023aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d11c      	bne.n	80023aa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d114      	bne.n	80023aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d05d      	beq.n	8002466 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	d058      	beq.n	8002462 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0a1      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023c2:	f7ff fc85 	bl	8001cd0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c6:	f7fe fd1d 	bl	8000e04 <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fd19 	bl	8000e04 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e092      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x68c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002406:	0212      	lsls	r2, r2, #8
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800241a:	430a      	orrs	r2, r1
 800241c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002424:	f7ff fc45 	bl	8001cb2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002438:	f7fe fce4 	bl	8000e04 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fce0 	bl	8000e04 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e059      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	e050      	b.n	8002504 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e04f      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d147      	bne.n	8002504 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002474:	f7ff fc1d 	bl	8001cb2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002488:	f7fe fcbc 	bl	8000e04 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fcb8 	bl	8000e04 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e031      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ef      	beq.n	8002490 <HAL_RCC_OscConfig+0x664>
 80024b0:	e028      	b.n	8002504 <HAL_RCC_OscConfig+0x6d8>
 80024b2:	bf00      	nop
 80024b4:	58000400 	.word	0x58000400
 80024b8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d01e      	beq.n	8002500 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	f7ff fc05 	bl	8001cd0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fc9d 	bl	8000e04 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fc99 	bl	8000e04 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e012      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_OscConfig+0x6e4>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
 80024fe:	e001      	b.n	8002504 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3734      	adds	r7, #52	; 0x34
 800250a:	46bd      	mov	sp, r7
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	bf00      	nop
 8002510:	eefefffc 	.word	0xeefefffc

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e12d      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b98      	ldr	r3, [pc, #608]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d91b      	bls.n	800256e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b95      	ldr	r3, [pc, #596]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4993      	ldr	r1, [pc, #588]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002546:	f7fe fc5d 	bl	8000e04 <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	e008      	b.n	8002560 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800254e:	f7fe fc59 	bl	8000e04 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e111      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	4b8a      	ldr	r3, [pc, #552]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d1ef      	bne.n	800254e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff faef 	bl	8001b62 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002584:	f7fe fc3e 	bl	8000e04 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800258c:	f7fe fc3a 	bl	8000e04 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0f2      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800259e:	f7ff fbe9 	bl	8001d74 <LL_RCC_IsActiveFlag_HPRE>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f1      	beq.n	800258c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fae6 	bl	8001b8a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025be:	f7fe fc21 	bl	8000e04 <HAL_GetTick>
 80025c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025c6:	f7fe fc1d 	bl	8000e04 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0d5      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025d8:	f7ff fbde 	bl	8001d98 <LL_RCC_IsActiveFlag_C2HPRE>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f1      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fadf 	bl	8001bb6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fc04 	bl	8000e04 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002600:	f7fe fc00 	bl	8000e04 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0b8      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002612:	f7ff fbd4 	bl	8001dbe <LL_RCC_IsActiveFlag_SHDHPRE>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f1      	beq.n	8002600 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d016      	beq.n	8002656 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fad9 	bl	8001be4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002632:	f7fe fbe7 	bl	8000e04 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800263a:	f7fe fbe3 	bl	8000e04 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e09b      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800264c:	f7ff fbca 	bl	8001de4 <LL_RCC_IsActiveFlag_PPRE1>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f1      	beq.n	800263a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff facf 	bl	8001c0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800266e:	f7fe fbc9 	bl	8000e04 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002676:	f7fe fbc5 	bl	8000e04 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e07d      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002688:	f7ff fbbe 	bl	8001e08 <LL_RCC_IsActiveFlag_PPRE2>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f1      	beq.n	8002676 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d043      	beq.n	8002726 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026a6:	f7ff f86f 	bl	8001788 <LL_RCC_HSE_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11e      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e067      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026bc:	f7ff fb17 	bl	8001cee <LL_RCC_PLL_IsReady>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d113      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e05c      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026d2:	f7ff f9d7 	bl	8001a84 <LL_RCC_MSI_IsReady>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d108      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e051      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026e0:	f7ff f882 	bl	80017e8 <LL_RCC_HSI_IsReady>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e04a      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fa15 	bl	8001b22 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe fb84 	bl	8000e04 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe fb80 	bl	8000e04 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e036      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	f7ff fa18 	bl	8001b4a <LL_RCC_GetSysClkSource>
 800271a:	4602      	mov	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	429a      	cmp	r2, r3
 8002724:	d1ec      	bne.n	8002700 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d21b      	bcs.n	800276c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 0207 	bic.w	r2, r3, #7
 800273c:	4913      	ldr	r1, [pc, #76]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002744:	f7fe fb5e 	bl	8000e04 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	e008      	b.n	800275e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800274c:	f7fe fb5a 	bl	8000e04 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e012      	b.n	8002784 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x278>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d1ef      	bne.n	800274c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800276c:	f000 f87e 	bl	800286c <HAL_RCC_GetHCLKFreq>
 8002770:	4603      	mov	r3, r0
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <HAL_RCC_ClockConfig+0x27c>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002776:	f7fe fb51 	bl	8000e1c <HAL_GetTickPrio>
 800277a:	4603      	mov	r3, r0
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fa17 	bl	8000bb0 <HAL_InitTick>
 8002782:	4603      	mov	r3, r0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	58004000 	.word	0x58004000
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279a:	f7ff f9d6 	bl	8001b4a <LL_RCC_GetSysClkSource>
 800279e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027a6:	f7ff f992 	bl	8001ace <LL_RCC_MSI_GetRange>
 80027aa:	4603      	mov	r3, r0
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e04b      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e045      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d10a      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027ce:	f7fe ffab 	bl	8001728 <LL_RCC_HSE_IsEnabledDiv2>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e03a      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e037      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80027e4:	f7ff faba 	bl	8001d5c <LL_RCC_PLL_GetMainSource>
 80027e8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d003      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x64>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x6a>
 80027f6:	e00d      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027fa:	60bb      	str	r3, [r7, #8]
        break;
 80027fc:	e015      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027fe:	f7fe ff93 	bl	8001728 <LL_RCC_HSE_IsEnabledDiv2>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d102      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_RCC_GetSysClockFreq+0xd0>)
 800280a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800280c:	e00d      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002810:	60bb      	str	r3, [r7, #8]
        break;
 8002812:	e00a      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002814:	f7ff f95b 	bl	8001ace <LL_RCC_MSI_GetRange>
 8002818:	4603      	mov	r3, r0
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	60bb      	str	r3, [r7, #8]
        break;
 8002828:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800282a:	f7ff fa72 	bl	8001d12 <LL_RCC_PLL_GetN>
 800282e:	4602      	mov	r2, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	fb03 f402 	mul.w	r4, r3, r2
 8002836:	f7ff fa85 	bl	8001d44 <LL_RCC_PLL_GetDivider>
 800283a:	4603      	mov	r3, r0
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	3301      	adds	r3, #1
 8002840:	fbb4 f4f3 	udiv	r4, r4, r3
 8002844:	f7ff fa72 	bl	8001d2c <LL_RCC_PLL_GetR>
 8002848:	4603      	mov	r3, r0
 800284a:	0f5b      	lsrs	r3, r3, #29
 800284c:	3301      	adds	r3, #1
 800284e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002852:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bd90      	pop	{r4, r7, pc}
 800285e:	bf00      	nop
 8002860:	08007194 	.word	0x08007194
 8002864:	00f42400 	.word	0x00f42400
 8002868:	01e84800 	.word	0x01e84800

0800286c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b598      	push	{r3, r4, r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002870:	f7ff ff90 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002874:	4604      	mov	r4, r0
 8002876:	f7ff f9dd 	bl	8001c34 <LL_RCC_GetAHBPrescaler>
 800287a:	4603      	mov	r3, r0
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a03      	ldr	r2, [pc, #12]	; (8002890 <HAL_RCC_GetHCLKFreq+0x24>)
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd98      	pop	{r3, r4, r7, pc}
 8002890:	08007134 	.word	0x08007134

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b598      	push	{r3, r4, r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002898:	f7ff ffe8 	bl	800286c <HAL_RCC_GetHCLKFreq>
 800289c:	4604      	mov	r4, r0
 800289e:	f7ff f9f0 	bl	8001c82 <LL_RCC_GetAPB1Prescaler>
 80028a2:	4603      	mov	r3, r0
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd98      	pop	{r3, r4, r7, pc}
 80028bc:	08007174 	.word	0x08007174

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b598      	push	{r3, r4, r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80028c4:	f7ff ffd2 	bl	800286c <HAL_RCC_GetHCLKFreq>
 80028c8:	4604      	mov	r4, r0
 80028ca:	f7ff f9e6 	bl	8001c9a <LL_RCC_GetAPB2Prescaler>
 80028ce:	4603      	mov	r3, r0
 80028d0:	0adb      	lsrs	r3, r3, #11
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd98      	pop	{r3, r4, r7, pc}
 80028e8:	08007174 	.word	0x08007174

080028ec <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	226f      	movs	r2, #111	; 0x6f
 80028fa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80028fc:	f7ff f925 	bl	8001b4a <LL_RCC_GetSysClkSource>
 8002900:	4602      	mov	r2, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002906:	f7ff f995 	bl	8001c34 <LL_RCC_GetAHBPrescaler>
 800290a:	4602      	mov	r2, r0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002910:	f7ff f9b7 	bl	8001c82 <LL_RCC_GetAPB1Prescaler>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800291a:	f7ff f9be 	bl	8001c9a <LL_RCC_GetAPB2Prescaler>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002924:	f7ff f992 	bl	8001c4c <LL_C2_RCC_GetAHBPrescaler>
 8002928:	4602      	mov	r2, r0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800292e:	f7ff f99a 	bl	8001c66 <LL_RCC_GetAHB4Prescaler>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_GetClockConfig+0x60>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0207 	and.w	r2, r3, #7
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	58004000 	.word	0x58004000

08002950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2bb0      	cmp	r3, #176	; 0xb0
 800295c:	d903      	bls.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e007      	b.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002976:	f7ff f976 	bl	8001c66 <LL_RCC_GetAHB4Prescaler>
 800297a:	4603      	mov	r3, r0
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	0c9c      	lsrs	r4, r3, #18
 800299a:	f7fe feb7 	bl	800170c <HAL_PWREx_GetVoltageRange>
 800299e:	4603      	mov	r3, r0
 80029a0:	4619      	mov	r1, r3
 80029a2:	4620      	mov	r0, r4
 80029a4:	f000 f80c 	bl	80029c0 <RCC_SetFlashLatency>
 80029a8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	08007194 	.word	0x08007194
 80029b8:	08007134 	.word	0x08007134
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b093      	sub	sp, #76	; 0x4c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <RCC_SetFlashLatency+0xe8>)
 80029cc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80029d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80029d6:	4a35      	ldr	r2, [pc, #212]	; (8002aac <RCC_SetFlashLatency+0xec>)
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <RCC_SetFlashLatency+0xf0>)
 80029e4:	f107 040c 	add.w	r4, r7, #12
 80029e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029ee:	2300      	movs	r3, #0
 80029f0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d11a      	bne.n	8002a30 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	643b      	str	r3, [r7, #64]	; 0x40
 80029fe:	e013      	b.n	8002a28 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	3348      	adds	r3, #72	; 0x48
 8002a06:	443b      	add	r3, r7
 8002a08:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d807      	bhi.n	8002a22 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	3348      	adds	r3, #72	; 0x48
 8002a18:	443b      	add	r3, r7
 8002a1a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a20:	e020      	b.n	8002a64 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	3301      	adds	r3, #1
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
 8002a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d9e8      	bls.n	8002a00 <RCC_SetFlashLatency+0x40>
 8002a2e:	e019      	b.n	8002a64 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a34:	e013      	b.n	8002a5e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3348      	adds	r3, #72	; 0x48
 8002a3c:	443b      	add	r3, r7
 8002a3e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d807      	bhi.n	8002a58 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3348      	adds	r3, #72	; 0x48
 8002a4e:	443b      	add	r3, r7
 8002a50:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a56:	e005      	b.n	8002a64 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d9e8      	bls.n	8002a36 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <RCC_SetFlashLatency+0xf4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 0207 	bic.w	r2, r3, #7
 8002a6c:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <RCC_SetFlashLatency+0xf4>)
 8002a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a74:	f7fe f9c6 	bl	8000e04 <HAL_GetTick>
 8002a78:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a7a:	e008      	b.n	8002a8e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a7c:	f7fe f9c2 	bl	8000e04 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e007      	b.n	8002a9e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <RCC_SetFlashLatency+0xf4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1ef      	bne.n	8002a7c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	374c      	adds	r7, #76	; 0x4c
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	080070f0 	.word	0x080070f0
 8002aac:	08007100 	.word	0x08007100
 8002ab0:	0800710c 	.word	0x0800710c
 8002ab4:	58004000 	.word	0x58004000

08002ab8 <LL_RCC_LSE_IsEnabled>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <LL_RCC_LSE_IsEnabled+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_RCC_LSE_IsReady>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d101      	bne.n	8002af4 <LL_RCC_LSE_IsReady+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_RCC_LSE_IsReady+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_MSI_EnablePLLMode>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_SetRFWKPClockSource>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_SetSMPSClockSource>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f023 0203 	bic.w	r2, r3, #3
 8002b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_SetSMPSPrescaler>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_RCC_SetUSARTClockSource>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_SetLPUARTClockSource>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_SetI2CClockSource>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_SetLPTIMClockSource>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	43db      	mvns	r3, r3
 8002c44:	401a      	ands	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_SetSAIClockSource>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_RCC_SetRNGClockSource>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_SetCLK48ClockSource>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_SetUSBClockSource>:
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe3 	bl	8002cb8 <LL_RCC_SetCLK48ClockSource>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <LL_RCC_SetADCClockSource>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_SetRTCClockSource>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_RCC_GetRTCClockSource>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_RCC_ForceBackupDomainReset>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_RCC_PLLSAI1_Enable>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_RCC_PLLSAI1_Disable>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002de0:	6013      	str	r3, [r2, #0]
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_RCC_PLLSAI1_IsReady>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfe:	d101      	bne.n	8002e04 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d034      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e34:	d021      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e3a:	d81b      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e40:	d01d      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e46:	d815      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e50:	d110      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e62:	e00d      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f94d 	bl	8003108 <RCCEx_PLLSAI1_ConfigNP>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e72:	e005      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
        break;
 8002e78:	e002      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fee8 	bl	8002c60 <LL_RCC_SetSAIClockSource>
 8002e90:	e001      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d046      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ea2:	f7ff ff56 	bl	8002d52 <LL_RCC_GetRTCClockSource>
 8002ea6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d03c      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002eb2:	f7fe fbc9 	bl	8001648 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff30 	bl	8002d26 <LL_RCC_SetRTCClockSource>
 8002ec6:	e02e      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ed2:	f7ff ff4b 	bl	8002d6c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002ed6:	f7ff ff5a 	bl	8002d8e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002ef2:	f7ff fde1 	bl	8002ab8 <LL_RCC_LSE_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d114      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002efc:	f7fd ff82 	bl	8000e04 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f02:	e00b      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fd ff7e 	bl	8000e04 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d902      	bls.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	77fb      	strb	r3, [r7, #31]
              break;
 8002f1a:	e004      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f1c:	f7ff fdde 	bl	8002adc <LL_RCC_LSE_IsReady>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d1ee      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	77bb      	strb	r3, [r7, #30]
 8002f2a:	e001      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fe2a 	bl	8002b9a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe35 	bl	8002bc6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fe5d 	bl	8002c2c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fe52 	bl	8002c2c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fe2a 	bl	8002bf2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fe1f 	bl	8002bf2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d022      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fe8d 	bl	8002ce4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fec:	d10b      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f8e3 	bl	80031be <RCCEx_PLLSAI1_ConfigNQ>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003002:	7ffb      	ldrb	r3, [r7, #31]
 8003004:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02b      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d008      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003024:	d003      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fe2a 	bl	8002c8c <LL_RCC_SetRNGClockSource>
 8003038:	e00a      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	2000      	movs	r0, #0
 8003046:	f7ff fe21 	bl	8002c8c <LL_RCC_SetRNGClockSource>
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff fe34 	bl	8002cb8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003058:	d107      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003068:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d022      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fe3d 	bl	8002cfa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003088:	d107      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a2:	d10b      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f8e3 	bl	8003274 <RCCEx_PLLSAI1_ConfigNR>
 80030ae:	4603      	mov	r3, r0
 80030b0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80030b2:	7ffb      	ldrb	r3, [r7, #31]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
 80030ba:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd26 	bl	8002b1e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fd45 	bl	8002b72 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fd2c 	bl	8002b4a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80030f2:	7fbb      	ldrb	r3, [r7, #30]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003100:	f7ff fcfe 	bl	8002b00 <LL_RCC_MSI_EnablePLLMode>
}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}

08003108 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003114:	f7ff fe5b 	bl	8002dce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003118:	f7fd fe74 	bl	8000e04 <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800311e:	e009      	b.n	8003134 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003120:	f7fd fe70 	bl	8000e04 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	73fb      	strb	r3, [r7, #15]
      break;
 8003132:	e004      	b.n	800313e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003134:	f7ff fe5a 	bl	8002dec <LL_RCC_PLLSAI1_IsReady>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d137      	bne.n	80031b4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003158:	4313      	orrs	r3, r2
 800315a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316e:	4313      	orrs	r3, r2
 8003170:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003172:	f7ff fe1d 	bl	8002db0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003176:	f7fd fe45 	bl	8000e04 <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800317c:	e009      	b.n	8003192 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800317e:	f7fd fe41 	bl	8000e04 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d902      	bls.n	8003192 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	73fb      	strb	r3, [r7, #15]
        break;
 8003190:	e004      	b.n	800319c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003192:	f7ff fe2b 	bl	8002dec <LL_RCC_PLLSAI1_IsReady>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d1f0      	bne.n	800317e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d108      	bne.n	80031b4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b0:	4313      	orrs	r3, r2
 80031b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031ca:	f7ff fe00 	bl	8002dce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031ce:	f7fd fe19 	bl	8000e04 <HAL_GetTick>
 80031d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031d4:	e009      	b.n	80031ea <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d6:	f7fd fe15 	bl	8000e04 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d902      	bls.n	80031ea <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e004      	b.n	80031f4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ea:	f7ff fdff 	bl	8002dec <LL_RCC_PLLSAI1_IsReady>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d137      	bne.n	800326a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320e:	4313      	orrs	r3, r2
 8003210:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003224:	4313      	orrs	r3, r2
 8003226:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003228:	f7ff fdc2 	bl	8002db0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd fdea 	bl	8000e04 <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003232:	e009      	b.n	8003248 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003234:	f7fd fde6 	bl	8000e04 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	73fb      	strb	r3, [r7, #15]
        break;
 8003246:	e004      	b.n	8003252 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003248:	f7ff fdd0 	bl	8002dec <LL_RCC_PLLSAI1_IsReady>
 800324c:	4603      	mov	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	d1f0      	bne.n	8003234 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003266:	4313      	orrs	r3, r2
 8003268:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003280:	f7ff fda5 	bl	8002dce <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003284:	f7fd fdbe 	bl	8000e04 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800328a:	e009      	b.n	80032a0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800328c:	f7fd fdba 	bl	8000e04 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	73fb      	strb	r3, [r7, #15]
      break;
 800329e:	e004      	b.n	80032aa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032a0:	f7ff fda4 	bl	8002dec <LL_RCC_PLLSAI1_IsReady>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d137      	bne.n	8003320 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c4:	4313      	orrs	r3, r2
 80032c6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032da:	4313      	orrs	r3, r2
 80032dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032de:	f7ff fd67 	bl	8002db0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e2:	f7fd fd8f 	bl	8000e04 <HAL_GetTick>
 80032e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032e8:	e009      	b.n	80032fe <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ea:	f7fd fd8b 	bl	8000e04 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d902      	bls.n	80032fe <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	73fb      	strb	r3, [r7, #15]
        break;
 80032fc:	e004      	b.n	8003308 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032fe:	f7ff fd75 	bl	8002dec <LL_RCC_PLLSAI1_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d1f0      	bne.n	80032ea <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331c:	4313      	orrs	r3, r2
 800331e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e049      	b.n	80033d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f841 	bl	80033d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 f9d5 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d001      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e036      	b.n	8003472 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_TIM_Base_Start_IT+0x94>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x44>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d115      	bne.n	800345c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_TIM_Base_Start_IT+0x98>)
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d015      	beq.n	800346e <HAL_TIM_Base_Start_IT+0x82>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d011      	beq.n	800346e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e008      	b.n	800346e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e000      	b.n	8003470 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	00010007 	.word	0x00010007

08003488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d122      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0202 	mvn.w	r2, #2
 80034b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f905 	bl	80036da <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8f7 	bl	80036c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f908 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d122      	bne.n	8003538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11b      	bne.n	8003538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0204 	mvn.w	r2, #4
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8db 	bl	80036da <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8cd 	bl	80036c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8de 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0208 	mvn.w	r2, #8
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2204      	movs	r2, #4
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8b1 	bl	80036da <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8a3 	bl	80036c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8b4 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b10      	cmp	r3, #16
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2208      	movs	r2, #8
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f887 	bl	80036da <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f879 	bl	80036c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f88a 	bl	80036ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0201 	mvn.w	r2, #1
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd f9a0 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8de 	bl	80037f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	d10e      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d107      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f8d1 	bl	8003808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d10e      	bne.n	8003692 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f838 	bl	8003702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d10e      	bne.n	80036be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d107      	bne.n	80036be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f06f 0220 	mvn.w	r2, #32
 80036b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f891 	bl	80037e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <TIM_Base_SetConfig+0xbc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x20>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <TIM_Base_SetConfig+0xbc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x52>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x52>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <TIM_Base_SetConfig+0xc0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x52>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <TIM_Base_SetConfig+0xc4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <TIM_Base_SetConfig+0xbc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0xa0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <TIM_Base_SetConfig+0xc0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0xa0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <TIM_Base_SetConfig+0xc4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d103      	bne.n	80037c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	615a      	str	r2, [r3, #20]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_RCC_GetUSARTClockSource>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4013      	ands	r3, r2
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_RCC_GetLPUARTClockSource>:
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4013      	ands	r3, r2
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fd f8e1 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2224      	movs	r2, #36	; 0x24
 800388a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f82c 	bl	80038fc <UART_SetConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e022      	b.n	80038f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa46 	bl	8003d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 facd 	bl	8003e8c <UART_CheckIdleState>
 80038f2:	4603      	mov	r3, r0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b08c      	sub	sp, #48	; 0x30
 8003902:	af00      	add	r7, sp, #0
 8003904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	431a      	orrs	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	431a      	orrs	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	4313      	orrs	r3, r2
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4baf      	ldr	r3, [pc, #700]	; (8003be8 <UART_SetConfig+0x2ec>)
 800392c:	4013      	ands	r3, r2
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003934:	430b      	orrs	r3, r1
 8003936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4aa4      	ldr	r2, [pc, #656]	; (8003bec <UART_SetConfig+0x2f0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003964:	4313      	orrs	r3, r2
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003972:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800397c:	430b      	orrs	r3, r1
 800397e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	f023 010f 	bic.w	r1, r3, #15
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a95      	ldr	r2, [pc, #596]	; (8003bf0 <UART_SetConfig+0x2f4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d125      	bne.n	80039ec <UART_SetConfig+0xf0>
 80039a0:	2003      	movs	r0, #3
 80039a2:	f7ff ff3b 	bl	800381c <LL_RCC_GetUSARTClockSource>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d81b      	bhi.n	80039e4 <UART_SetConfig+0xe8>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0xb8>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d5 	.word	0x080039d5
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ca:	e042      	b.n	8003a52 <UART_SetConfig+0x156>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d2:	e03e      	b.n	8003a52 <UART_SetConfig+0x156>
 80039d4:	2304      	movs	r3, #4
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039da:	e03a      	b.n	8003a52 <UART_SetConfig+0x156>
 80039dc:	2308      	movs	r3, #8
 80039de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e2:	e036      	b.n	8003a52 <UART_SetConfig+0x156>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ea:	e032      	b.n	8003a52 <UART_SetConfig+0x156>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7e      	ldr	r2, [pc, #504]	; (8003bec <UART_SetConfig+0x2f0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d12a      	bne.n	8003a4c <UART_SetConfig+0x150>
 80039f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80039fa:	f7ff ff1f 	bl	800383c <LL_RCC_GetLPUARTClockSource>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a04:	d01a      	beq.n	8003a3c <UART_SetConfig+0x140>
 8003a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a0a:	d81b      	bhi.n	8003a44 <UART_SetConfig+0x148>
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a10:	d00c      	beq.n	8003a2c <UART_SetConfig+0x130>
 8003a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a16:	d815      	bhi.n	8003a44 <UART_SetConfig+0x148>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <UART_SetConfig+0x128>
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a20:	d008      	beq.n	8003a34 <UART_SetConfig+0x138>
 8003a22:	e00f      	b.n	8003a44 <UART_SetConfig+0x148>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2a:	e012      	b.n	8003a52 <UART_SetConfig+0x156>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e00e      	b.n	8003a52 <UART_SetConfig+0x156>
 8003a34:	2304      	movs	r3, #4
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e00a      	b.n	8003a52 <UART_SetConfig+0x156>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e006      	b.n	8003a52 <UART_SetConfig+0x156>
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	e002      	b.n	8003a52 <UART_SetConfig+0x156>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a65      	ldr	r2, [pc, #404]	; (8003bec <UART_SetConfig+0x2f0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	f040 8097 	bne.w	8003b8c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d823      	bhi.n	8003aae <UART_SetConfig+0x1b2>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x170>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003aaf 	.word	0x08003aaf
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aaf 	.word	0x08003aaf
 8003a7c:	08003a9f 	.word	0x08003a9f
 8003a80:	08003aaf 	.word	0x08003aaf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003aaf 	.word	0x08003aaf
 8003a8c:	08003aa7 	.word	0x08003aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe ff00 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8003a94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a96:	e010      	b.n	8003aba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <UART_SetConfig+0x2f8>)
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a9c:	e00d      	b.n	8003aba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7fe fe79 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aa4:	e009      	b.n	8003aba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003aac:	e005      	b.n	8003aba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 812a 	beq.w	8003d16 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	4a4c      	ldr	r2, [pc, #304]	; (8003bf8 <UART_SetConfig+0x2fc>)
 8003ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003acc:	461a      	mov	r2, r3
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d305      	bcc.n	8003af2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d903      	bls.n	8003afa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003af8:	e10d      	b.n	8003d16 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	2200      	movs	r2, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	60fa      	str	r2, [r7, #12]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <UART_SetConfig+0x2fc>)
 8003b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2200      	movs	r2, #0
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b1c:	f7fc fb30 	bl	8000180 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	020b      	lsls	r3, r1, #8
 8003b32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b36:	0202      	lsls	r2, r0, #8
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	6849      	ldr	r1, [r1, #4]
 8003b3c:	0849      	lsrs	r1, r1, #1
 8003b3e:	2000      	movs	r0, #0
 8003b40:	460c      	mov	r4, r1
 8003b42:	4605      	mov	r5, r0
 8003b44:	eb12 0804 	adds.w	r8, r2, r4
 8003b48:	eb43 0905 	adc.w	r9, r3, r5
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	469a      	mov	sl, r3
 8003b54:	4693      	mov	fp, r2
 8003b56:	4652      	mov	r2, sl
 8003b58:	465b      	mov	r3, fp
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	f7fc fb0f 	bl	8000180 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4613      	mov	r3, r2
 8003b68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b70:	d308      	bcc.n	8003b84 <UART_SetConfig+0x288>
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b78:	d204      	bcs.n	8003b84 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	e0c8      	b.n	8003d16 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b8a:	e0c4      	b.n	8003d16 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b94:	d16d      	bne.n	8003c72 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003b96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	2b07      	cmp	r3, #7
 8003b9e:	d82d      	bhi.n	8003bfc <UART_SetConfig+0x300>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <UART_SetConfig+0x2ac>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bc9 	.word	0x08003bc9
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bfd 	.word	0x08003bfd
 8003bb4:	08003bd7 	.word	0x08003bd7
 8003bb8:	08003bfd 	.word	0x08003bfd
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003bdf 	.word	0x08003bdf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7fe fe7a 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bce:	e01b      	b.n	8003c08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <UART_SetConfig+0x2f8>)
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bd4:	e018      	b.n	8003c08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd6:	f7fe fddd 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8003bda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bdc:	e014      	b.n	8003c08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003be4:	e010      	b.n	8003c08 <UART_SetConfig+0x30c>
 8003be6:	bf00      	nop
 8003be8:	cfff69f3 	.word	0xcfff69f3
 8003bec:	40008000 	.word	0x40008000
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	080071d4 	.word	0x080071d4
      default:
        pclk = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8083 	beq.w	8003d16 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <UART_SetConfig+0x444>)
 8003c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c22:	005a      	lsls	r2, r3, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	441a      	add	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2b0f      	cmp	r3, #15
 8003c3a:	d916      	bls.n	8003c6a <UART_SetConfig+0x36e>
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c42:	d212      	bcs.n	8003c6a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	8bfb      	ldrh	r3, [r7, #30]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	8bfa      	ldrh	r2, [r7, #30]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e055      	b.n	8003d16 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c70:	e051      	b.n	8003d16 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c76:	3b01      	subs	r3, #1
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d822      	bhi.n	8003cc2 <UART_SetConfig+0x3c6>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x388>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003ca5 	.word	0x08003ca5
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cb3 	.word	0x08003cb3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003cc3 	.word	0x08003cc3
 8003ca0:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe fe0c 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <UART_SetConfig+0x448>)
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cb0:	e00d      	b.n	8003cce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe fd6f 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8003cb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cb8:	e009      	b.n	8003cce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cc0:	e005      	b.n	8003cce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <UART_SetConfig+0x444>)
 8003cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	441a      	add	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	d908      	bls.n	8003d10 <UART_SetConfig+0x414>
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d204      	bcs.n	8003d10 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a3a      	ldr	r2, [r7, #32]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e002      	b.n	8003d16 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003d32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3730      	adds	r7, #48	; 0x30
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d40:	080071d4 	.word	0x080071d4
 8003d44:	00f42400 	.word	0x00f42400

08003d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01a      	beq.n	8003e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e46:	d10a      	bne.n	8003e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e9c:	f7fc ffb2 	bl	8000e04 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d10e      	bne.n	8003ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f82f 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e025      	b.n	8003f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d10e      	bne.n	8003efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f819 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e00f      	b.n	8003f1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b09c      	sub	sp, #112	; 0x70
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f32:	e0a9      	b.n	8004088 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	f000 80a5 	beq.w	8004088 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fc ff61 	bl	8000e04 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d140      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f68:	667b      	str	r3, [r7, #100]	; 0x64
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e6      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e069      	b.n	80040aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d051      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff2:	d149      	bne.n	8004088 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e6      	bne.n	8003ffe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	613b      	str	r3, [r7, #16]
   return(result);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	66bb      	str	r3, [r7, #104]	; 0x68
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3308      	adds	r3, #8
 800404e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004050:	623a      	str	r2, [r7, #32]
 8004052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	6a3a      	ldr	r2, [r7, #32]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	61bb      	str	r3, [r7, #24]
   return(result);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e010      	b.n	80040aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	429a      	cmp	r2, r3
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	f43f af46 	beq.w	8003f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3770      	adds	r7, #112	; 0x70
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e027      	b.n	8004118 <HAL_UARTEx_DisableFifoMode+0x66>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004138:	2302      	movs	r3, #2
 800413a:	e02d      	b.n	8004198 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f84f 	bl	800421c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e02d      	b.n	8004214 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f811 	bl	800421c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800423c:	e031      	b.n	80042a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800423e:	2308      	movs	r3, #8
 8004240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004242:	2308      	movs	r3, #8
 8004244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	0e5b      	lsrs	r3, r3, #25
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	0f5b      	lsrs	r3, r3, #29
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004266:	7bbb      	ldrb	r3, [r7, #14]
 8004268:	7b3a      	ldrb	r2, [r7, #12]
 800426a:	4911      	ldr	r1, [pc, #68]	; (80042b0 <UARTEx_SetNbDataToProcess+0x94>)
 800426c:	5c8a      	ldrb	r2, [r1, r2]
 800426e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004272:	7b3a      	ldrb	r2, [r7, #12]
 8004274:	490f      	ldr	r1, [pc, #60]	; (80042b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004278:	fb93 f3f2 	sdiv	r3, r3, r2
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	7b7a      	ldrb	r2, [r7, #13]
 8004288:	4909      	ldr	r1, [pc, #36]	; (80042b0 <UARTEx_SetNbDataToProcess+0x94>)
 800428a:	5c8a      	ldrb	r2, [r1, r2]
 800428c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004290:	7b7a      	ldrb	r2, [r7, #13]
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004296:	fb93 f3f2 	sdiv	r3, r3, r2
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	080071ec 	.word	0x080071ec
 80042b4:	080071f4 	.word	0x080071f4

080042b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042c0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80042c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4013      	ands	r3, r2
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042ee:	b084      	sub	sp, #16
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	f107 0014 	add.w	r0, r7, #20
 80042fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	b004      	add	sp, #16
 800432e:	4770      	bx	lr

08004330 <__NVIC_SetPriority>:
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	6039      	str	r1, [r7, #0]
 800433a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	2b00      	cmp	r3, #0
 8004342:	db0a      	blt.n	800435a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	490c      	ldr	r1, [pc, #48]	; (800437c <__NVIC_SetPriority+0x4c>)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	440b      	add	r3, r1
 8004354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004358:	e00a      	b.n	8004370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4908      	ldr	r1, [pc, #32]	; (8004380 <__NVIC_SetPriority+0x50>)
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	3b04      	subs	r3, #4
 8004368:	0112      	lsls	r2, r2, #4
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	440b      	add	r3, r1
 800436e:	761a      	strb	r2, [r3, #24]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000e100 	.word	0xe000e100
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <SysTick_Handler+0x1c>)
 800438a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800438c:	f001 fd28 	bl	8005de0 <xTaskGetSchedulerState>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004396:	f002 fb0f 	bl	80069b8 <xPortSysTickHandler>
  }
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010

080043a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043a8:	2100      	movs	r1, #0
 80043aa:	f06f 0004 	mvn.w	r0, #4
 80043ae:	f7ff ffbf 	bl	8004330 <__NVIC_SetPriority>
#endif
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043be:	f3ef 8305 	mrs	r3, IPSR
 80043c2:	603b      	str	r3, [r7, #0]
  return(result);
 80043c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043ca:	f06f 0305 	mvn.w	r3, #5
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e00c      	b.n	80043ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <osKernelInitialize+0x44>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <osKernelInitialize+0x44>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	e002      	b.n	80043ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	2000048c 	.word	0x2000048c

08004400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004406:	f3ef 8305 	mrs	r3, IPSR
 800440a:	603b      	str	r3, [r7, #0]
  return(result);
 800440c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004412:	f06f 0305 	mvn.w	r3, #5
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	e010      	b.n	800443c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <osKernelStart+0x48>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d109      	bne.n	8004436 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004422:	f7ff ffbf 	bl	80043a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <osKernelStart+0x48>)
 8004428:	2202      	movs	r2, #2
 800442a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800442c:	f001 f87c 	bl	8005528 <vTaskStartScheduler>
      stat = osOK;
 8004430:	2300      	movs	r3, #0
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	e002      	b.n	800443c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800443c:	687b      	ldr	r3, [r7, #4]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000048c 	.word	0x2000048c

0800444c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b08e      	sub	sp, #56	; 0x38
 8004450:	af04      	add	r7, sp, #16
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800445c:	f3ef 8305 	mrs	r3, IPSR
 8004460:	617b      	str	r3, [r7, #20]
  return(result);
 8004462:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004464:	2b00      	cmp	r3, #0
 8004466:	d17e      	bne.n	8004566 <osThreadNew+0x11a>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d07b      	beq.n	8004566 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004472:	2318      	movs	r3, #24
 8004474:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d045      	beq.n	8004512 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <osThreadNew+0x48>
        name = attr->name;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <osThreadNew+0x6e>
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b38      	cmp	r3, #56	; 0x38
 80044ac:	d805      	bhi.n	80044ba <osThreadNew+0x6e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <osThreadNew+0x72>
        return (NULL);
 80044ba:	2300      	movs	r3, #0
 80044bc:	e054      	b.n	8004568 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <osThreadNew+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2bbb      	cmp	r3, #187	; 0xbb
 80044dc:	d90a      	bls.n	80044f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <osThreadNew+0xa8>
        mem = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e010      	b.n	8004516 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10c      	bne.n	8004516 <osThreadNew+0xca>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <osThreadNew+0xca>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <osThreadNew+0xca>
          mem = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e001      	b.n	8004516 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d110      	bne.n	800453e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004524:	9202      	str	r2, [sp, #8]
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fe0c 	bl	8005150 <xTaskCreateStatic>
 8004538:	4603      	mov	r3, r0
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e013      	b.n	8004566 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d110      	bne.n	8004566 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	b29a      	uxth	r2, r3
 8004548:	f107 0310 	add.w	r3, r7, #16
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fe57 	bl	800520a <xTaskCreate>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d001      	beq.n	8004566 <osThreadNew+0x11a>
            hTask = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004566:	693b      	ldr	r3, [r7, #16]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3728      	adds	r7, #40	; 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004578:	f3ef 8305 	mrs	r3, IPSR
 800457c:	60bb      	str	r3, [r7, #8]
  return(result);
 800457e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <osDelay+0x1c>
    stat = osErrorISR;
 8004584:	f06f 0305 	mvn.w	r3, #5
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e007      	b.n	800459c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 ff92 	bl	80054c0 <vTaskDelay>
    }
  }

  return (stat);
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80045b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <vApplicationGetIdleTaskMemory+0x30>)
 80045be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000490 	.word	0x20000490
 80045d8:	2000054c 	.word	0x2000054c

080045dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a07      	ldr	r2, [pc, #28]	; (8004608 <vApplicationGetTimerTaskMemory+0x2c>)
 80045ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <vApplicationGetTimerTaskMemory+0x30>)
 80045f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045fa:	601a      	str	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	2000074c 	.word	0x2000074c
 800460c:	20000808 	.word	0x20000808

08004610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f103 0208 	add.w	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f04f 32ff 	mov.w	r2, #4294967295
 8004628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f103 0208 	add.w	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f103 0208 	add.w	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d103      	bne.n	80046d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e00c      	b.n	80046ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3308      	adds	r3, #8
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e002      	b.n	80046e0 <vListInsert+0x2e>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d2f6      	bcs.n	80046da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6852      	ldr	r2, [r2, #4]
 8004744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d103      	bne.n	8004758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047a2:	f002 f877 	bl	8006894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	441a      	add	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	3b01      	subs	r3, #1
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	441a      	add	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	22ff      	movs	r2, #255	; 0xff
 80047e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22ff      	movs	r2, #255	; 0xff
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d114      	bne.n	8004822 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01a      	beq.n	8004836 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3310      	adds	r3, #16
 8004804:	4618      	mov	r0, r3
 8004806:	f001 f929 	bl	8005a5c <xTaskRemoveFromEventList>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d012      	beq.n	8004836 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <xQueueGenericReset+0xcc>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	e009      	b.n	8004836 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3310      	adds	r3, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fef2 	bl	8004610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3324      	adds	r3, #36	; 0x24
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff feed 	bl	8004610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004836:	f002 f85d 	bl	80068f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800483a:	2301      	movs	r3, #1
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08e      	sub	sp, #56	; 0x38
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <xQueueGenericCreateStatic+0x52>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <xQueueGenericCreateStatic+0x56>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericCreateStatic+0x58>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	623b      	str	r3, [r7, #32]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <xQueueGenericCreateStatic+0x7e>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <xQueueGenericCreateStatic+0x82>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueGenericCreateStatic+0x84>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61fb      	str	r3, [r7, #28]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048e6:	2350      	movs	r3, #80	; 0x50
 80048e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d00a      	beq.n	8004906 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	61bb      	str	r3, [r7, #24]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004906:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00d      	beq.n	800492e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800491a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f805 	bl	8004938 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004930:	4618      	mov	r0, r3
 8004932:	3730      	adds	r7, #48	; 0x30
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e002      	b.n	800495a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004966:	2101      	movs	r1, #1
 8004968:	69b8      	ldr	r0, [r7, #24]
 800496a:	f7ff ff05 	bl	8004778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	; 0x38
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xQueueGenericSend+0x32>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <xQueueGenericSend+0x40>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <xQueueGenericSend+0x44>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <xQueueGenericSend+0x46>
 80049c4:	2300      	movs	r3, #0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <xQueueGenericSend+0x60>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d103      	bne.n	80049ee <xQueueGenericSend+0x6e>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <xQueueGenericSend+0x72>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueGenericSend+0x74>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueGenericSend+0x8e>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a0e:	f001 f9e7 	bl	8005de0 <xTaskGetSchedulerState>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <xQueueGenericSend+0x9e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <xQueueGenericSend+0xa2>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <xQueueGenericSend+0xa4>
 8004a22:	2300      	movs	r3, #0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xQueueGenericSend+0xbe>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	61fb      	str	r3, [r7, #28]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a3e:	f001 ff29 	bl	8006894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <xQueueGenericSend+0xd4>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d129      	bne.n	8004aa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a5a:	f000 fa0b 	bl	8004e74 <prvCopyDataToQueue>
 8004a5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	3324      	adds	r3, #36	; 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fff5 	bl	8005a5c <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <xQueueGenericSend+0x1f8>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	e00a      	b.n	8004aa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a90:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <xQueueGenericSend+0x1f8>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004aa0:	f001 ff28 	bl	80068f4 <vPortExitCritical>
				return pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e063      	b.n	8004b70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d103      	bne.n	8004ab6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aae:	f001 ff21 	bl	80068f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e05c      	b.n	8004b70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004abc:	f107 0314 	add.w	r3, r7, #20
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f82f 	bl	8005b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aca:	f001 ff13 	bl	80068f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ace:	f000 fd9b 	bl	8005608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ad2:	f001 fedf 	bl	8006894 <vPortEnterCritical>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d103      	bne.n	8004aec <xQueueGenericSend+0x16c>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af2:	b25b      	sxtb	r3, r3
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x182>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b02:	f001 fef7 	bl	80068f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b06:	1d3a      	adds	r2, r7, #4
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 f81e 	bl	8005b50 <xTaskCheckForTimeOut>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d124      	bne.n	8004b64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1c:	f000 faa2 	bl	8005064 <prvIsQueueFull>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	3310      	adds	r3, #16
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 ff44 	bl	80059bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b36:	f000 fa2d 	bl	8004f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b3a:	f000 fd73 	bl	8005624 <xTaskResumeAll>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f af7c 	bne.w	8004a3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <xQueueGenericSend+0x1f8>)
 8004b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	e772      	b.n	8004a3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b5a:	f000 fa1b 	bl	8004f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b5e:	f000 fd61 	bl	8005624 <xTaskResumeAll>
 8004b62:	e76c      	b.n	8004a3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b66:	f000 fa15 	bl	8004f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b6a:	f000 fd5b 	bl	8005624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3738      	adds	r7, #56	; 0x38
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b090      	sub	sp, #64	; 0x40
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <xQueueGenericSendFromISR+0x3c>
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <xQueueGenericSendFromISR+0x40>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <xQueueGenericSendFromISR+0x42>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSendFromISR+0x6a>
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <xQueueGenericSendFromISR+0x6e>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <xQueueGenericSendFromISR+0x70>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	623b      	str	r3, [r7, #32]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c06:	f001 ff27 	bl	8006a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61fa      	str	r2, [r7, #28]
 8004c20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <xQueueGenericSendFromISR+0xbc>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d12f      	bne.n	8004c98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c4e:	f000 f911 	bl	8004e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d112      	bne.n	8004c82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d016      	beq.n	8004c92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	3324      	adds	r3, #36	; 0x24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fef7 	bl	8005a5c <xTaskRemoveFromEventList>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e007      	b.n	8004c92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c86:	3301      	adds	r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	b25a      	sxtb	r2, r3
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c92:	2301      	movs	r3, #1
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c96:	e001      	b.n	8004c9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ca6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3740      	adds	r7, #64	; 0x40
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xQueueReceive+0x30>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	623b      	str	r3, [r7, #32]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <xQueueReceive+0x3e>
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <xQueueReceive+0x42>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueReceive+0x44>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <xQueueReceive+0x5e>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	61fb      	str	r3, [r7, #28]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d12:	f001 f865 	bl	8005de0 <xTaskGetSchedulerState>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <xQueueReceive+0x6e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <xQueueReceive+0x72>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <xQueueReceive+0x74>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <xQueueReceive+0x8e>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	61bb      	str	r3, [r7, #24]
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d42:	f001 fda7 	bl	8006894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01f      	beq.n	8004d92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d56:	f000 f8f7 	bl	8004f48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1e5a      	subs	r2, r3, #1
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00f      	beq.n	8004d8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fe74 	bl	8005a5c <xTaskRemoveFromEventList>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d7a:	4b3d      	ldr	r3, [pc, #244]	; (8004e70 <xQueueReceive+0x1bc>)
 8004d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d8a:	f001 fdb3 	bl	80068f4 <vPortExitCritical>
				return pdPASS;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e069      	b.n	8004e66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d98:	f001 fdac 	bl	80068f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e062      	b.n	8004e66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004da6:	f107 0310 	add.w	r3, r7, #16
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 feba 	bl	8005b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004db4:	f001 fd9e 	bl	80068f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004db8:	f000 fc26 	bl	8005608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dbc:	f001 fd6a 	bl	8006894 <vPortEnterCritical>
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d103      	bne.n	8004dd6 <xQueueReceive+0x122>
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ddc:	b25b      	sxtb	r3, r3
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d103      	bne.n	8004dec <xQueueReceive+0x138>
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dec:	f001 fd82 	bl	80068f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df0:	1d3a      	adds	r2, r7, #4
 8004df2:	f107 0310 	add.w	r3, r7, #16
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fea9 	bl	8005b50 <xTaskCheckForTimeOut>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d123      	bne.n	8004e4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e06:	f000 f917 	bl	8005038 <prvIsQueueEmpty>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d017      	beq.n	8004e40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fdcf 	bl	80059bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e20:	f000 f8b8 	bl	8004f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e24:	f000 fbfe 	bl	8005624 <xTaskResumeAll>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d189      	bne.n	8004d42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <xQueueReceive+0x1bc>)
 8004e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	e780      	b.n	8004d42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e42:	f000 f8a7 	bl	8004f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e46:	f000 fbed 	bl	8005624 <xTaskResumeAll>
 8004e4a:	e77a      	b.n	8004d42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e4e:	f000 f8a1 	bl	8004f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e52:	f000 fbe7 	bl	8005624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e58:	f000 f8ee 	bl	8005038 <prvIsQueueEmpty>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f43f af6f 	beq.w	8004d42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3730      	adds	r7, #48	; 0x30
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10d      	bne.n	8004eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d14d      	bne.n	8004f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ffbc 	bl	8005e1c <xTaskPriorityDisinherit>
 8004ea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	e043      	b.n	8004f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d119      	bne.n	8004ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6858      	ldr	r0, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	f002 f81a 	bl	8006ef8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d32b      	bcc.n	8004f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	e026      	b.n	8004f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68d8      	ldr	r0, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	f002 f800 	bl	8006ef8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	425b      	negs	r3, r3
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d207      	bcs.n	8004f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	425b      	negs	r3, r3
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d105      	bne.n	8004f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d303      	bcc.n	8004f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68d9      	ldr	r1, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	461a      	mov	r2, r3
 8004f86:	6838      	ldr	r0, [r7, #0]
 8004f88:	f001 ffb6 	bl	8006ef8 <memcpy>
	}
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f9c:	f001 fc7a 	bl	8006894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fa8:	e011      	b.n	8004fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d012      	beq.n	8004fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3324      	adds	r3, #36	; 0x24
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fd50 	bl	8005a5c <xTaskRemoveFromEventList>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fc2:	f000 fe27 	bl	8005c14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dce9      	bgt.n	8004faa <prvUnlockQueue+0x16>
 8004fd6:	e000      	b.n	8004fda <prvUnlockQueue+0x46>
					break;
 8004fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fe2:	f001 fc87 	bl	80068f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fe6:	f001 fc55 	bl	8006894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ff2:	e011      	b.n	8005018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d012      	beq.n	8005022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3310      	adds	r3, #16
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fd2b 	bl	8005a5c <xTaskRemoveFromEventList>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800500c:	f000 fe02 	bl	8005c14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	3b01      	subs	r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800501c:	2b00      	cmp	r3, #0
 800501e:	dce9      	bgt.n	8004ff4 <prvUnlockQueue+0x60>
 8005020:	e000      	b.n	8005024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	22ff      	movs	r2, #255	; 0xff
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800502c:	f001 fc62 	bl	80068f4 <vPortExitCritical>
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005040:	f001 fc28 	bl	8006894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e001      	b.n	8005056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005056:	f001 fc4d 	bl	80068f4 <vPortExitCritical>

	return xReturn;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800506c:	f001 fc12 	bl	8006894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	429a      	cmp	r2, r3
 800507a:	d102      	bne.n	8005082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e001      	b.n	8005086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005086:	f001 fc35 	bl	80068f4 <vPortExitCritical>

	return xReturn;
 800508a:	68fb      	ldr	r3, [r7, #12]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e014      	b.n	80050ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050a4:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <vQueueAddToRegistry+0x50>)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050b0:	490c      	ldr	r1, [pc, #48]	; (80050e4 <vQueueAddToRegistry+0x50>)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050ba:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <vQueueAddToRegistry+0x50>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050c6:	e006      	b.n	80050d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b07      	cmp	r3, #7
 80050d2:	d9e7      	bls.n	80050a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000c08 	.word	0x20000c08

080050e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050f8:	f001 fbcc 	bl	8006894 <vPortEnterCritical>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005102:	b25b      	sxtb	r3, r3
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d103      	bne.n	8005112 <vQueueWaitForMessageRestricted+0x2a>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005118:	b25b      	sxtb	r3, r3
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d103      	bne.n	8005128 <vQueueWaitForMessageRestricted+0x40>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005128:	f001 fbe4 	bl	80068f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fc61 	bl	8005a04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005142:	6978      	ldr	r0, [r7, #20]
 8005144:	f7ff ff26 	bl	8004f94 <prvUnlockQueue>
	}
 8005148:	bf00      	nop
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08e      	sub	sp, #56	; 0x38
 8005154:	af04      	add	r7, sp, #16
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	623b      	str	r3, [r7, #32]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <xTaskCreateStatic+0x46>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	61fb      	str	r3, [r7, #28]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005196:	23bc      	movs	r3, #188	; 0xbc
 8005198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2bbc      	cmp	r3, #188	; 0xbc
 800519e:	d00a      	beq.n	80051b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	61bb      	str	r3, [r7, #24]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01e      	beq.n	80051fc <xTaskCreateStatic+0xac>
 80051be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051d6:	2300      	movs	r3, #0
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	f107 0314 	add.w	r3, r7, #20
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f850 	bl	8005294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051f6:	f000 f8f3 	bl	80053e0 <prvAddNewTaskToReadyList>
 80051fa:	e001      	b.n	8005200 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005200:	697b      	ldr	r3, [r7, #20]
	}
 8005202:	4618      	mov	r0, r3
 8005204:	3728      	adds	r7, #40	; 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800520a:	b580      	push	{r7, lr}
 800520c:	b08c      	sub	sp, #48	; 0x30
 800520e:	af04      	add	r7, sp, #16
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fc5a 	bl	8006ad8 <pvPortMalloc>
 8005224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800522c:	20bc      	movs	r0, #188	; 0xbc
 800522e:	f001 fc53 	bl	8006ad8 <pvPortMalloc>
 8005232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
 8005240:	e005      	b.n	800524e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f001 fd14 	bl	8006c70 <vPortFree>
 8005248:	e001      	b.n	800524e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	2300      	movs	r3, #0
 8005260:	9303      	str	r3, [sp, #12]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f80e 	bl	8005294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005278:	69f8      	ldr	r0, [r7, #28]
 800527a:	f000 f8b1 	bl	80053e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800527e:	2301      	movs	r3, #1
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e002      	b.n	800528a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005284:	f04f 33ff 	mov.w	r3, #4294967295
 8005288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800528a:	69bb      	ldr	r3, [r7, #24]
	}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	461a      	mov	r2, r3
 80052ac:	21a5      	movs	r1, #165	; 0xa5
 80052ae:	f001 fe31 	bl	8006f14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052bc:	3b01      	subs	r3, #1
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	617b      	str	r3, [r7, #20]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01f      	beq.n	8005332 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e012      	b.n	800531e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	7819      	ldrb	r1, [r3, #0]
 8005300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	3334      	adds	r3, #52	; 0x34
 8005308:	460a      	mov	r2, r1
 800530a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3301      	adds	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b0f      	cmp	r3, #15
 8005322:	d9e9      	bls.n	80052f8 <prvInitialiseNewTask+0x64>
 8005324:	e000      	b.n	8005328 <prvInitialiseNewTask+0x94>
			{
				break;
 8005326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005330:	e003      	b.n	800533a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2b37      	cmp	r3, #55	; 0x37
 800533e:	d901      	bls.n	8005344 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005340:	2337      	movs	r3, #55	; 0x37
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2200      	movs	r2, #0
 8005354:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	3304      	adds	r3, #4
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff f978 	bl	8004650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	3318      	adds	r3, #24
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff f973 	bl	8004650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2200      	movs	r2, #0
 800538c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	3354      	adds	r3, #84	; 0x54
 8005394:	2260      	movs	r2, #96	; 0x60
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f001 fdbb 	bl	8006f14 <memset>
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	4a0c      	ldr	r2, [pc, #48]	; (80053d4 <prvInitialiseNewTask+0x140>)
 80053a2:	659a      	str	r2, [r3, #88]	; 0x58
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <prvInitialiseNewTask+0x144>)
 80053a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	4a0b      	ldr	r2, [pc, #44]	; (80053dc <prvInitialiseNewTask+0x148>)
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	69b8      	ldr	r0, [r7, #24]
 80053b6:	f001 f941 	bl	800663c <pxPortInitialiseStack>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053cc:	bf00      	nop
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	0800721c 	.word	0x0800721c
 80053d8:	0800723c 	.word	0x0800723c
 80053dc:	080071fc 	.word	0x080071fc

080053e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053e8:	f001 fa54 	bl	8006894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053ec:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <prvAddNewTaskToReadyList+0xc4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <prvAddNewTaskToReadyList+0xc4>)
 80053f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <prvAddNewTaskToReadyList+0xc8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <prvAddNewTaskToReadyList+0xc8>)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005404:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <prvAddNewTaskToReadyList+0xc4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d110      	bne.n	800542e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800540c:	f000 fc26 	bl	8005c5c <prvInitialiseTaskLists>
 8005410:	e00d      	b.n	800542e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005412:	4b26      	ldr	r3, [pc, #152]	; (80054ac <prvAddNewTaskToReadyList+0xcc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <prvAddNewTaskToReadyList+0xc8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	429a      	cmp	r2, r3
 8005426:	d802      	bhi.n	800542e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005428:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <prvAddNewTaskToReadyList+0xc8>)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <prvAddNewTaskToReadyList+0xd0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <prvAddNewTaskToReadyList+0xd0>)
 8005436:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005438:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <prvAddNewTaskToReadyList+0xd0>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <prvAddNewTaskToReadyList+0xd4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <prvAddNewTaskToReadyList+0x74>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <prvAddNewTaskToReadyList+0xd4>)
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <prvAddNewTaskToReadyList+0xd8>)
 8005462:	441a      	add	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7ff f8fd 	bl	800466a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005470:	f001 fa40 	bl	80068f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005474:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <prvAddNewTaskToReadyList+0xcc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <prvAddNewTaskToReadyList+0xc8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	429a      	cmp	r2, r3
 8005488:	d207      	bcs.n	800549a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <prvAddNewTaskToReadyList+0xdc>)
 800548c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2000111c 	.word	0x2000111c
 80054a8:	20000c48 	.word	0x20000c48
 80054ac:	20001128 	.word	0x20001128
 80054b0:	20001138 	.word	0x20001138
 80054b4:	20001124 	.word	0x20001124
 80054b8:	20000c4c 	.word	0x20000c4c
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <vTaskDelay+0x60>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <vTaskDelay+0x30>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60bb      	str	r3, [r7, #8]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054f0:	f000 f88a 	bl	8005608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054f4:	2100      	movs	r1, #0
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fcfe 	bl	8005ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054fc:	f000 f892 	bl	8005624 <xTaskResumeAll>
 8005500:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d107      	bne.n	8005518 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <vTaskDelay+0x64>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20001144 	.word	0x20001144
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005536:	463a      	mov	r2, r7
 8005538:	1d39      	adds	r1, r7, #4
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff f832 	bl	80045a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	9202      	str	r2, [sp, #8]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	2300      	movs	r3, #0
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	460a      	mov	r2, r1
 8005556:	4924      	ldr	r1, [pc, #144]	; (80055e8 <vTaskStartScheduler+0xc0>)
 8005558:	4824      	ldr	r0, [pc, #144]	; (80055ec <vTaskStartScheduler+0xc4>)
 800555a:	f7ff fdf9 	bl	8005150 <xTaskCreateStatic>
 800555e:	4603      	mov	r3, r0
 8005560:	4a23      	ldr	r2, [pc, #140]	; (80055f0 <vTaskStartScheduler+0xc8>)
 8005562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005564:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <vTaskStartScheduler+0xc8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e001      	b.n	8005576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d102      	bne.n	8005582 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800557c:	f000 fd10 	bl	8005fa0 <xTimerCreateTimerTask>
 8005580:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d11b      	bne.n	80055c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	613b      	str	r3, [r7, #16]
}
 800559a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800559c:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <vTaskStartScheduler+0xcc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3354      	adds	r3, #84	; 0x54
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <vTaskStartScheduler+0xd0>)
 80055a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <vTaskStartScheduler+0xd4>)
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <vTaskStartScheduler+0xd8>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <vTaskStartScheduler+0xdc>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ba:	f001 f8c9 	bl	8006750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055be:	e00e      	b.n	80055de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d10a      	bne.n	80055de <vTaskStartScheduler+0xb6>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60fb      	str	r3, [r7, #12]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <vTaskStartScheduler+0xb4>
}
 80055de:	bf00      	nop
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	0800711c 	.word	0x0800711c
 80055ec:	08005c2d 	.word	0x08005c2d
 80055f0:	20001140 	.word	0x20001140
 80055f4:	20000c48 	.word	0x20000c48
 80055f8:	20000014 	.word	0x20000014
 80055fc:	2000113c 	.word	0x2000113c
 8005600:	20001128 	.word	0x20001128
 8005604:	20001120 	.word	0x20001120

08005608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <vTaskSuspendAll+0x18>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	4a03      	ldr	r2, [pc, #12]	; (8005620 <vTaskSuspendAll+0x18>)
 8005614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20001144 	.word	0x20001144

08005624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005632:	4b42      	ldr	r3, [pc, #264]	; (800573c <xTaskResumeAll+0x118>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <xTaskResumeAll+0x2c>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	603b      	str	r3, [r7, #0]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005650:	f001 f920 	bl	8006894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005654:	4b39      	ldr	r3, [pc, #228]	; (800573c <xTaskResumeAll+0x118>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	4a38      	ldr	r2, [pc, #224]	; (800573c <xTaskResumeAll+0x118>)
 800565c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <xTaskResumeAll+0x118>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d162      	bne.n	800572c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <xTaskResumeAll+0x11c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d05e      	beq.n	800572c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566e:	e02f      	b.n	80056d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005670:	4b34      	ldr	r3, [pc, #208]	; (8005744 <xTaskResumeAll+0x120>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3318      	adds	r3, #24
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f851 	bl	8004724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff f84c 	bl	8004724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <xTaskResumeAll+0x124>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d903      	bls.n	80056a0 <xTaskResumeAll+0x7c>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <xTaskResumeAll+0x124>)
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4a27      	ldr	r2, [pc, #156]	; (800574c <xTaskResumeAll+0x128>)
 80056ae:	441a      	add	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7fe ffd7 	bl	800466a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4b23      	ldr	r3, [pc, #140]	; (8005750 <xTaskResumeAll+0x12c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056ca:	4b22      	ldr	r3, [pc, #136]	; (8005754 <xTaskResumeAll+0x130>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <xTaskResumeAll+0x120>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1cb      	bne.n	8005670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056de:	f000 fb5f 	bl	8005da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <xTaskResumeAll+0x134>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d010      	beq.n	8005710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ee:	f000 f847 	bl	8005780 <xTaskIncrementTick>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <xTaskResumeAll+0x130>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3b01      	subs	r3, #1
 8005702:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f1      	bne.n	80056ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <xTaskResumeAll+0x134>)
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <xTaskResumeAll+0x130>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <xTaskResumeAll+0x138>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800572c:	f001 f8e2 	bl	80068f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005730:	68bb      	ldr	r3, [r7, #8]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20001144 	.word	0x20001144
 8005740:	2000111c 	.word	0x2000111c
 8005744:	200010dc 	.word	0x200010dc
 8005748:	20001124 	.word	0x20001124
 800574c:	20000c4c 	.word	0x20000c4c
 8005750:	20000c48 	.word	0x20000c48
 8005754:	20001130 	.word	0x20001130
 8005758:	2000112c 	.word	0x2000112c
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <xTaskGetTickCount+0x1c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800576c:	687b      	ldr	r3, [r7, #4]
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20001120 	.word	0x20001120

08005780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578a:	4b4f      	ldr	r3, [pc, #316]	; (80058c8 <xTaskIncrementTick+0x148>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 808f 	bne.w	80058b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005794:	4b4d      	ldr	r3, [pc, #308]	; (80058cc <xTaskIncrementTick+0x14c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800579c:	4a4b      	ldr	r2, [pc, #300]	; (80058cc <xTaskIncrementTick+0x14c>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d120      	bne.n	80057ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a8:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <xTaskIncrementTick+0x150>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	603b      	str	r3, [r7, #0]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xTaskIncrementTick+0x46>
 80057c8:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <xTaskIncrementTick+0x150>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <xTaskIncrementTick+0x154>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a3f      	ldr	r2, [pc, #252]	; (80058d0 <xTaskIncrementTick+0x150>)
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4a3f      	ldr	r2, [pc, #252]	; (80058d4 <xTaskIncrementTick+0x154>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4b3e      	ldr	r3, [pc, #248]	; (80058d8 <xTaskIncrementTick+0x158>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	4a3d      	ldr	r2, [pc, #244]	; (80058d8 <xTaskIncrementTick+0x158>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	f000 fadb 	bl	8005da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ea:	4b3c      	ldr	r3, [pc, #240]	; (80058dc <xTaskIncrementTick+0x15c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d349      	bcc.n	8005888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <xTaskIncrementTick+0x150>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <xTaskIncrementTick+0x15c>)
 8005800:	f04f 32ff 	mov.w	r2, #4294967295
 8005804:	601a      	str	r2, [r3, #0]
					break;
 8005806:	e03f      	b.n	8005888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005808:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <xTaskIncrementTick+0x150>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	429a      	cmp	r2, r3
 800581e:	d203      	bcs.n	8005828 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005820:	4a2e      	ldr	r2, [pc, #184]	; (80058dc <xTaskIncrementTick+0x15c>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005826:	e02f      	b.n	8005888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	3304      	adds	r3, #4
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe ff79 	bl	8004724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3318      	adds	r3, #24
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe ff70 	bl	8004724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <xTaskIncrementTick+0x160>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d903      	bls.n	8005858 <xTaskIncrementTick+0xd8>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <xTaskIncrementTick+0x160>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <xTaskIncrementTick+0x164>)
 8005866:	441a      	add	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fe fefb 	bl	800466a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <xTaskIncrementTick+0x168>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	429a      	cmp	r2, r3
 8005880:	d3b8      	bcc.n	80057f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005882:	2301      	movs	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005886:	e7b5      	b.n	80057f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005888:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <xTaskIncrementTick+0x168>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	4915      	ldr	r1, [pc, #84]	; (80058e4 <xTaskIncrementTick+0x164>)
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d901      	bls.n	80058a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <xTaskIncrementTick+0x16c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e004      	b.n	80058bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <xTaskIncrementTick+0x170>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <xTaskIncrementTick+0x170>)
 80058ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058bc:	697b      	ldr	r3, [r7, #20]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20001144 	.word	0x20001144
 80058cc:	20001120 	.word	0x20001120
 80058d0:	200010d4 	.word	0x200010d4
 80058d4:	200010d8 	.word	0x200010d8
 80058d8:	20001134 	.word	0x20001134
 80058dc:	2000113c 	.word	0x2000113c
 80058e0:	20001124 	.word	0x20001124
 80058e4:	20000c4c 	.word	0x20000c4c
 80058e8:	20000c48 	.word	0x20000c48
 80058ec:	20001130 	.word	0x20001130
 80058f0:	2000112c 	.word	0x2000112c

080058f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058fa:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <vTaskSwitchContext+0xb0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005902:	4b29      	ldr	r3, [pc, #164]	; (80059a8 <vTaskSwitchContext+0xb4>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005908:	e046      	b.n	8005998 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800590a:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <vTaskSwitchContext+0xb4>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005910:	4b26      	ldr	r3, [pc, #152]	; (80059ac <vTaskSwitchContext+0xb8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e010      	b.n	800593a <vTaskSwitchContext+0x46>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <vTaskSwitchContext+0x40>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <vTaskSwitchContext+0x3e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3b01      	subs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	491d      	ldr	r1, [pc, #116]	; (80059b0 <vTaskSwitchContext+0xbc>)
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0e4      	beq.n	8005918 <vTaskSwitchContext+0x24>
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <vTaskSwitchContext+0xbc>)
 800595a:	4413      	add	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	3308      	adds	r3, #8
 8005970:	429a      	cmp	r2, r3
 8005972:	d104      	bne.n	800597e <vTaskSwitchContext+0x8a>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <vTaskSwitchContext+0xc0>)
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	4a08      	ldr	r2, [pc, #32]	; (80059ac <vTaskSwitchContext+0xb8>)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <vTaskSwitchContext+0xc0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3354      	adds	r3, #84	; 0x54
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <vTaskSwitchContext+0xc4>)
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	20001144 	.word	0x20001144
 80059a8:	20001130 	.word	0x20001130
 80059ac:	20001124 	.word	0x20001124
 80059b0:	20000c4c 	.word	0x20000c4c
 80059b4:	20000c48 	.word	0x20000c48
 80059b8:	20000014 	.word	0x20000014

080059bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	60fb      	str	r3, [r7, #12]
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <vTaskPlaceOnEventList+0x44>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3318      	adds	r3, #24
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fe fe61 	bl	80046b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059f0:	2101      	movs	r1, #1
 80059f2:	6838      	ldr	r0, [r7, #0]
 80059f4:	f000 fa80 	bl	8005ef8 <prvAddCurrentTaskToDelayedList>
}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000c48 	.word	0x20000c48

08005a04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	617b      	str	r3, [r7, #20]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3318      	adds	r3, #24
 8005a32:	4619      	mov	r1, r3
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7fe fe18 	bl	800466a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	68b8      	ldr	r0, [r7, #8]
 8005a4a:	f000 fa55 	bl	8005ef8 <prvAddCurrentTaskToDelayedList>
	}
 8005a4e:	bf00      	nop
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000c48 	.word	0x20000c48

08005a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	3318      	adds	r3, #24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe fe49 	bl	8004724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <xTaskRemoveFromEventList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d11d      	bne.n	8005ad6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fe40 	bl	8004724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <xTaskRemoveFromEventList+0xb4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d903      	bls.n	8005ab8 <xTaskRemoveFromEventList+0x5c>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <xTaskRemoveFromEventList+0xb4>)
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <xTaskRemoveFromEventList+0xb8>)
 8005ac6:	441a      	add	r2, r3
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fe fdcb 	bl	800466a <vListInsertEnd>
 8005ad4:	e005      	b.n	8005ae2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3318      	adds	r3, #24
 8005ada:	4619      	mov	r1, r3
 8005adc:	480e      	ldr	r0, [pc, #56]	; (8005b18 <xTaskRemoveFromEventList+0xbc>)
 8005ade:	f7fe fdc4 	bl	800466a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <xTaskRemoveFromEventList+0xc0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d905      	bls.n	8005afc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <xTaskRemoveFromEventList+0xc4>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e001      	b.n	8005b00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b00:	697b      	ldr	r3, [r7, #20]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20001144 	.word	0x20001144
 8005b10:	20001124 	.word	0x20001124
 8005b14:	20000c4c 	.word	0x20000c4c
 8005b18:	200010dc 	.word	0x200010dc
 8005b1c:	20000c48 	.word	0x20000c48
 8005b20:	20001130 	.word	0x20001130

08005b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <vTaskInternalSetTimeOutState+0x24>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <vTaskInternalSetTimeOutState+0x28>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	605a      	str	r2, [r3, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20001134 	.word	0x20001134
 8005b4c:	20001120 	.word	0x20001120

08005b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60fb      	str	r3, [r7, #12]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b92:	f000 fe7f 	bl	8006894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <xTaskCheckForTimeOut+0xbc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d102      	bne.n	8005bb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e023      	b.n	8005bfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <xTaskCheckForTimeOut+0xc0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d007      	beq.n	8005bd2 <xTaskCheckForTimeOut+0x82>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d302      	bcc.n	8005bd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e015      	b.n	8005bfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d20b      	bcs.n	8005bf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ff9b 	bl	8005b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	e004      	b.n	8005bfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bfe:	f000 fe79 	bl	80068f4 <vPortExitCritical>

	return xReturn;
 8005c02:	69fb      	ldr	r3, [r7, #28]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3720      	adds	r7, #32
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20001120 	.word	0x20001120
 8005c10:	20001134 	.word	0x20001134

08005c14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <vTaskMissedYield+0x14>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20001130 	.word	0x20001130

08005c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c34:	f000 f852 	bl	8005cdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <prvIdleTask+0x28>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d9f9      	bls.n	8005c34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <prvIdleTask+0x2c>)
 8005c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c50:	e7f0      	b.n	8005c34 <prvIdleTask+0x8>
 8005c52:	bf00      	nop
 8005c54:	20000c4c 	.word	0x20000c4c
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	e00c      	b.n	8005c82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <prvInitialiseTaskLists+0x60>)
 8005c74:	4413      	add	r3, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fcca 	bl	8004610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b37      	cmp	r3, #55	; 0x37
 8005c86:	d9ef      	bls.n	8005c68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c88:	480d      	ldr	r0, [pc, #52]	; (8005cc0 <prvInitialiseTaskLists+0x64>)
 8005c8a:	f7fe fcc1 	bl	8004610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c8e:	480d      	ldr	r0, [pc, #52]	; (8005cc4 <prvInitialiseTaskLists+0x68>)
 8005c90:	f7fe fcbe 	bl	8004610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c94:	480c      	ldr	r0, [pc, #48]	; (8005cc8 <prvInitialiseTaskLists+0x6c>)
 8005c96:	f7fe fcbb 	bl	8004610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c9a:	480c      	ldr	r0, [pc, #48]	; (8005ccc <prvInitialiseTaskLists+0x70>)
 8005c9c:	f7fe fcb8 	bl	8004610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ca0:	480b      	ldr	r0, [pc, #44]	; (8005cd0 <prvInitialiseTaskLists+0x74>)
 8005ca2:	f7fe fcb5 	bl	8004610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <prvInitialiseTaskLists+0x78>)
 8005ca8:	4a05      	ldr	r2, [pc, #20]	; (8005cc0 <prvInitialiseTaskLists+0x64>)
 8005caa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <prvInitialiseTaskLists+0x7c>)
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <prvInitialiseTaskLists+0x68>)
 8005cb0:	601a      	str	r2, [r3, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000c4c 	.word	0x20000c4c
 8005cc0:	200010ac 	.word	0x200010ac
 8005cc4:	200010c0 	.word	0x200010c0
 8005cc8:	200010dc 	.word	0x200010dc
 8005ccc:	200010f0 	.word	0x200010f0
 8005cd0:	20001108 	.word	0x20001108
 8005cd4:	200010d4 	.word	0x200010d4
 8005cd8:	200010d8 	.word	0x200010d8

08005cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ce2:	e019      	b.n	8005d18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ce4:	f000 fdd6 	bl	8006894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <prvCheckTasksWaitingTermination+0x50>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fd15 	bl	8004724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <prvCheckTasksWaitingTermination+0x54>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	4a0b      	ldr	r2, [pc, #44]	; (8005d30 <prvCheckTasksWaitingTermination+0x54>)
 8005d02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <prvCheckTasksWaitingTermination+0x58>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <prvCheckTasksWaitingTermination+0x58>)
 8005d0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d0e:	f000 fdf1 	bl	80068f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f810 	bl	8005d38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d18:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <prvCheckTasksWaitingTermination+0x58>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e1      	bne.n	8005ce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	200010f0 	.word	0x200010f0
 8005d30:	2000111c 	.word	0x2000111c
 8005d34:	20001104 	.word	0x20001104

08005d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3354      	adds	r3, #84	; 0x54
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 f8fb 	bl	8006f40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d108      	bne.n	8005d66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 ff89 	bl	8006c70 <vPortFree>
				vPortFree( pxTCB );
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 ff86 	bl	8006c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d64:	e018      	b.n	8005d98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d103      	bne.n	8005d78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 ff7d 	bl	8006c70 <vPortFree>
	}
 8005d76:	e00f      	b.n	8005d98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d00a      	beq.n	8005d98 <prvDeleteTCB+0x60>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <prvDeleteTCB+0x5e>
	}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <prvResetNextTaskUnblockTime+0x38>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <prvResetNextTaskUnblockTime+0x3c>)
 8005db2:	f04f 32ff 	mov.w	r2, #4294967295
 8005db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005db8:	e008      	b.n	8005dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <prvResetNextTaskUnblockTime+0x38>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <prvResetNextTaskUnblockTime+0x3c>)
 8005dca:	6013      	str	r3, [r2, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	200010d4 	.word	0x200010d4
 8005ddc:	2000113c 	.word	0x2000113c

08005de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <xTaskGetSchedulerState+0x34>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dee:	2301      	movs	r3, #1
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	e008      	b.n	8005e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df4:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <xTaskGetSchedulerState+0x38>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e001      	b.n	8005e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e06:	687b      	ldr	r3, [r7, #4]
	}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20001128 	.word	0x20001128
 8005e18:	20001144 	.word	0x20001144

08005e1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d056      	beq.n	8005ee0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e32:	4b2e      	ldr	r3, [pc, #184]	; (8005eec <xTaskPriorityDisinherit+0xd0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d00a      	beq.n	8005e52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60bb      	str	r3, [r7, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d02c      	beq.n	8005ee0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d128      	bne.n	8005ee0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fc46 	bl	8004724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <xTaskPriorityDisinherit+0xd4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d903      	bls.n	8005ec0 <xTaskPriorityDisinherit+0xa4>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <xTaskPriorityDisinherit+0xd4>)
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <xTaskPriorityDisinherit+0xd8>)
 8005ece:	441a      	add	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fe fbc7 	bl	800466a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ee0:	697b      	ldr	r3, [r7, #20]
	}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000c48 	.word	0x20000c48
 8005ef0:	20001124 	.word	0x20001124
 8005ef4:	20000c4c 	.word	0x20000c4c

08005ef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f02:	4b21      	ldr	r3, [pc, #132]	; (8005f88 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f08:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fc08 	bl	8004724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d10a      	bne.n	8005f32 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f22:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4819      	ldr	r0, [pc, #100]	; (8005f90 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f2c:	f7fe fb9d 	bl	800466a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f30:	e026      	b.n	8005f80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f3a:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d209      	bcs.n	8005f5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f7fe fbab 	bl	80046b2 <vListInsert>
}
 8005f5c:	e010      	b.n	8005f80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fba1 	bl	80046b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d202      	bcs.n	8005f80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f7a:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20001120 	.word	0x20001120
 8005f8c:	20000c48 	.word	0x20000c48
 8005f90:	20001108 	.word	0x20001108
 8005f94:	200010d8 	.word	0x200010d8
 8005f98:	200010d4 	.word	0x200010d4
 8005f9c:	2000113c 	.word	0x2000113c

08005fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005faa:	f000 fb07 	bl	80065bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fae:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <xTimerCreateTimerTask+0x80>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d021      	beq.n	8005ffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fbe:	1d3a      	adds	r2, r7, #4
 8005fc0:	f107 0108 	add.w	r1, r7, #8
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fb07 	bl	80045dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	9202      	str	r2, [sp, #8]
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	2302      	movs	r3, #2
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	460a      	mov	r2, r1
 8005fe0:	4910      	ldr	r1, [pc, #64]	; (8006024 <xTimerCreateTimerTask+0x84>)
 8005fe2:	4811      	ldr	r0, [pc, #68]	; (8006028 <xTimerCreateTimerTask+0x88>)
 8005fe4:	f7ff f8b4 	bl	8005150 <xTaskCreateStatic>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4a10      	ldr	r2, [pc, #64]	; (800602c <xTimerCreateTimerTask+0x8c>)
 8005fec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <xTimerCreateTimerTask+0x8c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006016:	697b      	ldr	r3, [r7, #20]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20001178 	.word	0x20001178
 8006024:	08007124 	.word	0x08007124
 8006028:	08006165 	.word	0x08006165
 800602c:	2000117c 	.word	0x2000117c

08006030 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800603e:	2300      	movs	r3, #0
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	623b      	str	r3, [r7, #32]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800605e:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <xTimerGenericCommand+0x98>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d02a      	beq.n	80060bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b05      	cmp	r3, #5
 8006076:	dc18      	bgt.n	80060aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006078:	f7ff feb2 	bl	8005de0 <xTaskGetSchedulerState>
 800607c:	4603      	mov	r3, r0
 800607e:	2b02      	cmp	r3, #2
 8006080:	d109      	bne.n	8006096 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006082:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <xTimerGenericCommand+0x98>)
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	f107 0110 	add.w	r1, r7, #16
 800608a:	2300      	movs	r3, #0
 800608c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608e:	f7fe fc77 	bl	8004980 <xQueueGenericSend>
 8006092:	6278      	str	r0, [r7, #36]	; 0x24
 8006094:	e012      	b.n	80060bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <xTimerGenericCommand+0x98>)
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f107 0110 	add.w	r1, r7, #16
 800609e:	2300      	movs	r3, #0
 80060a0:	2200      	movs	r2, #0
 80060a2:	f7fe fc6d 	bl	8004980 <xQueueGenericSend>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24
 80060a8:	e008      	b.n	80060bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <xTimerGenericCommand+0x98>)
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	f107 0110 	add.w	r1, r7, #16
 80060b2:	2300      	movs	r3, #0
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	f7fe fd61 	bl	8004b7c <xQueueGenericSendFromISR>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3728      	adds	r7, #40	; 0x28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20001178 	.word	0x20001178

080060cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d6:	4b22      	ldr	r3, [pc, #136]	; (8006160 <prvProcessExpiredTimer+0x94>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe fb1d 	bl	8004724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d022      	beq.n	800613e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	18d1      	adds	r1, r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	6978      	ldr	r0, [r7, #20]
 8006106:	f000 f8d1 	bl	80062ac <prvInsertTimerInActiveList>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01f      	beq.n	8006150 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	2100      	movs	r1, #0
 800611a:	6978      	ldr	r0, [r7, #20]
 800611c:	f7ff ff88 	bl	8006030 <xTimerGenericCommand>
 8006120:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d113      	bne.n	8006150 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fb      	str	r3, [r7, #12]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	4798      	blx	r3
}
 8006158:	bf00      	nop
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20001170 	.word	0x20001170

08006164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800616c:	f107 0308 	add.w	r3, r7, #8
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f857 	bl	8006224 <prvGetNextExpireTime>
 8006176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4619      	mov	r1, r3
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f803 	bl	8006188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006182:	f000 f8d5 	bl	8006330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006186:	e7f1      	b.n	800616c <prvTimerTask+0x8>

08006188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006192:	f7ff fa39 	bl	8005608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006196:	f107 0308 	add.w	r3, r7, #8
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f866 	bl	800626c <prvSampleTimeNow>
 80061a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d130      	bne.n	800620a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <prvProcessTimerOrBlockTask+0x3c>
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d806      	bhi.n	80061c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061b6:	f7ff fa35 	bl	8005624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff85 	bl	80060cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061c2:	e024      	b.n	800620e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061ca:	4b13      	ldr	r3, [pc, #76]	; (8006218 <prvProcessTimerOrBlockTask+0x90>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <prvProcessTimerOrBlockTask+0x50>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <prvProcessTimerOrBlockTask+0x52>
 80061d8:	2300      	movs	r3, #0
 80061da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <prvProcessTimerOrBlockTask+0x94>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7fe ff7d 	bl	80050e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ee:	f7ff fa19 	bl	8005624 <xTaskResumeAll>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <prvProcessTimerOrBlockTask+0x98>)
 80061fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	f3bf 8f6f 	isb	sy
}
 8006208:	e001      	b.n	800620e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800620a:	f7ff fa0b 	bl	8005624 <xTaskResumeAll>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20001174 	.word	0x20001174
 800621c:	20001178 	.word	0x20001178
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <prvGetNextExpireTime+0x44>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <prvGetNextExpireTime+0x16>
 8006236:	2201      	movs	r2, #1
 8006238:	e000      	b.n	800623c <prvGetNextExpireTime+0x18>
 800623a:	2200      	movs	r2, #0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <prvGetNextExpireTime+0x44>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e001      	b.n	8006258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006258:	68fb      	ldr	r3, [r7, #12]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20001170 	.word	0x20001170

0800626c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006274:	f7ff fa74 	bl	8005760 <xTaskGetTickCount>
 8006278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <prvSampleTimeNow+0x3c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	429a      	cmp	r2, r3
 8006282:	d205      	bcs.n	8006290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006284:	f000 f936 	bl	80064f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e002      	b.n	8006296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006296:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <prvSampleTimeNow+0x3c>)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20001180 	.word	0x20001180

080062ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d812      	bhi.n	80062f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e01b      	b.n	800631e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <prvInsertTimerInActiveList+0x7c>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe f9de 	bl	80046b2 <vListInsert>
 80062f6:	e012      	b.n	800631e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d206      	bcs.n	800630e <prvInsertTimerInActiveList+0x62>
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e007      	b.n	800631e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <prvInsertTimerInActiveList+0x80>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fe f9ca 	bl	80046b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800631e:	697b      	ldr	r3, [r7, #20]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20001174 	.word	0x20001174
 800632c:	20001170 	.word	0x20001170

08006330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08e      	sub	sp, #56	; 0x38
 8006334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006336:	e0ca      	b.n	80064ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	da18      	bge.n	8006370 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	3304      	adds	r3, #4
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	61fb      	str	r3, [r7, #28]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006366:	6850      	ldr	r0, [r2, #4]
 8006368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636a:	6892      	ldr	r2, [r2, #8]
 800636c:	4611      	mov	r1, r2
 800636e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f2c0 80aa 	blt.w	80064cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe f9cb 	bl	8004724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800638e:	463b      	mov	r3, r7
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff ff6b 	bl	800626c <prvSampleTimeNow>
 8006396:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b09      	cmp	r3, #9
 800639c:	f200 8097 	bhi.w	80064ce <prvProcessReceivedCommands+0x19e>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <prvProcessReceivedCommands+0x78>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063d1 	.word	0x080063d1
 80063b0:	080063d1 	.word	0x080063d1
 80063b4:	08006445 	.word	0x08006445
 80063b8:	08006459 	.word	0x08006459
 80063bc:	080064a3 	.word	0x080064a3
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063d1 	.word	0x080063d1
 80063c8:	08006445 	.word	0x08006445
 80063cc:	08006459 	.word	0x08006459
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	18d1      	adds	r1, r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f0:	f7ff ff5c 	bl	80062ac <prvInsertTimerInActiveList>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d069      	beq.n	80064ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d05e      	beq.n	80064ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	441a      	add	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	2300      	movs	r3, #0
 800641e:	2100      	movs	r1, #0
 8006420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006422:	f7ff fe05 	bl	8006030 <xTimerGenericCommand>
 8006426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d14f      	bne.n	80064ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	61bb      	str	r3, [r7, #24]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	b2da      	uxtb	r2, r3
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006456:	e03a      	b.n	80064ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	617b      	str	r3, [r7, #20]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	18d1      	adds	r1, r2, r3
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800649c:	f7ff ff06 	bl	80062ac <prvInsertTimerInActiveList>
					break;
 80064a0:	e015      	b.n	80064ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b2:	f000 fbdd 	bl	8006c70 <vPortFree>
 80064b6:	e00a      	b.n	80064ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064ca:	e000      	b.n	80064ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80064cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ce:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <prvProcessReceivedCommands+0x1c0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	1d39      	adds	r1, r7, #4
 80064d4:	2200      	movs	r2, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fbec 	bl	8004cb4 <xQueueReceive>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f47f af2a 	bne.w	8006338 <prvProcessReceivedCommands+0x8>
	}
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20001178 	.word	0x20001178

080064f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064fa:	e048      	b.n	800658e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064fc:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <prvSwitchTimerLists+0xc0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006506:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <prvSwitchTimerLists+0xc0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe f905 	bl	8004724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d02e      	beq.n	800658e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d90e      	bls.n	8006560 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <prvSwitchTimerLists+0xc0>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe f8aa 	bl	80046b2 <vListInsert>
 800655e:	e016      	b.n	800658e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006560:	2300      	movs	r3, #0
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	2100      	movs	r1, #0
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff fd60 	bl	8006030 <xTimerGenericCommand>
 8006570:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	603b      	str	r3, [r7, #0]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <prvSwitchTimerLists+0xc0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1b1      	bne.n	80064fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006598:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <prvSwitchTimerLists+0xc0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <prvSwitchTimerLists+0xc4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <prvSwitchTimerLists+0xc0>)
 80065a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065a6:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <prvSwitchTimerLists+0xc4>)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	6013      	str	r3, [r2, #0]
}
 80065ac:	bf00      	nop
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20001170 	.word	0x20001170
 80065b8:	20001174 	.word	0x20001174

080065bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065c2:	f000 f967 	bl	8006894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065c6:	4b15      	ldr	r3, [pc, #84]	; (800661c <prvCheckForValidListAndQueue+0x60>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d120      	bne.n	8006610 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065ce:	4814      	ldr	r0, [pc, #80]	; (8006620 <prvCheckForValidListAndQueue+0x64>)
 80065d0:	f7fe f81e 	bl	8004610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065d4:	4813      	ldr	r0, [pc, #76]	; (8006624 <prvCheckForValidListAndQueue+0x68>)
 80065d6:	f7fe f81b 	bl	8004610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <prvCheckForValidListAndQueue+0x6c>)
 80065dc:	4a10      	ldr	r2, [pc, #64]	; (8006620 <prvCheckForValidListAndQueue+0x64>)
 80065de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <prvCheckForValidListAndQueue+0x70>)
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <prvCheckForValidListAndQueue+0x68>)
 80065e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065e6:	2300      	movs	r3, #0
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <prvCheckForValidListAndQueue+0x74>)
 80065ec:	4a11      	ldr	r2, [pc, #68]	; (8006634 <prvCheckForValidListAndQueue+0x78>)
 80065ee:	2110      	movs	r1, #16
 80065f0:	200a      	movs	r0, #10
 80065f2:	f7fe f929 	bl	8004848 <xQueueGenericCreateStatic>
 80065f6:	4603      	mov	r3, r0
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <prvCheckForValidListAndQueue+0x60>)
 80065fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <prvCheckForValidListAndQueue+0x60>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <prvCheckForValidListAndQueue+0x60>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	490b      	ldr	r1, [pc, #44]	; (8006638 <prvCheckForValidListAndQueue+0x7c>)
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fd42 	bl	8005094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006610:	f000 f970 	bl	80068f4 <vPortExitCritical>
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20001178 	.word	0x20001178
 8006620:	20001148 	.word	0x20001148
 8006624:	2000115c 	.word	0x2000115c
 8006628:	20001170 	.word	0x20001170
 800662c:	20001174 	.word	0x20001174
 8006630:	20001224 	.word	0x20001224
 8006634:	20001184 	.word	0x20001184
 8006638:	0800712c 	.word	0x0800712c

0800663c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3b04      	subs	r3, #4
 800664c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3b04      	subs	r3, #4
 800665a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f023 0201 	bic.w	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3b04      	subs	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800666c:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <pxPortInitialiseStack+0x64>)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3b14      	subs	r3, #20
 8006676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3b04      	subs	r3, #4
 8006682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f06f 0202 	mvn.w	r2, #2
 800668a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b20      	subs	r3, #32
 8006690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	080066a5 	.word	0x080066a5

080066a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <prvTaskExitError+0x54>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d00a      	beq.n	80066ce <prvTaskExitError+0x2a>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60fb      	str	r3, [r7, #12]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <prvTaskExitError+0x28>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
}
 80066e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066e2:	bf00      	nop
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0fc      	beq.n	80066e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066ea:	bf00      	nop
 80066ec:	bf00      	nop
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000010 	.word	0x20000010
 80066fc:	00000000 	.word	0x00000000

08006700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <pxCurrentTCBConst2>)
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	6808      	ldr	r0, [r1, #0]
 8006706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670a:	f380 8809 	msr	PSP, r0
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f04f 0000 	mov.w	r0, #0
 8006716:	f380 8811 	msr	BASEPRI, r0
 800671a:	4770      	bx	lr
 800671c:	f3af 8000 	nop.w

08006720 <pxCurrentTCBConst2>:
 8006720:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006728:	4808      	ldr	r0, [pc, #32]	; (800674c <prvPortStartFirstTask+0x24>)
 800672a:	6800      	ldr	r0, [r0, #0]
 800672c:	6800      	ldr	r0, [r0, #0]
 800672e:	f380 8808 	msr	MSP, r0
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8814 	msr	CONTROL, r0
 800673a:	b662      	cpsie	i
 800673c:	b661      	cpsie	f
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	df00      	svc	0
 8006748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800674a:	bf00      	nop
 800674c:	e000ed08 	.word	0xe000ed08

08006750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006756:	4b46      	ldr	r3, [pc, #280]	; (8006870 <xPortStartScheduler+0x120>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a46      	ldr	r2, [pc, #280]	; (8006874 <xPortStartScheduler+0x124>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d10a      	bne.n	8006776 <xPortStartScheduler+0x26>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	613b      	str	r3, [r7, #16]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006776:	4b3e      	ldr	r3, [pc, #248]	; (8006870 <xPortStartScheduler+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a3f      	ldr	r2, [pc, #252]	; (8006878 <xPortStartScheduler+0x128>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10a      	bne.n	8006796 <xPortStartScheduler+0x46>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <xPortStartScheduler+0x12c>)
 8006798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4b31      	ldr	r3, [pc, #196]	; (8006880 <xPortStartScheduler+0x130>)
 80067bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067be:	4b31      	ldr	r3, [pc, #196]	; (8006884 <xPortStartScheduler+0x134>)
 80067c0:	2207      	movs	r2, #7
 80067c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067c4:	e009      	b.n	80067da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067c6:	4b2f      	ldr	r3, [pc, #188]	; (8006884 <xPortStartScheduler+0x134>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4a2d      	ldr	r2, [pc, #180]	; (8006884 <xPortStartScheduler+0x134>)
 80067ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d0ef      	beq.n	80067c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067e6:	4b27      	ldr	r3, [pc, #156]	; (8006884 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1c3 0307 	rsb	r3, r3, #7
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d00a      	beq.n	8006808 <xPortStartScheduler+0xb8>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60bb      	str	r3, [r7, #8]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006808:	4b1e      	ldr	r3, [pc, #120]	; (8006884 <xPortStartScheduler+0x134>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <xPortStartScheduler+0x134>)
 8006810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006812:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <xPortStartScheduler+0x134>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800681a:	4a1a      	ldr	r2, [pc, #104]	; (8006884 <xPortStartScheduler+0x134>)
 800681c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <xPortStartScheduler+0x138>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a17      	ldr	r2, [pc, #92]	; (8006888 <xPortStartScheduler+0x138>)
 800682c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <xPortStartScheduler+0x138>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a14      	ldr	r2, [pc, #80]	; (8006888 <xPortStartScheduler+0x138>)
 8006838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800683c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800683e:	f000 f8dd 	bl	80069fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <xPortStartScheduler+0x13c>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006848:	f000 f8fc 	bl	8006a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800684c:	4b10      	ldr	r3, [pc, #64]	; (8006890 <xPortStartScheduler+0x140>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0f      	ldr	r2, [pc, #60]	; (8006890 <xPortStartScheduler+0x140>)
 8006852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006858:	f7ff ff66 	bl	8006728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800685c:	f7ff f84a 	bl	80058f4 <vTaskSwitchContext>
	prvTaskExitError();
 8006860:	f7ff ff20 	bl	80066a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	e000ed00 	.word	0xe000ed00
 8006874:	410fc271 	.word	0x410fc271
 8006878:	410fc270 	.word	0x410fc270
 800687c:	e000e400 	.word	0xe000e400
 8006880:	20001274 	.word	0x20001274
 8006884:	20001278 	.word	0x20001278
 8006888:	e000ed20 	.word	0xe000ed20
 800688c:	20000010 	.word	0x20000010
 8006890:	e000ef34 	.word	0xe000ef34

08006894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	607b      	str	r3, [r7, #4]
}
 80068ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <vPortEnterCritical+0x58>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <vPortEnterCritical+0x58>)
 80068b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <vPortEnterCritical+0x58>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10f      	bne.n	80068e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <vPortEnterCritical+0x5c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	603b      	str	r3, [r7, #0]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vPortEnterCritical+0x4a>
	}
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	20000010 	.word	0x20000010
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <vPortExitCritical+0x50>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <vPortExitCritical+0x24>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	607b      	str	r3, [r7, #4]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <vPortExitCritical+0x50>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <vPortExitCritical+0x50>)
 8006920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006922:	4b08      	ldr	r3, [pc, #32]	; (8006944 <vPortExitCritical+0x50>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <vPortExitCritical+0x42>
 800692a:	2300      	movs	r3, #0
 800692c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f383 8811 	msr	BASEPRI, r3
}
 8006934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000010 	.word	0x20000010
	...

08006950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006950:	f3ef 8009 	mrs	r0, PSP
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <pxCurrentTCBConst>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	f01e 0f10 	tst.w	lr, #16
 8006960:	bf08      	it	eq
 8006962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696a:	6010      	str	r0, [r2, #0]
 800696c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006974:	f380 8811 	msr	BASEPRI, r0
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f7fe ffb8 	bl	80058f4 <vTaskSwitchContext>
 8006984:	f04f 0000 	mov.w	r0, #0
 8006988:	f380 8811 	msr	BASEPRI, r0
 800698c:	bc09      	pop	{r0, r3}
 800698e:	6819      	ldr	r1, [r3, #0]
 8006990:	6808      	ldr	r0, [r1, #0]
 8006992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006996:	f01e 0f10 	tst.w	lr, #16
 800699a:	bf08      	it	eq
 800699c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069a0:	f380 8809 	msr	PSP, r0
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	f3af 8000 	nop.w

080069b0 <pxCurrentTCBConst>:
 80069b0:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop

080069b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069d2:	f7fe fed5 	bl	8005780 <xTaskIncrementTick>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <xPortSysTickHandler+0x40>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f383 8811 	msr	BASEPRI, r3
}
 80069ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortSetupTimerInterrupt+0x34>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <vPortSetupTimerInterrupt+0x38>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <vPortSetupTimerInterrupt+0x3c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <vPortSetupTimerInterrupt+0x40>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	099b      	lsrs	r3, r3, #6
 8006a18:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <vPortSetupTimerInterrupt+0x44>)
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <vPortSetupTimerInterrupt+0x34>)
 8006a20:	2207      	movs	r2, #7
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e000e010 	.word	0xe000e010
 8006a34:	e000e018 	.word	0xe000e018
 8006a38:	20000004 	.word	0x20000004
 8006a3c:	10624dd3 	.word	0x10624dd3
 8006a40:	e000e014 	.word	0xe000e014

08006a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a54 <vPortEnableVFP+0x10>
 8006a48:	6801      	ldr	r1, [r0, #0]
 8006a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a4e:	6001      	str	r1, [r0, #0]
 8006a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a52:	bf00      	nop
 8006a54:	e000ed88 	.word	0xe000ed88

08006a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a5e:	f3ef 8305 	mrs	r3, IPSR
 8006a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d914      	bls.n	8006a94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a6a:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <vPortValidateInterruptPriority+0x70>)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a74:	4b15      	ldr	r3, [pc, #84]	; (8006acc <vPortValidateInterruptPriority+0x74>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	7afa      	ldrb	r2, [r7, #11]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d20a      	bcs.n	8006a94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <vPortValidateInterruptPriority+0x78>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <vPortValidateInterruptPriority+0x7c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d90a      	bls.n	8006aba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	603b      	str	r3, [r7, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <vPortValidateInterruptPriority+0x60>
	}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	e000e3f0 	.word	0xe000e3f0
 8006acc:	20001274 	.word	0x20001274
 8006ad0:	e000ed0c 	.word	0xe000ed0c
 8006ad4:	20001278 	.word	0x20001278

08006ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ae4:	f7fe fd90 	bl	8005608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ae8:	4b5b      	ldr	r3, [pc, #364]	; (8006c58 <pvPortMalloc+0x180>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006af0:	f000 f920 	bl	8006d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006af4:	4b59      	ldr	r3, [pc, #356]	; (8006c5c <pvPortMalloc+0x184>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8093 	bne.w	8006c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01d      	beq.n	8006b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b08:	2208      	movs	r2, #8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d014      	beq.n	8006b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f023 0307 	bic.w	r3, r3, #7
 8006b20:	3308      	adds	r3, #8
 8006b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <pvPortMalloc+0x6c>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	617b      	str	r3, [r7, #20]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d06e      	beq.n	8006c28 <pvPortMalloc+0x150>
 8006b4a:	4b45      	ldr	r3, [pc, #276]	; (8006c60 <pvPortMalloc+0x188>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d869      	bhi.n	8006c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b54:	4b43      	ldr	r3, [pc, #268]	; (8006c64 <pvPortMalloc+0x18c>)
 8006b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b58:	4b42      	ldr	r3, [pc, #264]	; (8006c64 <pvPortMalloc+0x18c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b5e:	e004      	b.n	8006b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d903      	bls.n	8006b7c <pvPortMalloc+0xa4>
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f1      	bne.n	8006b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b7c:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <pvPortMalloc+0x180>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d050      	beq.n	8006c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d91f      	bls.n	8006be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4413      	add	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	613b      	str	r3, [r7, #16]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006be2:	69b8      	ldr	r0, [r7, #24]
 8006be4:	f000 f908 	bl	8006df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006be8:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <pvPortMalloc+0x188>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <pvPortMalloc+0x188>)
 8006bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bf6:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <pvPortMalloc+0x188>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <pvPortMalloc+0x190>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d203      	bcs.n	8006c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c02:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <pvPortMalloc+0x188>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <pvPortMalloc+0x190>)
 8006c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <pvPortMalloc+0x184>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <pvPortMalloc+0x194>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <pvPortMalloc+0x194>)
 8006c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c28:	f7fe fcfc 	bl	8005624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <pvPortMalloc+0x174>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60fb      	str	r3, [r7, #12]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <pvPortMalloc+0x172>
	return pvReturn;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3728      	adds	r7, #40	; 0x28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20001e84 	.word	0x20001e84
 8006c5c:	20001e98 	.word	0x20001e98
 8006c60:	20001e88 	.word	0x20001e88
 8006c64:	20001e7c 	.word	0x20001e7c
 8006c68:	20001e8c 	.word	0x20001e8c
 8006c6c:	20001e90 	.word	0x20001e90

08006c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d04d      	beq.n	8006d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c82:	2308      	movs	r3, #8
 8006c84:	425b      	negs	r3, r3
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4413      	add	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <vPortFree+0xb8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <vPortFree+0x44>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60fb      	str	r3, [r7, #12]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <vPortFree+0x62>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60bb      	str	r3, [r7, #8]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <vPortFree+0xb8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01e      	beq.n	8006d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11a      	bne.n	8006d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <vPortFree+0xb8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cf8:	f7fe fc86 	bl	8005608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <vPortFree+0xbc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4413      	add	r3, r2
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <vPortFree+0xbc>)
 8006d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d0a:	6938      	ldr	r0, [r7, #16]
 8006d0c:	f000 f874 	bl	8006df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <vPortFree+0xc0>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a06      	ldr	r2, [pc, #24]	; (8006d30 <vPortFree+0xc0>)
 8006d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d1a:	f7fe fc83 	bl	8005624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d1e:	bf00      	nop
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20001e98 	.word	0x20001e98
 8006d2c:	20001e88 	.word	0x20001e88
 8006d30:	20001e94 	.word	0x20001e94

08006d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d40:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <prvHeapInit+0xac>)
 8006d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3307      	adds	r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <prvHeapInit+0xac>)
 8006d64:	4413      	add	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <prvHeapInit+0xb0>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <prvHeapInit+0xb0>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d80:	2208      	movs	r2, #8
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0307 	bic.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a15      	ldr	r2, [pc, #84]	; (8006de8 <prvHeapInit+0xb4>)
 8006d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d96:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <prvHeapInit+0xb4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <prvHeapInit+0xb4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <prvHeapInit+0xb4>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <prvHeapInit+0xb8>)
 8006dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <prvHeapInit+0xbc>)
 8006dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <prvHeapInit+0xc0>)
 8006dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	2000127c 	.word	0x2000127c
 8006de4:	20001e7c 	.word	0x20001e7c
 8006de8:	20001e84 	.word	0x20001e84
 8006dec:	20001e8c 	.word	0x20001e8c
 8006df0:	20001e88 	.word	0x20001e88
 8006df4:	20001e98 	.word	0x20001e98

08006df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <prvInsertBlockIntoFreeList+0xac>)
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e002      	b.n	8006e0c <prvInsertBlockIntoFreeList+0x14>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d8f7      	bhi.n	8006e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d108      	bne.n	8006e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	441a      	add	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	441a      	add	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d118      	bne.n	8006e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d00d      	beq.n	8006e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e008      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e003      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d002      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20001e7c 	.word	0x20001e7c
 8006ea8:	20001e84 	.word	0x20001e84

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f000 f8f2 	bl	80070a8 <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	08007264 	.word	0x08007264
 8006ee8:	08007264 	.word	0x08007264
 8006eec:	08007264 	.word	0x08007264
 8006ef0:	08007268 	.word	0x08007268

08006ef4 <__retarget_lock_acquire_recursive>:
 8006ef4:	4770      	bx	lr

08006ef6 <__retarget_lock_release_recursive>:
 8006ef6:	4770      	bx	lr

08006ef8 <memcpy>:
 8006ef8:	440a      	add	r2, r1
 8006efa:	4291      	cmp	r1, r2
 8006efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f00:	d100      	bne.n	8006f04 <memcpy+0xc>
 8006f02:	4770      	bx	lr
 8006f04:	b510      	push	{r4, lr}
 8006f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	d1f9      	bne.n	8006f06 <memcpy+0xe>
 8006f12:	bd10      	pop	{r4, pc}

08006f14 <memset>:
 8006f14:	4402      	add	r2, r0
 8006f16:	4603      	mov	r3, r0
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d100      	bne.n	8006f1e <memset+0xa>
 8006f1c:	4770      	bx	lr
 8006f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f22:	e7f9      	b.n	8006f18 <memset+0x4>

08006f24 <cleanup_glue>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	460c      	mov	r4, r1
 8006f28:	6809      	ldr	r1, [r1, #0]
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	b109      	cbz	r1, 8006f32 <cleanup_glue+0xe>
 8006f2e:	f7ff fff9 	bl	8006f24 <cleanup_glue>
 8006f32:	4621      	mov	r1, r4
 8006f34:	4628      	mov	r0, r5
 8006f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f3a:	f000 b869 	b.w	8007010 <_free_r>
	...

08006f40 <_reclaim_reent>:
 8006f40:	4b2c      	ldr	r3, [pc, #176]	; (8006ff4 <_reclaim_reent+0xb4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4283      	cmp	r3, r0
 8006f46:	b570      	push	{r4, r5, r6, lr}
 8006f48:	4604      	mov	r4, r0
 8006f4a:	d051      	beq.n	8006ff0 <_reclaim_reent+0xb0>
 8006f4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f4e:	b143      	cbz	r3, 8006f62 <_reclaim_reent+0x22>
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d14a      	bne.n	8006fec <_reclaim_reent+0xac>
 8006f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	b111      	cbz	r1, 8006f62 <_reclaim_reent+0x22>
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 f857 	bl	8007010 <_free_r>
 8006f62:	6961      	ldr	r1, [r4, #20]
 8006f64:	b111      	cbz	r1, 8006f6c <_reclaim_reent+0x2c>
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f852 	bl	8007010 <_free_r>
 8006f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f6e:	b111      	cbz	r1, 8006f76 <_reclaim_reent+0x36>
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 f84d 	bl	8007010 <_free_r>
 8006f76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f78:	b111      	cbz	r1, 8006f80 <_reclaim_reent+0x40>
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f848 	bl	8007010 <_free_r>
 8006f80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f82:	b111      	cbz	r1, 8006f8a <_reclaim_reent+0x4a>
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 f843 	bl	8007010 <_free_r>
 8006f8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f8c:	b111      	cbz	r1, 8006f94 <_reclaim_reent+0x54>
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f000 f83e 	bl	8007010 <_free_r>
 8006f94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f96:	b111      	cbz	r1, 8006f9e <_reclaim_reent+0x5e>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 f839 	bl	8007010 <_free_r>
 8006f9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006fa0:	b111      	cbz	r1, 8006fa8 <_reclaim_reent+0x68>
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 f834 	bl	8007010 <_free_r>
 8006fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006faa:	b111      	cbz	r1, 8006fb2 <_reclaim_reent+0x72>
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f82f 	bl	8007010 <_free_r>
 8006fb2:	69a3      	ldr	r3, [r4, #24]
 8006fb4:	b1e3      	cbz	r3, 8006ff0 <_reclaim_reent+0xb0>
 8006fb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4798      	blx	r3
 8006fbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fbe:	b1b9      	cbz	r1, 8006ff0 <_reclaim_reent+0xb0>
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fc6:	f7ff bfad 	b.w	8006f24 <cleanup_glue>
 8006fca:	5949      	ldr	r1, [r1, r5]
 8006fcc:	b941      	cbnz	r1, 8006fe0 <_reclaim_reent+0xa0>
 8006fce:	3504      	adds	r5, #4
 8006fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd2:	2d80      	cmp	r5, #128	; 0x80
 8006fd4:	68d9      	ldr	r1, [r3, #12]
 8006fd6:	d1f8      	bne.n	8006fca <_reclaim_reent+0x8a>
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 f819 	bl	8007010 <_free_r>
 8006fde:	e7ba      	b.n	8006f56 <_reclaim_reent+0x16>
 8006fe0:	680e      	ldr	r6, [r1, #0]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f814 	bl	8007010 <_free_r>
 8006fe8:	4631      	mov	r1, r6
 8006fea:	e7ef      	b.n	8006fcc <_reclaim_reent+0x8c>
 8006fec:	2500      	movs	r5, #0
 8006fee:	e7ef      	b.n	8006fd0 <_reclaim_reent+0x90>
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000014 	.word	0x20000014

08006ff8 <__malloc_lock>:
 8006ff8:	4801      	ldr	r0, [pc, #4]	; (8007000 <__malloc_lock+0x8>)
 8006ffa:	f7ff bf7b 	b.w	8006ef4 <__retarget_lock_acquire_recursive>
 8006ffe:	bf00      	nop
 8007000:	20001e9c 	.word	0x20001e9c

08007004 <__malloc_unlock>:
 8007004:	4801      	ldr	r0, [pc, #4]	; (800700c <__malloc_unlock+0x8>)
 8007006:	f7ff bf76 	b.w	8006ef6 <__retarget_lock_release_recursive>
 800700a:	bf00      	nop
 800700c:	20001e9c 	.word	0x20001e9c

08007010 <_free_r>:
 8007010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007012:	2900      	cmp	r1, #0
 8007014:	d044      	beq.n	80070a0 <_free_r+0x90>
 8007016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701a:	9001      	str	r0, [sp, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f1a1 0404 	sub.w	r4, r1, #4
 8007022:	bfb8      	it	lt
 8007024:	18e4      	addlt	r4, r4, r3
 8007026:	f7ff ffe7 	bl	8006ff8 <__malloc_lock>
 800702a:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <_free_r+0x94>)
 800702c:	9801      	ldr	r0, [sp, #4]
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	b933      	cbnz	r3, 8007040 <_free_r+0x30>
 8007032:	6063      	str	r3, [r4, #4]
 8007034:	6014      	str	r4, [r2, #0]
 8007036:	b003      	add	sp, #12
 8007038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800703c:	f7ff bfe2 	b.w	8007004 <__malloc_unlock>
 8007040:	42a3      	cmp	r3, r4
 8007042:	d908      	bls.n	8007056 <_free_r+0x46>
 8007044:	6825      	ldr	r5, [r4, #0]
 8007046:	1961      	adds	r1, r4, r5
 8007048:	428b      	cmp	r3, r1
 800704a:	bf01      	itttt	eq
 800704c:	6819      	ldreq	r1, [r3, #0]
 800704e:	685b      	ldreq	r3, [r3, #4]
 8007050:	1949      	addeq	r1, r1, r5
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	e7ed      	b.n	8007032 <_free_r+0x22>
 8007056:	461a      	mov	r2, r3
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	b10b      	cbz	r3, 8007060 <_free_r+0x50>
 800705c:	42a3      	cmp	r3, r4
 800705e:	d9fa      	bls.n	8007056 <_free_r+0x46>
 8007060:	6811      	ldr	r1, [r2, #0]
 8007062:	1855      	adds	r5, r2, r1
 8007064:	42a5      	cmp	r5, r4
 8007066:	d10b      	bne.n	8007080 <_free_r+0x70>
 8007068:	6824      	ldr	r4, [r4, #0]
 800706a:	4421      	add	r1, r4
 800706c:	1854      	adds	r4, r2, r1
 800706e:	42a3      	cmp	r3, r4
 8007070:	6011      	str	r1, [r2, #0]
 8007072:	d1e0      	bne.n	8007036 <_free_r+0x26>
 8007074:	681c      	ldr	r4, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	6053      	str	r3, [r2, #4]
 800707a:	4421      	add	r1, r4
 800707c:	6011      	str	r1, [r2, #0]
 800707e:	e7da      	b.n	8007036 <_free_r+0x26>
 8007080:	d902      	bls.n	8007088 <_free_r+0x78>
 8007082:	230c      	movs	r3, #12
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	e7d6      	b.n	8007036 <_free_r+0x26>
 8007088:	6825      	ldr	r5, [r4, #0]
 800708a:	1961      	adds	r1, r4, r5
 800708c:	428b      	cmp	r3, r1
 800708e:	bf04      	itt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	bf04      	itt	eq
 8007098:	1949      	addeq	r1, r1, r5
 800709a:	6021      	streq	r1, [r4, #0]
 800709c:	6054      	str	r4, [r2, #4]
 800709e:	e7ca      	b.n	8007036 <_free_r+0x26>
 80070a0:	b003      	add	sp, #12
 80070a2:	bd30      	pop	{r4, r5, pc}
 80070a4:	20001ea0 	.word	0x20001ea0

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
