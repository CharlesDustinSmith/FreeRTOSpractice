
35_Cmsis-RTOS_ThreadPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008598  08008598  00018598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  080085a0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e38  20000078  08008614  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001eb0  08008614  00021eb0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002625d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047cb  00000000  00000000  00046305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  0004aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002120  00000000  00000000  0004cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c0d  00000000  00000000  0004eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002073b  00000000  00000000  00054ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef8f1  00000000  00000000  000751f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00164ae1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009cdc  00000000  00000000  00164b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08008328 	.word	0x08008328

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08008328 	.word	0x08008328

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000534:	f023 0218 	bic.w	r2, r3, #24
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:

// Variable needed to change the
osThreadId_t red_id, green_id, blue_id, orange_id;

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a4      	sub	sp, #144	; 0x90
 8000588:	af00      	add	r7, sp, #0

  HAL_Init();
 800058a:	f000 fd2d 	bl	8000fe8 <HAL_Init>
  SystemClock_Config();
 800058e:	f000 f8fb 	bl	8000788 <SystemClock_Config>
  MX_GPIO_Init();
 8000592:	f000 f9e3 	bl	800095c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000596:	f000 f96d 	bl	8000874 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 800059a:	f000 f9b7 	bl	800090c <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 800059e:	f004 f831 	bl	8004604 <osKernelInitialize>

  osThreadAttr_t greenThreadAttribs = {
 80005a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005a6:	2224      	movs	r2, #36	; 0x24
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 ff7f 	bl	80074ae <memset>
 80005b0:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <main+0xe4>)
 80005b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005bc:	2318      	movs	r3, #24
 80005be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 80005c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c6:	2224      	movs	r2, #36	; 0x24
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 ff6f 	bl	80074ae <memset>
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <main+0xe8>)
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005da:	2318      	movs	r3, #24
 80005dc:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t orangeThreadAttribs = {
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	2224      	movs	r2, #36	; 0x24
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 ff61 	bl	80074ae <memset>
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <main+0xec>)
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
 80005f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80005f6:	2318      	movs	r3, #24
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t blueThreadAttribs = {
 80005fa:	463b      	mov	r3, r7
 80005fc:	2224      	movs	r2, #36	; 0x24
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f006 ff54 	bl	80074ae <memset>
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <main+0xf0>)
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	2318      	movs	r3, #24
 8000612:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000614:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000618:	461a      	mov	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <main+0xf4>)
 800061e:	f004 f83b 	bl	8004698 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <main+0xf8>)
 8000626:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 8000628:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800062c:	461a      	mov	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <main+0xfc>)
 8000632:	f004 f831 	bl	8004698 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <main+0x100>)
 800063a:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 800063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000640:	461a      	mov	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <main+0x104>)
 8000646:	f004 f827 	bl	8004698 <osThreadNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <main+0x108>)
 800064e:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 8000650:	463b      	mov	r3, r7
 8000652:	461a      	mov	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <main+0x10c>)
 8000658:	f004 f81e 	bl	8004698 <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <main+0x110>)
 8000660:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000662:	f003 fff3 	bl	800464c <osKernelStart>

  while (1)
 8000666:	e7fe      	b.n	8000666 <main+0xe2>
 8000668:	08008340 	.word	0x08008340
 800066c:	0800834c 	.word	0x0800834c
 8000670:	08008358 	.word	0x08008358
 8000674:	08008364 	.word	0x08008364
 8000678:	08000699 	.word	0x08000699
 800067c:	20000430 	.word	0x20000430
 8000680:	080006c9 	.word	0x080006c9
 8000684:	2000042c 	.word	0x2000042c
 8000688:	080006f9 	.word	0x080006f9
 800068c:	20000438 	.word	0x20000438
 8000690:	08000759 	.word	0x08000759
 8000694:	20000434 	.word	0x20000434

08000698 <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <vGreenLedControllerTask+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vGreenLedControllerTask+0x28>)
 80006a8:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 700000; ++i) {}
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e002      	b.n	80006b6 <vGreenLedControllerTask+0x1e>
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4a02      	ldr	r2, [pc, #8]	; (80006c4 <vGreenLedControllerTask+0x2c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d9f8      	bls.n	80006b0 <vGreenLedControllerTask+0x18>
		++Green_TaskProfiler;
 80006be:	e7ef      	b.n	80006a0 <vGreenLedControllerTask+0x8>
 80006c0:	20000424 	.word	0x20000424
 80006c4:	000aae5f 	.word	0x000aae5f

080006c8 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Red_TaskProfiler;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <vRedLedControllerTask+0x28>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <vRedLedControllerTask+0x28>)
 80006d8:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 700000; ++i) {}
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e002      	b.n	80006e6 <vRedLedControllerTask+0x1e>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4a02      	ldr	r2, [pc, #8]	; (80006f4 <vRedLedControllerTask+0x2c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d9f8      	bls.n	80006e0 <vRedLedControllerTask+0x18>
		++Red_TaskProfiler;
 80006ee:	e7ef      	b.n	80006d0 <vRedLedControllerTask+0x8>
 80006f0:	20000420 	.word	0x20000420
 80006f4:	000aae5f 	.word	0x000aae5f

080006f8 <vOrangeLedControllerTask>:
	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while(1)
	{
		++Orange_TaskProfiler;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <vOrangeLedControllerTask+0x48>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <vOrangeLedControllerTask+0x48>)
 8000708:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 700000; ++i) {}
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e002      	b.n	8000716 <vOrangeLedControllerTask+0x1e>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <vOrangeLedControllerTask+0x4c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d9f8      	bls.n	8000710 <vOrangeLedControllerTask+0x18>

		 status = osThreadSetPriority(green_id, osPriorityAboveNormal1);
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <vOrangeLedControllerTask+0x50>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2121      	movs	r1, #33	; 0x21
 8000724:	4618      	mov	r0, r3
 8000726:	f004 f849 	bl	80047bc <osThreadSetPriority>
 800072a:	60b8      	str	r0, [r7, #8]
		 assert(status == osOK);
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0e6      	beq.n	8000700 <vOrangeLedControllerTask+0x8>
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <vOrangeLedControllerTask+0x54>)
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <vOrangeLedControllerTask+0x58>)
 8000736:	216c      	movs	r1, #108	; 0x6c
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <vOrangeLedControllerTask+0x5c>)
 800073a:	f006 fd57 	bl	80071ec <__assert_func>
 800073e:	bf00      	nop
 8000740:	2000041c 	.word	0x2000041c
 8000744:	000aae5f 	.word	0x000aae5f
 8000748:	20000430 	.word	0x20000430
 800074c:	08008370 	.word	0x08008370
 8000750:	080083d8 	.word	0x080083d8
 8000754:	08008380 	.word	0x08008380

08000758 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Blue_TaskProfiler;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <vBlueLedControllerTask+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <vBlueLedControllerTask+0x28>)
 8000768:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 700000; ++i) {}
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e002      	b.n	8000776 <vBlueLedControllerTask+0x1e>
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4a02      	ldr	r2, [pc, #8]	; (8000784 <vBlueLedControllerTask+0x2c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d9f8      	bls.n	8000770 <vBlueLedControllerTask+0x18>
		++Blue_TaskProfiler;
 800077e:	e7ef      	b.n	8000760 <vBlueLedControllerTask+0x8>
 8000780:	20000428 	.word	0x20000428
 8000784:	000aae5f 	.word	0x000aae5f

08000788 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09a      	sub	sp, #104	; 0x68
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2248      	movs	r2, #72	; 0x48
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 fe89 	bl	80074ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007bc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f023 0303 	bic.w	r3, r3, #3
 80007c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d2:	f001 f85f 	bl	8001894 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fea4 	bl	8000524 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xe8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <SystemClock_Config+0xe8>)
 80007e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <SystemClock_Config+0xe8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000814:	2300      	movs	r3, #0
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800081c:	2300      	movs	r3, #0
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fc27 	bl	8002078 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000830:	f000 f8fe 	bl	8000a30 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000834:	236f      	movs	r3, #111	; 0x6f
 8000836:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000838:	2302      	movs	r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f001 ff83 	bl	8002760 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000860:	f000 f8e6 	bl	8000a30 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000864:	f002 fd70 	bl	8003348 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000868:	bf00      	nop
 800086a:	3768      	adds	r7, #104	; 0x68
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	58000400 	.word	0x58000400

08000874 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800087a:	4a23      	ldr	r2, [pc, #140]	; (8000908 <MX_LPUART1_UART_Init+0x94>)
 800087c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008be:	f003 f8f3 	bl	8003aa8 <HAL_UART_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f8b2 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008d0:	f003 fd4e 	bl	8004370 <HAL_UARTEx_SetTxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f8a9 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008e2:	f003 fd83 	bl	80043ec <HAL_UARTEx_SetRxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 f8a0 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_LPUART1_UART_Init+0x90>)
 80008f2:	f003 fd04 	bl	80042fe <HAL_UARTEx_DisableFifoMode>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f898 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000094 	.word	0x20000094
 8000908:	40008000 	.word	0x40008000

0800090c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <MX_USB_PCD_Init+0x4c>)
 8000914:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000918:	2208      	movs	r2, #8
 800091a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_USB_PCD_Init+0x48>)
 800091e:	2202      	movs	r2, #2
 8000920:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000924:	2202      	movs	r2, #2
 8000926:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_USB_PCD_Init+0x48>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USB_PCD_Init+0x48>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_USB_PCD_Init+0x48>)
 8000942:	f000 fe05 	bl	8001550 <HAL_PCD_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800094c:	f000 f870 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000124 	.word	0x20000124
 8000958:	40006800 	.word	0x40006800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff fded 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fdea 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	2002      	movs	r0, #2
 800097e:	f7ff fde7 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2008      	movs	r0, #8
 8000984:	f7ff fde4 	bl	8000550 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2123      	movs	r1, #35	; 0x23
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <MX_GPIO_Init+0xa4>)
 800098e:	f000 fdc7 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	2310      	movs	r3, #16
 8000994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <MX_GPIO_Init+0xa8>)
 80009a4:	f000 fc4c 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80009a8:	2323      	movs	r3, #35	; 0x23
 80009aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4810      	ldr	r0, [pc, #64]	; (8000a00 <MX_GPIO_Init+0xa4>)
 80009be:	f000 fc3f 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009c2:	2303      	movs	r3, #3
 80009c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_GPIO_Init+0xac>)
 80009d4:	f000 fc34 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009d8:	23c0      	movs	r3, #192	; 0xc0
 80009da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e8:	2307      	movs	r3, #7
 80009ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <MX_GPIO_Init+0xa4>)
 80009f2:	f000 fc25 	bl	8001240 <HAL_GPIO_Init>

}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	48000400 	.word	0x48000400
 8000a04:	48000800 	.word	0x48000800
 8000a08:	48000c00 	.word	0x48000c00

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 fb03 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>

08000a3a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 fb83 	bl	80011f0 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000af2:	463b      	mov	r3, r7
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fedd 	bl	80018b4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000afa:	f000 ff1d 	bl	8001938 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09c      	sub	sp, #112	; 0x70
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2250      	movs	r2, #80	; 0x50
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fcc0 	bl	80074ae <memset>
  if(huart->Instance==LPUART1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d124      	bne.n	8000b82 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fa89 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ff6e 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff ffa2 	bl	8000a9e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff ff6d 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b60:	230c      	movs	r3, #12
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b70:	2308      	movs	r3, #8
 8000b72:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fb5f 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3770      	adds	r7, #112	; 0x70
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40008000 	.word	0x40008000

08000b90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	; 0x70
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2250      	movs	r2, #80	; 0x50
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f006 fc7c 	bl	80074ae <memset>
  if(hpcd->Instance==USB)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_PCD_MspInit+0xa8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d136      	bne.n	8000c2e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000bc6:	2318      	movs	r3, #24
 8000bc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000bd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bda:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000be0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000be2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fa35 	bl	800305c <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000bf8:	f7ff ff1a 	bl	8000a30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ff1c 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c06:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c14:	230a      	movs	r3, #10
 8000c16:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 fb0d 	bl	8001240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c26:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c2a:	f7ff ff1f 	bl	8000a6c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3770      	adds	r7, #112	; 0x70
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40006800 	.word	0x40006800

08000c3c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c60:	68fb      	ldr	r3, [r7, #12]
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	2019      	movs	r0, #25
 8000c86:	f000 fab3 	bl	80011f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c8a:	2019      	movs	r0, #25
 8000c8c:	f000 faca 	bl	8001224 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c94:	f7ff ffd2 	bl	8000c3c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c98:	f107 0208 	add.w	r2, r7, #8
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 ff48 	bl	8002b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca8:	f001 ff30 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8000cac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <HAL_InitTick+0x8c>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0c9b      	lsrs	r3, r3, #18
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_InitTick+0x90>)
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_InitTick+0x94>)
 8000cc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_InitTick+0x90>)
 8000cc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_InitTick+0x90>)
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_InitTick+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_InitTick+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <HAL_InitTick+0x90>)
 8000cde:	f002 fc4a 	bl	8003576 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_InitTick+0x90>)
 8000cea:	f002 fca5 	bl	8003638 <HAL_TIM_Base_Start_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	2000043c 	.word	0x2000043c
 8000d04:	40012c00 	.word	0x40012c00

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d3a:	f002 fccb 	bl	80036d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000043c 	.word	0x2000043c

08000d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return 1;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_kill>:

int _kill(int pid, int sig)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d62:	f006 fa61 	bl	8007228 <__errno>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2216      	movs	r2, #22
 8000d6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_exit>:

void _exit (int status)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffe7 	bl	8000d58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d8a:	e7fe      	b.n	8000d8a <_exit+0x12>

08000d8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00a      	b.n	8000db4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4601      	mov	r1, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf0      	blt.n	8000d9e <_read+0x12>
	}

return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e009      	b.n	8000dec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf1      	blt.n	8000dd8 <_write+0x12>
	}
	return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
	return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f006 f9c6 	bl	8007228 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20030000 	.word	0x20030000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	20000488 	.word	0x20000488
 8000ed0:	20001eb0 	.word	0x20001eb0

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <SystemInit+0x98>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <SystemInit+0x98>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f00:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <SystemInit+0x9c>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f1e:	f023 0305 	bic.w	r3, r3, #5
 8000f22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <SystemInit+0xa0>)
 8000f40:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <SystemInit+0xa0>)
 8000f48:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	faf6fefb 	.word	0xfaf6fefb
 8000f74:	22041000 	.word	0x22041000

08000f78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7c:	3304      	adds	r3, #4

08000f7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f82:	d3f9      	bcc.n	8000f78 <CopyDataInit>
  bx lr
 8000f84:	4770      	bx	lr

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f88:	3004      	adds	r0, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>
  bx lr
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f7ff ff9e 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <LoopForever+0x8>)
 8000f9a:	490c      	ldr	r1, [pc, #48]	; (8000fcc <LoopForever+0xc>)
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <LoopForever+0x10>)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f7ff ffed 	bl	8000f7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <LoopForever+0x14>)
 8000fa6:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <LoopForever+0x18>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f7ff ffee 	bl	8000f8a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopForever+0x1c>)
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <LoopForever+0x20>)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f7ff ffe9 	bl	8000f8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb8:	f006 fa44 	bl	8007444 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000fbc:	f7ff fae2 	bl	8000584 <main>

08000fc0 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc0:	e7fe      	b.n	8000fc0 <LoopForever>
 8000fc2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000fc4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000078 	.word	0x20000078
 8000fd0:	080085a0 	.word	0x080085a0
  INIT_BSS _sbss, _ebss
 8000fd4:	20000078 	.word	0x20000078
 8000fd8:	20001eb0 	.word	0x20001eb0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fdc:	20030000 	.word	0x20030000
 8000fe0:	20030000 	.word	0x20030000

08000fe4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_Init+0x3c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x3c>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f8eb 	bl	80011da <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001004:	200f      	movs	r0, #15
 8001006:	f7ff fe33 	bl	8000c70 <HAL_InitTick>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e001      	b.n	800101a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001016:	f7ff fd5b 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58004000 	.word	0x58004000

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000000c 	.word	0x2000000c
 800104c:	2000048c 	.word	0x2000048c

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000048c 	.word	0x2000048c

08001068 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTickPrio+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff4c 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011fe:	f7ff ff63 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001202:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	6978      	ldr	r0, [r7, #20]
 800120a:	f7ff ffb3 	bl	8001174 <NVIC_EncodePriority>
 800120e:	4602      	mov	r2, r0
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff82 	bl	8001120 <__NVIC_SetPriority>
}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff56 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e14c      	b.n	80014ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 813e 	beq.w	80014e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_GPIO_Init+0x40>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d017      	beq.n	800131e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	6939      	ldr	r1, [r7, #16]
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8098 	beq.w	80014e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013b4:	4a54      	ldr	r2, [pc, #336]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013de:	d019      	beq.n	8001414 <HAL_GPIO_Init+0x1d4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x2cc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d013      	beq.n	8001410 <HAL_GPIO_Init+0x1d0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a49      	ldr	r2, [pc, #292]	; (8001510 <HAL_GPIO_Init+0x2d0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d00d      	beq.n	800140c <HAL_GPIO_Init+0x1cc>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a48      	ldr	r2, [pc, #288]	; (8001514 <HAL_GPIO_Init+0x2d4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x1c8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a47      	ldr	r2, [pc, #284]	; (8001518 <HAL_GPIO_Init+0x2d8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d101      	bne.n	8001404 <HAL_GPIO_Init+0x1c4>
 8001400:	2304      	movs	r3, #4
 8001402:	e008      	b.n	8001416 <HAL_GPIO_Init+0x1d6>
 8001404:	2307      	movs	r3, #7
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x1d6>
 8001408:	2303      	movs	r3, #3
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1d6>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1d6>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1d6>
 8001414:	2300      	movs	r3, #0
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001426:	4938      	ldr	r1, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001458:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_GPIO_Init+0x2dc>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001482:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_GPIO_Init+0x2dc>)
 800148a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80014b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f47f aeab 	bne.w	8001250 <HAL_GPIO_Init+0x10>
  }
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	48001000 	.word	0x48001000
 800151c:	58000800 	.word	0x58000800

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e002      	b.n	8001544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af06      	add	r7, sp, #24
 8001556:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0dd      	b.n	800171e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fb0a 	bl	8000b90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f002 ffb8 	bl	8004504 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e04d      	b.n	8001636 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3305      	adds	r3, #5
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3304      	adds	r3, #4
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	b298      	uxth	r0, r3
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	333a      	adds	r3, #58	; 0x3a
 80015da:	4602      	mov	r2, r0
 80015dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3307      	adds	r3, #7
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	333c      	adds	r3, #60	; 0x3c
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3340      	adds	r3, #64	; 0x40
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3344      	adds	r3, #68	; 0x44
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	3301      	adds	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ac      	bcc.n	800159a <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e044      	b.n	80016d0 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3b5      	bcc.n	8001646 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	687e      	ldr	r6, [r7, #4]
 80016e2:	466d      	mov	r5, sp
 80016e4:	f106 0410 	add.w	r4, r6, #16
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f4:	1d33      	adds	r3, r6, #4
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f002 ff1e 	bl	800453a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d102      	bne.n	800171c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f805 	bl	8001726 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001726 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800174a:	b29b      	uxth	r3, r3
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800175e:	b29b      	uxth	r3, r3
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001786:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800178a:	4905      	ldr	r1, [pc, #20]	; (80017a0 <LL_EXTI_EnableIT_0_31+0x24>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	58000800 	.word	0x58000800

080017a4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <LL_EXTI_DisableIT_0_31+0x28>)
 80017ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4905      	ldr	r1, [pc, #20]	; (80017cc <LL_EXTI_DisableIT_0_31+0x28>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	58000800 	.word	0x58000800

080017d0 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80017da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4905      	ldr	r1, [pc, #20]	; (80017f8 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58000800 	.word	0x58000800

080017fc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4904      	ldr	r1, [pc, #16]	; (800181c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58000800 	.word	0x58000800

08001820 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	43db      	mvns	r3, r3
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	58000800 	.word	0x58000800

08001848 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	58000800 	.word	0x58000800

0800186c <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	43db      	mvns	r3, r3
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800187e:	4013      	ands	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	58000800 	.word	0x58000800

08001894 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	58000400 	.word	0x58000400

080018b4 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_PWR_ConfigPVD+0x80>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 020e 	bic.w	r2, r3, #14
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	491a      	ldr	r1, [pc, #104]	; (8001934 <HAL_PWR_ConfigPVD+0x80>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80018ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018d2:	f7ff ff67 	bl	80017a4 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80018d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018da:	f7ff ff79 	bl	80017d0 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80018de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018e2:	f7ff ffc3 	bl	800186c <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80018e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018ea:	f7ff ff99 	bl	8001820 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80018fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018fe:	f7ff ff3d 	bl	800177c <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800190e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001912:	f7ff ff73 	bl	80017fc <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001922:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001926:	f7ff ff8f 	bl	8001848 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	58000400 	.word	0x58000400

08001938 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_PWR_EnablePVD+0x1c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_PWR_EnablePVD+0x1c>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6053      	str	r3, [r2, #4]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	58000400 	.word	0x58000400

08001958 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <HAL_PWREx_GetVoltageRange+0x18>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	58000400 	.word	0x58000400

08001974 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001986:	d101      	bne.n	800198c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019e6:	d101      	bne.n	80019ec <LL_RCC_HSE_IsReady+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_RCC_HSE_IsReady+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d101      	bne.n	8001a4c <LL_RCC_HSI_IsReady+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_RCC_HSI_IsReady+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d101      	bne.n	8001ade <LL_RCC_HSI48_IsReady+0x18>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <LL_RCC_HSI48_IsReady+0x1a>
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d101      	bne.n	8001b8a <LL_RCC_LSE_IsReady+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_RCC_LSE_IsReady+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d101      	bne.n	8001bf2 <LL_RCC_LSI1_IsReady+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_RCC_LSI1_IsReady+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d101      	bne.n	8001c5a <LL_RCC_LSI2_IsReady+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_RCC_LSI2_IsReady+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d101      	bne.n	8001ce6 <LL_RCC_MSI_IsReady+0x16>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_RCC_MSI_IsReady+0x18>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8001d30:	d901      	bls.n	8001d36 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d32:	23b0      	movs	r3, #176	; 0xb0
 8001d34:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 0203 	bic.w	r2, r3, #3
 8001d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f4c:	d101      	bne.n	8001f52 <LL_RCC_PLL_IsReady+0x18>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_RCC_PLL_IsReady+0x1a>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d101      	bne.n	8001fd8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ff8:	d101      	bne.n	8001ffe <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201e:	d101      	bne.n	8002024 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002042:	d101      	bne.n	8002048 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002066:	d101      	bne.n	800206c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b08d      	sub	sp, #52	; 0x34
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e363      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 808d 	beq.w	80021b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002098:	f7ff fe7d 	bl	8001d96 <LL_RCC_GetSysClkSource>
 800209c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209e:	f7ff ff83 	bl	8001fa8 <LL_RCC_PLL_GetMainSource>
 80020a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3e>
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	d147      	bne.n	8002140 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d144      	bne.n	8002140 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e347      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020c6:	f7ff fe28 	bl	8001d1a <LL_RCC_MSI_GetRange>
 80020ca:	4603      	mov	r3, r0
 80020cc:	429c      	cmp	r4, r3
 80020ce:	d914      	bls.n	80020fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fd61 	bl	8002b9c <RCC_SetFlashLatencyFromMSIRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e336      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe02 	bl	8001cf2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe26 	bl	8001d44 <LL_RCC_MSI_SetCalibTrimming>
 80020f8:	e013      	b.n	8002122 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fdf7 	bl	8001cf2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fe1b 	bl	8001d44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fd42 	bl	8002b9c <RCC_SetFlashLatencyFromMSIRange>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e317      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002122:	f000 fcc9 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002126:	4603      	mov	r3, r0
 8002128:	4aa4      	ldr	r2, [pc, #656]	; (80023bc <HAL_RCC_OscConfig+0x344>)
 800212a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800212c:	4ba4      	ldr	r3, [pc, #656]	; (80023c0 <HAL_RCC_OscConfig+0x348>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fd9d 	bl	8000c70 <HAL_InitTick>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d039      	beq.n	80021b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e308      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01e      	beq.n	8002186 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002148:	f7ff fda4 	bl	8001c94 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214c:	f7fe ff80 	bl	8001050 <HAL_GetTick>
 8002150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002154:	f7fe ff7c 	bl	8001050 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e2f5      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002166:	f7ff fdb3 	bl	8001cd0 <LL_RCC_MSI_IsReady>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f1      	beq.n	8002154 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fdbc 	bl	8001cf2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fde0 	bl	8001d44 <LL_RCC_MSI_SetCalibTrimming>
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002186:	f7ff fd94 	bl	8001cb2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800218a:	f7fe ff61 	bl	8001050 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002192:	f7fe ff5d 	bl	8001050 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e2d6      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021a4:	f7ff fd94 	bl	8001cd0 <LL_RCC_MSI_IsReady>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f1      	bne.n	8002192 <HAL_RCC_OscConfig+0x11a>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d047      	beq.n	800224e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	f7ff fdea 	bl	8001d96 <LL_RCC_GetSysClkSource>
 80021c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c4:	f7ff fef0 	bl	8001fa8 <LL_RCC_PLL_GetMainSource>
 80021c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_OscConfig+0x164>
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d134      	bne.n	800224e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e2b4      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x180>
 80021f2:	f7ff fbd1 	bl	8001998 <LL_RCC_HSE_Enable>
 80021f6:	e001      	b.n	80021fc <HAL_RCC_OscConfig+0x184>
 80021f8:	f7ff fbdd 	bl	80019b6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe ff24 	bl	8001050 <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe ff20 	bl	8001050 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e299      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800221e:	f7ff fbd9 	bl	80019d4 <LL_RCC_HSE_IsReady>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f1      	beq.n	800220c <HAL_RCC_OscConfig+0x194>
 8002228:	e011      	b.n	800224e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe ff11 	bl	8001050 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002232:	f7fe ff0d 	bl	8001050 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	; 0x64
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e286      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002244:	f7ff fbc6 	bl	80019d4 <LL_RCC_HSE_IsReady>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f1      	bne.n	8002232 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	f7ff fd9c 	bl	8001d96 <LL_RCC_GetSysClkSource>
 800225e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	f7ff fea2 	bl	8001fa8 <LL_RCC_PLL_GetMainSource>
 8002264:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x200>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d10e      	bne.n	8002290 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e266      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fbe5 	bl	8001a58 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800228e:	e031      	b.n	80022f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d019      	beq.n	80022cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	f7ff fbae 	bl	80019f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fed8 	bl	8001050 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe fed4 	bl	8001050 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e24d      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022b6:	f7ff fbbd 	bl	8001a34 <LL_RCC_HSI_IsReady>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f1      	beq.n	80022a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fbc7 	bl	8001a58 <LL_RCC_HSI_SetCalibTrimming>
 80022ca:	e013      	b.n	80022f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022cc:	f7ff fba3 	bl	8001a16 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe febe 	bl	8001050 <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe feba 	bl	8001050 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e233      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80022ea:	f7ff fba3 	bl	8001a34 <LL_RCC_HSI_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f1      	bne.n	80022d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a3 	beq.w	8002454 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d076      	beq.n	8002404 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d046      	beq.n	80023b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002322:	f7ff fc5a 	bl	8001bda <LL_RCC_LSI1_IsReady>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d113      	bne.n	8002354 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800232c:	f7ff fc33 	bl	8001b96 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002330:	f7fe fe8e 	bl	8001050 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002338:	f7fe fe8a 	bl	8001050 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e203      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800234a:	f7ff fc46 	bl	8001bda <LL_RCC_LSI1_IsReady>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f1      	beq.n	8002338 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002354:	f7ff fc53 	bl	8001bfe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe fe7a 	bl	8001050 <HAL_GetTick>
 800235c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002360:	f7fe fe76 	bl	8001050 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b03      	cmp	r3, #3
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1ef      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002372:	f7ff fc66 	bl	8001c42 <LL_RCC_LSI2_IsReady>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f1      	beq.n	8002360 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fc70 	bl	8001c66 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002386:	f7ff fc17 	bl	8001bb8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fe61 	bl	8001050 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002392:	f7fe fe5d 	bl	8001050 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1d6      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023a4:	f7ff fc19 	bl	8001bda <LL_RCC_LSI1_IsReady>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f1      	bne.n	8002392 <HAL_RCC_OscConfig+0x31a>
 80023ae:	e051      	b.n	8002454 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023b0:	f7ff fbf1 	bl	8001b96 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe4c 	bl	8001050 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023ba:	e00c      	b.n	80023d6 <HAL_RCC_OscConfig+0x35e>
 80023bc:	20000004 	.word	0x20000004
 80023c0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023c4:	f7fe fe44 	bl	8001050 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e1bd      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023d6:	f7ff fc00 	bl	8001bda <LL_RCC_LSI1_IsReady>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f1      	beq.n	80023c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80023e0:	f7ff fc1e 	bl	8001c20 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80023e6:	f7fe fe33 	bl	8001050 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1ac      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80023f8:	f7ff fc23 	bl	8001c42 <LL_RCC_LSI2_IsReady>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f1      	bne.n	80023e6 <HAL_RCC_OscConfig+0x36e>
 8002402:	e027      	b.n	8002454 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002404:	f7ff fc0c 	bl	8001c20 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fe22 	bl	8001050 <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002410:	f7fe fe1e 	bl	8001050 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b03      	cmp	r3, #3
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e197      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002422:	f7ff fc0e 	bl	8001c42 <LL_RCC_LSI2_IsReady>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f1      	bne.n	8002410 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800242c:	f7ff fbc4 	bl	8001bb8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fe0e 	bl	8001050 <HAL_GetTick>
 8002434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002438:	f7fe fe0a 	bl	8001050 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e183      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800244a:	f7ff fbc6 	bl	8001bda <LL_RCC_LSI1_IsReady>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f1      	bne.n	8002438 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002460:	4ba7      	ldr	r3, [pc, #668]	; (8002700 <HAL_RCC_OscConfig+0x688>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d114      	bne.n	8002496 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800246c:	f7ff fa12 	bl	8001894 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002470:	f7fe fdee 	bl	8001050 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7fe fdea 	bl	8001050 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e163      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248a:	4b9d      	ldr	r3, [pc, #628]	; (8002700 <HAL_RCC_OscConfig+0x688>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x42c>
 800249e:	f7ff fb24 	bl	8001aea <LL_RCC_LSE_Enable>
 80024a2:	e00c      	b.n	80024be <HAL_RCC_OscConfig+0x446>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d104      	bne.n	80024b6 <HAL_RCC_OscConfig+0x43e>
 80024ac:	f7ff fb3f 	bl	8001b2e <LL_RCC_LSE_EnableBypass>
 80024b0:	f7ff fb1b 	bl	8001aea <LL_RCC_LSE_Enable>
 80024b4:	e003      	b.n	80024be <HAL_RCC_OscConfig+0x446>
 80024b6:	f7ff fb29 	bl	8001b0c <LL_RCC_LSE_Disable>
 80024ba:	f7ff fb49 	bl	8001b50 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d014      	beq.n	80024f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fdc3 	bl	8001050 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fdbf 	bl	8001050 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e136      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80024e4:	f7ff fb45 	bl	8001b72 <LL_RCC_LSE_IsReady>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ef      	beq.n	80024ce <HAL_RCC_OscConfig+0x456>
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe fdae 	bl	8001050 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe fdaa 	bl	8001050 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e121      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800250e:	f7ff fb30 	bl	8001b72 <LL_RCC_LSE_IsReady>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ef      	bne.n	80024f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d02c      	beq.n	800257e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d014      	beq.n	8002556 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800252c:	f7ff faa9 	bl	8001a82 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd8e 	bl	8001050 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002538:	f7fe fd8a 	bl	8001050 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e103      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800254a:	f7ff fabc 	bl	8001ac6 <LL_RCC_HSI48_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f1      	beq.n	8002538 <HAL_RCC_OscConfig+0x4c0>
 8002554:	e013      	b.n	800257e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002556:	f7ff faa5 	bl	8001aa4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe fd79 	bl	8001050 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002562:	f7fe fd75 	bl	8001050 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ee      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002574:	f7ff faa7 	bl	8001ac6 <LL_RCC_HSI48_IsReady>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f1      	bne.n	8002562 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80e4 	beq.w	8002750 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	f7ff fc05 	bl	8001d96 <LL_RCC_GetSysClkSource>
 800258c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80b4 	bne.w	8002708 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d123      	bne.n	80025f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d11c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d114      	bne.n	80025f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d10d      	bne.n	80025f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d05d      	beq.n	80026b2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	d058      	beq.n	80026ae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0a1      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800260e:	f7ff fc85 	bl	8001f1c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002612:	f7fe fd1d 	bl	8001050 <HAL_GetTick>
 8002616:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fd19 	bl	8001050 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e092      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ef      	bne.n	800261a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x68c>)
 8002642:	4013      	ands	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002652:	0212      	lsls	r2, r2, #8
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002666:	430a      	orrs	r2, r1
 8002668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266c:	4313      	orrs	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002670:	f7ff fc45 	bl	8001efe <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002684:	f7fe fce4 	bl	8001050 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fce0 	bl	8001050 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e059      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ef      	beq.n	800268c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ac:	e050      	b.n	8002750 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e04f      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d147      	bne.n	8002750 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c0:	f7ff fc1d 	bl	8001efe <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d4:	f7fe fcbc 	bl	8001050 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fcb8 	bl	8001050 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e031      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCC_OscConfig+0x664>
 80026fc:	e028      	b.n	8002750 <HAL_RCC_OscConfig+0x6d8>
 80026fe:	bf00      	nop
 8002700:	58000400 	.word	0x58000400
 8002704:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d01e      	beq.n	800274c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	f7ff fc05 	bl	8001f1c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe fc9d 	bl	8001050 <HAL_GetTick>
 8002716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe fc99 	bl	8001050 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e012      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ef      	bne.n	800271a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_OscConfig+0x6e4>)
 8002746:	4013      	ands	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
 800274a:	e001      	b.n	8002750 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3734      	adds	r7, #52	; 0x34
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	bf00      	nop
 800275c:	eefefffc 	.word	0xeefefffc

08002760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e12d      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d91b      	bls.n	80027ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b95      	ldr	r3, [pc, #596]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4993      	ldr	r1, [pc, #588]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002792:	f7fe fc5d 	bl	8001050 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002798:	e008      	b.n	80027ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800279a:	f7fe fc59 	bl	8001050 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e111      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ac:	4b8a      	ldr	r3, [pc, #552]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d1ef      	bne.n	800279a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff faef 	bl	8001dae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fc3e 	bl	8001050 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027d8:	f7fe fc3a 	bl	8001050 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0f2      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027ea:	f7ff fbe9 	bl	8001fc0 <LL_RCC_IsActiveFlag_HPRE>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f1      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fae6 	bl	8001dd6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800280a:	f7fe fc21 	bl	8001050 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002812:	f7fe fc1d 	bl	8001050 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0d5      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002824:	f7ff fbde 	bl	8001fe4 <LL_RCC_IsActiveFlag_C2HPRE>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f1      	beq.n	8002812 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fadf 	bl	8001e02 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002844:	f7fe fc04 	bl	8001050 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800284c:	f7fe fc00 	bl	8001050 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e0b8      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800285e:	f7ff fbd4 	bl	800200a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f1      	beq.n	800284c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fad9 	bl	8001e30 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800287e:	f7fe fbe7 	bl	8001050 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002886:	f7fe fbe3 	bl	8001050 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e09b      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002898:	f7ff fbca 	bl	8002030 <LL_RCC_IsActiveFlag_PPRE1>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f1      	beq.n	8002886 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d017      	beq.n	80028de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff facf 	bl	8001e58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fbc9 	bl	8001050 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028c2:	f7fe fbc5 	bl	8001050 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e07d      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028d4:	f7ff fbbe 	bl	8002054 <LL_RCC_IsActiveFlag_PPRE2>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f1      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d043      	beq.n	8002972 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80028f2:	f7ff f86f 	bl	80019d4 <LL_RCC_HSE_IsReady>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11e      	bne.n	800293a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e067      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d106      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002908:	f7ff fb17 	bl	8001f3a <LL_RCC_PLL_IsReady>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d113      	bne.n	800293a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e05c      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800291e:	f7ff f9d7 	bl	8001cd0 <LL_RCC_MSI_IsReady>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d108      	bne.n	800293a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e051      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800292c:	f7ff f882 	bl	8001a34 <LL_RCC_HSI_IsReady>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e04a      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fa15 	bl	8001d6e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002944:	f7fe fb84 	bl	8001050 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fb80 	bl	8001050 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e036      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	f7ff fa18 	bl	8001d96 <LL_RCC_GetSysClkSource>
 8002966:	4602      	mov	r2, r0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	429a      	cmp	r2, r3
 8002970:	d1ec      	bne.n	800294c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d21b      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 0207 	bic.w	r2, r3, #7
 8002988:	4913      	ldr	r1, [pc, #76]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fb5e 	bl	8001050 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	e008      	b.n	80029aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002998:	f7fe fb5a 	bl	8001050 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e012      	b.n	80029d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x278>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1ef      	bne.n	8002998 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029b8:	f000 f87e 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <HAL_RCC_ClockConfig+0x27c>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029c2:	f7fe fb51 	bl	8001068 <HAL_GetTickPrio>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f951 	bl	8000c70 <HAL_InitTick>
 80029ce:	4603      	mov	r3, r0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58004000 	.word	0x58004000
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e6:	f7ff f9d6 	bl	8001d96 <LL_RCC_GetSysClkSource>
 80029ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029f2:	f7ff f992 	bl	8001d1a <LL_RCC_MSI_GetRange>
 80029f6:	4603      	mov	r3, r0
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e04b      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a0e:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e045      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d10a      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a1a:	f7fe ffab 	bl	8001974 <LL_RCC_HSE_IsEnabledDiv2>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d102      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e03a      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e037      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a30:	f7ff faba 	bl	8001fa8 <LL_RCC_PLL_GetMainSource>
 8002a34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x64>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x6a>
 8002a42:	e00d      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a46:	60bb      	str	r3, [r7, #8]
        break;
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a4a:	f7fe ff93 	bl	8001974 <LL_RCC_HSE_IsEnabledDiv2>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a56:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a58:	e00d      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a5c:	60bb      	str	r3, [r7, #8]
        break;
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a60:	f7ff f95b 	bl	8001d1a <LL_RCC_MSI_GetRange>
 8002a64:	4603      	mov	r3, r0
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a72:	60bb      	str	r3, [r7, #8]
        break;
 8002a74:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002a76:	f7ff fa72 	bl	8001f5e <LL_RCC_PLL_GetN>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	fb03 f402 	mul.w	r4, r3, r2
 8002a82:	f7ff fa85 	bl	8001f90 <LL_RCC_PLL_GetDivider>
 8002a86:	4603      	mov	r3, r0
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a90:	f7ff fa72 	bl	8001f78 <LL_RCC_PLL_GetR>
 8002a94:	4603      	mov	r3, r0
 8002a96:	0f5b      	lsrs	r3, r3, #29
 8002a98:	3301      	adds	r3, #1
 8002a9a:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a9e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08008454 	.word	0x08008454
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	01e84800 	.word	0x01e84800

08002ab8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b598      	push	{r3, r4, r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002abc:	f7ff ff90 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	f7ff f9dd 	bl	8001e80 <LL_RCC_GetAHBPrescaler>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a03      	ldr	r2, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x24>)
 8002ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd98      	pop	{r3, r4, r7, pc}
 8002adc:	080083f4 	.word	0x080083f4

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b598      	push	{r3, r4, r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ae4:	f7ff ffe8 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	f7ff f9f0 	bl	8001ece <LL_RCC_GetAPB1Prescaler>
 8002aee:	4603      	mov	r3, r0
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd98      	pop	{r3, r4, r7, pc}
 8002b08:	08008434 	.word	0x08008434

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b598      	push	{r3, r4, r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b10:	f7ff ffd2 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b14:	4604      	mov	r4, r0
 8002b16:	f7ff f9e6 	bl	8001ee6 <LL_RCC_GetAPB2Prescaler>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	0adb      	lsrs	r3, r3, #11
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd98      	pop	{r3, r4, r7, pc}
 8002b34:	08008434 	.word	0x08008434

08002b38 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	226f      	movs	r2, #111	; 0x6f
 8002b46:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002b48:	f7ff f925 	bl	8001d96 <LL_RCC_GetSysClkSource>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002b52:	f7ff f995 	bl	8001e80 <LL_RCC_GetAHBPrescaler>
 8002b56:	4602      	mov	r2, r0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002b5c:	f7ff f9b7 	bl	8001ece <LL_RCC_GetAPB1Prescaler>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002b66:	f7ff f9be 	bl	8001ee6 <LL_RCC_GetAPB2Prescaler>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002b70:	f7ff f992 	bl	8001e98 <LL_C2_RCC_GetAHBPrescaler>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002b7a:	f7ff f99a 	bl	8001eb2 <LL_RCC_GetAHB4Prescaler>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_RCC_GetClockConfig+0x60>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0207 	and.w	r2, r3, #7
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	601a      	str	r2, [r3, #0]
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	58004000 	.word	0x58004000

08002b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2bb0      	cmp	r3, #176	; 0xb0
 8002ba8:	d903      	bls.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e007      	b.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002bc2:	f7ff f976 	bl	8001eb2 <LL_RCC_GetAHB4Prescaler>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	0c9c      	lsrs	r4, r3, #18
 8002be6:	f7fe feb7 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f000 f80c 	bl	8002c0c <RCC_SetFlashLatency>
 8002bf4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	08008454 	.word	0x08008454
 8002c04:	080083f4 	.word	0x080083f4
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b093      	sub	sp, #76	; 0x4c
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <RCC_SetFlashLatency+0xe8>)
 8002c18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <RCC_SetFlashLatency+0xec>)
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <RCC_SetFlashLatency+0xf0>)
 8002c30:	f107 040c 	add.w	r4, r7, #12
 8002c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d11a      	bne.n	8002c7c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4a:	e013      	b.n	8002c74 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3348      	adds	r3, #72	; 0x48
 8002c52:	443b      	add	r3, r7
 8002c54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d807      	bhi.n	8002c6e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3348      	adds	r3, #72	; 0x48
 8002c64:	443b      	add	r3, r7
 8002c66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002c6c:	e020      	b.n	8002cb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c70:	3301      	adds	r3, #1
 8002c72:	643b      	str	r3, [r7, #64]	; 0x40
 8002c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d9e8      	bls.n	8002c4c <RCC_SetFlashLatency+0x40>
 8002c7a:	e019      	b.n	8002cb0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c80:	e013      	b.n	8002caa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	443b      	add	r3, r7
 8002c8a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d807      	bhi.n	8002ca4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3348      	adds	r3, #72	; 0x48
 8002c9a:	443b      	add	r3, r7
 8002c9c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ca2:	e005      	b.n	8002cb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d9e8      	bls.n	8002c82 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <RCC_SetFlashLatency+0xf4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 0207 	bic.w	r2, r3, #7
 8002cb8:	4911      	ldr	r1, [pc, #68]	; (8002d00 <RCC_SetFlashLatency+0xf4>)
 8002cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cc0:	f7fe f9c6 	bl	8001050 <HAL_GetTick>
 8002cc4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cc6:	e008      	b.n	8002cda <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cc8:	f7fe f9c2 	bl	8001050 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e007      	b.n	8002cea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <RCC_SetFlashLatency+0xf4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1ef      	bne.n	8002cc8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	374c      	adds	r7, #76	; 0x4c
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08008394 	.word	0x08008394
 8002cf8:	080083a4 	.word	0x080083a4
 8002cfc:	080083b0 	.word	0x080083b0
 8002d00:	58004000 	.word	0x58004000

08002d04 <LL_RCC_LSE_IsEnabled>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <LL_RCC_LSE_IsEnabled+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_RCC_LSE_IsEnabled+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_RCC_LSE_IsReady>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d101      	bne.n	8002d40 <LL_RCC_LSE_IsReady+0x18>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_RCC_LSE_IsReady+0x1a>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_MSI_EnablePLLMode>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_SetRFWKPClockSource>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_SetSMPSClockSource>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetSMPSPrescaler>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_SetUSARTClockSource>:
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_SetLPUARTClockSource>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_SetI2CClockSource>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_SetLPTIMClockSource>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	401a      	ands	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_SetSAIClockSource>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_SetRNGClockSource>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_SetCLK48ClockSource>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_SetUSBClockSource>:
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe3 	bl	8002f04 <LL_RCC_SetCLK48ClockSource>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <LL_RCC_SetADCClockSource>:
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_SetRTCClockSource>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_GetRTCClockSource>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_ForceBackupDomainReset>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_PLLSAI1_Enable>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_PLLSAI1_Disable>:
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_RCC_PLLSAI1_IsReady>:
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304a:	d101      	bne.n	8003050 <LL_RCC_PLLSAI1_IsReady+0x18>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003064:	2300      	movs	r3, #0
 8003066:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003068:	2300      	movs	r3, #0
 800306a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d034      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003080:	d021      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003082:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003086:	d81b      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003088:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800308c:	d01d      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800308e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003092:	d815      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309c:	d110      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80030ae:	e00d      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f94d 	bl	8003354 <RCCEx_PLLSAI1_ConfigNP>
 80030ba:	4603      	mov	r3, r0
 80030bc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030be:	e005      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
        break;
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	7ffb      	ldrb	r3, [r7, #31]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fee8 	bl	8002eac <LL_RCC_SetSAIClockSource>
 80030dc:	e001      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030de:	7ffb      	ldrb	r3, [r7, #31]
 80030e0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d046      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80030ee:	f7ff ff56 	bl	8002f9e <LL_RCC_GetRTCClockSource>
 80030f2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d03c      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030fe:	f7fe fbc9 	bl	8001894 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff30 	bl	8002f72 <LL_RCC_SetRTCClockSource>
 8003112:	e02e      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800311e:	f7ff ff4b 	bl	8002fb8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003122:	f7ff ff5a 	bl	8002fda <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800313e:	f7ff fde1 	bl	8002d04 <LL_RCC_LSE_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d114      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003148:	f7fd ff82 	bl	8001050 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800314e:	e00b      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fd ff7e 	bl	8001050 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d902      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	77fb      	strb	r3, [r7, #31]
              break;
 8003166:	e004      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003168:	f7ff fdde 	bl	8002d28 <LL_RCC_LSE_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d1ee      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	77bb      	strb	r3, [r7, #30]
 8003176:	e001      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fe2a 	bl	8002de6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe35 	bl	8002e12 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fe5d 	bl	8002e78 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fe52 	bl	8002e78 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fe2a 	bl	8002e3e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fe1f 	bl	8002e3e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d022      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fe8d 	bl	8002f30 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321e:	d107      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f8e3 	bl	800340a <RCCEx_PLLSAI1_ConfigNQ>
 8003244:	4603      	mov	r3, r0
 8003246:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003248:	7ffb      	ldrb	r3, [r7, #31]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02b      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d008      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fe2a 	bl	8002ed8 <LL_RCC_SetRNGClockSource>
 8003284:	e00a      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff fe21 	bl	8002ed8 <LL_RCC_SetRNGClockSource>
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff fe34 	bl	8002f04 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80032a4:	d107      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d022      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fe3d 	bl	8002f46 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d4:	d107      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f8e3 	bl	80034c0 <RCCEx_PLLSAI1_ConfigNR>
 80032fa:	4603      	mov	r3, r0
 80032fc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003304:	7ffb      	ldrb	r3, [r7, #31]
 8003306:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fd26 	bl	8002d6a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fd45 	bl	8002dbe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fd2c 	bl	8002d96 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800333e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800334c:	f7ff fcfe 	bl	8002d4c <LL_RCC_MSI_EnablePLLMode>
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003360:	f7ff fe5b 	bl	800301a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003364:	f7fd fe74 	bl	8001050 <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800336a:	e009      	b.n	8003380 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800336c:	f7fd fe70 	bl	8001050 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	73fb      	strb	r3, [r7, #15]
      break;
 800337e:	e004      	b.n	800338a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003380:	f7ff fe5a 	bl	8003038 <LL_RCC_PLLSAI1_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d137      	bne.n	8003400 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a4:	4313      	orrs	r3, r2
 80033a6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80033a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033be:	f7ff fe1d 	bl	8002ffc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c2:	f7fd fe45 	bl	8001050 <HAL_GetTick>
 80033c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033c8:	e009      	b.n	80033de <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ca:	f7fd fe41 	bl	8001050 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d902      	bls.n	80033de <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	73fb      	strb	r3, [r7, #15]
        break;
 80033dc:	e004      	b.n	80033e8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033de:	f7ff fe2b 	bl	8003038 <LL_RCC_PLLSAI1_IsReady>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d1f0      	bne.n	80033ca <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fc:	4313      	orrs	r3, r2
 80033fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003416:	f7ff fe00 	bl	800301a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800341a:	f7fd fe19 	bl	8001050 <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003420:	e009      	b.n	8003436 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003422:	f7fd fe15 	bl	8001050 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d902      	bls.n	8003436 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e004      	b.n	8003440 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003436:	f7ff fdff 	bl	8003038 <LL_RCC_PLLSAI1_IsReady>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f0      	bne.n	8003422 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d137      	bne.n	80034b6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345a:	4313      	orrs	r3, r2
 800345c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003474:	f7ff fdc2 	bl	8002ffc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fd fdea 	bl	8001050 <HAL_GetTick>
 800347c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800347e:	e009      	b.n	8003494 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003480:	f7fd fde6 	bl	8001050 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d902      	bls.n	8003494 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	73fb      	strb	r3, [r7, #15]
        break;
 8003492:	e004      	b.n	800349e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003494:	f7ff fdd0 	bl	8003038 <LL_RCC_PLLSAI1_IsReady>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d1f0      	bne.n	8003480 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d108      	bne.n	80034b6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b2:	4313      	orrs	r3, r2
 80034b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034cc:	f7ff fda5 	bl	800301a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034d0:	f7fd fdbe 	bl	8001050 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034d6:	e009      	b.n	80034ec <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d8:	f7fd fdba 	bl	8001050 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d902      	bls.n	80034ec <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ea:	e004      	b.n	80034f6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034ec:	f7ff fda4 	bl	8003038 <LL_RCC_PLLSAI1_IsReady>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d137      	bne.n	800356c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003510:	4313      	orrs	r3, r2
 8003512:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800352a:	f7ff fd67 	bl	8002ffc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352e:	f7fd fd8f 	bl	8001050 <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003534:	e009      	b.n	800354a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003536:	f7fd fd8b 	bl	8001050 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d902      	bls.n	800354a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	73fb      	strb	r3, [r7, #15]
        break;
 8003548:	e004      	b.n	8003554 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800354a:	f7ff fd75 	bl	8003038 <LL_RCC_PLLSAI1_IsReady>
 800354e:	4603      	mov	r3, r0
 8003550:	2b01      	cmp	r3, #1
 8003552:	d1f0      	bne.n	8003536 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d108      	bne.n	800356c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003568:	4313      	orrs	r3, r2
 800356a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e049      	b.n	800361c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f841 	bl	8003624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f000 f9d5 	bl	8003964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e036      	b.n	80036be <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_TIM_Base_Start_IT+0x94>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x44>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d115      	bne.n	80036a8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_TIM_Base_Start_IT+0x98>)
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b06      	cmp	r3, #6
 800368c:	d015      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x82>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d011      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	e008      	b.n	80036ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e000      	b.n	80036bc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	00010007 	.word	0x00010007

080036d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d122      	bne.n	8003730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d11b      	bne.n	8003730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0202 	mvn.w	r2, #2
 8003700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f905 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8f7 	bl	8003912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f908 	bl	800393a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0204 	mvn.w	r2, #4
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8db 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8cd 	bl	8003912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8de 	bl	800393a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0208 	mvn.w	r2, #8
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8b1 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8a3 	bl	8003912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8b4 	bl	800393a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0210 	mvn.w	r2, #16
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2208      	movs	r2, #8
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f887 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f879 	bl	8003912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f88a 	bl	800393a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0201 	mvn.w	r2, #1
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd f8da 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8de 	bl	8003a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003892:	d10e      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d107      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f8d1 	bl	8003a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d10e      	bne.n	80038de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d107      	bne.n	80038de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f838 	bl	800394e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d10e      	bne.n	800390a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d107      	bne.n	800390a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0220 	mvn.w	r2, #32
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f891 	bl	8003a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0x20>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d108      	bne.n	8003996 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00b      	beq.n	80039b6 <TIM_Base_SetConfig+0x52>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d007      	beq.n	80039b6 <TIM_Base_SetConfig+0x52>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <TIM_Base_SetConfig+0xc0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_Base_SetConfig+0x52>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_Base_SetConfig+0xc4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <TIM_Base_SetConfig+0xbc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0xa0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <TIM_Base_SetConfig+0xc0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0xa0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <TIM_Base_SetConfig+0xc4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d103      	bne.n	8003a0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	615a      	str	r2, [r3, #20]
}
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_GetUSARTClockSource>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4013      	ands	r3, r2
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_RCC_GetLPUARTClockSource>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4013      	ands	r3, r2
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e042      	b.n	8003b40 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fd f81b 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2224      	movs	r2, #36	; 0x24
 8003ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f82c 	bl	8003b48 <UART_SetConfig>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e022      	b.n	8003b40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa46 	bl	8003f94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 facd 	bl	80040d8 <UART_CheckIdleState>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b4c:	b08c      	sub	sp, #48	; 0x30
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4baf      	ldr	r3, [pc, #700]	; (8003e34 <UART_SetConfig+0x2ec>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4aa4      	ldr	r2, [pc, #656]	; (8003e38 <UART_SetConfig+0x2f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f023 010f 	bic.w	r1, r3, #15
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a95      	ldr	r2, [pc, #596]	; (8003e3c <UART_SetConfig+0x2f4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d125      	bne.n	8003c38 <UART_SetConfig+0xf0>
 8003bec:	2003      	movs	r0, #3
 8003bee:	f7ff ff3b 	bl	8003a68 <LL_RCC_GetUSARTClockSource>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d81b      	bhi.n	8003c30 <UART_SetConfig+0xe8>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <UART_SetConfig+0xb8>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e042      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e03e      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e03a      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e036      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e032      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7e      	ldr	r2, [pc, #504]	; (8003e38 <UART_SetConfig+0x2f0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12a      	bne.n	8003c98 <UART_SetConfig+0x150>
 8003c42:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003c46:	f7ff ff1f 	bl	8003a88 <LL_RCC_GetLPUARTClockSource>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c50:	d01a      	beq.n	8003c88 <UART_SetConfig+0x140>
 8003c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c56:	d81b      	bhi.n	8003c90 <UART_SetConfig+0x148>
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d00c      	beq.n	8003c78 <UART_SetConfig+0x130>
 8003c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c62:	d815      	bhi.n	8003c90 <UART_SetConfig+0x148>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <UART_SetConfig+0x128>
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6c:	d008      	beq.n	8003c80 <UART_SetConfig+0x138>
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x148>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e012      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e00e      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e00a      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e006      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e002      	b.n	8003c9e <UART_SetConfig+0x156>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <UART_SetConfig+0x2f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f040 8097 	bne.w	8003dd8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d823      	bhi.n	8003cfa <UART_SetConfig+0x1b2>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <UART_SetConfig+0x170>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003ceb 	.word	0x08003ceb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003cfb 	.word	0x08003cfb
 8003cd8:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7fe ff00 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ce2:	e010      	b.n	8003d06 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <UART_SetConfig+0x2f8>)
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fe79 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cf0:	e009      	b.n	8003d06 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cf8:	e005      	b.n	8003d06 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 812a 	beq.w	8003f62 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4a4c      	ldr	r2, [pc, #304]	; (8003e44 <UART_SetConfig+0x2fc>)
 8003d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d305      	bcc.n	8003d3e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d903      	bls.n	8003d46 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d44:	e10d      	b.n	8003f62 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	60fa      	str	r2, [r7, #12]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <UART_SetConfig+0x2fc>)
 8003d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d68:	f7fc fa5a 	bl	8000220 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	020b      	lsls	r3, r1, #8
 8003d7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d82:	0202      	lsls	r2, r0, #8
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	6849      	ldr	r1, [r1, #4]
 8003d88:	0849      	lsrs	r1, r1, #1
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	4605      	mov	r5, r0
 8003d90:	eb12 0804 	adds.w	r8, r2, r4
 8003d94:	eb43 0905 	adc.w	r9, r3, r5
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	469a      	mov	sl, r3
 8003da0:	4693      	mov	fp, r2
 8003da2:	4652      	mov	r2, sl
 8003da4:	465b      	mov	r3, fp
 8003da6:	4640      	mov	r0, r8
 8003da8:	4649      	mov	r1, r9
 8003daa:	f7fc fa39 	bl	8000220 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dbc:	d308      	bcc.n	8003dd0 <UART_SetConfig+0x288>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc4:	d204      	bcs.n	8003dd0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	e0c8      	b.n	8003f62 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dd6:	e0c4      	b.n	8003f62 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d16d      	bne.n	8003ebe <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	d82d      	bhi.n	8003e48 <UART_SetConfig+0x300>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x2ac>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e15 	.word	0x08003e15
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e49 	.word	0x08003e49
 8003e00:	08003e23 	.word	0x08003e23
 8003e04:	08003e49 	.word	0x08003e49
 8003e08:	08003e49 	.word	0x08003e49
 8003e0c:	08003e49 	.word	0x08003e49
 8003e10:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fe7a 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1a:	e01b      	b.n	8003e54 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <UART_SetConfig+0x2f8>)
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e20:	e018      	b.n	8003e54 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fddd 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e28:	e014      	b.n	8003e54 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e30:	e010      	b.n	8003e54 <UART_SetConfig+0x30c>
 8003e32:	bf00      	nop
 8003e34:	cfff69f3 	.word	0xcfff69f3
 8003e38:	40008000 	.word	0x40008000
 8003e3c:	40013800 	.word	0x40013800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	08008494 	.word	0x08008494
      default:
        pclk = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8083 	beq.w	8003f62 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <UART_SetConfig+0x444>)
 8003e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e6e:	005a      	lsls	r2, r3, #1
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	441a      	add	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d916      	bls.n	8003eb6 <UART_SetConfig+0x36e>
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d212      	bcs.n	8003eb6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f023 030f 	bic.w	r3, r3, #15
 8003e98:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	8bfb      	ldrh	r3, [r7, #30]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	8bfa      	ldrh	r2, [r7, #30]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e055      	b.n	8003f62 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ebc:	e051      	b.n	8003f62 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	d822      	bhi.n	8003f0e <UART_SetConfig+0x3c6>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x388>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ef1 	.word	0x08003ef1
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003eff 	.word	0x08003eff
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f0f 	.word	0x08003f0f
 8003eec:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7fe fe0c 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ef6:	e010      	b.n	8003f1a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <UART_SetConfig+0x448>)
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003efc:	e00d      	b.n	8003f1a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe fd6f 	bl	80029e0 <HAL_RCC_GetSysClockFreq>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f04:	e009      	b.n	8003f1a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f0c:	e005      	b.n	8003f1a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f18:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <UART_SetConfig+0x444>)
 8003f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	441a      	add	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	2b0f      	cmp	r3, #15
 8003f48:	d908      	bls.n	8003f5c <UART_SetConfig+0x414>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d204      	bcs.n	8003f5c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	e002      	b.n	8003f62 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3730      	adds	r7, #48	; 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8c:	08008494 	.word	0x08008494
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004092:	d10a      	bne.n	80040aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040e8:	f7fc ffb2 	bl	8001050 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d10e      	bne.n	800411a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f82f 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e025      	b.n	8004166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b04      	cmp	r3, #4
 8004126:	d10e      	bne.n	8004146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f819 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b09c      	sub	sp, #112	; 0x70
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417e:	e0a9      	b.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	f000 80a5 	beq.w	80042d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fc ff61 	bl	8001050 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800419a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419c:	2b00      	cmp	r3, #0
 800419e:	d140      	bne.n	8004222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041b4:	667b      	str	r3, [r7, #100]	; 0x64
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e6      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3308      	adds	r3, #8
 80041f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e5      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e069      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d051      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423e:	d149      	bne.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800425e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800426e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e6      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	613b      	str	r3, [r7, #16]
   return(result);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	66bb      	str	r3, [r7, #104]	; 0x68
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800429c:	623a      	str	r2, [r7, #32]
 800429e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	6a3a      	ldr	r2, [r7, #32]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e010      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f43f af46 	beq.w	8004180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3770      	adds	r7, #112	; 0x70
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_UARTEx_DisableFifoMode+0x16>
 8004310:	2302      	movs	r3, #2
 8004312:	e027      	b.n	8004364 <HAL_UARTEx_DisableFifoMode+0x66>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004342:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004384:	2302      	movs	r3, #2
 8004386:	e02d      	b.n	80043e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f84f 	bl	8004468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004400:	2302      	movs	r3, #2
 8004402:	e02d      	b.n	8004460 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f811 	bl	8004468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004488:	e031      	b.n	80044ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800448a:	2308      	movs	r3, #8
 800448c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800448e:	2308      	movs	r3, #8
 8004490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	0e5b      	lsrs	r3, r3, #25
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	0f5b      	lsrs	r3, r3, #29
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044b2:	7bbb      	ldrb	r3, [r7, #14]
 80044b4:	7b3a      	ldrb	r2, [r7, #12]
 80044b6:	4911      	ldr	r1, [pc, #68]	; (80044fc <UARTEx_SetNbDataToProcess+0x94>)
 80044b8:	5c8a      	ldrb	r2, [r1, r2]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044be:	7b3a      	ldrb	r2, [r7, #12]
 80044c0:	490f      	ldr	r1, [pc, #60]	; (8004500 <UARTEx_SetNbDataToProcess+0x98>)
 80044c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	7b7a      	ldrb	r2, [r7, #13]
 80044d4:	4909      	ldr	r1, [pc, #36]	; (80044fc <UARTEx_SetNbDataToProcess+0x94>)
 80044d6:	5c8a      	ldrb	r2, [r1, r2]
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044dc:	7b7a      	ldrb	r2, [r7, #13]
 80044de:	4908      	ldr	r1, [pc, #32]	; (8004500 <UARTEx_SetNbDataToProcess+0x98>)
 80044e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	080084ac 	.word	0x080084ac
 8004500:	080084b4 	.word	0x080084b4

08004504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800450c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004510:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b29b      	uxth	r3, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	b29b      	uxth	r3, r3
 8004522:	4013      	ands	r3, r2
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800453a:	b084      	sub	sp, #16
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	f107 0014 	add.w	r0, r7, #20
 8004548:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	b004      	add	sp, #16
 800457a:	4770      	bx	lr

0800457c <__NVIC_SetPriority>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458c:	2b00      	cmp	r3, #0
 800458e:	db0a      	blt.n	80045a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	490c      	ldr	r1, [pc, #48]	; (80045c8 <__NVIC_SetPriority+0x4c>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	440b      	add	r3, r1
 80045a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045a4:	e00a      	b.n	80045bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4908      	ldr	r1, [pc, #32]	; (80045cc <__NVIC_SetPriority+0x50>)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	3b04      	subs	r3, #4
 80045b4:	0112      	lsls	r2, r2, #4
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	440b      	add	r3, r1
 80045ba:	761a      	strb	r2, [r3, #24]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000e100 	.word	0xe000e100
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <SysTick_Handler+0x1c>)
 80045d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045d8:	f001 fda0 	bl	800611c <xTaskGetSchedulerState>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d001      	beq.n	80045e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045e2:	f002 fb89 	bl	8006cf8 <xPortSysTickHandler>
  }
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000e010 	.word	0xe000e010

080045f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045f4:	2100      	movs	r1, #0
 80045f6:	f06f 0004 	mvn.w	r0, #4
 80045fa:	f7ff ffbf 	bl	800457c <__NVIC_SetPriority>
#endif
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800460a:	f3ef 8305 	mrs	r3, IPSR
 800460e:	603b      	str	r3, [r7, #0]
  return(result);
 8004610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004616:	f06f 0305 	mvn.w	r3, #5
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	e00c      	b.n	8004638 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <osKernelInitialize+0x44>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <osKernelInitialize+0x44>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e002      	b.n	8004638 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004638:	687b      	ldr	r3, [r7, #4]
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000490 	.word	0x20000490

0800464c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004652:	f3ef 8305 	mrs	r3, IPSR
 8004656:	603b      	str	r3, [r7, #0]
  return(result);
 8004658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <osKernelStart+0x1a>
    stat = osErrorISR;
 800465e:	f06f 0305 	mvn.w	r3, #5
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	e010      	b.n	8004688 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <osKernelStart+0x48>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d109      	bne.n	8004682 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800466e:	f7ff ffbf 	bl	80045f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <osKernelStart+0x48>)
 8004674:	2202      	movs	r2, #2
 8004676:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004678:	f001 f8f4 	bl	8005864 <vTaskStartScheduler>
      stat = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e002      	b.n	8004688 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004688:	687b      	ldr	r3, [r7, #4]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000490 	.word	0x20000490

08004698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	; 0x38
 800469c:	af04      	add	r7, sp, #16
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a8:	f3ef 8305 	mrs	r3, IPSR
 80046ac:	617b      	str	r3, [r7, #20]
  return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d17e      	bne.n	80047b2 <osThreadNew+0x11a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d07b      	beq.n	80047b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046be:	2318      	movs	r3, #24
 80046c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d045      	beq.n	800475e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <osThreadNew+0x48>
        name = attr->name;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <osThreadNew+0x6e>
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b38      	cmp	r3, #56	; 0x38
 80046f8:	d805      	bhi.n	8004706 <osThreadNew+0x6e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <osThreadNew+0x72>
        return (NULL);
 8004706:	2300      	movs	r3, #0
 8004708:	e054      	b.n	80047b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <osThreadNew+0xa8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2bbb      	cmp	r3, #187	; 0xbb
 8004728:	d90a      	bls.n	8004740 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <osThreadNew+0xa8>
        mem = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e010      	b.n	8004762 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10c      	bne.n	8004762 <osThreadNew+0xca>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <osThreadNew+0xca>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <osThreadNew+0xca>
          mem = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	e001      	b.n	8004762 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d110      	bne.n	800478a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004770:	9202      	str	r2, [sp, #8]
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fe1a 	bl	80053b8 <xTaskCreateStatic>
 8004784:	4603      	mov	r3, r0
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	e013      	b.n	80047b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d110      	bne.n	80047b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	b29a      	uxth	r2, r3
 8004794:	f107 0310 	add.w	r3, r7, #16
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fe65 	bl	8005472 <xTaskCreate>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d001      	beq.n	80047b2 <osThreadNew+0x11a>
            hTask = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047b2:	693b      	ldr	r3, [r7, #16]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ca:	f3ef 8305 	mrs	r3, IPSR
 80047ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80047d0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <osThreadSetPriority+0x22>
    stat = osErrorISR;
 80047d6:	f06f 0305 	mvn.w	r3, #5
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e013      	b.n	8004806 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <osThreadSetPriority+0x34>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dd02      	ble.n	80047f0 <osThreadSetPriority+0x34>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b38      	cmp	r3, #56	; 0x38
 80047ee:	dd03      	ble.n	80047f8 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 80047f0:	f06f 0303 	mvn.w	r3, #3
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e006      	b.n	8004806 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4619      	mov	r1, r3
 8004800:	6938      	ldr	r0, [r7, #16]
 8004802:	f000 ff91 	bl	8005728 <vTaskPrioritySet>
  }

  return (stat);
 8004806:	697b      	ldr	r3, [r7, #20]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <vApplicationGetIdleTaskMemory+0x2c>)
 8004820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a06      	ldr	r2, [pc, #24]	; (8004840 <vApplicationGetIdleTaskMemory+0x30>)
 8004826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2280      	movs	r2, #128	; 0x80
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000494 	.word	0x20000494
 8004840:	20000550 	.word	0x20000550

08004844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <vApplicationGetTimerTaskMemory+0x2c>)
 8004854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a06      	ldr	r2, [pc, #24]	; (8004874 <vApplicationGetTimerTaskMemory+0x30>)
 800485a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000750 	.word	0x20000750
 8004874:	2000080c 	.word	0x2000080c

08004878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f103 0208 	add.w	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f103 0208 	add.w	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 0208 	add.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d103      	bne.n	800493a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e00c      	b.n	8004954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3308      	adds	r3, #8
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <vListInsert+0x2e>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d2f6      	bcs.n	8004942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6892      	ldr	r2, [r2, #8]
 80049a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6852      	ldr	r2, [r2, #4]
 80049ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d103      	bne.n	80049c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a0a:	f002 f8e3 	bl	8006bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	441a      	add	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01a      	beq.n	8004a9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 f993 	bl	8005d98 <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <xQueueGenericReset+0xcc>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	e009      	b.n	8004a9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fef2 	bl	8004878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff feed 	bl	8004878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f002 f8c9 	bl	8006c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aa2:	2301      	movs	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	; 0x38
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <xQueueGenericCreateStatic+0x52>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <xQueueGenericCreateStatic+0x56>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericCreateStatic+0x58>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	623b      	str	r3, [r7, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <xQueueGenericCreateStatic+0x7e>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xQueueGenericCreateStatic+0x82>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueGenericCreateStatic+0x84>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	61fb      	str	r3, [r7, #28]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b4e:	2350      	movs	r3, #80	; 0x50
 8004b50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b50      	cmp	r3, #80	; 0x50
 8004b56:	d00a      	beq.n	8004b6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61bb      	str	r3, [r7, #24]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f805 	bl	8004ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3730      	adds	r7, #48	; 0x30
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d103      	bne.n	8004bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e002      	b.n	8004bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bce:	2101      	movs	r1, #1
 8004bd0:	69b8      	ldr	r0, [r7, #24]
 8004bd2:	f7ff ff05 	bl	80049e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08e      	sub	sp, #56	; 0x38
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericSend+0x32>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <xQueueGenericSend+0x40>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <xQueueGenericSend+0x44>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <xQueueGenericSend+0x46>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <xQueueGenericSend+0x60>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d103      	bne.n	8004c56 <xQueueGenericSend+0x6e>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <xQueueGenericSend+0x72>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <xQueueGenericSend+0x74>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xQueueGenericSend+0x8e>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	623b      	str	r3, [r7, #32]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c76:	f001 fa51 	bl	800611c <xTaskGetSchedulerState>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <xQueueGenericSend+0x9e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <xQueueGenericSend+0xa2>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <xQueueGenericSend+0xa4>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	61fb      	str	r3, [r7, #28]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ca6:	f001 ff95 	bl	8006bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <xQueueGenericSend+0xd4>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d129      	bne.n	8004d10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc2:	f000 fa0b 	bl	80050dc <prvCopyDataToQueue>
 8004cc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	3324      	adds	r3, #36	; 0x24
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 f85f 	bl	8005d98 <xTaskRemoveFromEventList>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ce0:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <xQueueGenericSend+0x1f8>)
 8004ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	e00a      	b.n	8004d08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <xQueueGenericSend+0x1f8>)
 8004cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d08:	f001 ff94 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e063      	b.n	8004dd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d16:	f001 ff8d 	bl	8006c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e05c      	b.n	8004dd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d24:	f107 0314 	add.w	r3, r7, #20
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 f899 	bl	8005e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d32:	f001 ff7f 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d36:	f000 fe05 	bl	8005944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d3a:	f001 ff4b 	bl	8006bd4 <vPortEnterCritical>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d44:	b25b      	sxtb	r3, r3
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d103      	bne.n	8004d54 <xQueueGenericSend+0x16c>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d103      	bne.n	8004d6a <xQueueGenericSend+0x182>
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d6a:	f001 ff63 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d6e:	1d3a      	adds	r2, r7, #4
 8004d70:	f107 0314 	add.w	r3, r7, #20
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f888 	bl	8005e8c <xTaskCheckForTimeOut>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d124      	bne.n	8004dcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d84:	f000 faa2 	bl	80052cc <prvIsQueueFull>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d018      	beq.n	8004dc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	3310      	adds	r3, #16
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 ffae 	bl	8005cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d9e:	f000 fa2d 	bl	80051fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004da2:	f000 fddd 	bl	8005960 <xTaskResumeAll>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f af7c 	bne.w	8004ca6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <xQueueGenericSend+0x1f8>)
 8004db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	e772      	b.n	8004ca6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dc2:	f000 fa1b 	bl	80051fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dc6:	f000 fdcb 	bl	8005960 <xTaskResumeAll>
 8004dca:	e76c      	b.n	8004ca6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dce:	f000 fa15 	bl	80051fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dd2:	f000 fdc5 	bl	8005960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3738      	adds	r7, #56	; 0x38
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b090      	sub	sp, #64	; 0x40
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <xQueueGenericSendFromISR+0x3c>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <xQueueGenericSendFromISR+0x40>
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <xQueueGenericSendFromISR+0x42>
 8004e24:	2300      	movs	r3, #0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d103      	bne.n	8004e4e <xQueueGenericSendFromISR+0x6a>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <xQueueGenericSendFromISR+0x6e>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <xQueueGenericSendFromISR+0x70>
 8004e52:	2300      	movs	r3, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	623b      	str	r3, [r7, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e6e:	f001 ff93 	bl	8006d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e72:	f3ef 8211 	mrs	r2, BASEPRI
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	61fa      	str	r2, [r7, #28]
 8004e88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <xQueueGenericSendFromISR+0xbc>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d12f      	bne.n	8004f00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eb6:	f000 f911 	bl	80050dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004eba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d112      	bne.n	8004eea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d016      	beq.n	8004efa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	3324      	adds	r3, #36	; 0x24
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 ff61 	bl	8005d98 <xTaskRemoveFromEventList>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e007      	b.n	8004efa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eee:	3301      	adds	r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	b25a      	sxtb	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004efa:	2301      	movs	r3, #1
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004efe:	e001      	b.n	8004f04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3740      	adds	r7, #64	; 0x40
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <xQueueReceive+0x30>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	623b      	str	r3, [r7, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <xQueueReceive+0x3e>
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <xQueueReceive+0x42>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueReceive+0x44>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueReceive+0x5e>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61fb      	str	r3, [r7, #28]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7a:	f001 f8cf 	bl	800611c <xTaskGetSchedulerState>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <xQueueReceive+0x6e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueReceive+0x72>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <xQueueReceive+0x74>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xQueueReceive+0x8e>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	61bb      	str	r3, [r7, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004faa:	f001 fe13 	bl	8006bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01f      	beq.n	8004ffa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fbe:	f000 f8f7 	bl	80051b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00f      	beq.n	8004ff2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fede 	bl	8005d98 <xTaskRemoveFromEventList>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <xQueueReceive+0x1bc>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ff2:	f001 fe1f 	bl	8006c34 <vPortExitCritical>
				return pdPASS;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e069      	b.n	80050ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d103      	bne.n	8005008 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005000:	f001 fe18 	bl	8006c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005004:	2300      	movs	r3, #0
 8005006:	e062      	b.n	80050ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800500e:	f107 0310 	add.w	r3, r7, #16
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ff24 	bl	8005e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800501c:	f001 fe0a 	bl	8006c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005020:	f000 fc90 	bl	8005944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005024:	f001 fdd6 	bl	8006bd4 <vPortEnterCritical>
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800502e:	b25b      	sxtb	r3, r3
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d103      	bne.n	800503e <xQueueReceive+0x122>
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005044:	b25b      	sxtb	r3, r3
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d103      	bne.n	8005054 <xQueueReceive+0x138>
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005054:	f001 fdee 	bl	8006c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005058:	1d3a      	adds	r2, r7, #4
 800505a:	f107 0310 	add.w	r3, r7, #16
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 ff13 	bl	8005e8c <xTaskCheckForTimeOut>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d123      	bne.n	80050b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800506c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800506e:	f000 f917 	bl	80052a0 <prvIsQueueEmpty>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	3324      	adds	r3, #36	; 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fe39 	bl	8005cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005088:	f000 f8b8 	bl	80051fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800508c:	f000 fc68 	bl	8005960 <xTaskResumeAll>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d189      	bne.n	8004faa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <xQueueReceive+0x1bc>)
 8005098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	e780      	b.n	8004faa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050aa:	f000 f8a7 	bl	80051fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ae:	f000 fc57 	bl	8005960 <xTaskResumeAll>
 80050b2:	e77a      	b.n	8004faa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b6:	f000 f8a1 	bl	80051fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ba:	f000 fc51 	bl	8005960 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c0:	f000 f8ee 	bl	80052a0 <prvIsQueueEmpty>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f43f af6f 	beq.w	8004faa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3730      	adds	r7, #48	; 0x30
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d14d      	bne.n	800519e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f826 	bl	8006158 <xTaskPriorityDisinherit>
 800510c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	e043      	b.n	800519e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d119      	bne.n	8005150 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6858      	ldr	r0, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	461a      	mov	r2, r3
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	f002 f9b3 	bl	8007492 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d32b      	bcc.n	800519e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	e026      	b.n	800519e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68d8      	ldr	r0, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	461a      	mov	r2, r3
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	f002 f999 	bl	8007492 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	425b      	negs	r3, r3
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d207      	bcs.n	800518c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	425b      	negs	r3, r3
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d105      	bne.n	800519e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3b01      	subs	r3, #1
 800519c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051a6:	697b      	ldr	r3, [r7, #20]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	441a      	add	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d303      	bcc.n	80051e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	461a      	mov	r2, r3
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f002 f94f 	bl	8007492 <memcpy>
	}
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005204:	f001 fce6 	bl	8006bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005210:	e011      	b.n	8005236 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3324      	adds	r3, #36	; 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fdba 	bl	8005d98 <xTaskRemoveFromEventList>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800522a:	f000 fe91 	bl	8005f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	3b01      	subs	r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	dce9      	bgt.n	8005212 <prvUnlockQueue+0x16>
 800523e:	e000      	b.n	8005242 <prvUnlockQueue+0x46>
					break;
 8005240:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800524a:	f001 fcf3 	bl	8006c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800524e:	f001 fcc1 	bl	8006bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005258:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800525a:	e011      	b.n	8005280 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3310      	adds	r3, #16
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fd95 	bl	8005d98 <xTaskRemoveFromEventList>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005274:	f000 fe6c 	bl	8005f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	3b01      	subs	r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005284:	2b00      	cmp	r3, #0
 8005286:	dce9      	bgt.n	800525c <prvUnlockQueue+0x60>
 8005288:	e000      	b.n	800528c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800528a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005294:	f001 fcce 	bl	8006c34 <vPortExitCritical>
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052a8:	f001 fc94 	bl	8006bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e001      	b.n	80052be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052be:	f001 fcb9 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052d4:	f001 fc7e 	bl	8006bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d102      	bne.n	80052ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e001      	b.n	80052ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052ee:	f001 fca1 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 80052f2:	68fb      	ldr	r3, [r7, #12]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e014      	b.n	8005336 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800530c:	4a0f      	ldr	r2, [pc, #60]	; (800534c <vQueueAddToRegistry+0x50>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005318:	490c      	ldr	r1, [pc, #48]	; (800534c <vQueueAddToRegistry+0x50>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <vQueueAddToRegistry+0x50>)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800532e:	e006      	b.n	800533e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b07      	cmp	r3, #7
 800533a:	d9e7      	bls.n	800530c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000c0c 	.word	0x20000c0c

08005350 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005360:	f001 fc38 	bl	8006bd4 <vPortEnterCritical>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800536a:	b25b      	sxtb	r3, r3
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d103      	bne.n	800537a <vQueueWaitForMessageRestricted+0x2a>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d103      	bne.n	8005390 <vQueueWaitForMessageRestricted+0x40>
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005390:	f001 fc50 	bl	8006c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fccb 	bl	8005d40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7ff ff26 	bl	80051fc <prvUnlockQueue>
	}
 80053b0:	bf00      	nop
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xTaskCreateStatic+0x46>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	61fb      	str	r3, [r7, #28]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053fe:	23bc      	movs	r3, #188	; 0xbc
 8005400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2bbc      	cmp	r3, #188	; 0xbc
 8005406:	d00a      	beq.n	800541e <xTaskCreateStatic+0x66>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	61bb      	str	r3, [r7, #24]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800541e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01e      	beq.n	8005464 <xTaskCreateStatic+0xac>
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2202      	movs	r2, #2
 800543a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800543e:	2300      	movs	r3, #0
 8005440:	9303      	str	r3, [sp, #12]
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	9302      	str	r3, [sp, #8]
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f850 	bl	80054fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800545c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800545e:	f000 f8f3 	bl	8005648 <prvAddNewTaskToReadyList>
 8005462:	e001      	b.n	8005468 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005468:	697b      	ldr	r3, [r7, #20]
	}
 800546a:	4618      	mov	r0, r3
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005472:	b580      	push	{r7, lr}
 8005474:	b08c      	sub	sp, #48	; 0x30
 8005476:	af04      	add	r7, sp, #16
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fcc6 	bl	8006e18 <pvPortMalloc>
 800548c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005494:	20bc      	movs	r0, #188	; 0xbc
 8005496:	f001 fcbf 	bl	8006e18 <pvPortMalloc>
 800549a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
 80054a8:	e005      	b.n	80054b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054aa:	6978      	ldr	r0, [r7, #20]
 80054ac:	f001 fd80 	bl	8006fb0 <vPortFree>
 80054b0:	e001      	b.n	80054b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d017      	beq.n	80054ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	2300      	movs	r3, #0
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	9302      	str	r3, [sp, #8]
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f80e 	bl	80054fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054e0:	69f8      	ldr	r0, [r7, #28]
 80054e2:	f000 f8b1 	bl	8005648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	e002      	b.n	80054f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054f2:	69bb      	ldr	r3, [r7, #24]
	}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	461a      	mov	r2, r3
 8005514:	21a5      	movs	r1, #165	; 0xa5
 8005516:	f001 ffca 	bl	80074ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005524:	3b01      	subs	r3, #1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f023 0307 	bic.w	r3, r3, #7
 8005532:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <prvInitialiseNewTask+0x58>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	617b      	str	r3, [r7, #20]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01f      	beq.n	800559a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	e012      	b.n	8005586 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	7819      	ldrb	r1, [r3, #0]
 8005568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	3334      	adds	r3, #52	; 0x34
 8005570:	460a      	mov	r2, r1
 8005572:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3301      	adds	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2b0f      	cmp	r3, #15
 800558a:	d9e9      	bls.n	8005560 <prvInitialiseNewTask+0x64>
 800558c:	e000      	b.n	8005590 <prvInitialiseNewTask+0x94>
			{
				break;
 800558e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005598:	e003      	b.n	80055a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	2b37      	cmp	r3, #55	; 0x37
 80055a6:	d901      	bls.n	80055ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055a8:	2337      	movs	r3, #55	; 0x37
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	2200      	movs	r2, #0
 80055bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	3304      	adds	r3, #4
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f978 	bl	80048b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3318      	adds	r3, #24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff f973 	bl	80048b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	3354      	adds	r3, #84	; 0x54
 80055fc:	2260      	movs	r2, #96	; 0x60
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f001 ff54 	bl	80074ae <memset>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	4a0c      	ldr	r2, [pc, #48]	; (800563c <prvInitialiseNewTask+0x140>)
 800560a:	659a      	str	r2, [r3, #88]	; 0x58
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <prvInitialiseNewTask+0x144>)
 8005610:	65da      	str	r2, [r3, #92]	; 0x5c
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	4a0b      	ldr	r2, [pc, #44]	; (8005644 <prvInitialiseNewTask+0x148>)
 8005616:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	69b8      	ldr	r0, [r7, #24]
 800561e:	f001 f9ab 	bl	8006978 <pxPortInitialiseStack>
 8005622:	4602      	mov	r2, r0
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005632:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005634:	bf00      	nop
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	08008518 	.word	0x08008518
 8005640:	08008538 	.word	0x08008538
 8005644:	080084f8 	.word	0x080084f8

08005648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005650:	f001 fac0 	bl	8006bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005654:	4b2d      	ldr	r3, [pc, #180]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a2c      	ldr	r2, [pc, #176]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 800565c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800565e:	4b2c      	ldr	r3, [pc, #176]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005666:	4a2a      	ldr	r2, [pc, #168]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800566c:	4b27      	ldr	r3, [pc, #156]	; (800570c <prvAddNewTaskToReadyList+0xc4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d110      	bne.n	8005696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005674:	f000 fc90 	bl	8005f98 <prvInitialiseTaskLists>
 8005678:	e00d      	b.n	8005696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <prvAddNewTaskToReadyList+0xcc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d802      	bhi.n	8005696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005690:	4a1f      	ldr	r2, [pc, #124]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005696:	4b20      	ldr	r3, [pc, #128]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 800569e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <prvAddNewTaskToReadyList+0xd0>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <prvAddNewTaskToReadyList+0xd4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d903      	bls.n	80056bc <prvAddNewTaskToReadyList+0x74>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	4a18      	ldr	r2, [pc, #96]	; (800571c <prvAddNewTaskToReadyList+0xd4>)
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <prvAddNewTaskToReadyList+0xd8>)
 80056ca:	441a      	add	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f7ff f8fd 	bl	80048d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056d8:	f001 faac 	bl	8006c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <prvAddNewTaskToReadyList+0xcc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00e      	beq.n	8005702 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvAddNewTaskToReadyList+0xc8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d207      	bcs.n	8005702 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <prvAddNewTaskToReadyList+0xdc>)
 80056f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20001120 	.word	0x20001120
 8005710:	20000c4c 	.word	0x20000c4c
 8005714:	2000112c 	.word	0x2000112c
 8005718:	2000113c 	.word	0x2000113c
 800571c:	20001128 	.word	0x20001128
 8005720:	20000c50 	.word	0x20000c50
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b37      	cmp	r3, #55	; 0x37
 800573a:	d90a      	bls.n	8005752 <vTaskPrioritySet+0x2a>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60fb      	str	r3, [r7, #12]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b37      	cmp	r3, #55	; 0x37
 8005756:	d901      	bls.n	800575c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005758:	2337      	movs	r3, #55	; 0x37
 800575a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800575c:	f001 fa3a 	bl	8006bd4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <vTaskPrioritySet+0x44>
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <vTaskPrioritySet+0x12c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	e000      	b.n	800576e <vTaskPrioritySet+0x46>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d063      	beq.n	8005846 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	429a      	cmp	r2, r3
 8005784:	d90d      	bls.n	80057a2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8005786:	4b33      	ldr	r3, [pc, #204]	; (8005854 <vTaskPrioritySet+0x12c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	429a      	cmp	r2, r3
 800578e:	d00f      	beq.n	80057b0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005790:	4b30      	ldr	r3, [pc, #192]	; (8005854 <vTaskPrioritySet+0x12c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d309      	bcc.n	80057b0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	e006      	b.n	80057b0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80057a2:	4b2c      	ldr	r3, [pc, #176]	; (8005854 <vTaskPrioritySet+0x12c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d101      	bne.n	80057b0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	429a      	cmp	r2, r3
 80057c0:	d102      	bne.n	80057c8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	db04      	blt.n	80057e0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	6959      	ldr	r1, [r3, #20]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <vTaskPrioritySet+0x130>)
 80057f0:	4413      	add	r3, r2
 80057f2:	4299      	cmp	r1, r3
 80057f4:	d11c      	bne.n	8005830 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff f8c6 	bl	800498c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b15      	ldr	r3, [pc, #84]	; (800585c <vTaskPrioritySet+0x134>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <vTaskPrioritySet+0xec>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <vTaskPrioritySet+0x134>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <vTaskPrioritySet+0x130>)
 8005822:	441a      	add	r2, r3
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7ff f851 	bl	80048d2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <vTaskPrioritySet+0x138>)
 8005838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005846:	f001 f9f5 	bl	8006c34 <vPortExitCritical>
	}
 800584a:	bf00      	nop
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000c4c 	.word	0x20000c4c
 8005858:	20000c50 	.word	0x20000c50
 800585c:	20001128 	.word	0x20001128
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005872:	463a      	mov	r2, r7
 8005874:	1d39      	adds	r1, r7, #4
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe ffc8 	bl	8004810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	9202      	str	r2, [sp, #8]
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	2300      	movs	r3, #0
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2300      	movs	r3, #0
 8005890:	460a      	mov	r2, r1
 8005892:	4924      	ldr	r1, [pc, #144]	; (8005924 <vTaskStartScheduler+0xc0>)
 8005894:	4824      	ldr	r0, [pc, #144]	; (8005928 <vTaskStartScheduler+0xc4>)
 8005896:	f7ff fd8f 	bl	80053b8 <xTaskCreateStatic>
 800589a:	4603      	mov	r3, r0
 800589c:	4a23      	ldr	r2, [pc, #140]	; (800592c <vTaskStartScheduler+0xc8>)
 800589e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058a0:	4b22      	ldr	r3, [pc, #136]	; (800592c <vTaskStartScheduler+0xc8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058a8:	2301      	movs	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e001      	b.n	80058b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058b8:	f000 fd10 	bl	80062dc <xTimerCreateTimerTask>
 80058bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d11b      	bne.n	80058fc <vTaskStartScheduler+0x98>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
}
 80058d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <vTaskStartScheduler+0xcc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3354      	adds	r3, #84	; 0x54
 80058de:	4a15      	ldr	r2, [pc, #84]	; (8005934 <vTaskStartScheduler+0xd0>)
 80058e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <vTaskStartScheduler+0xd4>)
 80058e4:	f04f 32ff 	mov.w	r2, #4294967295
 80058e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <vTaskStartScheduler+0xd8>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058f0:	4b13      	ldr	r3, [pc, #76]	; (8005940 <vTaskStartScheduler+0xdc>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058f6:	f001 f8cb 	bl	8006a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058fa:	e00e      	b.n	800591a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d10a      	bne.n	800591a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <vTaskStartScheduler+0xb4>
}
 800591a:	bf00      	nop
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	080083c0 	.word	0x080083c0
 8005928:	08005f69 	.word	0x08005f69
 800592c:	20001144 	.word	0x20001144
 8005930:	20000c4c 	.word	0x20000c4c
 8005934:	20000014 	.word	0x20000014
 8005938:	20001140 	.word	0x20001140
 800593c:	2000112c 	.word	0x2000112c
 8005940:	20001124 	.word	0x20001124

08005944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <vTaskSuspendAll+0x18>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	4a03      	ldr	r2, [pc, #12]	; (800595c <vTaskSuspendAll+0x18>)
 8005950:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20001148 	.word	0x20001148

08005960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800596e:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <xTaskResumeAll+0x118>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <xTaskResumeAll+0x2c>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	603b      	str	r3, [r7, #0]
}
 8005988:	bf00      	nop
 800598a:	e7fe      	b.n	800598a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800598c:	f001 f922 	bl	8006bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005990:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <xTaskResumeAll+0x118>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <xTaskResumeAll+0x118>)
 8005998:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599a:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <xTaskResumeAll+0x118>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d162      	bne.n	8005a68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059a2:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <xTaskResumeAll+0x11c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d05e      	beq.n	8005a68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059aa:	e02f      	b.n	8005a0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <xTaskResumeAll+0x120>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3318      	adds	r3, #24
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe ffe7 	bl	800498c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe ffe2 	bl	800498c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059cc:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <xTaskResumeAll+0x124>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d903      	bls.n	80059dc <xTaskResumeAll+0x7c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <xTaskResumeAll+0x124>)
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <xTaskResumeAll+0x128>)
 80059ea:	441a      	add	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fe ff6d 	bl	80048d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	4b23      	ldr	r3, [pc, #140]	; (8005a8c <xTaskResumeAll+0x12c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <xTaskResumeAll+0x130>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a0c:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <xTaskResumeAll+0x120>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1cb      	bne.n	80059ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a1a:	f000 fb5f 	bl	80060dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <xTaskResumeAll+0x134>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a2a:	f000 f847 	bl	8005abc <xTaskIncrementTick>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <xTaskResumeAll+0x130>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f1      	bne.n	8005a2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <xTaskResumeAll+0x134>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <xTaskResumeAll+0x130>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <xTaskResumeAll+0x138>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a68:	f001 f8e4 	bl	8006c34 <vPortExitCritical>

	return xAlreadyYielded;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20001148 	.word	0x20001148
 8005a7c:	20001120 	.word	0x20001120
 8005a80:	200010e0 	.word	0x200010e0
 8005a84:	20001128 	.word	0x20001128
 8005a88:	20000c50 	.word	0x20000c50
 8005a8c:	20000c4c 	.word	0x20000c4c
 8005a90:	20001134 	.word	0x20001134
 8005a94:	20001130 	.word	0x20001130
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <xTaskGetTickCount+0x1c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005aa8:	687b      	ldr	r3, [r7, #4]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20001124 	.word	0x20001124

08005abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac6:	4b4f      	ldr	r3, [pc, #316]	; (8005c04 <xTaskIncrementTick+0x148>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 808f 	bne.w	8005bee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <xTaskIncrementTick+0x14c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ad8:	4a4b      	ldr	r2, [pc, #300]	; (8005c08 <xTaskIncrementTick+0x14c>)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d120      	bne.n	8005b26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ae4:	4b49      	ldr	r3, [pc, #292]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <xTaskIncrementTick+0x48>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	603b      	str	r3, [r7, #0]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <xTaskIncrementTick+0x46>
 8005b04:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4a3f      	ldr	r2, [pc, #252]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b3e      	ldr	r3, [pc, #248]	; (8005c14 <xTaskIncrementTick+0x158>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a3d      	ldr	r2, [pc, #244]	; (8005c14 <xTaskIncrementTick+0x158>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	f000 fadb 	bl	80060dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b26:	4b3c      	ldr	r3, [pc, #240]	; (8005c18 <xTaskIncrementTick+0x15c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d349      	bcc.n	8005bc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b30:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b3a:	4b37      	ldr	r3, [pc, #220]	; (8005c18 <xTaskIncrementTick+0x15c>)
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	601a      	str	r2, [r3, #0]
					break;
 8005b42:	e03f      	b.n	8005bc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d203      	bcs.n	8005b64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b5c:	4a2e      	ldr	r2, [pc, #184]	; (8005c18 <xTaskIncrementTick+0x15c>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b62:	e02f      	b.n	8005bc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe ff0f 	bl	800498c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	3318      	adds	r3, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe ff06 	bl	800498c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <xTaskIncrementTick+0x160>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d903      	bls.n	8005b94 <xTaskIncrementTick+0xd8>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	4a22      	ldr	r2, [pc, #136]	; (8005c1c <xTaskIncrementTick+0x160>)
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <xTaskIncrementTick+0x164>)
 8005ba2:	441a      	add	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f7fe fe91 	bl	80048d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <xTaskIncrementTick+0x168>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3b8      	bcc.n	8005b30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bc2:	e7b5      	b.n	8005b30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bc4:	4b17      	ldr	r3, [pc, #92]	; (8005c24 <xTaskIncrementTick+0x168>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	4915      	ldr	r1, [pc, #84]	; (8005c20 <xTaskIncrementTick+0x164>)
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d901      	bls.n	8005be0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005be0:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <xTaskIncrementTick+0x16c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e004      	b.n	8005bf8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bee:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <xTaskIncrementTick+0x170>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <xTaskIncrementTick+0x170>)
 8005bf6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bf8:	697b      	ldr	r3, [r7, #20]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20001148 	.word	0x20001148
 8005c08:	20001124 	.word	0x20001124
 8005c0c:	200010d8 	.word	0x200010d8
 8005c10:	200010dc 	.word	0x200010dc
 8005c14:	20001138 	.word	0x20001138
 8005c18:	20001140 	.word	0x20001140
 8005c1c:	20001128 	.word	0x20001128
 8005c20:	20000c50 	.word	0x20000c50
 8005c24:	20000c4c 	.word	0x20000c4c
 8005c28:	20001134 	.word	0x20001134
 8005c2c:	20001130 	.word	0x20001130

08005c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c36:	4b2a      	ldr	r3, [pc, #168]	; (8005ce0 <vTaskSwitchContext+0xb0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c3e:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <vTaskSwitchContext+0xb4>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c44:	e046      	b.n	8005cd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <vTaskSwitchContext+0xb4>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4c:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <vTaskSwitchContext+0xb8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e010      	b.n	8005c76 <vTaskSwitchContext+0x46>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	607b      	str	r3, [r7, #4]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <vTaskSwitchContext+0x3e>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	491d      	ldr	r1, [pc, #116]	; (8005cec <vTaskSwitchContext+0xbc>)
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0e4      	beq.n	8005c54 <vTaskSwitchContext+0x24>
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4a15      	ldr	r2, [pc, #84]	; (8005cec <vTaskSwitchContext+0xbc>)
 8005c96:	4413      	add	r3, r2
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	3308      	adds	r3, #8
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d104      	bne.n	8005cba <vTaskSwitchContext+0x8a>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4a0b      	ldr	r2, [pc, #44]	; (8005cf0 <vTaskSwitchContext+0xc0>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <vTaskSwitchContext+0xb8>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cca:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <vTaskSwitchContext+0xc0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3354      	adds	r3, #84	; 0x54
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <vTaskSwitchContext+0xc4>)
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20001148 	.word	0x20001148
 8005ce4:	20001134 	.word	0x20001134
 8005ce8:	20001128 	.word	0x20001128
 8005cec:	20000c50 	.word	0x20000c50
 8005cf0:	20000c4c 	.word	0x20000c4c
 8005cf4:	20000014 	.word	0x20000014

08005cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	60fb      	str	r3, [r7, #12]
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <vTaskPlaceOnEventList+0x44>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3318      	adds	r3, #24
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fe fdf7 	bl	800491a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	6838      	ldr	r0, [r7, #0]
 8005d30:	f000 fa80 	bl	8006234 <prvAddCurrentTaskToDelayedList>
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000c4c 	.word	0x20000c4c

08005d40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	617b      	str	r3, [r7, #20]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3318      	adds	r3, #24
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7fe fdae 	bl	80048d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	68b8      	ldr	r0, [r7, #8]
 8005d86:	f000 fa55 	bl	8006234 <prvAddCurrentTaskToDelayedList>
	}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000c4c 	.word	0x20000c4c

08005d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fddf 	bl	800498c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <xTaskRemoveFromEventList+0xb0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11d      	bne.n	8005e12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fdd6 	bl	800498c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <xTaskRemoveFromEventList+0xb4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d903      	bls.n	8005df4 <xTaskRemoveFromEventList+0x5c>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <xTaskRemoveFromEventList+0xb4>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a13      	ldr	r2, [pc, #76]	; (8005e50 <xTaskRemoveFromEventList+0xb8>)
 8005e02:	441a      	add	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fe fd61 	bl	80048d2 <vListInsertEnd>
 8005e10:	e005      	b.n	8005e1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3318      	adds	r3, #24
 8005e16:	4619      	mov	r1, r3
 8005e18:	480e      	ldr	r0, [pc, #56]	; (8005e54 <xTaskRemoveFromEventList+0xbc>)
 8005e1a:	f7fe fd5a 	bl	80048d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <xTaskRemoveFromEventList+0xc0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d905      	bls.n	8005e38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <xTaskRemoveFromEventList+0xc4>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e001      	b.n	8005e3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e3c:	697b      	ldr	r3, [r7, #20]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20001148 	.word	0x20001148
 8005e4c:	20001128 	.word	0x20001128
 8005e50:	20000c50 	.word	0x20000c50
 8005e54:	200010e0 	.word	0x200010e0
 8005e58:	20000c4c 	.word	0x20000c4c
 8005e5c:	20001134 	.word	0x20001134

08005e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <vTaskInternalSetTimeOutState+0x24>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <vTaskInternalSetTimeOutState+0x28>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	605a      	str	r2, [r3, #4]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20001138 	.word	0x20001138
 8005e88:	20001124 	.word	0x20001124

08005e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	613b      	str	r3, [r7, #16]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ece:	f000 fe81 	bl	8006bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <xTaskCheckForTimeOut+0xbc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d102      	bne.n	8005ef2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e023      	b.n	8005f3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <xTaskCheckForTimeOut+0xc0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d007      	beq.n	8005f0e <xTaskCheckForTimeOut+0x82>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e015      	b.n	8005f3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d20b      	bcs.n	8005f30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff9b 	bl	8005e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e004      	b.n	8005f3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f3a:	f000 fe7b 	bl	8006c34 <vPortExitCritical>

	return xReturn;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20001124 	.word	0x20001124
 8005f4c:	20001138 	.word	0x20001138

08005f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f54:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <vTaskMissedYield+0x14>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20001134 	.word	0x20001134

08005f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f70:	f000 f852 	bl	8006018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <prvIdleTask+0x28>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d9f9      	bls.n	8005f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <prvIdleTask+0x2c>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f8c:	e7f0      	b.n	8005f70 <prvIdleTask+0x8>
 8005f8e:	bf00      	nop
 8005f90:	20000c50 	.word	0x20000c50
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e00c      	b.n	8005fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <prvInitialiseTaskLists+0x60>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fc60 	bl	8004878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b37      	cmp	r3, #55	; 0x37
 8005fc2:	d9ef      	bls.n	8005fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fc4:	480d      	ldr	r0, [pc, #52]	; (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fc6:	f7fe fc57 	bl	8004878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fca:	480d      	ldr	r0, [pc, #52]	; (8006000 <prvInitialiseTaskLists+0x68>)
 8005fcc:	f7fe fc54 	bl	8004878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd0:	480c      	ldr	r0, [pc, #48]	; (8006004 <prvInitialiseTaskLists+0x6c>)
 8005fd2:	f7fe fc51 	bl	8004878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fd6:	480c      	ldr	r0, [pc, #48]	; (8006008 <prvInitialiseTaskLists+0x70>)
 8005fd8:	f7fe fc4e 	bl	8004878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fdc:	480b      	ldr	r0, [pc, #44]	; (800600c <prvInitialiseTaskLists+0x74>)
 8005fde:	f7fe fc4b 	bl	8004878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <prvInitialiseTaskLists+0x78>)
 8005fe4:	4a05      	ldr	r2, [pc, #20]	; (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <prvInitialiseTaskLists+0x7c>)
 8005fea:	4a05      	ldr	r2, [pc, #20]	; (8006000 <prvInitialiseTaskLists+0x68>)
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000c50 	.word	0x20000c50
 8005ffc:	200010b0 	.word	0x200010b0
 8006000:	200010c4 	.word	0x200010c4
 8006004:	200010e0 	.word	0x200010e0
 8006008:	200010f4 	.word	0x200010f4
 800600c:	2000110c 	.word	0x2000110c
 8006010:	200010d8 	.word	0x200010d8
 8006014:	200010dc 	.word	0x200010dc

08006018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800601e:	e019      	b.n	8006054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006020:	f000 fdd8 	bl	8006bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006024:	4b10      	ldr	r3, [pc, #64]	; (8006068 <prvCheckTasksWaitingTermination+0x50>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fcab 	bl	800498c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a0b      	ldr	r2, [pc, #44]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 800603e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	4a0a      	ldr	r2, [pc, #40]	; (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800604a:	f000 fdf3 	bl	8006c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f810 	bl	8006074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <prvCheckTasksWaitingTermination+0x58>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e1      	bne.n	8006020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	200010f4 	.word	0x200010f4
 800606c:	20001120 	.word	0x20001120
 8006070:	20001108 	.word	0x20001108

08006074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3354      	adds	r3, #84	; 0x54
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fdad 	bl	8007be0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800608c:	2b00      	cmp	r3, #0
 800608e:	d108      	bne.n	80060a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4618      	mov	r0, r3
 8006096:	f000 ff8b 	bl	8006fb0 <vPortFree>
				vPortFree( pxTCB );
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 ff88 	bl	8006fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060a0:	e018      	b.n	80060d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d103      	bne.n	80060b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 ff7f 	bl	8006fb0 <vPortFree>
	}
 80060b2:	e00f      	b.n	80060d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d00a      	beq.n	80060d4 <prvDeleteTCB+0x60>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60fb      	str	r3, [r7, #12]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <prvDeleteTCB+0x5e>
	}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <prvResetNextTaskUnblockTime+0x38>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <prvResetNextTaskUnblockTime+0x3c>)
 80060ee:	f04f 32ff 	mov.w	r2, #4294967295
 80060f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060f4:	e008      	b.n	8006108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f6:	4b07      	ldr	r3, [pc, #28]	; (8006114 <prvResetNextTaskUnblockTime+0x38>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a04      	ldr	r2, [pc, #16]	; (8006118 <prvResetNextTaskUnblockTime+0x3c>)
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	200010d8 	.word	0x200010d8
 8006118:	20001140 	.word	0x20001140

0800611c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <xTaskGetSchedulerState+0x34>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800612a:	2301      	movs	r3, #1
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	e008      	b.n	8006142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <xTaskGetSchedulerState+0x38>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006138:	2302      	movs	r3, #2
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	e001      	b.n	8006142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800613e:	2300      	movs	r3, #0
 8006140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006142:	687b      	ldr	r3, [r7, #4]
	}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	2000112c 	.word	0x2000112c
 8006154:	20001148 	.word	0x20001148

08006158 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d056      	beq.n	800621c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800616e:	4b2e      	ldr	r3, [pc, #184]	; (8006228 <xTaskPriorityDisinherit+0xd0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	429a      	cmp	r2, r3
 8006176:	d00a      	beq.n	800618e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	60fb      	str	r3, [r7, #12]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60bb      	str	r3, [r7, #8]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061be:	429a      	cmp	r2, r3
 80061c0:	d02c      	beq.n	800621c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d128      	bne.n	800621c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fbdc 	bl	800498c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <xTaskPriorityDisinherit+0xd4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d903      	bls.n	80061fc <xTaskPriorityDisinherit+0xa4>
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	4a0c      	ldr	r2, [pc, #48]	; (800622c <xTaskPriorityDisinherit+0xd4>)
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <xTaskPriorityDisinherit+0xd8>)
 800620a:	441a      	add	r2, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fe fb5d 	bl	80048d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800621c:	697b      	ldr	r3, [r7, #20]
	}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000c4c 	.word	0x20000c4c
 800622c:	20001128 	.word	0x20001128
 8006230:	20000c50 	.word	0x20000c50

08006234 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800623e:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006244:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fb9e 	bl	800498c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d10a      	bne.n	800626e <prvAddCurrentTaskToDelayedList+0x3a>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625e:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4819      	ldr	r0, [pc, #100]	; (80062cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006268:	f7fe fb33 	bl	80048d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800626c:	e026      	b.n	80062bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4413      	add	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	429a      	cmp	r2, r3
 8006284:	d209      	bcs.n	800629a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006286:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fe fb41 	bl	800491a <vListInsert>
}
 8006298:	e010      	b.n	80062bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe fb37 	bl	800491a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d202      	bcs.n	80062bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062b6:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	20001124 	.word	0x20001124
 80062c8:	20000c4c 	.word	0x20000c4c
 80062cc:	2000110c 	.word	0x2000110c
 80062d0:	200010dc 	.word	0x200010dc
 80062d4:	200010d8 	.word	0x200010d8
 80062d8:	20001140 	.word	0x20001140

080062dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062e6:	f000 fb07 	bl	80068f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062ea:	4b1c      	ldr	r3, [pc, #112]	; (800635c <xTimerCreateTimerTask+0x80>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d021      	beq.n	8006336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062fa:	1d3a      	adds	r2, r7, #4
 80062fc:	f107 0108 	add.w	r1, r7, #8
 8006300:	f107 030c 	add.w	r3, r7, #12
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fa9d 	bl	8004844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	9202      	str	r2, [sp, #8]
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	2302      	movs	r3, #2
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	460a      	mov	r2, r1
 800631c:	4910      	ldr	r1, [pc, #64]	; (8006360 <xTimerCreateTimerTask+0x84>)
 800631e:	4811      	ldr	r0, [pc, #68]	; (8006364 <xTimerCreateTimerTask+0x88>)
 8006320:	f7ff f84a 	bl	80053b8 <xTaskCreateStatic>
 8006324:	4603      	mov	r3, r0
 8006326:	4a10      	ldr	r2, [pc, #64]	; (8006368 <xTimerCreateTimerTask+0x8c>)
 8006328:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800632a:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <xTimerCreateTimerTask+0x8c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006332:	2301      	movs	r3, #1
 8006334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	613b      	str	r3, [r7, #16]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006352:	697b      	ldr	r3, [r7, #20]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	2000117c 	.word	0x2000117c
 8006360:	080083c8 	.word	0x080083c8
 8006364:	080064a1 	.word	0x080064a1
 8006368:	20001180 	.word	0x20001180

0800636c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800637a:	2300      	movs	r3, #0
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	623b      	str	r3, [r7, #32]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800639a:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <xTimerGenericCommand+0x98>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d02a      	beq.n	80063f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b05      	cmp	r3, #5
 80063b2:	dc18      	bgt.n	80063e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063b4:	f7ff feb2 	bl	800611c <xTaskGetSchedulerState>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d109      	bne.n	80063d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063be:	4b11      	ldr	r3, [pc, #68]	; (8006404 <xTimerGenericCommand+0x98>)
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	f107 0110 	add.w	r1, r7, #16
 80063c6:	2300      	movs	r3, #0
 80063c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ca:	f7fe fc0d 	bl	8004be8 <xQueueGenericSend>
 80063ce:	6278      	str	r0, [r7, #36]	; 0x24
 80063d0:	e012      	b.n	80063f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <xTimerGenericCommand+0x98>)
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f107 0110 	add.w	r1, r7, #16
 80063da:	2300      	movs	r3, #0
 80063dc:	2200      	movs	r2, #0
 80063de:	f7fe fc03 	bl	8004be8 <xQueueGenericSend>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24
 80063e4:	e008      	b.n	80063f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <xTimerGenericCommand+0x98>)
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	f107 0110 	add.w	r1, r7, #16
 80063ee:	2300      	movs	r3, #0
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	f7fe fcf7 	bl	8004de4 <xQueueGenericSendFromISR>
 80063f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3728      	adds	r7, #40	; 0x28
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	2000117c 	.word	0x2000117c

08006408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af02      	add	r7, sp, #8
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006412:	4b22      	ldr	r3, [pc, #136]	; (800649c <prvProcessExpiredTimer+0x94>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fab3 	bl	800498c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d022      	beq.n	800647a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	18d1      	adds	r1, r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	6978      	ldr	r0, [r7, #20]
 8006442:	f000 f8d1 	bl	80065e8 <prvInsertTimerInActiveList>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01f      	beq.n	800648c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2300      	movs	r3, #0
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	2100      	movs	r1, #0
 8006456:	6978      	ldr	r0, [r7, #20]
 8006458:	f7ff ff88 	bl	800636c <xTimerGenericCommand>
 800645c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d113      	bne.n	800648c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	4798      	blx	r3
}
 8006494:	bf00      	nop
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20001174 	.word	0x20001174

080064a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064a8:	f107 0308 	add.w	r3, r7, #8
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f857 	bl	8006560 <prvGetNextExpireTime>
 80064b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4619      	mov	r1, r3
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f803 	bl	80064c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064be:	f000 f8d5 	bl	800666c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064c2:	e7f1      	b.n	80064a8 <prvTimerTask+0x8>

080064c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064ce:	f7ff fa39 	bl	8005944 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064d2:	f107 0308 	add.w	r3, r7, #8
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f866 	bl	80065a8 <prvSampleTimeNow>
 80064dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d130      	bne.n	8006546 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <prvProcessTimerOrBlockTask+0x3c>
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d806      	bhi.n	8006500 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064f2:	f7ff fa35 	bl	8005960 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ff85 	bl	8006408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064fe:	e024      	b.n	800654a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <prvProcessTimerOrBlockTask+0x90>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <prvProcessTimerOrBlockTask+0x50>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <prvProcessTimerOrBlockTask+0x52>
 8006514:	2300      	movs	r3, #0
 8006516:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <prvProcessTimerOrBlockTask+0x94>)
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4619      	mov	r1, r3
 8006526:	f7fe ff13 	bl	8005350 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800652a:	f7ff fa19 	bl	8005960 <xTaskResumeAll>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <prvProcessTimerOrBlockTask+0x98>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
}
 8006544:	e001      	b.n	800654a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006546:	f7ff fa0b 	bl	8005960 <xTaskResumeAll>
}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20001178 	.word	0x20001178
 8006558:	2000117c 	.word	0x2000117c
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <prvGetNextExpireTime+0x44>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <prvGetNextExpireTime+0x16>
 8006572:	2201      	movs	r2, #1
 8006574:	e000      	b.n	8006578 <prvGetNextExpireTime+0x18>
 8006576:	2200      	movs	r2, #0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006584:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <prvGetNextExpireTime+0x44>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e001      	b.n	8006594 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20001174 	.word	0x20001174

080065a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065b0:	f7ff fa74 	bl	8005a9c <xTaskGetTickCount>
 80065b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <prvSampleTimeNow+0x3c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d205      	bcs.n	80065cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065c0:	f000 f936 	bl	8006830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065d2:	4a04      	ldr	r2, [pc, #16]	; (80065e4 <prvSampleTimeNow+0x3c>)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20001184 	.word	0x20001184

080065e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	429a      	cmp	r2, r3
 800660c:	d812      	bhi.n	8006634 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	429a      	cmp	r2, r3
 800661a:	d302      	bcc.n	8006622 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e01b      	b.n	800665a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <prvInsertTimerInActiveList+0x7c>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fe f974 	bl	800491a <vListInsert>
 8006632:	e012      	b.n	800665a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d206      	bcs.n	800664a <prvInsertTimerInActiveList+0x62>
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006644:	2301      	movs	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e007      	b.n	800665a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <prvInsertTimerInActiveList+0x80>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f7fe f960 	bl	800491a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800665a:	697b      	ldr	r3, [r7, #20]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20001178 	.word	0x20001178
 8006668:	20001174 	.word	0x20001174

0800666c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08e      	sub	sp, #56	; 0x38
 8006670:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006672:	e0ca      	b.n	800680a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da18      	bge.n	80066ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	3304      	adds	r3, #4
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	61fb      	str	r3, [r7, #28]
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a2:	6850      	ldr	r0, [r2, #4]
 80066a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a6:	6892      	ldr	r2, [r2, #8]
 80066a8:	4611      	mov	r1, r2
 80066aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f2c0 80aa 	blt.w	8006808 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe f961 	bl	800498c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066ca:	463b      	mov	r3, r7
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff ff6b 	bl	80065a8 <prvSampleTimeNow>
 80066d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	f200 8097 	bhi.w	800680a <prvProcessReceivedCommands+0x19e>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <prvProcessReceivedCommands+0x78>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	0800670d 	.word	0x0800670d
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	0800670d 	.word	0x0800670d
 80066f0:	08006781 	.word	0x08006781
 80066f4:	08006795 	.word	0x08006795
 80066f8:	080067df 	.word	0x080067df
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	0800670d 	.word	0x0800670d
 8006704:	08006781 	.word	0x08006781
 8006708:	08006795 	.word	0x08006795
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	18d1      	adds	r1, r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672c:	f7ff ff5c 	bl	80065e8 <prvInsertTimerInActiveList>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d069      	beq.n	800680a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05e      	beq.n	800680a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	441a      	add	r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	2100      	movs	r1, #0
 800675c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675e:	f7ff fe05 	bl	800636c <xTimerGenericCommand>
 8006762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d14f      	bne.n	800680a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	61bb      	str	r3, [r7, #24]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006792:	e03a      	b.n	800680a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	617b      	str	r3, [r7, #20]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	18d1      	adds	r1, r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d8:	f7ff ff06 	bl	80065e8 <prvInsertTimerInActiveList>
					break;
 80067dc:	e015      	b.n	800680a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80067ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ee:	f000 fbdf 	bl	8006fb0 <vPortFree>
 80067f2:	e00a      	b.n	800680a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006806:	e000      	b.n	800680a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006808:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <prvProcessReceivedCommands+0x1c0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	1d39      	adds	r1, r7, #4
 8006810:	2200      	movs	r2, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fb82 	bl	8004f1c <xQueueReceive>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	f47f af2a 	bne.w	8006674 <prvProcessReceivedCommands+0x8>
	}
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	3730      	adds	r7, #48	; 0x30
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	2000117c 	.word	0x2000117c

08006830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006836:	e048      	b.n	80068ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006838:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <prvSwitchTimerLists+0xc0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b2b      	ldr	r3, [pc, #172]	; (80068f0 <prvSwitchTimerLists+0xc0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3304      	adds	r3, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f89b 	bl	800498c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d02e      	beq.n	80068ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d90e      	bls.n	800689c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800688a:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <prvSwitchTimerLists+0xc0>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe f840 	bl	800491a <vListInsert>
 800689a:	e016      	b.n	80068ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800689c:	2300      	movs	r3, #0
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2300      	movs	r3, #0
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	2100      	movs	r1, #0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff fd60 	bl	800636c <xTimerGenericCommand>
 80068ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	603b      	str	r3, [r7, #0]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <prvSwitchTimerLists+0xc0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1b1      	bne.n	8006838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <prvSwitchTimerLists+0xc0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068da:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <prvSwitchTimerLists+0xc4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvSwitchTimerLists+0xc0>)
 80068e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068e2:	4a04      	ldr	r2, [pc, #16]	; (80068f4 <prvSwitchTimerLists+0xc4>)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6013      	str	r3, [r2, #0]
}
 80068e8:	bf00      	nop
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20001174 	.word	0x20001174
 80068f4:	20001178 	.word	0x20001178

080068f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068fe:	f000 f969 	bl	8006bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <prvCheckForValidListAndQueue+0x60>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d120      	bne.n	800694c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800690a:	4814      	ldr	r0, [pc, #80]	; (800695c <prvCheckForValidListAndQueue+0x64>)
 800690c:	f7fd ffb4 	bl	8004878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006910:	4813      	ldr	r0, [pc, #76]	; (8006960 <prvCheckForValidListAndQueue+0x68>)
 8006912:	f7fd ffb1 	bl	8004878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <prvCheckForValidListAndQueue+0x6c>)
 8006918:	4a10      	ldr	r2, [pc, #64]	; (800695c <prvCheckForValidListAndQueue+0x64>)
 800691a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800691c:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvCheckForValidListAndQueue+0x70>)
 800691e:	4a10      	ldr	r2, [pc, #64]	; (8006960 <prvCheckForValidListAndQueue+0x68>)
 8006920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006922:	2300      	movs	r3, #0
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <prvCheckForValidListAndQueue+0x74>)
 8006928:	4a11      	ldr	r2, [pc, #68]	; (8006970 <prvCheckForValidListAndQueue+0x78>)
 800692a:	2110      	movs	r1, #16
 800692c:	200a      	movs	r0, #10
 800692e:	f7fe f8bf 	bl	8004ab0 <xQueueGenericCreateStatic>
 8006932:	4603      	mov	r3, r0
 8006934:	4a08      	ldr	r2, [pc, #32]	; (8006958 <prvCheckForValidListAndQueue+0x60>)
 8006936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006938:	4b07      	ldr	r3, [pc, #28]	; (8006958 <prvCheckForValidListAndQueue+0x60>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <prvCheckForValidListAndQueue+0x60>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	490b      	ldr	r1, [pc, #44]	; (8006974 <prvCheckForValidListAndQueue+0x7c>)
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fcd8 	bl	80052fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800694c:	f000 f972 	bl	8006c34 <vPortExitCritical>
}
 8006950:	bf00      	nop
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	2000117c 	.word	0x2000117c
 800695c:	2000114c 	.word	0x2000114c
 8006960:	20001160 	.word	0x20001160
 8006964:	20001174 	.word	0x20001174
 8006968:	20001178 	.word	0x20001178
 800696c:	20001228 	.word	0x20001228
 8006970:	20001188 	.word	0x20001188
 8006974:	080083d0 	.word	0x080083d0

08006978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3b04      	subs	r3, #4
 8006988:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3b04      	subs	r3, #4
 8006996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069a8:	4a0c      	ldr	r2, [pc, #48]	; (80069dc <pxPortInitialiseStack+0x64>)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3b14      	subs	r3, #20
 80069b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3b04      	subs	r3, #4
 80069be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f06f 0202 	mvn.w	r2, #2
 80069c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b20      	subs	r3, #32
 80069cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069ce:	68fb      	ldr	r3, [r7, #12]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	080069e1 	.word	0x080069e1

080069e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <prvTaskExitError+0x54>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d00a      	beq.n	8006a0a <prvTaskExitError+0x2a>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	60fb      	str	r3, [r7, #12]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <prvTaskExitError+0x28>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60bb      	str	r3, [r7, #8]
}
 8006a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a1e:	bf00      	nop
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0fc      	beq.n	8006a20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	20000010 	.word	0x20000010
	...

08006a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <pxCurrentTCBConst2>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f380 8809 	msr	PSP, r0
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	4770      	bx	lr
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst2>:
 8006a60:	20000c4c 	.word	0x20000c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a68:	4808      	ldr	r0, [pc, #32]	; (8006a8c <prvPortStartFirstTask+0x24>)
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	f380 8808 	msr	MSP, r0
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8814 	msr	CONTROL, r0
 8006a7a:	b662      	cpsie	i
 8006a7c:	b661      	cpsie	f
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	df00      	svc	0
 8006a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a8a:	bf00      	nop
 8006a8c:	e000ed08 	.word	0xe000ed08

08006a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a96:	4b46      	ldr	r3, [pc, #280]	; (8006bb0 <xPortStartScheduler+0x120>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a46      	ldr	r2, [pc, #280]	; (8006bb4 <xPortStartScheduler+0x124>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10a      	bne.n	8006ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <xPortStartScheduler+0x120>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a3f      	ldr	r2, [pc, #252]	; (8006bb8 <xPortStartScheduler+0x128>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10a      	bne.n	8006ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ad6:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <xPortStartScheduler+0x12c>)
 8006ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	4b31      	ldr	r3, [pc, #196]	; (8006bc0 <xPortStartScheduler+0x130>)
 8006afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006afe:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b04:	e009      	b.n	8006b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	d0ef      	beq.n	8006b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b26:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1c3 0307 	rsb	r3, r3, #7
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d00a      	beq.n	8006b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60bb      	str	r3, [r7, #8]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <xPortStartScheduler+0x134>)
 8006b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b66:	4b18      	ldr	r3, [pc, #96]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <xPortStartScheduler+0x138>)
 8006b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b7e:	f000 f8dd 	bl	8006d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b82:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <xPortStartScheduler+0x13c>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b88:	f000 f8fc 	bl	8006d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <xPortStartScheduler+0x140>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0f      	ldr	r2, [pc, #60]	; (8006bd0 <xPortStartScheduler+0x140>)
 8006b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b98:	f7ff ff66 	bl	8006a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b9c:	f7ff f848 	bl	8005c30 <vTaskSwitchContext>
	prvTaskExitError();
 8006ba0:	f7ff ff1e 	bl	80069e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	e000ed00 	.word	0xe000ed00
 8006bb4:	410fc271 	.word	0x410fc271
 8006bb8:	410fc270 	.word	0x410fc270
 8006bbc:	e000e400 	.word	0xe000e400
 8006bc0:	20001278 	.word	0x20001278
 8006bc4:	2000127c 	.word	0x2000127c
 8006bc8:	e000ed20 	.word	0xe000ed20
 8006bcc:	20000010 	.word	0x20000010
 8006bd0:	e000ef34 	.word	0xe000ef34

08006bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	607b      	str	r3, [r7, #4]
}
 8006bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <vPortEnterCritical+0x58>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d10f      	bne.n	8006c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <vPortEnterCritical+0x5c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	603b      	str	r3, [r7, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <vPortEnterCritical+0x4a>
	}
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	20000010 	.word	0x20000010
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <vPortExitCritical+0x50>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <vPortExitCritical+0x24>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	607b      	str	r3, [r7, #4]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <vPortExitCritical+0x50>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <vPortExitCritical+0x50>)
 8006c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <vPortExitCritical+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <vPortExitCritical+0x42>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f383 8811 	msr	BASEPRI, r3
}
 8006c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000010 	.word	0x20000010
	...

08006c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c90:	f3ef 8009 	mrs	r0, PSP
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <pxCurrentTCBConst>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f01e 0f10 	tst.w	lr, #16
 8006ca0:	bf08      	it	eq
 8006ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	6010      	str	r0, [r2, #0]
 8006cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cb4:	f380 8811 	msr	BASEPRI, r0
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f7fe ffb6 	bl	8005c30 <vTaskSwitchContext>
 8006cc4:	f04f 0000 	mov.w	r0, #0
 8006cc8:	f380 8811 	msr	BASEPRI, r0
 8006ccc:	bc09      	pop	{r0, r3}
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd6:	f01e 0f10 	tst.w	lr, #16
 8006cda:	bf08      	it	eq
 8006cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ce0:	f380 8809 	msr	PSP, r0
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	20000c4c 	.word	0x20000c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d12:	f7fe fed3 	bl	8005abc <xTaskIncrementTick>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <xPortSysTickHandler+0x40>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <vPortSetupTimerInterrupt+0x38>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <vPortSetupTimerInterrupt+0x3c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <vPortSetupTimerInterrupt+0x40>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <vPortSetupTimerInterrupt+0x44>)
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e010 	.word	0xe000e010
 8006d74:	e000e018 	.word	0xe000e018
 8006d78:	20000004 	.word	0x20000004
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	e000e014 	.word	0xe000e014

08006d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d94 <vPortEnableVFP+0x10>
 8006d88:	6801      	ldr	r1, [r0, #0]
 8006d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d8e:	6001      	str	r1, [r0, #0]
 8006d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d92:	bf00      	nop
 8006d94:	e000ed88 	.word	0xe000ed88

08006d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d9e:	f3ef 8305 	mrs	r3, IPSR
 8006da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d914      	bls.n	8006dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <vPortValidateInterruptPriority+0x70>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006db4:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <vPortValidateInterruptPriority+0x74>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	7afa      	ldrb	r2, [r7, #11]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d20a      	bcs.n	8006dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	607b      	str	r3, [r7, #4]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <vPortValidateInterruptPriority+0x78>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <vPortValidateInterruptPriority+0x7c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d90a      	bls.n	8006dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	603b      	str	r3, [r7, #0]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <vPortValidateInterruptPriority+0x60>
	}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	e000e3f0 	.word	0xe000e3f0
 8006e0c:	20001278 	.word	0x20001278
 8006e10:	e000ed0c 	.word	0xe000ed0c
 8006e14:	2000127c 	.word	0x2000127c

08006e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e24:	f7fe fd8e 	bl	8005944 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e28:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <pvPortMalloc+0x180>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e30:	f000 f920 	bl	8007074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e34:	4b59      	ldr	r3, [pc, #356]	; (8006f9c <pvPortMalloc+0x184>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8093 	bne.w	8006f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01d      	beq.n	8006e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e48:	2208      	movs	r2, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d014      	beq.n	8006e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f023 0307 	bic.w	r3, r3, #7
 8006e60:	3308      	adds	r3, #8
 8006e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <pvPortMalloc+0x6c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d06e      	beq.n	8006f68 <pvPortMalloc+0x150>
 8006e8a:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <pvPortMalloc+0x188>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d869      	bhi.n	8006f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e94:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <pvPortMalloc+0x18c>)
 8006e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e98:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <pvPortMalloc+0x18c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e9e:	e004      	b.n	8006eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d903      	bls.n	8006ebc <pvPortMalloc+0xa4>
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f1      	bne.n	8006ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ebc:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <pvPortMalloc+0x180>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d050      	beq.n	8006f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	4413      	add	r3, r2
 8006ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d91f      	bls.n	8006f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <pvPortMalloc+0xf8>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	613b      	str	r3, [r7, #16]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f22:	69b8      	ldr	r0, [r7, #24]
 8006f24:	f000 f908 	bl	8007138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f36:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <pvPortMalloc+0x190>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d203      	bcs.n	8006f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <pvPortMalloc+0x188>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <pvPortMalloc+0x190>)
 8006f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <pvPortMalloc+0x184>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <pvPortMalloc+0x194>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <pvPortMalloc+0x194>)
 8006f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f68:	f7fe fcfa 	bl	8005960 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <pvPortMalloc+0x174>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <pvPortMalloc+0x172>
	return pvReturn;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	; 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20001e88 	.word	0x20001e88
 8006f9c:	20001e9c 	.word	0x20001e9c
 8006fa0:	20001e8c 	.word	0x20001e8c
 8006fa4:	20001e80 	.word	0x20001e80
 8006fa8:	20001e90 	.word	0x20001e90
 8006fac:	20001e94 	.word	0x20001e94

08006fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d04d      	beq.n	800705e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	4b24      	ldr	r3, [pc, #144]	; (8007068 <vPortFree+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <vPortFree+0x44>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	60fb      	str	r3, [r7, #12]
}
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <vPortFree+0x62>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60bb      	str	r3, [r7, #8]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <vPortFree+0xb8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01e      	beq.n	800705e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11a      	bne.n	800705e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <vPortFree+0xb8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007038:	f7fe fc84 	bl	8005944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <vPortFree+0xbc>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <vPortFree+0xbc>)
 8007048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f000 f874 	bl	8007138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <vPortFree+0xc0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	4a06      	ldr	r2, [pc, #24]	; (8007070 <vPortFree+0xc0>)
 8007058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800705a:	f7fe fc81 	bl	8005960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800705e:	bf00      	nop
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20001e9c 	.word	0x20001e9c
 800706c:	20001e8c 	.word	0x20001e8c
 8007070:	20001e98 	.word	0x20001e98

08007074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800707a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800707e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007080:	4b27      	ldr	r3, [pc, #156]	; (8007120 <prvHeapInit+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3307      	adds	r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <prvHeapInit+0xac>)
 80070a4:	4413      	add	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <prvHeapInit+0xb0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <prvHeapInit+0xb0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070c0:	2208      	movs	r2, #8
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <prvHeapInit+0xb4>)
 80070d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <prvHeapInit+0xb4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <prvHeapInit+0xb4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <prvHeapInit+0xb4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <prvHeapInit+0xb8>)
 8007102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <prvHeapInit+0xbc>)
 800710a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <prvHeapInit+0xc0>)
 800710e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20001280 	.word	0x20001280
 8007124:	20001e80 	.word	0x20001e80
 8007128:	20001e88 	.word	0x20001e88
 800712c:	20001e90 	.word	0x20001e90
 8007130:	20001e8c 	.word	0x20001e8c
 8007134:	20001e9c 	.word	0x20001e9c

08007138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007140:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <prvInsertBlockIntoFreeList+0xac>)
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e002      	b.n	800714c <prvInsertBlockIntoFreeList+0x14>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d8f7      	bhi.n	8007146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d108      	bne.n	800717a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d118      	bne.n	80071c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d00d      	beq.n	80071b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e008      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <prvInsertBlockIntoFreeList+0xb0>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e003      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d002      	beq.n	80071d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20001e80 	.word	0x20001e80
 80071e8:	20001e88 	.word	0x20001e88

080071ec <__assert_func>:
 80071ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ee:	4614      	mov	r4, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <__assert_func+0x2c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4605      	mov	r5, r0
 80071f8:	68d8      	ldr	r0, [r3, #12]
 80071fa:	b14c      	cbz	r4, 8007210 <__assert_func+0x24>
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <__assert_func+0x30>)
 80071fe:	9100      	str	r1, [sp, #0]
 8007200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007204:	4906      	ldr	r1, [pc, #24]	; (8007220 <__assert_func+0x34>)
 8007206:	462b      	mov	r3, r5
 8007208:	f000 f8ea 	bl	80073e0 <fiprintf>
 800720c:	f000 fe6a 	bl	8007ee4 <abort>
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <__assert_func+0x38>)
 8007212:	461c      	mov	r4, r3
 8007214:	e7f3      	b.n	80071fe <__assert_func+0x12>
 8007216:	bf00      	nop
 8007218:	20000014 	.word	0x20000014
 800721c:	080084bc 	.word	0x080084bc
 8007220:	080084c9 	.word	0x080084c9
 8007224:	080084f7 	.word	0x080084f7

08007228 <__errno>:
 8007228:	4b01      	ldr	r3, [pc, #4]	; (8007230 <__errno+0x8>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000014 	.word	0x20000014

08007234 <std>:
 8007234:	2300      	movs	r3, #0
 8007236:	b510      	push	{r4, lr}
 8007238:	4604      	mov	r4, r0
 800723a:	e9c0 3300 	strd	r3, r3, [r0]
 800723e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007242:	6083      	str	r3, [r0, #8]
 8007244:	8181      	strh	r1, [r0, #12]
 8007246:	6643      	str	r3, [r0, #100]	; 0x64
 8007248:	81c2      	strh	r2, [r0, #14]
 800724a:	6183      	str	r3, [r0, #24]
 800724c:	4619      	mov	r1, r3
 800724e:	2208      	movs	r2, #8
 8007250:	305c      	adds	r0, #92	; 0x5c
 8007252:	f000 f92c 	bl	80074ae <memset>
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <std+0x38>)
 8007258:	6263      	str	r3, [r4, #36]	; 0x24
 800725a:	4b05      	ldr	r3, [pc, #20]	; (8007270 <std+0x3c>)
 800725c:	62a3      	str	r3, [r4, #40]	; 0x28
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <std+0x40>)
 8007260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <std+0x44>)
 8007264:	6224      	str	r4, [r4, #32]
 8007266:	6323      	str	r3, [r4, #48]	; 0x30
 8007268:	bd10      	pop	{r4, pc}
 800726a:	bf00      	nop
 800726c:	08007cb9 	.word	0x08007cb9
 8007270:	08007cdb 	.word	0x08007cdb
 8007274:	08007d13 	.word	0x08007d13
 8007278:	08007d37 	.word	0x08007d37

0800727c <_cleanup_r>:
 800727c:	4901      	ldr	r1, [pc, #4]	; (8007284 <_cleanup_r+0x8>)
 800727e:	f000 b8c1 	b.w	8007404 <_fwalk_reent>
 8007282:	bf00      	nop
 8007284:	08008021 	.word	0x08008021

08007288 <__sfmoreglue>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	2268      	movs	r2, #104	; 0x68
 800728c:	1e4d      	subs	r5, r1, #1
 800728e:	4355      	muls	r5, r2
 8007290:	460e      	mov	r6, r1
 8007292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007296:	f000 f933 	bl	8007500 <_malloc_r>
 800729a:	4604      	mov	r4, r0
 800729c:	b140      	cbz	r0, 80072b0 <__sfmoreglue+0x28>
 800729e:	2100      	movs	r1, #0
 80072a0:	e9c0 1600 	strd	r1, r6, [r0]
 80072a4:	300c      	adds	r0, #12
 80072a6:	60a0      	str	r0, [r4, #8]
 80072a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072ac:	f000 f8ff 	bl	80074ae <memset>
 80072b0:	4620      	mov	r0, r4
 80072b2:	bd70      	pop	{r4, r5, r6, pc}

080072b4 <__sfp_lock_acquire>:
 80072b4:	4801      	ldr	r0, [pc, #4]	; (80072bc <__sfp_lock_acquire+0x8>)
 80072b6:	f000 b8ea 	b.w	800748e <__retarget_lock_acquire_recursive>
 80072ba:	bf00      	nop
 80072bc:	20001ea1 	.word	0x20001ea1

080072c0 <__sfp_lock_release>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__sfp_lock_release+0x8>)
 80072c2:	f000 b8e5 	b.w	8007490 <__retarget_lock_release_recursive>
 80072c6:	bf00      	nop
 80072c8:	20001ea1 	.word	0x20001ea1

080072cc <__sinit_lock_acquire>:
 80072cc:	4801      	ldr	r0, [pc, #4]	; (80072d4 <__sinit_lock_acquire+0x8>)
 80072ce:	f000 b8de 	b.w	800748e <__retarget_lock_acquire_recursive>
 80072d2:	bf00      	nop
 80072d4:	20001ea2 	.word	0x20001ea2

080072d8 <__sinit_lock_release>:
 80072d8:	4801      	ldr	r0, [pc, #4]	; (80072e0 <__sinit_lock_release+0x8>)
 80072da:	f000 b8d9 	b.w	8007490 <__retarget_lock_release_recursive>
 80072de:	bf00      	nop
 80072e0:	20001ea2 	.word	0x20001ea2

080072e4 <__sinit>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	4604      	mov	r4, r0
 80072e8:	f7ff fff0 	bl	80072cc <__sinit_lock_acquire>
 80072ec:	69a3      	ldr	r3, [r4, #24]
 80072ee:	b11b      	cbz	r3, 80072f8 <__sinit+0x14>
 80072f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f4:	f7ff bff0 	b.w	80072d8 <__sinit_lock_release>
 80072f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072fc:	6523      	str	r3, [r4, #80]	; 0x50
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <__sinit+0x68>)
 8007300:	4a13      	ldr	r2, [pc, #76]	; (8007350 <__sinit+0x6c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	62a2      	str	r2, [r4, #40]	; 0x28
 8007306:	42a3      	cmp	r3, r4
 8007308:	bf04      	itt	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	61a3      	streq	r3, [r4, #24]
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f820 	bl	8007354 <__sfp>
 8007314:	6060      	str	r0, [r4, #4]
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f81c 	bl	8007354 <__sfp>
 800731c:	60a0      	str	r0, [r4, #8]
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f818 	bl	8007354 <__sfp>
 8007324:	2200      	movs	r2, #0
 8007326:	60e0      	str	r0, [r4, #12]
 8007328:	2104      	movs	r1, #4
 800732a:	6860      	ldr	r0, [r4, #4]
 800732c:	f7ff ff82 	bl	8007234 <std>
 8007330:	68a0      	ldr	r0, [r4, #8]
 8007332:	2201      	movs	r2, #1
 8007334:	2109      	movs	r1, #9
 8007336:	f7ff ff7d 	bl	8007234 <std>
 800733a:	68e0      	ldr	r0, [r4, #12]
 800733c:	2202      	movs	r2, #2
 800733e:	2112      	movs	r1, #18
 8007340:	f7ff ff78 	bl	8007234 <std>
 8007344:	2301      	movs	r3, #1
 8007346:	61a3      	str	r3, [r4, #24]
 8007348:	e7d2      	b.n	80072f0 <__sinit+0xc>
 800734a:	bf00      	nop
 800734c:	08008558 	.word	0x08008558
 8007350:	0800727d 	.word	0x0800727d

08007354 <__sfp>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	4607      	mov	r7, r0
 8007358:	f7ff ffac 	bl	80072b4 <__sfp_lock_acquire>
 800735c:	4b1e      	ldr	r3, [pc, #120]	; (80073d8 <__sfp+0x84>)
 800735e:	681e      	ldr	r6, [r3, #0]
 8007360:	69b3      	ldr	r3, [r6, #24]
 8007362:	b913      	cbnz	r3, 800736a <__sfp+0x16>
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff ffbd 	bl	80072e4 <__sinit>
 800736a:	3648      	adds	r6, #72	; 0x48
 800736c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007370:	3b01      	subs	r3, #1
 8007372:	d503      	bpl.n	800737c <__sfp+0x28>
 8007374:	6833      	ldr	r3, [r6, #0]
 8007376:	b30b      	cbz	r3, 80073bc <__sfp+0x68>
 8007378:	6836      	ldr	r6, [r6, #0]
 800737a:	e7f7      	b.n	800736c <__sfp+0x18>
 800737c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007380:	b9d5      	cbnz	r5, 80073b8 <__sfp+0x64>
 8007382:	4b16      	ldr	r3, [pc, #88]	; (80073dc <__sfp+0x88>)
 8007384:	60e3      	str	r3, [r4, #12]
 8007386:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800738a:	6665      	str	r5, [r4, #100]	; 0x64
 800738c:	f000 f87e 	bl	800748c <__retarget_lock_init_recursive>
 8007390:	f7ff ff96 	bl	80072c0 <__sfp_lock_release>
 8007394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800739c:	6025      	str	r5, [r4, #0]
 800739e:	61a5      	str	r5, [r4, #24]
 80073a0:	2208      	movs	r2, #8
 80073a2:	4629      	mov	r1, r5
 80073a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073a8:	f000 f881 	bl	80074ae <memset>
 80073ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073b4:	4620      	mov	r0, r4
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b8:	3468      	adds	r4, #104	; 0x68
 80073ba:	e7d9      	b.n	8007370 <__sfp+0x1c>
 80073bc:	2104      	movs	r1, #4
 80073be:	4638      	mov	r0, r7
 80073c0:	f7ff ff62 	bl	8007288 <__sfmoreglue>
 80073c4:	4604      	mov	r4, r0
 80073c6:	6030      	str	r0, [r6, #0]
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d1d5      	bne.n	8007378 <__sfp+0x24>
 80073cc:	f7ff ff78 	bl	80072c0 <__sfp_lock_release>
 80073d0:	230c      	movs	r3, #12
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	e7ee      	b.n	80073b4 <__sfp+0x60>
 80073d6:	bf00      	nop
 80073d8:	08008558 	.word	0x08008558
 80073dc:	ffff0001 	.word	0xffff0001

080073e0 <fiprintf>:
 80073e0:	b40e      	push	{r1, r2, r3}
 80073e2:	b503      	push	{r0, r1, lr}
 80073e4:	4601      	mov	r1, r0
 80073e6:	ab03      	add	r3, sp, #12
 80073e8:	4805      	ldr	r0, [pc, #20]	; (8007400 <fiprintf+0x20>)
 80073ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	f000 f923 	bl	800763c <_vfiprintf_r>
 80073f6:	b002      	add	sp, #8
 80073f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr
 8007400:	20000014 	.word	0x20000014

08007404 <_fwalk_reent>:
 8007404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007408:	4606      	mov	r6, r0
 800740a:	4688      	mov	r8, r1
 800740c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007410:	2700      	movs	r7, #0
 8007412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007416:	f1b9 0901 	subs.w	r9, r9, #1
 800741a:	d505      	bpl.n	8007428 <_fwalk_reent+0x24>
 800741c:	6824      	ldr	r4, [r4, #0]
 800741e:	2c00      	cmp	r4, #0
 8007420:	d1f7      	bne.n	8007412 <_fwalk_reent+0xe>
 8007422:	4638      	mov	r0, r7
 8007424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007428:	89ab      	ldrh	r3, [r5, #12]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d907      	bls.n	800743e <_fwalk_reent+0x3a>
 800742e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007432:	3301      	adds	r3, #1
 8007434:	d003      	beq.n	800743e <_fwalk_reent+0x3a>
 8007436:	4629      	mov	r1, r5
 8007438:	4630      	mov	r0, r6
 800743a:	47c0      	blx	r8
 800743c:	4307      	orrs	r7, r0
 800743e:	3568      	adds	r5, #104	; 0x68
 8007440:	e7e9      	b.n	8007416 <_fwalk_reent+0x12>
	...

08007444 <__libc_init_array>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	4d0d      	ldr	r5, [pc, #52]	; (800747c <__libc_init_array+0x38>)
 8007448:	4c0d      	ldr	r4, [pc, #52]	; (8007480 <__libc_init_array+0x3c>)
 800744a:	1b64      	subs	r4, r4, r5
 800744c:	10a4      	asrs	r4, r4, #2
 800744e:	2600      	movs	r6, #0
 8007450:	42a6      	cmp	r6, r4
 8007452:	d109      	bne.n	8007468 <__libc_init_array+0x24>
 8007454:	4d0b      	ldr	r5, [pc, #44]	; (8007484 <__libc_init_array+0x40>)
 8007456:	4c0c      	ldr	r4, [pc, #48]	; (8007488 <__libc_init_array+0x44>)
 8007458:	f000 ff66 	bl	8008328 <_init>
 800745c:	1b64      	subs	r4, r4, r5
 800745e:	10a4      	asrs	r4, r4, #2
 8007460:	2600      	movs	r6, #0
 8007462:	42a6      	cmp	r6, r4
 8007464:	d105      	bne.n	8007472 <__libc_init_array+0x2e>
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	f855 3b04 	ldr.w	r3, [r5], #4
 800746c:	4798      	blx	r3
 800746e:	3601      	adds	r6, #1
 8007470:	e7ee      	b.n	8007450 <__libc_init_array+0xc>
 8007472:	f855 3b04 	ldr.w	r3, [r5], #4
 8007476:	4798      	blx	r3
 8007478:	3601      	adds	r6, #1
 800747a:	e7f2      	b.n	8007462 <__libc_init_array+0x1e>
 800747c:	08008598 	.word	0x08008598
 8007480:	08008598 	.word	0x08008598
 8007484:	08008598 	.word	0x08008598
 8007488:	0800859c 	.word	0x0800859c

0800748c <__retarget_lock_init_recursive>:
 800748c:	4770      	bx	lr

0800748e <__retarget_lock_acquire_recursive>:
 800748e:	4770      	bx	lr

08007490 <__retarget_lock_release_recursive>:
 8007490:	4770      	bx	lr

08007492 <memcpy>:
 8007492:	440a      	add	r2, r1
 8007494:	4291      	cmp	r1, r2
 8007496:	f100 33ff 	add.w	r3, r0, #4294967295
 800749a:	d100      	bne.n	800749e <memcpy+0xc>
 800749c:	4770      	bx	lr
 800749e:	b510      	push	{r4, lr}
 80074a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074a8:	4291      	cmp	r1, r2
 80074aa:	d1f9      	bne.n	80074a0 <memcpy+0xe>
 80074ac:	bd10      	pop	{r4, pc}

080074ae <memset>:
 80074ae:	4402      	add	r2, r0
 80074b0:	4603      	mov	r3, r0
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d100      	bne.n	80074b8 <memset+0xa>
 80074b6:	4770      	bx	lr
 80074b8:	f803 1b01 	strb.w	r1, [r3], #1
 80074bc:	e7f9      	b.n	80074b2 <memset+0x4>
	...

080074c0 <sbrk_aligned>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4e0e      	ldr	r6, [pc, #56]	; (80074fc <sbrk_aligned+0x3c>)
 80074c4:	460c      	mov	r4, r1
 80074c6:	6831      	ldr	r1, [r6, #0]
 80074c8:	4605      	mov	r5, r0
 80074ca:	b911      	cbnz	r1, 80074d2 <sbrk_aligned+0x12>
 80074cc:	f000 fbe4 	bl	8007c98 <_sbrk_r>
 80074d0:	6030      	str	r0, [r6, #0]
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 fbdf 	bl	8007c98 <_sbrk_r>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d00a      	beq.n	80074f4 <sbrk_aligned+0x34>
 80074de:	1cc4      	adds	r4, r0, #3
 80074e0:	f024 0403 	bic.w	r4, r4, #3
 80074e4:	42a0      	cmp	r0, r4
 80074e6:	d007      	beq.n	80074f8 <sbrk_aligned+0x38>
 80074e8:	1a21      	subs	r1, r4, r0
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 fbd4 	bl	8007c98 <_sbrk_r>
 80074f0:	3001      	adds	r0, #1
 80074f2:	d101      	bne.n	80074f8 <sbrk_aligned+0x38>
 80074f4:	f04f 34ff 	mov.w	r4, #4294967295
 80074f8:	4620      	mov	r0, r4
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	20001ea8 	.word	0x20001ea8

08007500 <_malloc_r>:
 8007500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007504:	1ccd      	adds	r5, r1, #3
 8007506:	f025 0503 	bic.w	r5, r5, #3
 800750a:	3508      	adds	r5, #8
 800750c:	2d0c      	cmp	r5, #12
 800750e:	bf38      	it	cc
 8007510:	250c      	movcc	r5, #12
 8007512:	2d00      	cmp	r5, #0
 8007514:	4607      	mov	r7, r0
 8007516:	db01      	blt.n	800751c <_malloc_r+0x1c>
 8007518:	42a9      	cmp	r1, r5
 800751a:	d905      	bls.n	8007528 <_malloc_r+0x28>
 800751c:	230c      	movs	r3, #12
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	2600      	movs	r6, #0
 8007522:	4630      	mov	r0, r6
 8007524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007528:	4e2e      	ldr	r6, [pc, #184]	; (80075e4 <_malloc_r+0xe4>)
 800752a:	f000 fe2d 	bl	8008188 <__malloc_lock>
 800752e:	6833      	ldr	r3, [r6, #0]
 8007530:	461c      	mov	r4, r3
 8007532:	bb34      	cbnz	r4, 8007582 <_malloc_r+0x82>
 8007534:	4629      	mov	r1, r5
 8007536:	4638      	mov	r0, r7
 8007538:	f7ff ffc2 	bl	80074c0 <sbrk_aligned>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	4604      	mov	r4, r0
 8007540:	d14d      	bne.n	80075de <_malloc_r+0xde>
 8007542:	6834      	ldr	r4, [r6, #0]
 8007544:	4626      	mov	r6, r4
 8007546:	2e00      	cmp	r6, #0
 8007548:	d140      	bne.n	80075cc <_malloc_r+0xcc>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	4631      	mov	r1, r6
 800754e:	4638      	mov	r0, r7
 8007550:	eb04 0803 	add.w	r8, r4, r3
 8007554:	f000 fba0 	bl	8007c98 <_sbrk_r>
 8007558:	4580      	cmp	r8, r0
 800755a:	d13a      	bne.n	80075d2 <_malloc_r+0xd2>
 800755c:	6821      	ldr	r1, [r4, #0]
 800755e:	3503      	adds	r5, #3
 8007560:	1a6d      	subs	r5, r5, r1
 8007562:	f025 0503 	bic.w	r5, r5, #3
 8007566:	3508      	adds	r5, #8
 8007568:	2d0c      	cmp	r5, #12
 800756a:	bf38      	it	cc
 800756c:	250c      	movcc	r5, #12
 800756e:	4629      	mov	r1, r5
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff ffa5 	bl	80074c0 <sbrk_aligned>
 8007576:	3001      	adds	r0, #1
 8007578:	d02b      	beq.n	80075d2 <_malloc_r+0xd2>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	442b      	add	r3, r5
 800757e:	6023      	str	r3, [r4, #0]
 8007580:	e00e      	b.n	80075a0 <_malloc_r+0xa0>
 8007582:	6822      	ldr	r2, [r4, #0]
 8007584:	1b52      	subs	r2, r2, r5
 8007586:	d41e      	bmi.n	80075c6 <_malloc_r+0xc6>
 8007588:	2a0b      	cmp	r2, #11
 800758a:	d916      	bls.n	80075ba <_malloc_r+0xba>
 800758c:	1961      	adds	r1, r4, r5
 800758e:	42a3      	cmp	r3, r4
 8007590:	6025      	str	r5, [r4, #0]
 8007592:	bf18      	it	ne
 8007594:	6059      	strne	r1, [r3, #4]
 8007596:	6863      	ldr	r3, [r4, #4]
 8007598:	bf08      	it	eq
 800759a:	6031      	streq	r1, [r6, #0]
 800759c:	5162      	str	r2, [r4, r5]
 800759e:	604b      	str	r3, [r1, #4]
 80075a0:	4638      	mov	r0, r7
 80075a2:	f104 060b 	add.w	r6, r4, #11
 80075a6:	f000 fdf5 	bl	8008194 <__malloc_unlock>
 80075aa:	f026 0607 	bic.w	r6, r6, #7
 80075ae:	1d23      	adds	r3, r4, #4
 80075b0:	1af2      	subs	r2, r6, r3
 80075b2:	d0b6      	beq.n	8007522 <_malloc_r+0x22>
 80075b4:	1b9b      	subs	r3, r3, r6
 80075b6:	50a3      	str	r3, [r4, r2]
 80075b8:	e7b3      	b.n	8007522 <_malloc_r+0x22>
 80075ba:	6862      	ldr	r2, [r4, #4]
 80075bc:	42a3      	cmp	r3, r4
 80075be:	bf0c      	ite	eq
 80075c0:	6032      	streq	r2, [r6, #0]
 80075c2:	605a      	strne	r2, [r3, #4]
 80075c4:	e7ec      	b.n	80075a0 <_malloc_r+0xa0>
 80075c6:	4623      	mov	r3, r4
 80075c8:	6864      	ldr	r4, [r4, #4]
 80075ca:	e7b2      	b.n	8007532 <_malloc_r+0x32>
 80075cc:	4634      	mov	r4, r6
 80075ce:	6876      	ldr	r6, [r6, #4]
 80075d0:	e7b9      	b.n	8007546 <_malloc_r+0x46>
 80075d2:	230c      	movs	r3, #12
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	4638      	mov	r0, r7
 80075d8:	f000 fddc 	bl	8008194 <__malloc_unlock>
 80075dc:	e7a1      	b.n	8007522 <_malloc_r+0x22>
 80075de:	6025      	str	r5, [r4, #0]
 80075e0:	e7de      	b.n	80075a0 <_malloc_r+0xa0>
 80075e2:	bf00      	nop
 80075e4:	20001ea4 	.word	0x20001ea4

080075e8 <__sfputc_r>:
 80075e8:	6893      	ldr	r3, [r2, #8]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	b410      	push	{r4}
 80075f0:	6093      	str	r3, [r2, #8]
 80075f2:	da08      	bge.n	8007606 <__sfputc_r+0x1e>
 80075f4:	6994      	ldr	r4, [r2, #24]
 80075f6:	42a3      	cmp	r3, r4
 80075f8:	db01      	blt.n	80075fe <__sfputc_r+0x16>
 80075fa:	290a      	cmp	r1, #10
 80075fc:	d103      	bne.n	8007606 <__sfputc_r+0x1e>
 80075fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007602:	f000 bb9d 	b.w	8007d40 <__swbuf_r>
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	1c58      	adds	r0, r3, #1
 800760a:	6010      	str	r0, [r2, #0]
 800760c:	7019      	strb	r1, [r3, #0]
 800760e:	4608      	mov	r0, r1
 8007610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007614:	4770      	bx	lr

08007616 <__sfputs_r>:
 8007616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007618:	4606      	mov	r6, r0
 800761a:	460f      	mov	r7, r1
 800761c:	4614      	mov	r4, r2
 800761e:	18d5      	adds	r5, r2, r3
 8007620:	42ac      	cmp	r4, r5
 8007622:	d101      	bne.n	8007628 <__sfputs_r+0x12>
 8007624:	2000      	movs	r0, #0
 8007626:	e007      	b.n	8007638 <__sfputs_r+0x22>
 8007628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762c:	463a      	mov	r2, r7
 800762e:	4630      	mov	r0, r6
 8007630:	f7ff ffda 	bl	80075e8 <__sfputc_r>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d1f3      	bne.n	8007620 <__sfputs_r+0xa>
 8007638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800763c <_vfiprintf_r>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	460d      	mov	r5, r1
 8007642:	b09d      	sub	sp, #116	; 0x74
 8007644:	4614      	mov	r4, r2
 8007646:	4698      	mov	r8, r3
 8007648:	4606      	mov	r6, r0
 800764a:	b118      	cbz	r0, 8007654 <_vfiprintf_r+0x18>
 800764c:	6983      	ldr	r3, [r0, #24]
 800764e:	b90b      	cbnz	r3, 8007654 <_vfiprintf_r+0x18>
 8007650:	f7ff fe48 	bl	80072e4 <__sinit>
 8007654:	4b89      	ldr	r3, [pc, #548]	; (800787c <_vfiprintf_r+0x240>)
 8007656:	429d      	cmp	r5, r3
 8007658:	d11b      	bne.n	8007692 <_vfiprintf_r+0x56>
 800765a:	6875      	ldr	r5, [r6, #4]
 800765c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800765e:	07d9      	lsls	r1, r3, #31
 8007660:	d405      	bmi.n	800766e <_vfiprintf_r+0x32>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	059a      	lsls	r2, r3, #22
 8007666:	d402      	bmi.n	800766e <_vfiprintf_r+0x32>
 8007668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800766a:	f7ff ff10 	bl	800748e <__retarget_lock_acquire_recursive>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	071b      	lsls	r3, r3, #28
 8007672:	d501      	bpl.n	8007678 <_vfiprintf_r+0x3c>
 8007674:	692b      	ldr	r3, [r5, #16]
 8007676:	b9eb      	cbnz	r3, 80076b4 <_vfiprintf_r+0x78>
 8007678:	4629      	mov	r1, r5
 800767a:	4630      	mov	r0, r6
 800767c:	f000 fbc4 	bl	8007e08 <__swsetup_r>
 8007680:	b1c0      	cbz	r0, 80076b4 <_vfiprintf_r+0x78>
 8007682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007684:	07dc      	lsls	r4, r3, #31
 8007686:	d50e      	bpl.n	80076a6 <_vfiprintf_r+0x6a>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b01d      	add	sp, #116	; 0x74
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	4b7b      	ldr	r3, [pc, #492]	; (8007880 <_vfiprintf_r+0x244>)
 8007694:	429d      	cmp	r5, r3
 8007696:	d101      	bne.n	800769c <_vfiprintf_r+0x60>
 8007698:	68b5      	ldr	r5, [r6, #8]
 800769a:	e7df      	b.n	800765c <_vfiprintf_r+0x20>
 800769c:	4b79      	ldr	r3, [pc, #484]	; (8007884 <_vfiprintf_r+0x248>)
 800769e:	429d      	cmp	r5, r3
 80076a0:	bf08      	it	eq
 80076a2:	68f5      	ldreq	r5, [r6, #12]
 80076a4:	e7da      	b.n	800765c <_vfiprintf_r+0x20>
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	0598      	lsls	r0, r3, #22
 80076aa:	d4ed      	bmi.n	8007688 <_vfiprintf_r+0x4c>
 80076ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ae:	f7ff feef 	bl	8007490 <__retarget_lock_release_recursive>
 80076b2:	e7e9      	b.n	8007688 <_vfiprintf_r+0x4c>
 80076b4:	2300      	movs	r3, #0
 80076b6:	9309      	str	r3, [sp, #36]	; 0x24
 80076b8:	2320      	movs	r3, #32
 80076ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076be:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c2:	2330      	movs	r3, #48	; 0x30
 80076c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007888 <_vfiprintf_r+0x24c>
 80076c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076cc:	f04f 0901 	mov.w	r9, #1
 80076d0:	4623      	mov	r3, r4
 80076d2:	469a      	mov	sl, r3
 80076d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d8:	b10a      	cbz	r2, 80076de <_vfiprintf_r+0xa2>
 80076da:	2a25      	cmp	r2, #37	; 0x25
 80076dc:	d1f9      	bne.n	80076d2 <_vfiprintf_r+0x96>
 80076de:	ebba 0b04 	subs.w	fp, sl, r4
 80076e2:	d00b      	beq.n	80076fc <_vfiprintf_r+0xc0>
 80076e4:	465b      	mov	r3, fp
 80076e6:	4622      	mov	r2, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ff93 	bl	8007616 <__sfputs_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	f000 80aa 	beq.w	800784a <_vfiprintf_r+0x20e>
 80076f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f8:	445a      	add	r2, fp
 80076fa:	9209      	str	r2, [sp, #36]	; 0x24
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80a2 	beq.w	800784a <_vfiprintf_r+0x20e>
 8007706:	2300      	movs	r3, #0
 8007708:	f04f 32ff 	mov.w	r2, #4294967295
 800770c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007710:	f10a 0a01 	add.w	sl, sl, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	9307      	str	r3, [sp, #28]
 8007718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800771c:	931a      	str	r3, [sp, #104]	; 0x68
 800771e:	4654      	mov	r4, sl
 8007720:	2205      	movs	r2, #5
 8007722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007726:	4858      	ldr	r0, [pc, #352]	; (8007888 <_vfiprintf_r+0x24c>)
 8007728:	f7f8 fd2a 	bl	8000180 <memchr>
 800772c:	9a04      	ldr	r2, [sp, #16]
 800772e:	b9d8      	cbnz	r0, 8007768 <_vfiprintf_r+0x12c>
 8007730:	06d1      	lsls	r1, r2, #27
 8007732:	bf44      	itt	mi
 8007734:	2320      	movmi	r3, #32
 8007736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773a:	0713      	lsls	r3, r2, #28
 800773c:	bf44      	itt	mi
 800773e:	232b      	movmi	r3, #43	; 0x2b
 8007740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b2a      	cmp	r3, #42	; 0x2a
 800774a:	d015      	beq.n	8007778 <_vfiprintf_r+0x13c>
 800774c:	9a07      	ldr	r2, [sp, #28]
 800774e:	4654      	mov	r4, sl
 8007750:	2000      	movs	r0, #0
 8007752:	f04f 0c0a 	mov.w	ip, #10
 8007756:	4621      	mov	r1, r4
 8007758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775c:	3b30      	subs	r3, #48	; 0x30
 800775e:	2b09      	cmp	r3, #9
 8007760:	d94e      	bls.n	8007800 <_vfiprintf_r+0x1c4>
 8007762:	b1b0      	cbz	r0, 8007792 <_vfiprintf_r+0x156>
 8007764:	9207      	str	r2, [sp, #28]
 8007766:	e014      	b.n	8007792 <_vfiprintf_r+0x156>
 8007768:	eba0 0308 	sub.w	r3, r0, r8
 800776c:	fa09 f303 	lsl.w	r3, r9, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	46a2      	mov	sl, r4
 8007776:	e7d2      	b.n	800771e <_vfiprintf_r+0xe2>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	1d19      	adds	r1, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	9103      	str	r1, [sp, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfbb      	ittet	lt
 8007784:	425b      	neglt	r3, r3
 8007786:	f042 0202 	orrlt.w	r2, r2, #2
 800778a:	9307      	strge	r3, [sp, #28]
 800778c:	9307      	strlt	r3, [sp, #28]
 800778e:	bfb8      	it	lt
 8007790:	9204      	strlt	r2, [sp, #16]
 8007792:	7823      	ldrb	r3, [r4, #0]
 8007794:	2b2e      	cmp	r3, #46	; 0x2e
 8007796:	d10c      	bne.n	80077b2 <_vfiprintf_r+0x176>
 8007798:	7863      	ldrb	r3, [r4, #1]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d135      	bne.n	800780a <_vfiprintf_r+0x1ce>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	1d1a      	adds	r2, r3, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfb8      	it	lt
 80077aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ae:	3402      	adds	r4, #2
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007898 <_vfiprintf_r+0x25c>
 80077b6:	7821      	ldrb	r1, [r4, #0]
 80077b8:	2203      	movs	r2, #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	f7f8 fce0 	bl	8000180 <memchr>
 80077c0:	b140      	cbz	r0, 80077d4 <_vfiprintf_r+0x198>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	eba0 000a 	sub.w	r0, r0, sl
 80077c8:	fa03 f000 	lsl.w	r0, r3, r0
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	4303      	orrs	r3, r0
 80077d0:	3401      	adds	r4, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	482c      	ldr	r0, [pc, #176]	; (800788c <_vfiprintf_r+0x250>)
 80077da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077de:	2206      	movs	r2, #6
 80077e0:	f7f8 fcce 	bl	8000180 <memchr>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d03f      	beq.n	8007868 <_vfiprintf_r+0x22c>
 80077e8:	4b29      	ldr	r3, [pc, #164]	; (8007890 <_vfiprintf_r+0x254>)
 80077ea:	bb1b      	cbnz	r3, 8007834 <_vfiprintf_r+0x1f8>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	3307      	adds	r3, #7
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	9303      	str	r3, [sp, #12]
 80077f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fa:	443b      	add	r3, r7
 80077fc:	9309      	str	r3, [sp, #36]	; 0x24
 80077fe:	e767      	b.n	80076d0 <_vfiprintf_r+0x94>
 8007800:	fb0c 3202 	mla	r2, ip, r2, r3
 8007804:	460c      	mov	r4, r1
 8007806:	2001      	movs	r0, #1
 8007808:	e7a5      	b.n	8007756 <_vfiprintf_r+0x11a>
 800780a:	2300      	movs	r3, #0
 800780c:	3401      	adds	r4, #1
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	4619      	mov	r1, r3
 8007812:	f04f 0c0a 	mov.w	ip, #10
 8007816:	4620      	mov	r0, r4
 8007818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781c:	3a30      	subs	r2, #48	; 0x30
 800781e:	2a09      	cmp	r2, #9
 8007820:	d903      	bls.n	800782a <_vfiprintf_r+0x1ee>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0c5      	beq.n	80077b2 <_vfiprintf_r+0x176>
 8007826:	9105      	str	r1, [sp, #20]
 8007828:	e7c3      	b.n	80077b2 <_vfiprintf_r+0x176>
 800782a:	fb0c 2101 	mla	r1, ip, r1, r2
 800782e:	4604      	mov	r4, r0
 8007830:	2301      	movs	r3, #1
 8007832:	e7f0      	b.n	8007816 <_vfiprintf_r+0x1da>
 8007834:	ab03      	add	r3, sp, #12
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	462a      	mov	r2, r5
 800783a:	4b16      	ldr	r3, [pc, #88]	; (8007894 <_vfiprintf_r+0x258>)
 800783c:	a904      	add	r1, sp, #16
 800783e:	4630      	mov	r0, r6
 8007840:	f3af 8000 	nop.w
 8007844:	4607      	mov	r7, r0
 8007846:	1c78      	adds	r0, r7, #1
 8007848:	d1d6      	bne.n	80077f8 <_vfiprintf_r+0x1bc>
 800784a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800784c:	07d9      	lsls	r1, r3, #31
 800784e:	d405      	bmi.n	800785c <_vfiprintf_r+0x220>
 8007850:	89ab      	ldrh	r3, [r5, #12]
 8007852:	059a      	lsls	r2, r3, #22
 8007854:	d402      	bmi.n	800785c <_vfiprintf_r+0x220>
 8007856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007858:	f7ff fe1a 	bl	8007490 <__retarget_lock_release_recursive>
 800785c:	89ab      	ldrh	r3, [r5, #12]
 800785e:	065b      	lsls	r3, r3, #25
 8007860:	f53f af12 	bmi.w	8007688 <_vfiprintf_r+0x4c>
 8007864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007866:	e711      	b.n	800768c <_vfiprintf_r+0x50>
 8007868:	ab03      	add	r3, sp, #12
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	462a      	mov	r2, r5
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <_vfiprintf_r+0x258>)
 8007870:	a904      	add	r1, sp, #16
 8007872:	4630      	mov	r0, r6
 8007874:	f000 f880 	bl	8007978 <_printf_i>
 8007878:	e7e4      	b.n	8007844 <_vfiprintf_r+0x208>
 800787a:	bf00      	nop
 800787c:	08008518 	.word	0x08008518
 8007880:	08008538 	.word	0x08008538
 8007884:	080084f8 	.word	0x080084f8
 8007888:	0800855c 	.word	0x0800855c
 800788c:	08008566 	.word	0x08008566
 8007890:	00000000 	.word	0x00000000
 8007894:	08007617 	.word	0x08007617
 8007898:	08008562 	.word	0x08008562

0800789c <_printf_common>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	4616      	mov	r6, r2
 80078a2:	4699      	mov	r9, r3
 80078a4:	688a      	ldr	r2, [r1, #8]
 80078a6:	690b      	ldr	r3, [r1, #16]
 80078a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ac:	4293      	cmp	r3, r2
 80078ae:	bfb8      	it	lt
 80078b0:	4613      	movlt	r3, r2
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b8:	4607      	mov	r7, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b10a      	cbz	r2, 80078c2 <_printf_common+0x26>
 80078be:	3301      	adds	r3, #1
 80078c0:	6033      	str	r3, [r6, #0]
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	0699      	lsls	r1, r3, #26
 80078c6:	bf42      	ittt	mi
 80078c8:	6833      	ldrmi	r3, [r6, #0]
 80078ca:	3302      	addmi	r3, #2
 80078cc:	6033      	strmi	r3, [r6, #0]
 80078ce:	6825      	ldr	r5, [r4, #0]
 80078d0:	f015 0506 	ands.w	r5, r5, #6
 80078d4:	d106      	bne.n	80078e4 <_printf_common+0x48>
 80078d6:	f104 0a19 	add.w	sl, r4, #25
 80078da:	68e3      	ldr	r3, [r4, #12]
 80078dc:	6832      	ldr	r2, [r6, #0]
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	42ab      	cmp	r3, r5
 80078e2:	dc26      	bgt.n	8007932 <_printf_common+0x96>
 80078e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e8:	1e13      	subs	r3, r2, #0
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	bf18      	it	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	0692      	lsls	r2, r2, #26
 80078f2:	d42b      	bmi.n	800794c <_printf_common+0xb0>
 80078f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f8:	4649      	mov	r1, r9
 80078fa:	4638      	mov	r0, r7
 80078fc:	47c0      	blx	r8
 80078fe:	3001      	adds	r0, #1
 8007900:	d01e      	beq.n	8007940 <_printf_common+0xa4>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	68e5      	ldr	r5, [r4, #12]
 8007906:	6832      	ldr	r2, [r6, #0]
 8007908:	f003 0306 	and.w	r3, r3, #6
 800790c:	2b04      	cmp	r3, #4
 800790e:	bf08      	it	eq
 8007910:	1aad      	subeq	r5, r5, r2
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	6922      	ldr	r2, [r4, #16]
 8007916:	bf0c      	ite	eq
 8007918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800791c:	2500      	movne	r5, #0
 800791e:	4293      	cmp	r3, r2
 8007920:	bfc4      	itt	gt
 8007922:	1a9b      	subgt	r3, r3, r2
 8007924:	18ed      	addgt	r5, r5, r3
 8007926:	2600      	movs	r6, #0
 8007928:	341a      	adds	r4, #26
 800792a:	42b5      	cmp	r5, r6
 800792c:	d11a      	bne.n	8007964 <_printf_common+0xc8>
 800792e:	2000      	movs	r0, #0
 8007930:	e008      	b.n	8007944 <_printf_common+0xa8>
 8007932:	2301      	movs	r3, #1
 8007934:	4652      	mov	r2, sl
 8007936:	4649      	mov	r1, r9
 8007938:	4638      	mov	r0, r7
 800793a:	47c0      	blx	r8
 800793c:	3001      	adds	r0, #1
 800793e:	d103      	bne.n	8007948 <_printf_common+0xac>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007948:	3501      	adds	r5, #1
 800794a:	e7c6      	b.n	80078da <_printf_common+0x3e>
 800794c:	18e1      	adds	r1, r4, r3
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	2030      	movs	r0, #48	; 0x30
 8007952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007956:	4422      	add	r2, r4
 8007958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800795c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007960:	3302      	adds	r3, #2
 8007962:	e7c7      	b.n	80078f4 <_printf_common+0x58>
 8007964:	2301      	movs	r3, #1
 8007966:	4622      	mov	r2, r4
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d0e6      	beq.n	8007940 <_printf_common+0xa4>
 8007972:	3601      	adds	r6, #1
 8007974:	e7d9      	b.n	800792a <_printf_common+0x8e>
	...

08007978 <_printf_i>:
 8007978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	7e0f      	ldrb	r7, [r1, #24]
 800797e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007980:	2f78      	cmp	r7, #120	; 0x78
 8007982:	4691      	mov	r9, r2
 8007984:	4680      	mov	r8, r0
 8007986:	460c      	mov	r4, r1
 8007988:	469a      	mov	sl, r3
 800798a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800798e:	d807      	bhi.n	80079a0 <_printf_i+0x28>
 8007990:	2f62      	cmp	r7, #98	; 0x62
 8007992:	d80a      	bhi.n	80079aa <_printf_i+0x32>
 8007994:	2f00      	cmp	r7, #0
 8007996:	f000 80d8 	beq.w	8007b4a <_printf_i+0x1d2>
 800799a:	2f58      	cmp	r7, #88	; 0x58
 800799c:	f000 80a3 	beq.w	8007ae6 <_printf_i+0x16e>
 80079a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a8:	e03a      	b.n	8007a20 <_printf_i+0xa8>
 80079aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ae:	2b15      	cmp	r3, #21
 80079b0:	d8f6      	bhi.n	80079a0 <_printf_i+0x28>
 80079b2:	a101      	add	r1, pc, #4	; (adr r1, 80079b8 <_printf_i+0x40>)
 80079b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	080079a1 	.word	0x080079a1
 80079c4:	080079a1 	.word	0x080079a1
 80079c8:	080079a1 	.word	0x080079a1
 80079cc:	080079a1 	.word	0x080079a1
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	080079a1 	.word	0x080079a1
 80079d8:	080079a1 	.word	0x080079a1
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	08007b31 	.word	0x08007b31
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007b13 	.word	0x08007b13
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b53 	.word	0x08007b53
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007b1b 	.word	0x08007b1b
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	602a      	str	r2, [r5, #0]
 8007a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0a3      	b.n	8007b6c <_printf_i+0x1f4>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	6829      	ldr	r1, [r5, #0]
 8007a28:	0606      	lsls	r6, r0, #24
 8007a2a:	f101 0304 	add.w	r3, r1, #4
 8007a2e:	d50a      	bpl.n	8007a46 <_printf_i+0xce>
 8007a30:	680e      	ldr	r6, [r1, #0]
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	2e00      	cmp	r6, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xc8>
 8007a38:	232d      	movs	r3, #45	; 0x2d
 8007a3a:	4276      	negs	r6, r6
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a40:	485e      	ldr	r0, [pc, #376]	; (8007bbc <_printf_i+0x244>)
 8007a42:	230a      	movs	r3, #10
 8007a44:	e019      	b.n	8007a7a <_printf_i+0x102>
 8007a46:	680e      	ldr	r6, [r1, #0]
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a4e:	bf18      	it	ne
 8007a50:	b236      	sxthne	r6, r6
 8007a52:	e7ef      	b.n	8007a34 <_printf_i+0xbc>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	6820      	ldr	r0, [r4, #0]
 8007a58:	1d19      	adds	r1, r3, #4
 8007a5a:	6029      	str	r1, [r5, #0]
 8007a5c:	0601      	lsls	r1, r0, #24
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0xec>
 8007a60:	681e      	ldr	r6, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0xf2>
 8007a64:	0646      	lsls	r6, r0, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0xe8>
 8007a68:	881e      	ldrh	r6, [r3, #0]
 8007a6a:	4854      	ldr	r0, [pc, #336]	; (8007bbc <_printf_i+0x244>)
 8007a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a6e:	bf0c      	ite	eq
 8007a70:	2308      	moveq	r3, #8
 8007a72:	230a      	movne	r3, #10
 8007a74:	2100      	movs	r1, #0
 8007a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a7a:	6865      	ldr	r5, [r4, #4]
 8007a7c:	60a5      	str	r5, [r4, #8]
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	bfa2      	ittt	ge
 8007a82:	6821      	ldrge	r1, [r4, #0]
 8007a84:	f021 0104 	bicge.w	r1, r1, #4
 8007a88:	6021      	strge	r1, [r4, #0]
 8007a8a:	b90e      	cbnz	r6, 8007a90 <_printf_i+0x118>
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	d04d      	beq.n	8007b2c <_printf_i+0x1b4>
 8007a90:	4615      	mov	r5, r2
 8007a92:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a96:	fb03 6711 	mls	r7, r3, r1, r6
 8007a9a:	5dc7      	ldrb	r7, [r0, r7]
 8007a9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007aa0:	4637      	mov	r7, r6
 8007aa2:	42bb      	cmp	r3, r7
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	d9f4      	bls.n	8007a92 <_printf_i+0x11a>
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d10b      	bne.n	8007ac4 <_printf_i+0x14c>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	07de      	lsls	r6, r3, #31
 8007ab0:	d508      	bpl.n	8007ac4 <_printf_i+0x14c>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	6861      	ldr	r1, [r4, #4]
 8007ab6:	4299      	cmp	r1, r3
 8007ab8:	bfde      	ittt	le
 8007aba:	2330      	movle	r3, #48	; 0x30
 8007abc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ac0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ac4:	1b52      	subs	r2, r2, r5
 8007ac6:	6122      	str	r2, [r4, #16]
 8007ac8:	f8cd a000 	str.w	sl, [sp]
 8007acc:	464b      	mov	r3, r9
 8007ace:	aa03      	add	r2, sp, #12
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	f7ff fee2 	bl	800789c <_printf_common>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d14c      	bne.n	8007b76 <_printf_i+0x1fe>
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	b004      	add	sp, #16
 8007ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae6:	4835      	ldr	r0, [pc, #212]	; (8007bbc <_printf_i+0x244>)
 8007ae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007aec:	6829      	ldr	r1, [r5, #0]
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007af4:	6029      	str	r1, [r5, #0]
 8007af6:	061d      	lsls	r5, r3, #24
 8007af8:	d514      	bpl.n	8007b24 <_printf_i+0x1ac>
 8007afa:	07df      	lsls	r7, r3, #31
 8007afc:	bf44      	itt	mi
 8007afe:	f043 0320 	orrmi.w	r3, r3, #32
 8007b02:	6023      	strmi	r3, [r4, #0]
 8007b04:	b91e      	cbnz	r6, 8007b0e <_printf_i+0x196>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	f023 0320 	bic.w	r3, r3, #32
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	2310      	movs	r3, #16
 8007b10:	e7b0      	b.n	8007a74 <_printf_i+0xfc>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f043 0320 	orr.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	2378      	movs	r3, #120	; 0x78
 8007b1c:	4828      	ldr	r0, [pc, #160]	; (8007bc0 <_printf_i+0x248>)
 8007b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b22:	e7e3      	b.n	8007aec <_printf_i+0x174>
 8007b24:	0659      	lsls	r1, r3, #25
 8007b26:	bf48      	it	mi
 8007b28:	b2b6      	uxthmi	r6, r6
 8007b2a:	e7e6      	b.n	8007afa <_printf_i+0x182>
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	e7bb      	b.n	8007aa8 <_printf_i+0x130>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	6826      	ldr	r6, [r4, #0]
 8007b34:	6961      	ldr	r1, [r4, #20]
 8007b36:	1d18      	adds	r0, r3, #4
 8007b38:	6028      	str	r0, [r5, #0]
 8007b3a:	0635      	lsls	r5, r6, #24
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0x1cc>
 8007b40:	6019      	str	r1, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0x1d2>
 8007b44:	0670      	lsls	r0, r6, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0x1c8>
 8007b48:	8019      	strh	r1, [r3, #0]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	4615      	mov	r5, r2
 8007b50:	e7ba      	b.n	8007ac8 <_printf_i+0x150>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	681d      	ldr	r5, [r3, #0]
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f7f8 fb0e 	bl	8000180 <memchr>
 8007b64:	b108      	cbz	r0, 8007b6a <_printf_i+0x1f2>
 8007b66:	1b40      	subs	r0, r0, r5
 8007b68:	6060      	str	r0, [r4, #4]
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	e7a8      	b.n	8007ac8 <_printf_i+0x150>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	462a      	mov	r2, r5
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	47d0      	blx	sl
 8007b80:	3001      	adds	r0, #1
 8007b82:	d0ab      	beq.n	8007adc <_printf_i+0x164>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	079b      	lsls	r3, r3, #30
 8007b88:	d413      	bmi.n	8007bb2 <_printf_i+0x23a>
 8007b8a:	68e0      	ldr	r0, [r4, #12]
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	bfb8      	it	lt
 8007b92:	4618      	movlt	r0, r3
 8007b94:	e7a4      	b.n	8007ae0 <_printf_i+0x168>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d09b      	beq.n	8007adc <_printf_i+0x164>
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	9903      	ldr	r1, [sp, #12]
 8007baa:	1a5b      	subs	r3, r3, r1
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dcf2      	bgt.n	8007b96 <_printf_i+0x21e>
 8007bb0:	e7eb      	b.n	8007b8a <_printf_i+0x212>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	f104 0619 	add.w	r6, r4, #25
 8007bb8:	e7f5      	b.n	8007ba6 <_printf_i+0x22e>
 8007bba:	bf00      	nop
 8007bbc:	0800856d 	.word	0x0800856d
 8007bc0:	0800857e 	.word	0x0800857e

08007bc4 <cleanup_glue>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	6809      	ldr	r1, [r1, #0]
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b109      	cbz	r1, 8007bd2 <cleanup_glue+0xe>
 8007bce:	f7ff fff9 	bl	8007bc4 <cleanup_glue>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bda:	f000 bae1 	b.w	80081a0 <_free_r>
	...

08007be0 <_reclaim_reent>:
 8007be0:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <_reclaim_reent+0xb4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4283      	cmp	r3, r0
 8007be6:	b570      	push	{r4, r5, r6, lr}
 8007be8:	4604      	mov	r4, r0
 8007bea:	d051      	beq.n	8007c90 <_reclaim_reent+0xb0>
 8007bec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007bee:	b143      	cbz	r3, 8007c02 <_reclaim_reent+0x22>
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d14a      	bne.n	8007c8c <_reclaim_reent+0xac>
 8007bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	b111      	cbz	r1, 8007c02 <_reclaim_reent+0x22>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 facf 	bl	80081a0 <_free_r>
 8007c02:	6961      	ldr	r1, [r4, #20]
 8007c04:	b111      	cbz	r1, 8007c0c <_reclaim_reent+0x2c>
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 faca 	bl	80081a0 <_free_r>
 8007c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c0e:	b111      	cbz	r1, 8007c16 <_reclaim_reent+0x36>
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fac5 	bl	80081a0 <_free_r>
 8007c16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c18:	b111      	cbz	r1, 8007c20 <_reclaim_reent+0x40>
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 fac0 	bl	80081a0 <_free_r>
 8007c20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007c22:	b111      	cbz	r1, 8007c2a <_reclaim_reent+0x4a>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fabb 	bl	80081a0 <_free_r>
 8007c2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c2c:	b111      	cbz	r1, 8007c34 <_reclaim_reent+0x54>
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fab6 	bl	80081a0 <_free_r>
 8007c34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c36:	b111      	cbz	r1, 8007c3e <_reclaim_reent+0x5e>
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fab1 	bl	80081a0 <_free_r>
 8007c3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c40:	b111      	cbz	r1, 8007c48 <_reclaim_reent+0x68>
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 faac 	bl	80081a0 <_free_r>
 8007c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4a:	b111      	cbz	r1, 8007c52 <_reclaim_reent+0x72>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 faa7 	bl	80081a0 <_free_r>
 8007c52:	69a3      	ldr	r3, [r4, #24]
 8007c54:	b1e3      	cbz	r3, 8007c90 <_reclaim_reent+0xb0>
 8007c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4798      	blx	r3
 8007c5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c5e:	b1b9      	cbz	r1, 8007c90 <_reclaim_reent+0xb0>
 8007c60:	4620      	mov	r0, r4
 8007c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c66:	f7ff bfad 	b.w	8007bc4 <cleanup_glue>
 8007c6a:	5949      	ldr	r1, [r1, r5]
 8007c6c:	b941      	cbnz	r1, 8007c80 <_reclaim_reent+0xa0>
 8007c6e:	3504      	adds	r5, #4
 8007c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c72:	2d80      	cmp	r5, #128	; 0x80
 8007c74:	68d9      	ldr	r1, [r3, #12]
 8007c76:	d1f8      	bne.n	8007c6a <_reclaim_reent+0x8a>
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fa91 	bl	80081a0 <_free_r>
 8007c7e:	e7ba      	b.n	8007bf6 <_reclaim_reent+0x16>
 8007c80:	680e      	ldr	r6, [r1, #0]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fa8c 	bl	80081a0 <_free_r>
 8007c88:	4631      	mov	r1, r6
 8007c8a:	e7ef      	b.n	8007c6c <_reclaim_reent+0x8c>
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	e7ef      	b.n	8007c70 <_reclaim_reent+0x90>
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
 8007c92:	bf00      	nop
 8007c94:	20000014 	.word	0x20000014

08007c98 <_sbrk_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d06      	ldr	r5, [pc, #24]	; (8007cb4 <_sbrk_r+0x1c>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f7f9 f8e0 	bl	8000e68 <_sbrk>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_sbrk_r+0x1a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_sbrk_r+0x1a>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20001eac 	.word	0x20001eac

08007cb8 <__sread>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	460c      	mov	r4, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	f000 faba 	bl	8008238 <_read_r>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	bfab      	itete	ge
 8007cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cca:	89a3      	ldrhlt	r3, [r4, #12]
 8007ccc:	181b      	addge	r3, r3, r0
 8007cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cd2:	bfac      	ite	ge
 8007cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cd6:	81a3      	strhlt	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__swrite>:
 8007cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cde:	461f      	mov	r7, r3
 8007ce0:	898b      	ldrh	r3, [r1, #12]
 8007ce2:	05db      	lsls	r3, r3, #23
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	4616      	mov	r6, r2
 8007cea:	d505      	bpl.n	8007cf8 <__swrite+0x1e>
 8007cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f000 f9d0 	bl	8008098 <_lseek_r>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	4632      	mov	r2, r6
 8007d06:	463b      	mov	r3, r7
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	f000 b869 	b.w	8007de4 <_write_r>

08007d12 <__sseek>:
 8007d12:	b510      	push	{r4, lr}
 8007d14:	460c      	mov	r4, r1
 8007d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1a:	f000 f9bd 	bl	8008098 <_lseek_r>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	bf15      	itete	ne
 8007d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d2e:	81a3      	strheq	r3, [r4, #12]
 8007d30:	bf18      	it	ne
 8007d32:	81a3      	strhne	r3, [r4, #12]
 8007d34:	bd10      	pop	{r4, pc}

08007d36 <__sclose>:
 8007d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3a:	f000 b8db 	b.w	8007ef4 <_close_r>
	...

08007d40 <__swbuf_r>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	460e      	mov	r6, r1
 8007d44:	4614      	mov	r4, r2
 8007d46:	4605      	mov	r5, r0
 8007d48:	b118      	cbz	r0, 8007d52 <__swbuf_r+0x12>
 8007d4a:	6983      	ldr	r3, [r0, #24]
 8007d4c:	b90b      	cbnz	r3, 8007d52 <__swbuf_r+0x12>
 8007d4e:	f7ff fac9 	bl	80072e4 <__sinit>
 8007d52:	4b21      	ldr	r3, [pc, #132]	; (8007dd8 <__swbuf_r+0x98>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d12b      	bne.n	8007db0 <__swbuf_r+0x70>
 8007d58:	686c      	ldr	r4, [r5, #4]
 8007d5a:	69a3      	ldr	r3, [r4, #24]
 8007d5c:	60a3      	str	r3, [r4, #8]
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	071a      	lsls	r2, r3, #28
 8007d62:	d52f      	bpl.n	8007dc4 <__swbuf_r+0x84>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	b36b      	cbz	r3, 8007dc4 <__swbuf_r+0x84>
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	1ac0      	subs	r0, r0, r3
 8007d6e:	6963      	ldr	r3, [r4, #20]
 8007d70:	b2f6      	uxtb	r6, r6
 8007d72:	4283      	cmp	r3, r0
 8007d74:	4637      	mov	r7, r6
 8007d76:	dc04      	bgt.n	8007d82 <__swbuf_r+0x42>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f000 f950 	bl	8008020 <_fflush_r>
 8007d80:	bb30      	cbnz	r0, 8007dd0 <__swbuf_r+0x90>
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	60a3      	str	r3, [r4, #8]
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	701e      	strb	r6, [r3, #0]
 8007d90:	6963      	ldr	r3, [r4, #20]
 8007d92:	3001      	adds	r0, #1
 8007d94:	4283      	cmp	r3, r0
 8007d96:	d004      	beq.n	8007da2 <__swbuf_r+0x62>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	07db      	lsls	r3, r3, #31
 8007d9c:	d506      	bpl.n	8007dac <__swbuf_r+0x6c>
 8007d9e:	2e0a      	cmp	r6, #10
 8007da0:	d104      	bne.n	8007dac <__swbuf_r+0x6c>
 8007da2:	4621      	mov	r1, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 f93b 	bl	8008020 <_fflush_r>
 8007daa:	b988      	cbnz	r0, 8007dd0 <__swbuf_r+0x90>
 8007dac:	4638      	mov	r0, r7
 8007dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <__swbuf_r+0x9c>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <__swbuf_r+0x7a>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7cf      	b.n	8007d5a <__swbuf_r+0x1a>
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <__swbuf_r+0xa0>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7ca      	b.n	8007d5a <__swbuf_r+0x1a>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f81e 	bl	8007e08 <__swsetup_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d0cb      	beq.n	8007d68 <__swbuf_r+0x28>
 8007dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8007dd4:	e7ea      	b.n	8007dac <__swbuf_r+0x6c>
 8007dd6:	bf00      	nop
 8007dd8:	08008518 	.word	0x08008518
 8007ddc:	08008538 	.word	0x08008538
 8007de0:	080084f8 	.word	0x080084f8

08007de4 <_write_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	; (8007e04 <_write_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7f8 ffe7 	bl	8000dc6 <_write>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_write_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_write_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20001eac 	.word	0x20001eac

08007e08 <__swsetup_r>:
 8007e08:	4b32      	ldr	r3, [pc, #200]	; (8007ed4 <__swsetup_r+0xcc>)
 8007e0a:	b570      	push	{r4, r5, r6, lr}
 8007e0c:	681d      	ldr	r5, [r3, #0]
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460c      	mov	r4, r1
 8007e12:	b125      	cbz	r5, 8007e1e <__swsetup_r+0x16>
 8007e14:	69ab      	ldr	r3, [r5, #24]
 8007e16:	b913      	cbnz	r3, 8007e1e <__swsetup_r+0x16>
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f7ff fa63 	bl	80072e4 <__sinit>
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <__swsetup_r+0xd0>)
 8007e20:	429c      	cmp	r4, r3
 8007e22:	d10f      	bne.n	8007e44 <__swsetup_r+0x3c>
 8007e24:	686c      	ldr	r4, [r5, #4]
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e2c:	0719      	lsls	r1, r3, #28
 8007e2e:	d42c      	bmi.n	8007e8a <__swsetup_r+0x82>
 8007e30:	06dd      	lsls	r5, r3, #27
 8007e32:	d411      	bmi.n	8007e58 <__swsetup_r+0x50>
 8007e34:	2309      	movs	r3, #9
 8007e36:	6033      	str	r3, [r6, #0]
 8007e38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e42:	e03e      	b.n	8007ec2 <__swsetup_r+0xba>
 8007e44:	4b25      	ldr	r3, [pc, #148]	; (8007edc <__swsetup_r+0xd4>)
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d101      	bne.n	8007e4e <__swsetup_r+0x46>
 8007e4a:	68ac      	ldr	r4, [r5, #8]
 8007e4c:	e7eb      	b.n	8007e26 <__swsetup_r+0x1e>
 8007e4e:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <__swsetup_r+0xd8>)
 8007e50:	429c      	cmp	r4, r3
 8007e52:	bf08      	it	eq
 8007e54:	68ec      	ldreq	r4, [r5, #12]
 8007e56:	e7e6      	b.n	8007e26 <__swsetup_r+0x1e>
 8007e58:	0758      	lsls	r0, r3, #29
 8007e5a:	d512      	bpl.n	8007e82 <__swsetup_r+0x7a>
 8007e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5e:	b141      	cbz	r1, 8007e72 <__swsetup_r+0x6a>
 8007e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e64:	4299      	cmp	r1, r3
 8007e66:	d002      	beq.n	8007e6e <__swsetup_r+0x66>
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f999 	bl	80081a0 <_free_r>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6363      	str	r3, [r4, #52]	; 0x34
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6063      	str	r3, [r4, #4]
 8007e7e:	6923      	ldr	r3, [r4, #16]
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	f043 0308 	orr.w	r3, r3, #8
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	b94b      	cbnz	r3, 8007ea2 <__swsetup_r+0x9a>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e98:	d003      	beq.n	8007ea2 <__swsetup_r+0x9a>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 f933 	bl	8008108 <__smakebuf_r>
 8007ea2:	89a0      	ldrh	r0, [r4, #12]
 8007ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ea8:	f010 0301 	ands.w	r3, r0, #1
 8007eac:	d00a      	beq.n	8007ec4 <__swsetup_r+0xbc>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60a3      	str	r3, [r4, #8]
 8007eb2:	6963      	ldr	r3, [r4, #20]
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	61a3      	str	r3, [r4, #24]
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	b943      	cbnz	r3, 8007ece <__swsetup_r+0xc6>
 8007ebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ec0:	d1ba      	bne.n	8007e38 <__swsetup_r+0x30>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	0781      	lsls	r1, r0, #30
 8007ec6:	bf58      	it	pl
 8007ec8:	6963      	ldrpl	r3, [r4, #20]
 8007eca:	60a3      	str	r3, [r4, #8]
 8007ecc:	e7f4      	b.n	8007eb8 <__swsetup_r+0xb0>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	e7f7      	b.n	8007ec2 <__swsetup_r+0xba>
 8007ed2:	bf00      	nop
 8007ed4:	20000014 	.word	0x20000014
 8007ed8:	08008518 	.word	0x08008518
 8007edc:	08008538 	.word	0x08008538
 8007ee0:	080084f8 	.word	0x080084f8

08007ee4 <abort>:
 8007ee4:	b508      	push	{r3, lr}
 8007ee6:	2006      	movs	r0, #6
 8007ee8:	f000 f9e0 	bl	80082ac <raise>
 8007eec:	2001      	movs	r0, #1
 8007eee:	f7f8 ff43 	bl	8000d78 <_exit>
	...

08007ef4 <_close_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d06      	ldr	r5, [pc, #24]	; (8007f10 <_close_r+0x1c>)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	f7f8 ff7d 	bl	8000dfe <_close>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_close_r+0x1a>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_close_r+0x1a>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20001eac 	.word	0x20001eac

08007f14 <__sflush_r>:
 8007f14:	898a      	ldrh	r2, [r1, #12]
 8007f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	0710      	lsls	r0, r2, #28
 8007f1e:	460c      	mov	r4, r1
 8007f20:	d458      	bmi.n	8007fd4 <__sflush_r+0xc0>
 8007f22:	684b      	ldr	r3, [r1, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc05      	bgt.n	8007f34 <__sflush_r+0x20>
 8007f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc02      	bgt.n	8007f34 <__sflush_r+0x20>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d0f9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f40:	682f      	ldr	r7, [r5, #0]
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	d032      	beq.n	8007fac <__sflush_r+0x98>
 8007f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	075a      	lsls	r2, r3, #29
 8007f4c:	d505      	bpl.n	8007f5a <__sflush_r+0x46>
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	1ac0      	subs	r0, r0, r3
 8007f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f54:	b10b      	cbz	r3, 8007f5a <__sflush_r+0x46>
 8007f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f58:	1ac0      	subs	r0, r0, r3
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f60:	6a21      	ldr	r1, [r4, #32]
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b0      	blx	r6
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	d106      	bne.n	8007f7a <__sflush_r+0x66>
 8007f6c:	6829      	ldr	r1, [r5, #0]
 8007f6e:	291d      	cmp	r1, #29
 8007f70:	d82c      	bhi.n	8007fcc <__sflush_r+0xb8>
 8007f72:	4a2a      	ldr	r2, [pc, #168]	; (800801c <__sflush_r+0x108>)
 8007f74:	40ca      	lsrs	r2, r1
 8007f76:	07d6      	lsls	r6, r2, #31
 8007f78:	d528      	bpl.n	8007fcc <__sflush_r+0xb8>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	6062      	str	r2, [r4, #4]
 8007f7e:	04d9      	lsls	r1, r3, #19
 8007f80:	6922      	ldr	r2, [r4, #16]
 8007f82:	6022      	str	r2, [r4, #0]
 8007f84:	d504      	bpl.n	8007f90 <__sflush_r+0x7c>
 8007f86:	1c42      	adds	r2, r0, #1
 8007f88:	d101      	bne.n	8007f8e <__sflush_r+0x7a>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	b903      	cbnz	r3, 8007f90 <__sflush_r+0x7c>
 8007f8e:	6560      	str	r0, [r4, #84]	; 0x54
 8007f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f92:	602f      	str	r7, [r5, #0]
 8007f94:	2900      	cmp	r1, #0
 8007f96:	d0ca      	beq.n	8007f2e <__sflush_r+0x1a>
 8007f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d002      	beq.n	8007fa6 <__sflush_r+0x92>
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 f8fd 	bl	80081a0 <_free_r>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8007faa:	e7c1      	b.n	8007f30 <__sflush_r+0x1c>
 8007fac:	6a21      	ldr	r1, [r4, #32]
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b0      	blx	r6
 8007fb4:	1c41      	adds	r1, r0, #1
 8007fb6:	d1c7      	bne.n	8007f48 <__sflush_r+0x34>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0c4      	beq.n	8007f48 <__sflush_r+0x34>
 8007fbe:	2b1d      	cmp	r3, #29
 8007fc0:	d001      	beq.n	8007fc6 <__sflush_r+0xb2>
 8007fc2:	2b16      	cmp	r3, #22
 8007fc4:	d101      	bne.n	8007fca <__sflush_r+0xb6>
 8007fc6:	602f      	str	r7, [r5, #0]
 8007fc8:	e7b1      	b.n	8007f2e <__sflush_r+0x1a>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	e7ad      	b.n	8007f30 <__sflush_r+0x1c>
 8007fd4:	690f      	ldr	r7, [r1, #16]
 8007fd6:	2f00      	cmp	r7, #0
 8007fd8:	d0a9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007fda:	0793      	lsls	r3, r2, #30
 8007fdc:	680e      	ldr	r6, [r1, #0]
 8007fde:	bf08      	it	eq
 8007fe0:	694b      	ldreq	r3, [r1, #20]
 8007fe2:	600f      	str	r7, [r1, #0]
 8007fe4:	bf18      	it	ne
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	eba6 0807 	sub.w	r8, r6, r7
 8007fec:	608b      	str	r3, [r1, #8]
 8007fee:	f1b8 0f00 	cmp.w	r8, #0
 8007ff2:	dd9c      	ble.n	8007f2e <__sflush_r+0x1a>
 8007ff4:	6a21      	ldr	r1, [r4, #32]
 8007ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff8:	4643      	mov	r3, r8
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b0      	blx	r6
 8008000:	2800      	cmp	r0, #0
 8008002:	dc06      	bgt.n	8008012 <__sflush_r+0xfe>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	e78e      	b.n	8007f30 <__sflush_r+0x1c>
 8008012:	4407      	add	r7, r0
 8008014:	eba8 0800 	sub.w	r8, r8, r0
 8008018:	e7e9      	b.n	8007fee <__sflush_r+0xda>
 800801a:	bf00      	nop
 800801c:	20400001 	.word	0x20400001

08008020 <_fflush_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b913      	cbnz	r3, 8008030 <_fflush_r+0x10>
 800802a:	2500      	movs	r5, #0
 800802c:	4628      	mov	r0, r5
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	b118      	cbz	r0, 800803a <_fflush_r+0x1a>
 8008032:	6983      	ldr	r3, [r0, #24]
 8008034:	b90b      	cbnz	r3, 800803a <_fflush_r+0x1a>
 8008036:	f7ff f955 	bl	80072e4 <__sinit>
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <_fflush_r+0x6c>)
 800803c:	429c      	cmp	r4, r3
 800803e:	d11b      	bne.n	8008078 <_fflush_r+0x58>
 8008040:	686c      	ldr	r4, [r5, #4]
 8008042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0ef      	beq.n	800802a <_fflush_r+0xa>
 800804a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800804c:	07d0      	lsls	r0, r2, #31
 800804e:	d404      	bmi.n	800805a <_fflush_r+0x3a>
 8008050:	0599      	lsls	r1, r3, #22
 8008052:	d402      	bmi.n	800805a <_fflush_r+0x3a>
 8008054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008056:	f7ff fa1a 	bl	800748e <__retarget_lock_acquire_recursive>
 800805a:	4628      	mov	r0, r5
 800805c:	4621      	mov	r1, r4
 800805e:	f7ff ff59 	bl	8007f14 <__sflush_r>
 8008062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008064:	07da      	lsls	r2, r3, #31
 8008066:	4605      	mov	r5, r0
 8008068:	d4e0      	bmi.n	800802c <_fflush_r+0xc>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	059b      	lsls	r3, r3, #22
 800806e:	d4dd      	bmi.n	800802c <_fflush_r+0xc>
 8008070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008072:	f7ff fa0d 	bl	8007490 <__retarget_lock_release_recursive>
 8008076:	e7d9      	b.n	800802c <_fflush_r+0xc>
 8008078:	4b05      	ldr	r3, [pc, #20]	; (8008090 <_fflush_r+0x70>)
 800807a:	429c      	cmp	r4, r3
 800807c:	d101      	bne.n	8008082 <_fflush_r+0x62>
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	e7df      	b.n	8008042 <_fflush_r+0x22>
 8008082:	4b04      	ldr	r3, [pc, #16]	; (8008094 <_fflush_r+0x74>)
 8008084:	429c      	cmp	r4, r3
 8008086:	bf08      	it	eq
 8008088:	68ec      	ldreq	r4, [r5, #12]
 800808a:	e7da      	b.n	8008042 <_fflush_r+0x22>
 800808c:	08008518 	.word	0x08008518
 8008090:	08008538 	.word	0x08008538
 8008094:	080084f8 	.word	0x080084f8

08008098 <_lseek_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d07      	ldr	r5, [pc, #28]	; (80080b8 <_lseek_r+0x20>)
 800809c:	4604      	mov	r4, r0
 800809e:	4608      	mov	r0, r1
 80080a0:	4611      	mov	r1, r2
 80080a2:	2200      	movs	r2, #0
 80080a4:	602a      	str	r2, [r5, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f7f8 fed0 	bl	8000e4c <_lseek>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_lseek_r+0x1e>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_lseek_r+0x1e>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20001eac 	.word	0x20001eac

080080bc <__swhatbuf_r>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	460e      	mov	r6, r1
 80080c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c4:	2900      	cmp	r1, #0
 80080c6:	b096      	sub	sp, #88	; 0x58
 80080c8:	4614      	mov	r4, r2
 80080ca:	461d      	mov	r5, r3
 80080cc:	da08      	bge.n	80080e0 <__swhatbuf_r+0x24>
 80080ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	061a      	lsls	r2, r3, #24
 80080d8:	d410      	bmi.n	80080fc <__swhatbuf_r+0x40>
 80080da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080de:	e00e      	b.n	80080fe <__swhatbuf_r+0x42>
 80080e0:	466a      	mov	r2, sp
 80080e2:	f000 f8ff 	bl	80082e4 <_fstat_r>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	dbf1      	blt.n	80080ce <__swhatbuf_r+0x12>
 80080ea:	9a01      	ldr	r2, [sp, #4]
 80080ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080f4:	425a      	negs	r2, r3
 80080f6:	415a      	adcs	r2, r3
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	e7ee      	b.n	80080da <__swhatbuf_r+0x1e>
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	2000      	movs	r0, #0
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	b016      	add	sp, #88	; 0x58
 8008104:	bd70      	pop	{r4, r5, r6, pc}
	...

08008108 <__smakebuf_r>:
 8008108:	898b      	ldrh	r3, [r1, #12]
 800810a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800810c:	079d      	lsls	r5, r3, #30
 800810e:	4606      	mov	r6, r0
 8008110:	460c      	mov	r4, r1
 8008112:	d507      	bpl.n	8008124 <__smakebuf_r+0x1c>
 8008114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	2301      	movs	r3, #1
 800811e:	6163      	str	r3, [r4, #20]
 8008120:	b002      	add	sp, #8
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	ab01      	add	r3, sp, #4
 8008126:	466a      	mov	r2, sp
 8008128:	f7ff ffc8 	bl	80080bc <__swhatbuf_r>
 800812c:	9900      	ldr	r1, [sp, #0]
 800812e:	4605      	mov	r5, r0
 8008130:	4630      	mov	r0, r6
 8008132:	f7ff f9e5 	bl	8007500 <_malloc_r>
 8008136:	b948      	cbnz	r0, 800814c <__smakebuf_r+0x44>
 8008138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813c:	059a      	lsls	r2, r3, #22
 800813e:	d4ef      	bmi.n	8008120 <__smakebuf_r+0x18>
 8008140:	f023 0303 	bic.w	r3, r3, #3
 8008144:	f043 0302 	orr.w	r3, r3, #2
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	e7e3      	b.n	8008114 <__smakebuf_r+0xc>
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <__smakebuf_r+0x7c>)
 800814e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	6020      	str	r0, [r4, #0]
 8008154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	9b00      	ldr	r3, [sp, #0]
 800815c:	6163      	str	r3, [r4, #20]
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	6120      	str	r0, [r4, #16]
 8008162:	b15b      	cbz	r3, 800817c <__smakebuf_r+0x74>
 8008164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008168:	4630      	mov	r0, r6
 800816a:	f000 f8cd 	bl	8008308 <_isatty_r>
 800816e:	b128      	cbz	r0, 800817c <__smakebuf_r+0x74>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	89a0      	ldrh	r0, [r4, #12]
 800817e:	4305      	orrs	r5, r0
 8008180:	81a5      	strh	r5, [r4, #12]
 8008182:	e7cd      	b.n	8008120 <__smakebuf_r+0x18>
 8008184:	0800727d 	.word	0x0800727d

08008188 <__malloc_lock>:
 8008188:	4801      	ldr	r0, [pc, #4]	; (8008190 <__malloc_lock+0x8>)
 800818a:	f7ff b980 	b.w	800748e <__retarget_lock_acquire_recursive>
 800818e:	bf00      	nop
 8008190:	20001ea0 	.word	0x20001ea0

08008194 <__malloc_unlock>:
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <__malloc_unlock+0x8>)
 8008196:	f7ff b97b 	b.w	8007490 <__retarget_lock_release_recursive>
 800819a:	bf00      	nop
 800819c:	20001ea0 	.word	0x20001ea0

080081a0 <_free_r>:
 80081a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a2:	2900      	cmp	r1, #0
 80081a4:	d044      	beq.n	8008230 <_free_r+0x90>
 80081a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081aa:	9001      	str	r0, [sp, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f1a1 0404 	sub.w	r4, r1, #4
 80081b2:	bfb8      	it	lt
 80081b4:	18e4      	addlt	r4, r4, r3
 80081b6:	f7ff ffe7 	bl	8008188 <__malloc_lock>
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <_free_r+0x94>)
 80081bc:	9801      	ldr	r0, [sp, #4]
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	b933      	cbnz	r3, 80081d0 <_free_r+0x30>
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	6014      	str	r4, [r2, #0]
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081cc:	f7ff bfe2 	b.w	8008194 <__malloc_unlock>
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d908      	bls.n	80081e6 <_free_r+0x46>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	1961      	adds	r1, r4, r5
 80081d8:	428b      	cmp	r3, r1
 80081da:	bf01      	itttt	eq
 80081dc:	6819      	ldreq	r1, [r3, #0]
 80081de:	685b      	ldreq	r3, [r3, #4]
 80081e0:	1949      	addeq	r1, r1, r5
 80081e2:	6021      	streq	r1, [r4, #0]
 80081e4:	e7ed      	b.n	80081c2 <_free_r+0x22>
 80081e6:	461a      	mov	r2, r3
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	b10b      	cbz	r3, 80081f0 <_free_r+0x50>
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	d9fa      	bls.n	80081e6 <_free_r+0x46>
 80081f0:	6811      	ldr	r1, [r2, #0]
 80081f2:	1855      	adds	r5, r2, r1
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d10b      	bne.n	8008210 <_free_r+0x70>
 80081f8:	6824      	ldr	r4, [r4, #0]
 80081fa:	4421      	add	r1, r4
 80081fc:	1854      	adds	r4, r2, r1
 80081fe:	42a3      	cmp	r3, r4
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	d1e0      	bne.n	80081c6 <_free_r+0x26>
 8008204:	681c      	ldr	r4, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	6053      	str	r3, [r2, #4]
 800820a:	4421      	add	r1, r4
 800820c:	6011      	str	r1, [r2, #0]
 800820e:	e7da      	b.n	80081c6 <_free_r+0x26>
 8008210:	d902      	bls.n	8008218 <_free_r+0x78>
 8008212:	230c      	movs	r3, #12
 8008214:	6003      	str	r3, [r0, #0]
 8008216:	e7d6      	b.n	80081c6 <_free_r+0x26>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf04      	itt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	bf04      	itt	eq
 8008228:	1949      	addeq	r1, r1, r5
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	6054      	str	r4, [r2, #4]
 800822e:	e7ca      	b.n	80081c6 <_free_r+0x26>
 8008230:	b003      	add	sp, #12
 8008232:	bd30      	pop	{r4, r5, pc}
 8008234:	20001ea4 	.word	0x20001ea4

08008238 <_read_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d07      	ldr	r5, [pc, #28]	; (8008258 <_read_r+0x20>)
 800823c:	4604      	mov	r4, r0
 800823e:	4608      	mov	r0, r1
 8008240:	4611      	mov	r1, r2
 8008242:	2200      	movs	r2, #0
 8008244:	602a      	str	r2, [r5, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	f7f8 fda0 	bl	8000d8c <_read>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_read_r+0x1e>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_read_r+0x1e>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	20001eac 	.word	0x20001eac

0800825c <_raise_r>:
 800825c:	291f      	cmp	r1, #31
 800825e:	b538      	push	{r3, r4, r5, lr}
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	d904      	bls.n	8008270 <_raise_r+0x14>
 8008266:	2316      	movs	r3, #22
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	f04f 30ff 	mov.w	r0, #4294967295
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008272:	b112      	cbz	r2, 800827a <_raise_r+0x1e>
 8008274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008278:	b94b      	cbnz	r3, 800828e <_raise_r+0x32>
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f830 	bl	80082e0 <_getpid_r>
 8008280:	462a      	mov	r2, r5
 8008282:	4601      	mov	r1, r0
 8008284:	4620      	mov	r0, r4
 8008286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828a:	f000 b817 	b.w	80082bc <_kill_r>
 800828e:	2b01      	cmp	r3, #1
 8008290:	d00a      	beq.n	80082a8 <_raise_r+0x4c>
 8008292:	1c59      	adds	r1, r3, #1
 8008294:	d103      	bne.n	800829e <_raise_r+0x42>
 8008296:	2316      	movs	r3, #22
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	2001      	movs	r0, #1
 800829c:	e7e7      	b.n	800826e <_raise_r+0x12>
 800829e:	2400      	movs	r4, #0
 80082a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082a4:	4628      	mov	r0, r5
 80082a6:	4798      	blx	r3
 80082a8:	2000      	movs	r0, #0
 80082aa:	e7e0      	b.n	800826e <_raise_r+0x12>

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd3 	b.w	800825c <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	20000014 	.word	0x20000014

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_kill_r+0x20>)
 80082c0:	2300      	movs	r3, #0
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7f8 fd45 	bl	8000d58 <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	20001eac 	.word	0x20001eac

080082e0 <_getpid_r>:
 80082e0:	f7f8 bd32 	b.w	8000d48 <_getpid>

080082e4 <_fstat_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d07      	ldr	r5, [pc, #28]	; (8008304 <_fstat_r+0x20>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	f7f8 fd90 	bl	8000e16 <_fstat>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d102      	bne.n	8008300 <_fstat_r+0x1c>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b103      	cbz	r3, 8008300 <_fstat_r+0x1c>
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	bd38      	pop	{r3, r4, r5, pc}
 8008302:	bf00      	nop
 8008304:	20001eac 	.word	0x20001eac

08008308 <_isatty_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	; (8008324 <_isatty_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7f8 fd8f 	bl	8000e36 <_isatty>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_isatty_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_isatty_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	20001eac 	.word	0x20001eac

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
