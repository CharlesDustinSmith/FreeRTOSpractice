
17_Working_With_QueueSets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08008400  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e24  20000078  08008474  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001e9c  08008474  00021e9c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002635c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047e5  00000000  00000000  00046404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022f8  00000000  00000000  0004abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002160  00000000  00000000  0004cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c22  00000000  00000000  0004f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000208fb  00000000  00000000  00054c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef8d2  00000000  00000000  00075565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00164e37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ca8  00000000  00000000  00164e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080081e0 	.word	0x080081e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080081e0 	.word	0x080081e0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000534:	f023 0218 	bic.w	r2, r3, #24
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:

// Declare a queue set
static QueueSetHandle_t xQueueSet = NULL;

int main (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8

	HAL_Init ();
 800058a:	f000 fccb 	bl	8000f24 <HAL_Init>
	SystemClock_Config ();
 800058e:	f000 f8bb 	bl	8000708 <SystemClock_Config>
	MX_GPIO_Init ();
 8000592:	f000 f9a3 	bl	80008dc <MX_GPIO_Init>
	MX_LPUART1_UART_Init ();
 8000596:	f000 f92d 	bl	80007f4 <MX_LPUART1_UART_Init>
	MX_USB_PCD_Init ();
 800059a:	f000 f977 	bl	800088c <MX_USB_PCD_Init>

//	Create two queues, each sends a character pointer
	xQueue1 = xQueueCreate(1, sizeof(char *));
 800059e:	2200      	movs	r2, #0
 80005a0:	2104      	movs	r1, #4
 80005a2:	2001      	movs	r0, #1
 80005a4:	f004 fa04 	bl	80049b0 <xQueueGenericCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a20      	ldr	r2, [pc, #128]	; (800062c <main+0xa8>)
 80005ac:	6013      	str	r3, [r2, #0]
	xQueue2 = xQueueCreate(1, sizeof(char *));
 80005ae:	2200      	movs	r2, #0
 80005b0:	2104      	movs	r1, #4
 80005b2:	2001      	movs	r0, #1
 80005b4:	f004 f9fc 	bl	80049b0 <xQueueGenericCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <main+0xac>)
 80005bc:	6013      	str	r3, [r2, #0]

//	Add the two queues to the queue set
	xQueueSet = xQueueCreateSet(1*2);
 80005be:	2002      	movs	r0, #2
 80005c0:	f004 fe7e 	bl	80052c0 <xQueueCreateSet>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <main+0xb0>)
 80005c8:	6013      	str	r3, [r2, #0]
	xQueueAddToSet(xQueue1, xQueueSet);
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <main+0xa8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a19      	ldr	r2, [pc, #100]	; (8000634 <main+0xb0>)
 80005d0:	6812      	ldr	r2, [r2, #0]
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 fe82 	bl	80052de <xQueueAddToSet>
	xQueueAddToSet(xQueue2, xQueueSet);
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <main+0xac>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <main+0xb0>)
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 fe7a 	bl	80052de <xQueueAddToSet>

//	Create two sender tasks, with the same priority of 1
	xTaskCreate(vSenderTask1, "Sender1", 100, NULL, 1, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	4910      	ldr	r1, [pc, #64]	; (8000638 <main+0xb4>)
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <main+0xb8>)
 80005fa:	f004 ff5a 	bl	80054b2 <xTaskCreate>
	xTaskCreate(vSenderTask2, "Sender2", 100, NULL, 1, NULL);
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2264      	movs	r2, #100	; 0x64
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <main+0xbc>)
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0xc0>)
 800060e:	f004 ff50 	bl	80054b2 <xTaskCreate>
	xTaskCreate(vReceiverTask, "Receiver", 100, NULL, 2, NULL);
 8000612:	2300      	movs	r3, #0
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2302      	movs	r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2264      	movs	r2, #100	; 0x64
 800061e:	490a      	ldr	r1, [pc, #40]	; (8000648 <main+0xc4>)
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0xc8>)
 8000622:	f004 ff46 	bl	80054b2 <xTaskCreate>

	vTaskStartScheduler();
 8000626:	f005 f8d3 	bl	80057d0 <vTaskStartScheduler>

	while (1)
 800062a:	e7fe      	b.n	800062a <main+0xa6>
 800062c:	2000041c 	.word	0x2000041c
 8000630:	20000420 	.word	0x20000420
 8000634:	20000424 	.word	0x20000424
 8000638:	080081f8 	.word	0x080081f8
 800063c:	08000651 	.word	0x08000651
 8000640:	08008200 	.word	0x08008200
 8000644:	08000681 	.word	0x08000681
 8000648:	08008208 	.word	0x08008208
 800064c:	080006b1 	.word	0x080006b1

08000650 <vSenderTask1>:

	}
}

void vSenderTask1(void *pvParameters)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	const TickType_t xBlockTime = pdMS_TO_TICKS(100);
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	60fb      	str	r3, [r7, #12]
	const char *msg = "Message from vSenderTask1\r\n";
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <vSenderTask1+0x28>)
 800065e:	60bb      	str	r3, [r7, #8]

	while(1)
	{
//		Block for 100ms
		vTaskDelay(xBlockTime);
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f005 f881 	bl	8005768 <vTaskDelay>

//		Send the string "msg" to xQueue1
		xQueueSend(xQueue1, &msg, 0);
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <vSenderTask1+0x2c>)
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	f107 0108 	add.w	r1, r7, #8
 800066e:	2300      	movs	r3, #0
 8000670:	2200      	movs	r2, #0
 8000672:	f004 f9fd 	bl	8004a70 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 8000676:	e7f3      	b.n	8000660 <vSenderTask1+0x10>
 8000678:	08008214 	.word	0x08008214
 800067c:	2000041c 	.word	0x2000041c

08000680 <vSenderTask2>:
	}
}

void vSenderTask2(void *pvParameters)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	const TickType_t xBlockTime = pdMS_TO_TICKS(200);
 8000688:	23c8      	movs	r3, #200	; 0xc8
 800068a:	60fb      	str	r3, [r7, #12]
	const char *msg = "Message from vSenderTask2\r\n";
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <vSenderTask2+0x28>)
 800068e:	60bb      	str	r3, [r7, #8]

	while(1)
	{
//		Block for 200ms
		vTaskDelay(xBlockTime);
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f005 f869 	bl	8005768 <vTaskDelay>

//		Send the string "msg" to xQueue1
		xQueueSend(xQueue2, &msg, 0);
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <vSenderTask2+0x2c>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	2300      	movs	r3, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	f004 f9e5 	bl	8004a70 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 80006a6:	e7f3      	b.n	8000690 <vSenderTask2+0x10>
 80006a8:	08008230 	.word	0x08008230
 80006ac:	20000420 	.word	0x20000420

080006b0 <vReceiverTask>:
	}
}

void vReceiverTask(void *pvParameters)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	QueueHandle_t xQueueThatContainsData;
	char *pcReceievedString;

	while(1)
	{
		xQueueThatContainsData = (QueueHandle_t) xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <vReceiverTask+0x30>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f04f 31ff 	mov.w	r1, #4294967295
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fe2d 	bl	8005320 <xQueueSelectFromSet>
 80006c6:	60f8      	str	r0, [r7, #12]

		//		Receive data from the queue whose handle was returned
		xQueueReceive(xQueueThatContainsData, &pcReceievedString, 0);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	4619      	mov	r1, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f004 fb99 	bl	8004e08 <xQueueReceive>

		printf(pcReceievedString);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 ff15 	bl	8007508 <iprintf>
		xQueueThatContainsData = (QueueHandle_t) xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 80006de:	e7eb      	b.n	80006b8 <vReceiverTask+0x8>
 80006e0:	20000424 	.word	0x20000424

080006e4 <__io_putchar>:
}



int __io_putchar (int ch)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit (&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	2201      	movs	r2, #1
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <__io_putchar+0x20>)
 80006f6:	f003 f9c5 	bl	8003a84 <HAL_UART_Transmit>
	return ch;
 80006fa:	687b      	ldr	r3, [r7, #4]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000094 	.word	0x20000094

08000708 <SystemClock_Config>:

void SystemClock_Config (void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09a      	sub	sp, #104	; 0x68
 800070c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2248      	movs	r2, #72	; 0x48
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fe59 	bl	80073ce <memset>
		{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]
		{ 0 };

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800072e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800073c:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800073e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	f023 0303 	bic.w	r3, r3, #3
 8000748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 8000752:	f001 f83d 	bl	80017d0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fee4 	bl	8000524 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <SystemClock_Config+0xe8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000764:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <SystemClock_Config+0xe8>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <SystemClock_Config+0xe8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000778:	2327      	movs	r3, #39	; 0x27
 800077a:	623b      	str	r3, [r7, #32]
	        | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
	        | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000794:	2300      	movs	r3, #0
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fc05 	bl	8001fb4 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xac>
	{
		Error_Handler ();
 80007b0:	f000 f8fe 	bl	80009b0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80007b4:	236f      	movs	r3, #111	; 0x6f
 80007b6:	607b      	str	r3, [r7, #4]
	        | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
	        | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 ff61 	bl	800269c <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xdc>
	{
		Error_Handler ();
 80007e0:	f000 f8e6 	bl	80009b0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 80007e4:	f002 fd4e 	bl	8003284 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007e8:	bf00      	nop
 80007ea:	3768      	adds	r7, #104	; 0x68
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	58000400 	.word	0x58000400

080007f4 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init (void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <MX_LPUART1_UART_Init+0x94>)
 80007fc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init (&hlpuart1) != HAL_OK)
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 800083e:	f003 f8d1 	bl	80039e4 <HAL_UART_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler ();
 8000848:	f000 f8b2 	bl	80009b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold (&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 800084c:	2100      	movs	r1, #0
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000850:	f003 fdc2 	bl	80043d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x6a>
	        != HAL_OK)
	{
		Error_Handler ();
 800085a:	f000 f8a9 	bl	80009b0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold (&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 800085e:	2100      	movs	r1, #0
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000862:	f003 fdf7 	bl	8004454 <HAL_UARTEx_SetRxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x7c>
	        != HAL_OK)
	{
		Error_Handler ();
 800086c:	f000 f8a0 	bl	80009b0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode (&hlpuart1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_LPUART1_UART_Init+0x90>)
 8000872:	f003 fd78 	bl	8004366 <HAL_UARTEx_DisableFifoMode>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler ();
 800087c:	f000 f898 	bl	80009b0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000094 	.word	0x20000094
 8000888:	40008000 	.word	0x40008000

0800088c <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init (void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <MX_USB_PCD_Init+0x4c>)
 8000894:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 8000898:	2208      	movs	r2, #8
 800089a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 800089e:	2202      	movs	r2, #2
 80008a0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init (&hpcd_USB_FS) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_USB_PCD_Init+0x48>)
 80008c2:	f000 fde3 	bl	800148c <HAL_PCD_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USB_PCD_Init+0x44>
	{
		Error_Handler ();
 80008cc:	f000 f870 	bl	80009b0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000124 	.word	0x20000124
 80008d8:	40006800 	.word	0x40006800

080008dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
		{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff fe2d 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fe2a 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	2002      	movs	r0, #2
 80008fe:	f7ff fe27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2008      	movs	r0, #8
 8000904:	f7ff fe24 	bl	8000550 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2123      	movs	r1, #35	; 0x23
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <MX_GPIO_Init+0xa4>)
 800090e:	f000 fda5 	bl	800145c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000912:	2310      	movs	r3, #16
 8000914:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <MX_GPIO_Init+0xa8>)
 8000924:	f000 fc2a 	bl	800117c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8000928:	2323      	movs	r3, #35	; 0x23
 800092a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4810      	ldr	r0, [pc, #64]	; (8000980 <MX_GPIO_Init+0xa4>)
 800093e:	f000 fc1d 	bl	800117c <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8000942:	2303      	movs	r3, #3
 8000944:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (GPIOD, &GPIO_InitStruct);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_GPIO_Init+0xac>)
 8000954:	f000 fc12 	bl	800117c <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8000958:	23c0      	movs	r3, #192	; 0xc0
 800095a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000968:	2307      	movs	r3, #7
 800096a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_GPIO_Init+0xa4>)
 8000972:	f000 fc03 	bl	800117c <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	48000400 	.word	0x48000400
 8000984:	48000800 	.word	0x48000800
 8000988:	48000c00 	.word	0x48000c00

0800098c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick ();
 800099e:	f000 fae1 	bl	8000f64 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40012c00 	.word	0x40012c00

080009b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>

080009ba <LL_AHB2_GRP1_EnableClock>:
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4013      	ands	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a10:	68fb      	ldr	r3, [r7, #12]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	210f      	movs	r1, #15
 8000a62:	f06f 0001 	mvn.w	r0, #1
 8000a66:	f000 fb61 	bl	800112c <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 febb 	bl	80017f0 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000a7a:	f000 fefb 	bl	8001874 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09c      	sub	sp, #112	; 0x70
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2250      	movs	r2, #80	; 0x50
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f006 fc90 	bl	80073ce <memset>
  if(huart->Instance==LPUART1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <HAL_UART_MspInit+0x84>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d124      	bne.n	8000b02 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fa67 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff ff6e 	bl	80009b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff ffa2 	bl	8000a1e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff ff6d 	bl	80009ba <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000af0:	2308      	movs	r3, #8
 8000af2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f000 fb3d 	bl	800117c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3770      	adds	r7, #112	; 0x70
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40008000 	.word	0x40008000

08000b10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09c      	sub	sp, #112	; 0x70
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2250      	movs	r2, #80	; 0x50
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f006 fc4c 	bl	80073ce <memset>
  if(hpcd->Instance==USB)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <HAL_PCD_MspInit+0xa8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d136      	bne.n	8000bae <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b46:	2318      	movs	r3, #24
 8000b48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fa13 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000b78:	f7ff ff1a 	bl	80009b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff ff1c 	bl	80009ba <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b94:	230a      	movs	r3, #10
 8000b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 faeb 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ba6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000baa:	f7ff ff1f 	bl	80009ec <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3770      	adds	r7, #112	; 0x70
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40006800 	.word	0x40006800

08000bbc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be0:	68fb      	ldr	r3, [r7, #12]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2019      	movs	r0, #25
 8000c06:	f000 fa91 	bl	800112c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 faa8 	bl	8001160 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c14:	f7ff ffd2 	bl	8000bbc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c18:	f107 0208 	add.w	r2, r7, #8
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 ff26 	bl	8002a74 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c28:	f001 ff0e 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8000c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_InitTick+0x8c>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_InitTick+0x90>)
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <HAL_InitTick+0x94>)
 8000c40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_InitTick+0x90>)
 8000c44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_InitTick+0x90>)
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_InitTick+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_InitTick+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <HAL_InitTick+0x90>)
 8000c5e:	f002 fc28 	bl	80034b2 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_InitTick+0x90>)
 8000c6a:	f002 fc83 	bl	8003574 <HAL_TIM_Base_Start_IT>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	20000428 	.word	0x20000428
 8000c84:	40012c00 	.word	0x40012c00

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cba:	f002 fca9 	bl	8003610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000428 	.word	0x20000428

08000cc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fce1 	bl	80006e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
	}
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f006 f9ca 	bl	800716c <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20030000 	.word	0x20030000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000474 	.word	0x20000474
 8000e0c:	20001ea0 	.word	0x20001ea0

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <SystemInit+0x98>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <SystemInit+0x98>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e3c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <SystemInit+0x9c>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5a:	f023 0305 	bic.w	r3, r3, #5
 8000e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6e:	f023 0301 	bic.w	r3, r3, #1
 8000e72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <SystemInit+0xa0>)
 8000e7c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <SystemInit+0xa0>)
 8000e84:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	faf6fefb 	.word	0xfaf6fefb
 8000eb0:	22041000 	.word	0x22041000

08000eb4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000eb4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb8:	3304      	adds	r3, #4

08000eba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ebe:	d3f9      	bcc.n	8000eb4 <CopyDataInit>
  bx lr
 8000ec0:	4770      	bx	lr

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ec2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ec4:	3004      	adds	r0, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ec6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>
  bx lr
 8000eca:	4770      	bx	lr

08000ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ece:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed0:	f7ff ff9e 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopForever+0x8>)
 8000ed6:	490c      	ldr	r1, [pc, #48]	; (8000f08 <LoopForever+0xc>)
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <LoopForever+0x10>)
 8000eda:	2300      	movs	r3, #0
 8000edc:	f7ff ffed 	bl	8000eba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopForever+0x14>)
 8000ee2:	490c      	ldr	r1, [pc, #48]	; (8000f14 <LoopForever+0x18>)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f7ff ffee 	bl	8000ec6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopForever+0x1c>)
 8000eec:	490b      	ldr	r1, [pc, #44]	; (8000f1c <LoopForever+0x20>)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f7ff ffe9 	bl	8000ec6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef4:	f006 fa36 	bl	8007364 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ef8:	f7ff fb44 	bl	8000584 <main>

08000efc <LoopForever>:

LoopForever:
  b LoopForever
 8000efc:	e7fe      	b.n	8000efc <LoopForever>
 8000efe:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000f00:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000078 	.word	0x20000078
 8000f0c:	08008400 	.word	0x08008400
  INIT_BSS _sbss, _ebss
 8000f10:	20000078 	.word	0x20000078
 8000f14:	20001e9c 	.word	0x20001e9c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f18:	20030000 	.word	0x20030000
 8000f1c:	20030000 	.word	0x20030000

08000f20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_Init+0x3c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x3c>)
 8000f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f000 f8eb 	bl	8001116 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f40:	200f      	movs	r0, #15
 8000f42:	f7ff fe55 	bl	8000bf0 <HAL_InitTick>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	e001      	b.n	8000f56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f52:	f7ff fd7d 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58004000 	.word	0x58004000

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	20000478 	.word	0x20000478

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000478 	.word	0x20000478

08000fa4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTickPrio+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4c 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff63 	bl	8001004 <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb3 	bl	80010b0 <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff82 	bl	800105c <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff56 	bl	8001020 <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	e14c      	b.n	8001426 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 813e 	beq.w	8001420 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_GPIO_Init+0x40>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d130      	bne.n	800121e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011f2:	2201      	movs	r2, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f003 0201 	and.w	r2, r3, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b03      	cmp	r3, #3
 8001228:	d017      	beq.n	800125a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d123      	bne.n	80012ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0203 	and.w	r2, r3, #3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8098 	beq.w	8001420 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d019      	beq.n	8001350 <HAL_GPIO_Init+0x1d4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_GPIO_Init+0x2cc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1d0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_Init+0x2d0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1cc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_GPIO_Init+0x2d4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1c8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1c4>
 800133c:	2304      	movs	r3, #4
 800133e:	e008      	b.n	8001352 <HAL_GPIO_Init+0x1d6>
 8001340:	2307      	movs	r3, #7
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x1d6>
 8001344:	2303      	movs	r3, #3
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x1d6>
 8001348:	2302      	movs	r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x1d6>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x1d6>
 8001350:	2300      	movs	r3, #0
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001362:	4938      	ldr	r1, [pc, #224]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001394:	4a30      	ldr	r2, [pc, #192]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ea:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f aeab 	bne.w	800118c <HAL_GPIO_Init+0x10>
  }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40010000 	.word	0x40010000
 8001448:	48000400 	.word	0x48000400
 800144c:	48000800 	.word	0x48000800
 8001450:	48000c00 	.word	0x48000c00
 8001454:	48001000 	.word	0x48001000
 8001458:	58000800 	.word	0x58000800

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001478:	e002      	b.n	8001480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b08b      	sub	sp, #44	; 0x2c
 8001490:	af06      	add	r7, sp, #24
 8001492:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0dd      	b.n	800165a <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fb2c 	bl	8000b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 f84e 	bl	800456c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e04d      	b.n	8001572 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3305      	adds	r3, #5
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	b298      	uxth	r0, r3
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	333a      	adds	r3, #58	; 0x3a
 8001516:	4602      	mov	r2, r0
 8001518:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	3307      	adds	r3, #7
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	333c      	adds	r3, #60	; 0x3c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	3340      	adds	r3, #64	; 0x40
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3344      	adds	r3, #68	; 0x44
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3ac      	bcc.n	80014d6 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e044      	b.n	800160c <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3b5      	bcc.n	8001582 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	687e      	ldr	r6, [r7, #4]
 800161e:	466d      	mov	r5, sp
 8001620:	f106 0410 	add.w	r4, r6, #16
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	e894 0003 	ldmia.w	r4, {r0, r1}
 800162c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001630:	1d33      	adds	r3, r6, #4
 8001632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f002 ffb4 	bl	80045a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d102      	bne.n	8001658 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f805 	bl	8001662 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001662 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001686:	b29b      	uxth	r3, r3
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800169a:	b29b      	uxth	r3, r3
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <LL_EXTI_EnableIT_0_31+0x24>)
 80016c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016c6:	4905      	ldr	r1, [pc, #20]	; (80016dc <LL_EXTI_EnableIT_0_31+0x24>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58000800 	.word	0x58000800

080016e0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <LL_EXTI_DisableIT_0_31+0x28>)
 80016ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4905      	ldr	r1, [pc, #20]	; (8001708 <LL_EXTI_DisableIT_0_31+0x28>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	58000800 	.word	0x58000800

0800170c <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001716:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	43db      	mvns	r3, r3
 800171e:	4905      	ldr	r1, [pc, #20]	; (8001734 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001720:	4013      	ands	r3, r2
 8001722:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	58000800 	.word	0x58000800

08001738 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4904      	ldr	r1, [pc, #16]	; (8001758 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]

}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	58000800 	.word	0x58000800

0800175c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	43db      	mvns	r3, r3
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800176e:	4013      	ands	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	58000800 	.word	0x58000800

08001784 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	58000800 	.word	0x58000800

080017a8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4904      	ldr	r1, [pc, #16]	; (80017cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	58000800 	.word	0x58000800

080017d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	58000400 	.word	0x58000400

080017f0 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_PWR_ConfigPVD+0x80>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 020e 	bic.w	r2, r3, #14
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	491a      	ldr	r1, [pc, #104]	; (8001870 <HAL_PWR_ConfigPVD+0x80>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800180a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800180e:	f7ff ff67 	bl	80016e0 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8001812:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001816:	f7ff ff79 	bl	800170c <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800181a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800181e:	f7ff ffc3 	bl	80017a8 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001822:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001826:	f7ff ff99 	bl	800175c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001836:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800183a:	f7ff ff3d 	bl	80016b8 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800184a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800184e:	f7ff ff73 	bl	8001738 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800185e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001862:	f7ff ff8f 	bl	8001784 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	58000400 	.word	0x58000400

08001874 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_PWR_EnablePVD+0x1c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_PWR_EnablePVD+0x1c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6053      	str	r3, [r2, #4]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	58000400 	.word	0x58000400

08001894 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_PWREx_GetVoltageRange+0x18>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	58000400 	.word	0x58000400

080018b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018c2:	d101      	bne.n	80018c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_HSE_Enable>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_HSE_Disable>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_RCC_HSE_IsReady>:
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001922:	d101      	bne.n	8001928 <LL_RCC_HSE_IsReady+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_HSE_IsReady+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_RCC_HSI_Enable>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_RCC_HSI_Disable>:
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_RCC_HSI_IsReady>:
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d101      	bne.n	8001988 <LL_RCC_HSI_IsReady+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_RCC_HSI_IsReady+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_RCC_HSI48_Enable>:
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_HSI48_Disable>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_RCC_HSI48_IsReady>:
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d101      	bne.n	8001a1a <LL_RCC_HSI48_IsReady+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_RCC_HSI48_IsReady+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_RCC_LSE_Enable>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_RCC_LSE_Disable>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_LSE_EnableBypass>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_RCC_LSE_DisableBypass>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d101      	bne.n	8001ac6 <LL_RCC_LSE_IsReady+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_RCC_LSE_IsReady+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d101      	bne.n	8001b2e <LL_RCC_LSI1_IsReady+0x18>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_RCC_LSI1_IsReady+0x1a>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d101      	bne.n	8001b96 <LL_RCC_LSI2_IsReady+0x18>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_RCC_LSI2_IsReady+0x1a>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6013      	str	r3, [r2, #0]
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d101      	bne.n	8001c22 <LL_RCC_MSI_IsReady+0x16>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_RCC_MSI_IsReady+0x18>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c66:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2bb0      	cmp	r3, #176	; 0xb0
 8001c6c:	d901      	bls.n	8001c72 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c6e:	23b0      	movs	r3, #176	; 0xb0
 8001c70:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 0203 	bic.w	r2, r3, #3
 8001cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d4e:	f023 020f 	bic.w	r2, r3, #15
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e88:	d101      	bne.n	8001e8e <LL_RCC_PLL_IsReady+0x18>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_RCC_PLL_IsReady+0x1a>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0e:	d101      	bne.n	8001f14 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f34:	d101      	bne.n	8001f3a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d101      	bne.n	8001f60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f7e:	d101      	bne.n	8001f84 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fa2:	d101      	bne.n	8001fa8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b08d      	sub	sp, #52	; 0x34
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e363      	b.n	800268e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 808d 	beq.w	80020ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd4:	f7ff fe7d 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 8001fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fda:	f7ff ff83 	bl	8001ee4 <LL_RCC_PLL_GetMainSource>
 8001fde:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3e>
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d147      	bne.n	800207c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d144      	bne.n	800207c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e347      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002002:	f7ff fe28 	bl	8001c56 <LL_RCC_MSI_GetRange>
 8002006:	4603      	mov	r3, r0
 8002008:	429c      	cmp	r4, r3
 800200a:	d914      	bls.n	8002036 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fd61 	bl	8002ad8 <RCC_SetFlashLatencyFromMSIRange>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e336      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fe02 	bl	8001c2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe26 	bl	8001c80 <LL_RCC_MSI_SetCalibTrimming>
 8002034:	e013      	b.n	800205e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fdf7 	bl	8001c2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe1b 	bl	8001c80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd42 	bl	8002ad8 <RCC_SetFlashLatencyFromMSIRange>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e317      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800205e:	f000 fcc9 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002062:	4603      	mov	r3, r0
 8002064:	4aa4      	ldr	r2, [pc, #656]	; (80022f8 <HAL_RCC_OscConfig+0x344>)
 8002066:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002068:	4ba4      	ldr	r3, [pc, #656]	; (80022fc <HAL_RCC_OscConfig+0x348>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fdbf 	bl	8000bf0 <HAL_InitTick>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d039      	beq.n	80020ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e308      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01e      	beq.n	80020c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002084:	f7ff fda4 	bl	8001bd0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002088:	f7fe ff80 	bl	8000f8c <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002090:	f7fe ff7c 	bl	8000f8c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e2f5      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020a2:	f7ff fdb3 	bl	8001c0c <LL_RCC_MSI_IsReady>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f1      	beq.n	8002090 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fdbc 	bl	8001c2e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fde0 	bl	8001c80 <LL_RCC_MSI_SetCalibTrimming>
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c2:	f7ff fd94 	bl	8001bee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c6:	f7fe ff61 	bl	8000f8c <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ce:	f7fe ff5d 	bl	8000f8c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e2d6      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020e0:	f7ff fd94 	bl	8001c0c <LL_RCC_MSI_IsReady>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f1      	bne.n	80020ce <HAL_RCC_OscConfig+0x11a>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d047      	beq.n	800218a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fa:	f7ff fdea 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 80020fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002100:	f7ff fef0 	bl	8001ee4 <LL_RCC_PLL_GetMainSource>
 8002104:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x164>
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d134      	bne.n	800218a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e2b4      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0x180>
 800212e:	f7ff fbd1 	bl	80018d4 <LL_RCC_HSE_Enable>
 8002132:	e001      	b.n	8002138 <HAL_RCC_OscConfig+0x184>
 8002134:	f7ff fbdd 	bl	80018f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d012      	beq.n	8002166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe ff24 	bl	8000f8c <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe ff20 	bl	8000f8c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e299      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800215a:	f7ff fbd9 	bl	8001910 <LL_RCC_HSE_IsReady>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f1      	beq.n	8002148 <HAL_RCC_OscConfig+0x194>
 8002164:	e011      	b.n	800218a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe ff11 	bl	8000f8c <HAL_GetTick>
 800216a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216e:	f7fe ff0d 	bl	8000f8c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	; 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e286      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002180:	f7ff fbc6 	bl	8001910 <LL_RCC_HSE_IsReady>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f1      	bne.n	800216e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d04c      	beq.n	8002230 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002196:	f7ff fd9c 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 800219a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219c:	f7ff fea2 	bl	8001ee4 <LL_RCC_PLL_GetMainSource>
 80021a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x200>
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d10e      	bne.n	80021cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d10b      	bne.n	80021cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e266      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fbe5 	bl	8001994 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021ca:	e031      	b.n	8002230 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d019      	beq.n	8002208 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	f7ff fbae 	bl	8001934 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fed8 	bl	8000f8c <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e0:	f7fe fed4 	bl	8000f8c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e24d      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021f2:	f7ff fbbd 	bl	8001970 <LL_RCC_HSI_IsReady>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f1      	beq.n	80021e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fbc7 	bl	8001994 <LL_RCC_HSI_SetCalibTrimming>
 8002206:	e013      	b.n	8002230 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002208:	f7ff fba3 	bl	8001952 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe febe 	bl	8000f8c <HAL_GetTick>
 8002210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7fe feba 	bl	8000f8c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e233      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002226:	f7ff fba3 	bl	8001970 <LL_RCC_HSI_IsReady>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f1      	bne.n	8002214 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a3 	beq.w	8002390 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d076      	beq.n	8002340 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d046      	beq.n	80022ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800225e:	f7ff fc5a 	bl	8001b16 <LL_RCC_LSI1_IsReady>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d113      	bne.n	8002290 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002268:	f7ff fc33 	bl	8001ad2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800226c:	f7fe fe8e 	bl	8000f8c <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002274:	f7fe fe8a 	bl	8000f8c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e203      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002286:	f7ff fc46 	bl	8001b16 <LL_RCC_LSI1_IsReady>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f1      	beq.n	8002274 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002290:	f7ff fc53 	bl	8001b3a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fe7a 	bl	8000f8c <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800229c:	f7fe fe76 	bl	8000f8c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1ef      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022ae:	f7ff fc66 	bl	8001b7e <LL_RCC_LSI2_IsReady>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f1      	beq.n	800229c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc70 	bl	8001ba2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022c2:	f7ff fc17 	bl	8001af4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe61 	bl	8000f8c <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022ce:	f7fe fe5d 	bl	8000f8c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1d6      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022e0:	f7ff fc19 	bl	8001b16 <LL_RCC_LSI1_IsReady>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f1      	bne.n	80022ce <HAL_RCC_OscConfig+0x31a>
 80022ea:	e051      	b.n	8002390 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022ec:	f7ff fbf1 	bl	8001ad2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe4c 	bl	8000f8c <HAL_GetTick>
 80022f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022f6:	e00c      	b.n	8002312 <HAL_RCC_OscConfig+0x35e>
 80022f8:	20000004 	.word	0x20000004
 80022fc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002300:	f7fe fe44 	bl	8000f8c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1bd      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002312:	f7ff fc00 	bl	8001b16 <LL_RCC_LSI1_IsReady>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f1      	beq.n	8002300 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800231c:	f7ff fc1e 	bl	8001b5c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002322:	f7fe fe33 	bl	8000f8c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b03      	cmp	r3, #3
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1ac      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002334:	f7ff fc23 	bl	8001b7e <LL_RCC_LSI2_IsReady>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f1      	bne.n	8002322 <HAL_RCC_OscConfig+0x36e>
 800233e:	e027      	b.n	8002390 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002340:	f7ff fc0c 	bl	8001b5c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe fe22 	bl	8000f8c <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800234c:	f7fe fe1e 	bl	8000f8c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e197      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800235e:	f7ff fc0e 	bl	8001b7e <LL_RCC_LSI2_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f1      	bne.n	800234c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002368:	f7ff fbc4 	bl	8001af4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe fe0e 	bl	8000f8c <HAL_GetTick>
 8002370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002374:	f7fe fe0a 	bl	8000f8c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e183      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002386:	f7ff fbc6 	bl	8001b16 <LL_RCC_LSI1_IsReady>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f1      	bne.n	8002374 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d05b      	beq.n	8002454 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239c:	4ba7      	ldr	r3, [pc, #668]	; (800263c <HAL_RCC_OscConfig+0x688>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d114      	bne.n	80023d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80023a8:	f7ff fa12 	bl	80017d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fdee 	bl	8000f8c <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe fdea 	bl	8000f8c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e163      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	4b9d      	ldr	r3, [pc, #628]	; (800263c <HAL_RCC_OscConfig+0x688>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_OscConfig+0x42c>
 80023da:	f7ff fb24 	bl	8001a26 <LL_RCC_LSE_Enable>
 80023de:	e00c      	b.n	80023fa <HAL_RCC_OscConfig+0x446>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d104      	bne.n	80023f2 <HAL_RCC_OscConfig+0x43e>
 80023e8:	f7ff fb3f 	bl	8001a6a <LL_RCC_LSE_EnableBypass>
 80023ec:	f7ff fb1b 	bl	8001a26 <LL_RCC_LSE_Enable>
 80023f0:	e003      	b.n	80023fa <HAL_RCC_OscConfig+0x446>
 80023f2:	f7ff fb29 	bl	8001a48 <LL_RCC_LSE_Disable>
 80023f6:	f7ff fb49 	bl	8001a8c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7fe fdc3 	bl	8000f8c <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fdbf 	bl	8000f8c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e136      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002420:	f7ff fb45 	bl	8001aae <LL_RCC_LSE_IsReady>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ef      	beq.n	800240a <HAL_RCC_OscConfig+0x456>
 800242a:	e013      	b.n	8002454 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fdae 	bl	8000f8c <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fdaa 	bl	8000f8c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e121      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800244a:	f7ff fb30 	bl	8001aae <LL_RCC_LSE_IsReady>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ef      	bne.n	8002434 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02c      	beq.n	80024ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d014      	beq.n	8002492 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002468:	f7ff faa9 	bl	80019be <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fd8e 	bl	8000f8c <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002474:	f7fe fd8a 	bl	8000f8c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e103      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002486:	f7ff fabc 	bl	8001a02 <LL_RCC_HSI48_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f1      	beq.n	8002474 <HAL_RCC_OscConfig+0x4c0>
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002492:	f7ff faa5 	bl	80019e0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fd79 	bl	8000f8c <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249e:	f7fe fd75 	bl	8000f8c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ee      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024b0:	f7ff faa7 	bl	8001a02 <LL_RCC_HSI48_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80e4 	beq.w	800268c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c4:	f7ff fc05 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 80024c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	f040 80b4 	bne.w	8002644 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d123      	bne.n	8002532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d11c      	bne.n	8002532 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d114      	bne.n	8002532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d05d      	beq.n	80025ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b0c      	cmp	r3, #12
 8002536:	d058      	beq.n	80025ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0a1      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800254a:	f7ff fc85 	bl	8001e58 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800254e:	f7fe fd1d 	bl	8000f8c <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fd19 	bl	8000f8c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e092      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ef      	bne.n	8002556 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x68c>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002588:	4311      	orrs	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800258e:	0212      	lsls	r2, r2, #8
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025a2:	430a      	orrs	r2, r1
 80025a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025ac:	f7ff fc45 	bl	8001e3a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c0:	f7fe fce4 	bl	8000f8c <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fce0 	bl	8000f8c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e059      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ef      	beq.n	80025c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	e050      	b.n	800268c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e04f      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d147      	bne.n	800268c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025fc:	f7ff fc1d 	bl	8001e3a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002610:	f7fe fcbc 	bl	8000f8c <HAL_GetTick>
 8002614:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fcb8 	bl	8000f8c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e031      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ef      	beq.n	8002618 <HAL_RCC_OscConfig+0x664>
 8002638:	e028      	b.n	800268c <HAL_RCC_OscConfig+0x6d8>
 800263a:	bf00      	nop
 800263c:	58000400 	.word	0x58000400
 8002640:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d01e      	beq.n	8002688 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	f7ff fc05 	bl	8001e58 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fc9d 	bl	8000f8c <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fc99 	bl	8000f8c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e012      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_OscConfig+0x6e4>)
 8002682:	4013      	ands	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
 8002686:	e001      	b.n	800268c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3734      	adds	r7, #52	; 0x34
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
 8002696:	bf00      	nop
 8002698:	eefefffc 	.word	0xeefefffc

0800269c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e12d      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b98      	ldr	r3, [pc, #608]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d91b      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b95      	ldr	r3, [pc, #596]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4993      	ldr	r1, [pc, #588]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ce:	f7fe fc5d 	bl	8000f8c <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026d6:	f7fe fc59 	bl	8000f8c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e111      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e8:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d1ef      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff faef 	bl	8001cea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800270c:	f7fe fc3e 	bl	8000f8c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002714:	f7fe fc3a 	bl	8000f8c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0f2      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002726:	f7ff fbe9 	bl	8001efc <LL_RCC_IsActiveFlag_HPRE>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f1      	beq.n	8002714 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d016      	beq.n	800276a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fae6 	bl	8001d12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002746:	f7fe fc21 	bl	8000f8c <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800274e:	f7fe fc1d 	bl	8000f8c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0d5      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002760:	f7ff fbde 	bl	8001f20 <LL_RCC_IsActiveFlag_C2HPRE>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f1      	beq.n	800274e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fadf 	bl	8001d3e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002780:	f7fe fc04 	bl	8000f8c <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002788:	f7fe fc00 	bl	8000f8c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0b8      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800279a:	f7ff fbd4 	bl	8001f46 <LL_RCC_IsActiveFlag_SHDHPRE>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f1      	beq.n	8002788 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d016      	beq.n	80027de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fad9 	bl	8001d6c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027ba:	f7fe fbe7 	bl	8000f8c <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027c2:	f7fe fbe3 	bl	8000f8c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e09b      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027d4:	f7ff fbca 	bl	8001f6c <LL_RCC_IsActiveFlag_PPRE1>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f1      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d017      	beq.n	800281a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff facf 	bl	8001d94 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027f6:	f7fe fbc9 	bl	8000f8c <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027fe:	f7fe fbc5 	bl	8000f8c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e07d      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002810:	f7ff fbbe 	bl	8001f90 <LL_RCC_IsActiveFlag_PPRE2>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f1      	beq.n	80027fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d043      	beq.n	80028ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d106      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800282e:	f7ff f86f 	bl	8001910 <LL_RCC_HSE_IsReady>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11e      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e067      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d106      	bne.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002844:	f7ff fb17 	bl	8001e76 <LL_RCC_PLL_IsReady>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d113      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e05c      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800285a:	f7ff f9d7 	bl	8001c0c <LL_RCC_MSI_IsReady>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d108      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e051      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002868:	f7ff f882 	bl	8001970 <LL_RCC_HSI_IsReady>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e04a      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fa15 	bl	8001caa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fb84 	bl	8000f8c <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fb80 	bl	8000f8c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e036      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	f7ff fa18 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d1ec      	bne.n	8002888 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d21b      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 0207 	bic.w	r2, r3, #7
 80028c4:	4913      	ldr	r1, [pc, #76]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe fb5e 	bl	8000f8c <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028d4:	f7fe fb5a 	bl	8000f8c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e012      	b.n	800290c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_ClockConfig+0x278>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1ef      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028f4:	f000 f87e 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <HAL_RCC_ClockConfig+0x27c>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028fe:	f7fe fb51 	bl	8000fa4 <HAL_GetTickPrio>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe f973 	bl	8000bf0 <HAL_InitTick>
 800290a:	4603      	mov	r3, r0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58004000 	.word	0x58004000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	f7ff f9d6 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 8002926:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800292e:	f7ff f992 	bl	8001c56 <LL_RCC_MSI_GetRange>
 8002932:	4603      	mov	r3, r0
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e04b      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b04      	cmp	r3, #4
 8002948:	d102      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <HAL_RCC_GetSysClockFreq+0xd0>)
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e045      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b08      	cmp	r3, #8
 8002954:	d10a      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002956:	f7fe ffab 	bl	80018b0 <LL_RCC_HSE_IsEnabledDiv2>
 800295a:	4603      	mov	r3, r0
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e03a      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e037      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800296c:	f7ff faba 	bl	8001ee4 <LL_RCC_PLL_GetMainSource>
 8002970:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d003      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x64>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x6a>
 800297e:	e00d      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002982:	60bb      	str	r3, [r7, #8]
        break;
 8002984:	e015      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002986:	f7fe ff93 	bl	80018b0 <LL_RCC_HSE_IsEnabledDiv2>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002992:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002994:	e00d      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002998:	60bb      	str	r3, [r7, #8]
        break;
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800299c:	f7ff f95b 	bl	8001c56 <LL_RCC_MSI_GetRange>
 80029a0:	4603      	mov	r3, r0
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	60bb      	str	r3, [r7, #8]
        break;
 80029b0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80029b2:	f7ff fa72 	bl	8001e9a <LL_RCC_PLL_GetN>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	fb03 f402 	mul.w	r4, r3, r2
 80029be:	f7ff fa85 	bl	8001ecc <LL_RCC_PLL_GetDivider>
 80029c2:	4603      	mov	r3, r0
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	3301      	adds	r3, #1
 80029c8:	fbb4 f4f3 	udiv	r4, r4, r3
 80029cc:	f7ff fa72 	bl	8001eb4 <LL_RCC_PLL_GetR>
 80029d0:	4603      	mov	r3, r0
 80029d2:	0f5b      	lsrs	r3, r3, #29
 80029d4:	3301      	adds	r3, #1
 80029d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80029da:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029dc:	68fb      	ldr	r3, [r7, #12]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	080082f0 	.word	0x080082f0
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	01e84800 	.word	0x01e84800

080029f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b598      	push	{r3, r4, r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029f8:	f7ff ff90 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80029fc:	4604      	mov	r4, r0
 80029fe:	f7ff f9dd 	bl	8001dbc <LL_RCC_GetAHBPrescaler>
 8002a02:	4603      	mov	r3, r0
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd98      	pop	{r3, r4, r7, pc}
 8002a18:	08008290 	.word	0x08008290

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b598      	push	{r3, r4, r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a20:	f7ff ffe8 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a24:	4604      	mov	r4, r0
 8002a26:	f7ff f9f0 	bl	8001e0a <LL_RCC_GetAPB1Prescaler>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd98      	pop	{r3, r4, r7, pc}
 8002a44:	080082d0 	.word	0x080082d0

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b598      	push	{r3, r4, r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a4c:	f7ff ffd2 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a50:	4604      	mov	r4, r0
 8002a52:	f7ff f9e6 	bl	8001e22 <LL_RCC_GetAPB2Prescaler>
 8002a56:	4603      	mov	r3, r0
 8002a58:	0adb      	lsrs	r3, r3, #11
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd98      	pop	{r3, r4, r7, pc}
 8002a70:	080082d0 	.word	0x080082d0

08002a74 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	226f      	movs	r2, #111	; 0x6f
 8002a82:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002a84:	f7ff f925 	bl	8001cd2 <LL_RCC_GetSysClkSource>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002a8e:	f7ff f995 	bl	8001dbc <LL_RCC_GetAHBPrescaler>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002a98:	f7ff f9b7 	bl	8001e0a <LL_RCC_GetAPB1Prescaler>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002aa2:	f7ff f9be 	bl	8001e22 <LL_RCC_GetAPB2Prescaler>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002aac:	f7ff f992 	bl	8001dd4 <LL_C2_RCC_GetAHBPrescaler>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002ab6:	f7ff f99a 	bl	8001dee <LL_RCC_GetAHB4Prescaler>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <HAL_RCC_GetClockConfig+0x60>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0207 	and.w	r2, r3, #7
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	58004000 	.word	0x58004000

08002ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ae4:	d903      	bls.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e007      	b.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002afe:	f7ff f976 	bl	8001dee <LL_RCC_GetAHB4Prescaler>
 8002b02:	4603      	mov	r3, r0
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	0c9c      	lsrs	r4, r3, #18
 8002b22:	f7fe feb7 	bl	8001894 <HAL_PWREx_GetVoltageRange>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f000 f80c 	bl	8002b48 <RCC_SetFlashLatency>
 8002b30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	080082f0 	.word	0x080082f0
 8002b40:	08008290 	.word	0x08008290
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b093      	sub	sp, #76	; 0x4c
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <RCC_SetFlashLatency+0xe8>)
 8002b54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b5e:	4a35      	ldr	r2, [pc, #212]	; (8002c34 <RCC_SetFlashLatency+0xec>)
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <RCC_SetFlashLatency+0xf0>)
 8002b6c:	f107 040c 	add.w	r4, r7, #12
 8002b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b76:	2300      	movs	r3, #0
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d11a      	bne.n	8002bb8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	643b      	str	r3, [r7, #64]	; 0x40
 8002b86:	e013      	b.n	8002bb0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	443b      	add	r3, r7
 8002b90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d807      	bhi.n	8002baa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	3348      	adds	r3, #72	; 0x48
 8002ba0:	443b      	add	r3, r7
 8002ba2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ba8:	e020      	b.n	8002bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	3301      	adds	r3, #1
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d9e8      	bls.n	8002b88 <RCC_SetFlashLatency+0x40>
 8002bb6:	e019      	b.n	8002bec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	e013      	b.n	8002be6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	443b      	add	r3, r7
 8002bc6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d807      	bhi.n	8002be0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3348      	adds	r3, #72	; 0x48
 8002bd6:	443b      	add	r3, r7
 8002bd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002bde:	e005      	b.n	8002bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	3301      	adds	r3, #1
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d9e8      	bls.n	8002bbe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <RCC_SetFlashLatency+0xf4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 0207 	bic.w	r2, r3, #7
 8002bf4:	4911      	ldr	r1, [pc, #68]	; (8002c3c <RCC_SetFlashLatency+0xf4>)
 8002bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bfc:	f7fe f9c6 	bl	8000f8c <HAL_GetTick>
 8002c00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c02:	e008      	b.n	8002c16 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c04:	f7fe f9c2 	bl	8000f8c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e007      	b.n	8002c26 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <RCC_SetFlashLatency+0xf4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ef      	bne.n	8002c04 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	374c      	adds	r7, #76	; 0x4c
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0800824c 	.word	0x0800824c
 8002c34:	0800825c 	.word	0x0800825c
 8002c38:	08008268 	.word	0x08008268
 8002c3c:	58004000 	.word	0x58004000

08002c40 <LL_RCC_LSE_IsEnabled>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_RCC_LSE_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_RCC_LSE_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_LSE_IsReady>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d101      	bne.n	8002c7c <LL_RCC_LSE_IsReady+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_RCC_LSE_IsReady+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_SetRFWKPClockSource>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_SetSMPSClockSource>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_SetSMPSPrescaler>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_SetUSARTClockSource>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_SetLPUARTClockSource>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_SetI2CClockSource>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d92:	43db      	mvns	r3, r3
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_RCC_SetLPTIMClockSource>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_SetSAIClockSource>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_SetRNGClockSource>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_SetCLK48ClockSource>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_SetUSBClockSource>:
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffe3 	bl	8002e40 <LL_RCC_SetCLK48ClockSource>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <LL_RCC_SetADCClockSource>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_SetRTCClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_GetRTCClockSource>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_ForceBackupDomainReset>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_PLLSAI1_Enable>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_PLLSAI1_Disable>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f86:	d101      	bne.n	8002f8c <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d034      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fbc:	d021      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fc2:	d81b      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc8:	d01d      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fce:	d815      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d110      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fea:	e00d      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f94d 	bl	8003290 <RCCEx_PLLSAI1_ConfigNP>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ffa:	e005      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
        break;
 8003000:	e002      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003002:	bf00      	nop
 8003004:	e000      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003008:	7ffb      	ldrb	r3, [r7, #31]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fee8 	bl	8002de8 <LL_RCC_SetSAIClockSource>
 8003018:	e001      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003026:	2b00      	cmp	r3, #0
 8003028:	d046      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800302a:	f7ff ff56 	bl	8002eda <LL_RCC_GetRTCClockSource>
 800302e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	429a      	cmp	r2, r3
 8003038:	d03c      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800303a:	f7fe fbc9 	bl	80017d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff30 	bl	8002eae <LL_RCC_SetRTCClockSource>
 800304e:	e02e      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800305a:	f7ff ff4b 	bl	8002ef4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800305e:	f7ff ff5a 	bl	8002f16 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800307a:	f7ff fde1 	bl	8002c40 <LL_RCC_LSE_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d114      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003084:	f7fd ff82 	bl	8000f8c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800308a:	e00b      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fd ff7e 	bl	8000f8c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d902      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	77fb      	strb	r3, [r7, #31]
              break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80030a4:	f7ff fdde 	bl	8002c64 <LL_RCC_LSE_IsReady>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d1ee      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	77bb      	strb	r3, [r7, #30]
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
 80030b6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fe2a 	bl	8002d22 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fe35 	bl	8002d4e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe5d 	bl	8002db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe52 	bl	8002db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe2a 	bl	8002d7a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fe1f 	bl	8002d7a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d022      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe8d 	bl	8002e6c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d107      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003174:	d10b      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f8e3 	bl	8003346 <RCCEx_PLLSAI1_ConfigNQ>
 8003180:	4603      	mov	r3, r0
 8003182:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003184:	7ffb      	ldrb	r3, [r7, #31]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800318a:	7ffb      	ldrb	r3, [r7, #31]
 800318c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02b      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d008      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fe2a 	bl	8002e14 <LL_RCC_SetRNGClockSource>
 80031c0:	e00a      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7ff fe21 	bl	8002e14 <LL_RCC_SetRNGClockSource>
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fe34 	bl	8002e40 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031e0:	d107      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d022      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe3d 	bl	8002e82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003210:	d107      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322a:	d10b      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8e3 	bl	80033fc <RCCEx_PLLSAI1_ConfigNR>
 8003236:	4603      	mov	r3, r0
 8003238:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003240:	7ffb      	ldrb	r3, [r7, #31]
 8003242:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd26 	bl	8002ca6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd45 	bl	8002cfa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fd2c 	bl	8002cd2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800327a:	7fbb      	ldrb	r3, [r7, #30]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003288:	f7ff fcfe 	bl	8002c88 <LL_RCC_MSI_EnablePLLMode>
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800329c:	f7ff fe5b 	bl	8002f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032a0:	f7fd fe74 	bl	8000f8c <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032a6:	e009      	b.n	80032bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a8:	f7fd fe70 	bl	8000f8c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e004      	b.n	80032c6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032bc:	f7ff fe5a 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d137      	bne.n	800333c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e0:	4313      	orrs	r3, r2
 80032e2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032fa:	f7ff fe1d 	bl	8002f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fd fe45 	bl	8000f8c <HAL_GetTick>
 8003302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003304:	e009      	b.n	800331a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003306:	f7fd fe41 	bl	8000f8c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	73fb      	strb	r3, [r7, #15]
        break;
 8003318:	e004      	b.n	8003324 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800331a:	f7ff fe2b 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	d1f0      	bne.n	8003306 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003338:	4313      	orrs	r3, r2
 800333a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003352:	f7ff fe00 	bl	8002f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003356:	f7fd fe19 	bl	8000f8c <HAL_GetTick>
 800335a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800335c:	e009      	b.n	8003372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800335e:	f7fd fe15 	bl	8000f8c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d902      	bls.n	8003372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	73fb      	strb	r3, [r7, #15]
      break;
 8003370:	e004      	b.n	800337c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003372:	f7ff fdff 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d137      	bne.n	80033f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003396:	4313      	orrs	r3, r2
 8003398:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033b0:	f7ff fdc2 	bl	8002f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fd fdea 	bl	8000f8c <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033bc:	f7fd fde6 	bl	8000f8c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
        break;
 80033ce:	e004      	b.n	80033da <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033d0:	f7ff fdd0 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d1f0      	bne.n	80033bc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003408:	f7ff fda5 	bl	8002f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800340c:	f7fd fdbe 	bl	8000f8c <HAL_GetTick>
 8003410:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003412:	e009      	b.n	8003428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003414:	f7fd fdba 	bl	8000f8c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d902      	bls.n	8003428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	73fb      	strb	r3, [r7, #15]
      break;
 8003426:	e004      	b.n	8003432 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003428:	f7ff fda4 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d137      	bne.n	80034a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344c:	4313      	orrs	r3, r2
 800344e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003466:	f7ff fd67 	bl	8002f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346a:	f7fd fd8f 	bl	8000f8c <HAL_GetTick>
 800346e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003470:	e009      	b.n	8003486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003472:	f7fd fd8b 	bl	8000f8c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d902      	bls.n	8003486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	73fb      	strb	r3, [r7, #15]
        break;
 8003484:	e004      	b.n	8003490 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003486:	f7ff fd75 	bl	8002f74 <LL_RCC_PLLSAI1_IsReady>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d1f0      	bne.n	8003472 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a4:	4313      	orrs	r3, r2
 80034a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e049      	b.n	8003558 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f841 	bl	8003560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f000 f9d5 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d001      	beq.n	800358c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e036      	b.n	80035fa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_TIM_Base_Start_IT+0x94>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x44>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d115      	bne.n	80035e4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_TIM_Base_Start_IT+0x98>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d015      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x82>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d011      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e000      	b.n	80035f8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	00010007 	.word	0x00010007

08003610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0202 	mvn.w	r2, #2
 800363c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f905 	bl	8003862 <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8f7 	bl	800384e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f908 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0204 	mvn.w	r2, #4
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8db 	bl	8003862 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8cd 	bl	800384e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8de 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0208 	mvn.w	r2, #8
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2204      	movs	r2, #4
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8b1 	bl	8003862 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8a3 	bl	800384e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8b4 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b10      	cmp	r3, #16
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b10      	cmp	r3, #16
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0210 	mvn.w	r2, #16
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2208      	movs	r2, #8
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f887 	bl	8003862 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f879 	bl	800384e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f88a 	bl	8003876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0201 	mvn.w	r2, #1
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd f8fc 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8de 	bl	800397c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8d1 	bl	8003990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f838 	bl	800388a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d10e      	bne.n	8003846 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b20      	cmp	r3, #32
 8003834:	d107      	bne.n	8003846 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0220 	mvn.w	r2, #32
 800383e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f891 	bl	8003968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	; (800395c <TIM_Base_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x20>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a21      	ldr	r2, [pc, #132]	; (800395c <TIM_Base_SetConfig+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x52>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x52>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <TIM_Base_SetConfig+0xc0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x52>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <TIM_Base_SetConfig+0xc4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0c      	ldr	r2, [pc, #48]	; (800395c <TIM_Base_SetConfig+0xbc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_Base_SetConfig+0xa0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <TIM_Base_SetConfig+0xc0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0xa0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <TIM_Base_SetConfig+0xc4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800

08003968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_RCC_GetUSARTClockSource>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4013      	ands	r3, r2
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_GetLPUARTClockSource>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4013      	ands	r3, r2
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e042      	b.n	8003a7c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fd f83d 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2224      	movs	r2, #36	; 0x24
 8003a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8c2 	bl	8003bb0 <UART_SetConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e022      	b.n	8003a7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fadc 	bl	8003ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fb63 	bl	8004140 <UART_CheckIdleState>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	f040 8083 	bne.w	8003ba6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Transmit+0x28>
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e07b      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Transmit+0x3a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e074      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2221      	movs	r2, #33	; 0x21
 8003ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fa59 	bl	8000f8c <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x84>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b18:	e02c      	b.n	8003b74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fb56 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e039      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1cc      	bne.n	8003b1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fb23 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e006      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b08c      	sub	sp, #48	; 0x30
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4baf      	ldr	r3, [pc, #700]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4aa4      	ldr	r2, [pc, #656]	; (8003ea0 <UART_SetConfig+0x2f0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f023 010f 	bic.w	r1, r3, #15
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a95      	ldr	r2, [pc, #596]	; (8003ea4 <UART_SetConfig+0x2f4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d125      	bne.n	8003ca0 <UART_SetConfig+0xf0>
 8003c54:	2003      	movs	r0, #3
 8003c56:	f7ff fea5 	bl	80039a4 <LL_RCC_GetUSARTClockSource>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d81b      	bhi.n	8003c98 <UART_SetConfig+0xe8>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0xb8>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e042      	b.n	8003d06 <UART_SetConfig+0x156>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e03e      	b.n	8003d06 <UART_SetConfig+0x156>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e03a      	b.n	8003d06 <UART_SetConfig+0x156>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e036      	b.n	8003d06 <UART_SetConfig+0x156>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e032      	b.n	8003d06 <UART_SetConfig+0x156>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a7e      	ldr	r2, [pc, #504]	; (8003ea0 <UART_SetConfig+0x2f0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12a      	bne.n	8003d00 <UART_SetConfig+0x150>
 8003caa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003cae:	f7ff fe89 	bl	80039c4 <LL_RCC_GetLPUARTClockSource>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb8:	d01a      	beq.n	8003cf0 <UART_SetConfig+0x140>
 8003cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cbe:	d81b      	bhi.n	8003cf8 <UART_SetConfig+0x148>
 8003cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc4:	d00c      	beq.n	8003ce0 <UART_SetConfig+0x130>
 8003cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cca:	d815      	bhi.n	8003cf8 <UART_SetConfig+0x148>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <UART_SetConfig+0x128>
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d008      	beq.n	8003ce8 <UART_SetConfig+0x138>
 8003cd6:	e00f      	b.n	8003cf8 <UART_SetConfig+0x148>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cde:	e012      	b.n	8003d06 <UART_SetConfig+0x156>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce6:	e00e      	b.n	8003d06 <UART_SetConfig+0x156>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cee:	e00a      	b.n	8003d06 <UART_SetConfig+0x156>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf6:	e006      	b.n	8003d06 <UART_SetConfig+0x156>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	e002      	b.n	8003d06 <UART_SetConfig+0x156>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a65      	ldr	r2, [pc, #404]	; (8003ea0 <UART_SetConfig+0x2f0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	f040 8097 	bne.w	8003e40 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d823      	bhi.n	8003d62 <UART_SetConfig+0x1b2>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <UART_SetConfig+0x170>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d45 	.word	0x08003d45
 8003d24:	08003d63 	.word	0x08003d63
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d63 	.word	0x08003d63
 8003d30:	08003d53 	.word	0x08003d53
 8003d34:	08003d63 	.word	0x08003d63
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d63 	.word	0x08003d63
 8003d40:	08003d5b 	.word	0x08003d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d44:	f7fe fe6a 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d4a:	e010      	b.n	8003d6e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <UART_SetConfig+0x2f8>)
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d50:	e00d      	b.n	8003d6e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7fe fde3 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d58:	e009      	b.n	8003d6e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e005      	b.n	8003d6e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 812a 	beq.w	8003fca <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	4a4c      	ldr	r2, [pc, #304]	; (8003eac <UART_SetConfig+0x2fc>)
 8003d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d305      	bcc.n	8003da6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d903      	bls.n	8003dae <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dac:	e10d      	b.n	8003fca <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	2200      	movs	r2, #0
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	60fa      	str	r2, [r7, #12]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	4a3c      	ldr	r2, [pc, #240]	; (8003eac <UART_SetConfig+0x2fc>)
 8003dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dd0:	f7fc fa26 	bl	8000220 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	020b      	lsls	r3, r1, #8
 8003de6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dea:	0202      	lsls	r2, r0, #8
 8003dec:	6979      	ldr	r1, [r7, #20]
 8003dee:	6849      	ldr	r1, [r1, #4]
 8003df0:	0849      	lsrs	r1, r1, #1
 8003df2:	2000      	movs	r0, #0
 8003df4:	460c      	mov	r4, r1
 8003df6:	4605      	mov	r5, r0
 8003df8:	eb12 0804 	adds.w	r8, r2, r4
 8003dfc:	eb43 0905 	adc.w	r9, r3, r5
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	469a      	mov	sl, r3
 8003e08:	4693      	mov	fp, r2
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	465b      	mov	r3, fp
 8003e0e:	4640      	mov	r0, r8
 8003e10:	4649      	mov	r1, r9
 8003e12:	f7fc fa05 	bl	8000220 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e24:	d308      	bcc.n	8003e38 <UART_SetConfig+0x288>
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2c:	d204      	bcs.n	8003e38 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e0c8      	b.n	8003fca <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e3e:	e0c4      	b.n	8003fca <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	d16d      	bne.n	8003f26 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d82d      	bhi.n	8003eb0 <UART_SetConfig+0x300>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0x2ac>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e7d 	.word	0x08003e7d
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003e8b 	.word	0x08003e8b
 8003e6c:	08003eb1 	.word	0x08003eb1
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003e93 	.word	0x08003e93
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e7c:	f7fe fde4 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e82:	e01b      	b.n	8003ebc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <UART_SetConfig+0x2f8>)
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e88:	e018      	b.n	8003ebc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8a:	f7fe fd47 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e90:	e014      	b.n	8003ebc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e98:	e010      	b.n	8003ebc <UART_SetConfig+0x30c>
 8003e9a:	bf00      	nop
 8003e9c:	cfff69f3 	.word	0xcfff69f3
 8003ea0:	40008000 	.word	0x40008000
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	08008330 	.word	0x08008330
      default:
        pclk = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8083 	beq.w	8003fca <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	4a4a      	ldr	r2, [pc, #296]	; (8003ff4 <UART_SetConfig+0x444>)
 8003eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed6:	005a      	lsls	r2, r3, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	441a      	add	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d916      	bls.n	8003f1e <UART_SetConfig+0x36e>
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d212      	bcs.n	8003f1e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f023 030f 	bic.w	r3, r3, #15
 8003f00:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	8bfb      	ldrh	r3, [r7, #30]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	8bfa      	ldrh	r2, [r7, #30]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e055      	b.n	8003fca <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f24:	e051      	b.n	8003fca <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	d822      	bhi.n	8003f76 <UART_SetConfig+0x3c6>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x388>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f59 	.word	0x08003f59
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003f67 	.word	0x08003f67
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f77 	.word	0x08003f77
 8003f50:	08003f77 	.word	0x08003f77
 8003f54:	08003f6f 	.word	0x08003f6f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7fe fd76 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f5e:	e010      	b.n	8003f82 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <UART_SetConfig+0x448>)
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f64:	e00d      	b.n	8003f82 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7fe fcd9 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f6c:	e009      	b.n	8003f82 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f74:	e005      	b.n	8003f82 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f80:	bf00      	nop
    }

    if (pclk != 0U)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <UART_SetConfig+0x444>)
 8003f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	441a      	add	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d908      	bls.n	8003fc4 <UART_SetConfig+0x414>
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d204      	bcs.n	8003fc4 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a3a      	ldr	r2, [r7, #32]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	e002      	b.n	8003fca <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003fe6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3730      	adds	r7, #48	; 0x30
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff4:	08008330 	.word	0x08008330
 8003ff8:	00f42400 	.word	0x00f42400

08003ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01a      	beq.n	8004112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d10a      	bne.n	8004112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004150:	f7fc ff1c 	bl	8000f8c <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b08      	cmp	r3, #8
 8004162:	d10e      	bne.n	8004182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f82f 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e025      	b.n	80041ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d10e      	bne.n	80041ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f819 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e00f      	b.n	80041ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b09c      	sub	sp, #112	; 0x70
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	e0a9      	b.n	800433c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	f000 80a5 	beq.w	800433c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fc fecb 	bl	8000f8c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <UART_WaitOnFlagUntilTimeout+0x32>
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d140      	bne.n	800428a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800421c:	667b      	str	r3, [r7, #100]	; 0x64
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004228:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800422c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e6      	bne.n	8004208 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	663b      	str	r3, [r7, #96]	; 0x60
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800425a:	64ba      	str	r2, [r7, #72]	; 0x48
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e5      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e069      	b.n	800435e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d051      	beq.n	800433c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a6:	d149      	bne.n	800433c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
 80042d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e6      	bne.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	613b      	str	r3, [r7, #16]
   return(result);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004304:	623a      	str	r2, [r7, #32]
 8004306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	69f9      	ldr	r1, [r7, #28]
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	61bb      	str	r3, [r7, #24]
   return(result);
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e5      	bne.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e010      	b.n	800435e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	429a      	cmp	r2, r3
 8004358:	f43f af46 	beq.w	80041e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3770      	adds	r7, #112	; 0x70
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UARTEx_DisableFifoMode+0x16>
 8004378:	2302      	movs	r3, #2
 800437a:	e027      	b.n	80043cc <HAL_UARTEx_DisableFifoMode+0x66>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e02d      	b.n	800444c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f84f 	bl	80044d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e02d      	b.n	80044c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f811 	bl	80044d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044f0:	e031      	b.n	8004556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044f2:	2308      	movs	r3, #8
 80044f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044f6:	2308      	movs	r3, #8
 80044f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	0e5b      	lsrs	r3, r3, #25
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	0f5b      	lsrs	r3, r3, #29
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800451a:	7bbb      	ldrb	r3, [r7, #14]
 800451c:	7b3a      	ldrb	r2, [r7, #12]
 800451e:	4911      	ldr	r1, [pc, #68]	; (8004564 <UARTEx_SetNbDataToProcess+0x94>)
 8004520:	5c8a      	ldrb	r2, [r1, r2]
 8004522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004526:	7b3a      	ldrb	r2, [r7, #12]
 8004528:	490f      	ldr	r1, [pc, #60]	; (8004568 <UARTEx_SetNbDataToProcess+0x98>)
 800452a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800452c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	7b7a      	ldrb	r2, [r7, #13]
 800453c:	4909      	ldr	r1, [pc, #36]	; (8004564 <UARTEx_SetNbDataToProcess+0x94>)
 800453e:	5c8a      	ldrb	r2, [r1, r2]
 8004540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004544:	7b7a      	ldrb	r2, [r7, #13]
 8004546:	4908      	ldr	r1, [pc, #32]	; (8004568 <UARTEx_SetNbDataToProcess+0x98>)
 8004548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800454a:	fb93 f3f2 	sdiv	r3, r3, r2
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	08008348 	.word	0x08008348
 8004568:	08008350 	.word	0x08008350

0800456c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004574:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	b29b      	uxth	r3, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	b29b      	uxth	r3, r3
 800458a:	4013      	ands	r3, r2
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045a2:	b084      	sub	sp, #16
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	f107 0014 	add.w	r0, r7, #20
 80045b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	b004      	add	sp, #16
 80045e2:	4770      	bx	lr

080045e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <SysTick_Handler+0x1c>)
 80045ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045ec:	f001 fd56 	bl	800609c <xTaskGetSchedulerState>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045f6:	f002 fb3f 	bl	8006c78 <xPortSysTickHandler>
  }
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010

08004604 <vApplicationIdleHook>:

/**
  Dummy implementation of the callback function vApplicationIdleHook().
*/
#if (configUSE_IDLE_HOOK == 1)
__WEAK void vApplicationIdleHook (void){}
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <vApplicationGetIdleTaskMemory+0x2c>)
 8004630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <vApplicationGetIdleTaskMemory+0x30>)
 8004636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	601a      	str	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	2000047c 	.word	0x2000047c
 8004650:	20000538 	.word	0x20000538

08004654 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <vApplicationGetTimerTaskMemory+0x2c>)
 8004664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a06      	ldr	r2, [pc, #24]	; (8004684 <vApplicationGetTimerTaskMemory+0x30>)
 800466a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000738 	.word	0x20000738
 8004684:	200007f4 	.word	0x200007f4

08004688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0208 	add.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d103      	bne.n	800474a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <vListInsert+0x2e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f6      	bcs.n	8004752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800481a:	f002 f99b 	bl	8006b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	3b01      	subs	r3, #1
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d114      	bne.n	800489a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fa49 	bl	8005d14 <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <xQueueGenericReset+0xcc>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	e009      	b.n	80048ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3310      	adds	r3, #16
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fef2 	bl	8004688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff feed 	bl	8004688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048ae:	f002 f981 	bl	8006bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <xQueueGenericCreateStatic+0x52>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <xQueueGenericCreateStatic+0x56>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericCreateStatic+0x58>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueGenericCreateStatic+0x7e>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericCreateStatic+0x82>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericCreateStatic+0x84>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800495e:	2354      	movs	r3, #84	; 0x54
 8004960:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b54      	cmp	r3, #84	; 0x54
 8004966:	d00a      	beq.n	800497e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800497e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004992:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f83f 	bl	8004a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3730      	adds	r7, #48	; 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xQueueGenericCreate+0x2a>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	613b      	str	r3, [r7, #16]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	3354      	adds	r3, #84	; 0x54
 80049e8:	4618      	mov	r0, r3
 80049ea:	f002 f9d5 	bl	8006d98 <pvPortMalloc>
 80049ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3354      	adds	r3, #84	; 0x54
 80049fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a08:	79fa      	ldrb	r2, [r7, #7]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f805 	bl	8004a24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
	}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a52:	2101      	movs	r1, #1
 8004a54:	69b8      	ldr	r0, [r7, #24]
 8004a56:	f7ff fecb 	bl	80047f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2200      	movs	r2, #0
 8004a66:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08e      	sub	sp, #56	; 0x38
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <xQueueGenericSend+0x40>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <xQueueGenericSend+0x44>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <xQueueGenericSend+0x46>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	623b      	str	r3, [r7, #32]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d103      	bne.n	8004ade <xQueueGenericSend+0x6e>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <xQueueGenericSend+0x72>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <xQueueGenericSend+0x74>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	61fb      	str	r3, [r7, #28]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004afe:	f001 facd 	bl	800609c <xTaskGetSchedulerState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <xQueueGenericSend+0x9e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <xQueueGenericSend+0xa2>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <xQueueGenericSend+0xa4>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	61bb      	str	r3, [r7, #24]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b2e:	f002 f811 	bl	8006b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <xQueueGenericSend+0xd4>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d145      	bne.n	8004bd0 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b50:	f000 fa3a 	bl	8004fc8 <prvCopyDataToQueue>
 8004b54:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d102      	bne.n	8004b6a <xQueueGenericSend+0xfa>
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d12e      	bne.n	8004bc8 <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6c:	f000 fbeb 	bl	8005346 <prvNotifyQueueSetContainer>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d028      	beq.n	8004bc8 <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <xQueueGenericSend+0x230>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	e01f      	b.n	8004bc8 <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d010      	beq.n	8004bb2 <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	3324      	adds	r3, #36	; 0x24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f8bd 	bl	8005d14 <xTaskRemoveFromEventList>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d013      	beq.n	8004bc8 <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8004ba0:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <xQueueGenericSend+0x230>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	e00a      	b.n	8004bc8 <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <xQueueGenericSend+0x230>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bc8:	f001 fff4 	bl	8006bb4 <vPortExitCritical>
				return pdPASS;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e063      	b.n	8004c98 <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd6:	f001 ffed 	bl	8006bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e05c      	b.n	8004c98 <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 f8f7 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bf2:	f001 ffdf 	bl	8006bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bf6:	f000 fe5b 	bl	80058b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bfa:	f001 ffab 	bl	8006b54 <vPortEnterCritical>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d103      	bne.n	8004c14 <xQueueGenericSend+0x1a4>
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d103      	bne.n	8004c2a <xQueueGenericSend+0x1ba>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c2a:	f001 ffc3 	bl	8006bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c2e:	1d3a      	adds	r2, r7, #4
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 f8e6 	bl	8005e08 <xTaskCheckForTimeOut>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d124      	bne.n	8004c8c <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c44:	f000 fac5 	bl	80051d2 <prvIsQueueFull>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d018      	beq.n	8004c80 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	3310      	adds	r3, #16
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 f80c 	bl	8005c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5e:	f000 fa43 	bl	80050e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c62:	f000 fe33 	bl	80058cc <xTaskResumeAll>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f47f af60 	bne.w	8004b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <xQueueGenericSend+0x230>)
 8004c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	e756      	b.n	8004b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c82:	f000 fa31 	bl	80050e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c86:	f000 fe21 	bl	80058cc <xTaskResumeAll>
 8004c8a:	e750      	b.n	8004b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c8e:	f000 fa2b 	bl	80050e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c92:	f000 fe1b 	bl	80058cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3738      	adds	r7, #56	; 0x38
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b090      	sub	sp, #64	; 0x40
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <xQueueGenericSendFromISR+0x3c>
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericSendFromISR+0x40>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <xQueueGenericSendFromISR+0x42>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d103      	bne.n	8004d0e <xQueueGenericSendFromISR+0x6a>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <xQueueGenericSendFromISR+0x6e>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <xQueueGenericSendFromISR+0x70>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d2e:	f001 fff3 	bl	8006d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d32:	f3ef 8211 	mrs	r2, BASEPRI
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	61fa      	str	r2, [r7, #28]
 8004d48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <xQueueGenericSendFromISR+0xbc>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d146      	bne.n	8004dee <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d76:	f000 f927 	bl	8004fc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d129      	bne.n	8004dd8 <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d102      	bne.n	8004d98 <xQueueGenericSendFromISR+0xf4>
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d127      	bne.n	8004de8 <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d9a:	f000 fad4 	bl	8005346 <prvNotifyQueueSetContainer>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d021      	beq.n	8004de8 <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01e      	beq.n	8004de8 <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e01a      	b.n	8004de8 <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	3324      	adds	r3, #36	; 0x24
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 ffa8 	bl	8005d14 <xTaskRemoveFromEventList>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e007      	b.n	8004de8 <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ddc:	3301      	adds	r3, #1
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	b25a      	sxtb	r2, r3
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004dec:	e001      	b.n	8004df2 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3740      	adds	r7, #64	; 0x40
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	; 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <xQueueReceive+0x30>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	623b      	str	r3, [r7, #32]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <xQueueReceive+0x3e>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <xQueueReceive+0x42>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueReceive+0x44>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xQueueReceive+0x5e>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	61fb      	str	r3, [r7, #28]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e66:	f001 f919 	bl	800609c <xTaskGetSchedulerState>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <xQueueReceive+0x6e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <xQueueReceive+0x72>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <xQueueReceive+0x74>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueReceive+0x8e>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61bb      	str	r3, [r7, #24]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e96:	f001 fe5d 	bl	8006b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01f      	beq.n	8004ee6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eaa:	f000 f8f7 	bl	800509c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1e5a      	subs	r2, r3, #1
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	3310      	adds	r3, #16
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 ff26 	bl	8005d14 <xTaskRemoveFromEventList>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ece:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <xQueueReceive+0x1bc>)
 8004ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ede:	f001 fe69 	bl	8006bb4 <vPortExitCritical>
				return pdPASS;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e069      	b.n	8004fba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eec:	f001 fe62 	bl	8006bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e062      	b.n	8004fba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004efa:	f107 0310 	add.w	r3, r7, #16
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 ff6c 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f08:	f001 fe54 	bl	8006bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f0c:	f000 fcd0 	bl	80058b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f10:	f001 fe20 	bl	8006b54 <vPortEnterCritical>
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f1a:	b25b      	sxtb	r3, r3
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d103      	bne.n	8004f2a <xQueueReceive+0x122>
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f30:	b25b      	sxtb	r3, r3
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d103      	bne.n	8004f40 <xQueueReceive+0x138>
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f40:	f001 fe38 	bl	8006bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f44:	1d3a      	adds	r2, r7, #4
 8004f46:	f107 0310 	add.w	r3, r7, #16
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 ff5b 	bl	8005e08 <xTaskCheckForTimeOut>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d123      	bne.n	8004fa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5a:	f000 f924 	bl	80051a6 <prvIsQueueEmpty>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d017      	beq.n	8004f94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	3324      	adds	r3, #36	; 0x24
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fe81 	bl	8005c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f74:	f000 f8b8 	bl	80050e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f78:	f000 fca8 	bl	80058cc <xTaskResumeAll>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d189      	bne.n	8004e96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <xQueueReceive+0x1bc>)
 8004f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	e780      	b.n	8004e96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	f000 f8a7 	bl	80050e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f9a:	f000 fc97 	bl	80058cc <xTaskResumeAll>
 8004f9e:	e77a      	b.n	8004e96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f000 f8a1 	bl	80050e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa6:	f000 fc91 	bl	80058cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fac:	f000 f8fb 	bl	80051a6 <prvIsQueueEmpty>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f43f af6f 	beq.w	8004e96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3730      	adds	r7, #48	; 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d14d      	bne.n	800508a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f870 	bl	80060d8 <xTaskPriorityDisinherit>
 8004ff8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	e043      	b.n	800508a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d119      	bne.n	800503c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6858      	ldr	r0, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	461a      	mov	r2, r3
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	f002 f9cd 	bl	80073b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	d32b      	bcc.n	800508a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e026      	b.n	800508a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68d8      	ldr	r0, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	461a      	mov	r2, r3
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	f002 f9b3 	bl	80073b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	425b      	negs	r3, r3
 8005056:	441a      	add	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d207      	bcs.n	8005078 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	425b      	negs	r3, r3
 8005072:	441a      	add	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d105      	bne.n	800508a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3b01      	subs	r3, #1
 8005088:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005092:	697b      	ldr	r3, [r7, #20]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d018      	beq.n	80050e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	441a      	add	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d303      	bcc.n	80050d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	461a      	mov	r2, r3
 80050da:	6838      	ldr	r0, [r7, #0]
 80050dc:	f002 f969 	bl	80073b2 <memcpy>
	}
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050f0:	f001 fd30 	bl	8006b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050fc:	e01e      	b.n	800513c <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f91d 	bl	8005346 <prvNotifyQueueSetContainer>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8005112:	f000 fedb 	bl	8005ecc <vTaskMissedYield>
 8005116:	e00d      	b.n	8005134 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fdf5 	bl	8005d14 <xTaskRemoveFromEventList>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8005130:	f000 fecc 	bl	8005ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	3b01      	subs	r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800513c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dcdc      	bgt.n	80050fe <prvUnlockQueue+0x16>
 8005144:	e000      	b.n	8005148 <prvUnlockQueue+0x60>
						break;
 8005146:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005150:	f001 fd30 	bl	8006bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005154:	f001 fcfe 	bl	8006b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800515e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005160:	e011      	b.n	8005186 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d012      	beq.n	8005190 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3310      	adds	r3, #16
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fdd0 	bl	8005d14 <xTaskRemoveFromEventList>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 800517a:	f000 fea7 	bl	8005ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	3b01      	subs	r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800518a:	2b00      	cmp	r3, #0
 800518c:	dce9      	bgt.n	8005162 <prvUnlockQueue+0x7a>
 800518e:	e000      	b.n	8005192 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8005190:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800519a:	f001 fd0b 	bl	8006bb4 <vPortExitCritical>
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051ae:	f001 fcd1 	bl	8006b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d102      	bne.n	80051c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e001      	b.n	80051c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051c4:	f001 fcf6 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 80051c8:	68fb      	ldr	r3, [r7, #12]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051da:	f001 fcbb 	bl	8006b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d102      	bne.n	80051f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e001      	b.n	80051f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051f4:	f001 fcde 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e014      	b.n	800523e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005214:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <vQueueAddToRegistry+0x50>)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005220:	490c      	ldr	r1, [pc, #48]	; (8005254 <vQueueAddToRegistry+0x50>)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800522a:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <vQueueAddToRegistry+0x50>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005236:	e006      	b.n	8005246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b07      	cmp	r3, #7
 8005242:	d9e7      	bls.n	8005214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000bf4 	.word	0x20000bf4

08005258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005268:	f001 fc74 	bl	8006b54 <vPortEnterCritical>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005272:	b25b      	sxtb	r3, r3
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d103      	bne.n	8005282 <vQueueWaitForMessageRestricted+0x2a>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005288:	b25b      	sxtb	r3, r3
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d103      	bne.n	8005298 <vQueueWaitForMessageRestricted+0x40>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005298:	f001 fc8c 	bl	8006bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	3324      	adds	r3, #36	; 0x24
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fd05 	bl	8005cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052b2:	6978      	ldr	r0, [r7, #20]
 80052b4:	f7ff ff18 	bl	80050e8 <prvUnlockQueue>
	}
 80052b8:	bf00      	nop
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 80052c8:	2200      	movs	r2, #0
 80052ca:	2104      	movs	r1, #4
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fb6f 	bl	80049b0 <xQueueGenericCreate>
 80052d2:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 80052d4:	68fb      	ldr	r3, [r7, #12]
	}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80052e8:	f001 fc34 	bl	8006b54 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e00b      	b.n	8005312 <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e004      	b.n	8005312 <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 800530e:	2301      	movs	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005312:	f001 fc4f 	bl	8006bb4 <vPortExitCritical>

		return xReturn;
 8005316:	68fb      	ldr	r3, [r7, #12]
	}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fd66 	bl	8004e08 <xQueueReceive>
		return xReturn;
 800533c:	68fb      	ldr	r3, [r7, #12]
	}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	613b      	str	r3, [r7, #16]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	429a      	cmp	r2, r3
 800537e:	d30a      	bcc.n	8005396 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	429a      	cmp	r2, r3
 80053a0:	d225      	bcs.n	80053ee <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a8:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	2200      	movs	r2, #0
 80053ae:	4619      	mov	r1, r3
 80053b0:	69b8      	ldr	r0, [r7, #24]
 80053b2:	f7ff fe09 	bl	8004fc8 <prvCopyDataToQueue>
 80053b6:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80053b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d10e      	bne.n	80053e0 <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3324      	adds	r3, #36	; 0x24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fca0 	bl	8005d14 <xTaskRemoveFromEventList>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80053da:	2301      	movs	r3, #1
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e006      	b.n	80053ee <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	3301      	adds	r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	b25a      	sxtb	r2, r3
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053ee:	69fb      	ldr	r3, [r7, #28]
	}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08e      	sub	sp, #56	; 0x38
 80053fc:	af04      	add	r7, sp, #16
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	623b      	str	r3, [r7, #32]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xTaskCreateStatic+0x46>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	61fb      	str	r3, [r7, #28]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800543e:	23bc      	movs	r3, #188	; 0xbc
 8005440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2bbc      	cmp	r3, #188	; 0xbc
 8005446:	d00a      	beq.n	800545e <xTaskCreateStatic+0x66>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61bb      	str	r3, [r7, #24]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800545e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01e      	beq.n	80054a4 <xTaskCreateStatic+0xac>
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01b      	beq.n	80054a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005474:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2202      	movs	r2, #2
 800547a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800547e:	2300      	movs	r3, #0
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f850 	bl	800553c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800549c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800549e:	f000 f8f3 	bl	8005688 <prvAddNewTaskToReadyList>
 80054a2:	e001      	b.n	80054a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054a8:	697b      	ldr	r3, [r7, #20]
	}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3728      	adds	r7, #40	; 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08c      	sub	sp, #48	; 0x30
 80054b6:	af04      	add	r7, sp, #16
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fc66 	bl	8006d98 <pvPortMalloc>
 80054cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00e      	beq.n	80054f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054d4:	20bc      	movs	r0, #188	; 0xbc
 80054d6:	f001 fc5f 	bl	8006d98 <pvPortMalloc>
 80054da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
 80054e8:	e005      	b.n	80054f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f001 fd20 	bl	8006f30 <vPortFree>
 80054f0:	e001      	b.n	80054f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d017      	beq.n	800552c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	2300      	movs	r3, #0
 8005508:	9303      	str	r3, [sp, #12]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f80e 	bl	800553c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005520:	69f8      	ldr	r0, [r7, #28]
 8005522:	f000 f8b1 	bl	8005688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005526:	2301      	movs	r3, #1
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e002      	b.n	8005532 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005532:	69bb      	ldr	r3, [r7, #24]
	}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	461a      	mov	r2, r3
 8005554:	21a5      	movs	r1, #165	; 0xa5
 8005556:	f001 ff3a 	bl	80073ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005564:	3b01      	subs	r3, #1
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <prvInitialiseNewTask+0x58>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	617b      	str	r3, [r7, #20]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01f      	beq.n	80055da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	e012      	b.n	80055c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	7819      	ldrb	r1, [r3, #0]
 80055a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	3334      	adds	r3, #52	; 0x34
 80055b0:	460a      	mov	r2, r1
 80055b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	3301      	adds	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2b0f      	cmp	r3, #15
 80055ca:	d9e9      	bls.n	80055a0 <prvInitialiseNewTask+0x64>
 80055cc:	e000      	b.n	80055d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80055ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055d8:	e003      	b.n	80055e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	2b37      	cmp	r3, #55	; 0x37
 80055e6:	d901      	bls.n	80055ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055e8:	2337      	movs	r3, #55	; 0x37
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2200      	movs	r2, #0
 80055fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	3304      	adds	r3, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff f860 	bl	80046c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	3318      	adds	r3, #24
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff f85b 	bl	80046c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005616:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	2200      	movs	r2, #0
 8005634:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	3354      	adds	r3, #84	; 0x54
 800563c:	2260      	movs	r2, #96	; 0x60
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fec4 	bl	80073ce <memset>
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	4a0c      	ldr	r2, [pc, #48]	; (800567c <prvInitialiseNewTask+0x140>)
 800564a:	659a      	str	r2, [r3, #88]	; 0x58
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <prvInitialiseNewTask+0x144>)
 8005650:	65da      	str	r2, [r3, #92]	; 0x5c
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <prvInitialiseNewTask+0x148>)
 8005656:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	69b8      	ldr	r0, [r7, #24]
 800565e:	f001 f94b 	bl	80068f8 <pxPortInitialiseStack>
 8005662:	4602      	mov	r2, r0
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005674:	bf00      	nop
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	08008378 	.word	0x08008378
 8005680:	08008398 	.word	0x08008398
 8005684:	08008358 	.word	0x08008358

08005688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005690:	f001 fa60 	bl	8006b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005694:	4b2d      	ldr	r3, [pc, #180]	; (800574c <prvAddNewTaskToReadyList+0xc4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a2c      	ldr	r2, [pc, #176]	; (800574c <prvAddNewTaskToReadyList+0xc4>)
 800569c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056a6:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <prvAddNewTaskToReadyList+0xc4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d110      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056b4:	f000 fc30 	bl	8005f18 <prvInitialiseTaskLists>
 80056b8:	e00d      	b.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ba:	4b26      	ldr	r3, [pc, #152]	; (8005754 <prvAddNewTaskToReadyList+0xcc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056c2:	4b23      	ldr	r3, [pc, #140]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d802      	bhi.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056d0:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056d6:	4b20      	ldr	r3, [pc, #128]	; (8005758 <prvAddNewTaskToReadyList+0xd0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <prvAddNewTaskToReadyList+0xd0>)
 80056de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056e0:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <prvAddNewTaskToReadyList+0xd0>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <prvAddNewTaskToReadyList+0xd4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d903      	bls.n	80056fc <prvAddNewTaskToReadyList+0x74>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <prvAddNewTaskToReadyList+0xd4>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4a15      	ldr	r2, [pc, #84]	; (8005760 <prvAddNewTaskToReadyList+0xd8>)
 800570a:	441a      	add	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f7fe ffe5 	bl	80046e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005718:	f001 fa4c 	bl	8006bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800571c:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <prvAddNewTaskToReadyList+0xcc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <prvAddNewTaskToReadyList+0xc8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	d207      	bcs.n	8005742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <prvAddNewTaskToReadyList+0xdc>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20001108 	.word	0x20001108
 8005750:	20000c34 	.word	0x20000c34
 8005754:	20001114 	.word	0x20001114
 8005758:	20001124 	.word	0x20001124
 800575c:	20001110 	.word	0x20001110
 8005760:	20000c38 	.word	0x20000c38
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d017      	beq.n	80057aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <vTaskDelay+0x60>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <vTaskDelay+0x30>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60bb      	str	r3, [r7, #8]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005798:	f000 f88a 	bl	80058b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800579c:	2100      	movs	r1, #0
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fd08 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057a4:	f000 f892 	bl	80058cc <xTaskResumeAll>
 80057a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057b0:	4b06      	ldr	r3, [pc, #24]	; (80057cc <vTaskDelay+0x64>)
 80057b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20001130 	.word	0x20001130
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	; 0x28
 80057d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057de:	463a      	mov	r2, r7
 80057e0:	1d39      	adds	r1, r7, #4
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe ff1a 	bl	8004620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	9202      	str	r2, [sp, #8]
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	460a      	mov	r2, r1
 80057fe:	4924      	ldr	r1, [pc, #144]	; (8005890 <vTaskStartScheduler+0xc0>)
 8005800:	4824      	ldr	r0, [pc, #144]	; (8005894 <vTaskStartScheduler+0xc4>)
 8005802:	f7ff fdf9 	bl	80053f8 <xTaskCreateStatic>
 8005806:	4603      	mov	r3, r0
 8005808:	4a23      	ldr	r2, [pc, #140]	; (8005898 <vTaskStartScheduler+0xc8>)
 800580a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800580c:	4b22      	ldr	r3, [pc, #136]	; (8005898 <vTaskStartScheduler+0xc8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005814:	2301      	movs	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e001      	b.n	800581e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005824:	f000 fd1a 	bl	800625c <xTimerCreateTimerTask>
 8005828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d11b      	bne.n	8005868 <vTaskStartScheduler+0x98>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <vTaskStartScheduler+0xcc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3354      	adds	r3, #84	; 0x54
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <vTaskStartScheduler+0xd0>)
 800584c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <vTaskStartScheduler+0xd4>)
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <vTaskStartScheduler+0xd8>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <vTaskStartScheduler+0xdc>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005862:	f001 f8d5 	bl	8006a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005866:	e00e      	b.n	8005886 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d10a      	bne.n	8005886 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60fb      	str	r3, [r7, #12]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <vTaskStartScheduler+0xb4>
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	08008278 	.word	0x08008278
 8005894:	08005ee5 	.word	0x08005ee5
 8005898:	2000112c 	.word	0x2000112c
 800589c:	20000c34 	.word	0x20000c34
 80058a0:	20000014 	.word	0x20000014
 80058a4:	20001128 	.word	0x20001128
 80058a8:	20001114 	.word	0x20001114
 80058ac:	2000110c 	.word	0x2000110c

080058b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <vTaskSuspendAll+0x18>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a03      	ldr	r2, [pc, #12]	; (80058c8 <vTaskSuspendAll+0x18>)
 80058bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058be:	bf00      	nop
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20001130 	.word	0x20001130

080058cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058da:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <xTaskResumeAll+0x118>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	603b      	str	r3, [r7, #0]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058f8:	f001 f92c 	bl	8006b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058fc:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <xTaskResumeAll+0x118>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3b01      	subs	r3, #1
 8005902:	4a38      	ldr	r2, [pc, #224]	; (80059e4 <xTaskResumeAll+0x118>)
 8005904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005906:	4b37      	ldr	r3, [pc, #220]	; (80059e4 <xTaskResumeAll+0x118>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d162      	bne.n	80059d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <xTaskResumeAll+0x11c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d05e      	beq.n	80059d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005916:	e02f      	b.n	8005978 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005918:	4b34      	ldr	r3, [pc, #208]	; (80059ec <xTaskResumeAll+0x120>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3318      	adds	r3, #24
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe ff39 	bl	800479c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3304      	adds	r3, #4
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe ff34 	bl	800479c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <xTaskResumeAll+0x124>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d903      	bls.n	8005948 <xTaskResumeAll+0x7c>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <xTaskResumeAll+0x124>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <xTaskResumeAll+0x128>)
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f7fe febf 	bl	80046e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b23      	ldr	r3, [pc, #140]	; (80059f8 <xTaskResumeAll+0x12c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <xTaskResumeAll+0x130>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005978:	4b1c      	ldr	r3, [pc, #112]	; (80059ec <xTaskResumeAll+0x120>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1cb      	bne.n	8005918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005986:	f000 fb69 	bl	800605c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <xTaskResumeAll+0x134>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005996:	f000 f847 	bl	8005a28 <xTaskIncrementTick>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059a0:	4b16      	ldr	r3, [pc, #88]	; (80059fc <xTaskResumeAll+0x130>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f1      	bne.n	8005996 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <xTaskResumeAll+0x134>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059b8:	4b10      	ldr	r3, [pc, #64]	; (80059fc <xTaskResumeAll+0x130>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <xTaskResumeAll+0x138>)
 80059c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059d4:	f001 f8ee 	bl	8006bb4 <vPortExitCritical>

	return xAlreadyYielded;
 80059d8:	68bb      	ldr	r3, [r7, #8]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20001130 	.word	0x20001130
 80059e8:	20001108 	.word	0x20001108
 80059ec:	200010c8 	.word	0x200010c8
 80059f0:	20001110 	.word	0x20001110
 80059f4:	20000c38 	.word	0x20000c38
 80059f8:	20000c34 	.word	0x20000c34
 80059fc:	2000111c 	.word	0x2000111c
 8005a00:	20001118 	.word	0x20001118
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <xTaskGetTickCount+0x1c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a14:	687b      	ldr	r3, [r7, #4]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	2000110c 	.word	0x2000110c

08005a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a32:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <xTaskIncrementTick+0x158>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f040 8095 	bne.w	8005b66 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a3c:	4b51      	ldr	r3, [pc, #324]	; (8005b84 <xTaskIncrementTick+0x15c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a44:	4a4f      	ldr	r2, [pc, #316]	; (8005b84 <xTaskIncrementTick+0x15c>)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d120      	bne.n	8005a92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a50:	4b4d      	ldr	r3, [pc, #308]	; (8005b88 <xTaskIncrementTick+0x160>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <xTaskIncrementTick+0x46>
 8005a70:	4b45      	ldr	r3, [pc, #276]	; (8005b88 <xTaskIncrementTick+0x160>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	4b45      	ldr	r3, [pc, #276]	; (8005b8c <xTaskIncrementTick+0x164>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a43      	ldr	r2, [pc, #268]	; (8005b88 <xTaskIncrementTick+0x160>)
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4a43      	ldr	r2, [pc, #268]	; (8005b8c <xTaskIncrementTick+0x164>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <xTaskIncrementTick+0x168>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	4a41      	ldr	r2, [pc, #260]	; (8005b90 <xTaskIncrementTick+0x168>)
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	f000 fae5 	bl	800605c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a92:	4b40      	ldr	r3, [pc, #256]	; (8005b94 <xTaskIncrementTick+0x16c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d349      	bcc.n	8005b30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a9c:	4b3a      	ldr	r3, [pc, #232]	; (8005b88 <xTaskIncrementTick+0x160>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <xTaskIncrementTick+0x16c>)
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	601a      	str	r2, [r3, #0]
					break;
 8005aae:	e03f      	b.n	8005b30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab0:	4b35      	ldr	r3, [pc, #212]	; (8005b88 <xTaskIncrementTick+0x160>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d203      	bcs.n	8005ad0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ac8:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <xTaskIncrementTick+0x16c>)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ace:	e02f      	b.n	8005b30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fe61 	bl	800479c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fe58 	bl	800479c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <xTaskIncrementTick+0x170>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d903      	bls.n	8005b00 <xTaskIncrementTick+0xd8>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <xTaskIncrementTick+0x170>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <xTaskIncrementTick+0x174>)
 8005b0e:	441a      	add	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe fde3 	bl	80046e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <xTaskIncrementTick+0x178>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d3b8      	bcc.n	8005a9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b2e:	e7b5      	b.n	8005a9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <xTaskIncrementTick+0x178>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b36:	4919      	ldr	r1, [pc, #100]	; (8005b9c <xTaskIncrementTick+0x174>)
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d901      	bls.n	8005b4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <xTaskIncrementTick+0x17c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8005b54:	f7fe fd5d 	bl	8004612 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <xTaskIncrementTick+0x180>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e006      	b.n	8005b74 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b66:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <xTaskIncrementTick+0x17c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <xTaskIncrementTick+0x17c>)
 8005b6e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8005b70:	f7fe fd4f 	bl	8004612 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8005b74:	697b      	ldr	r3, [r7, #20]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20001130 	.word	0x20001130
 8005b84:	2000110c 	.word	0x2000110c
 8005b88:	200010c0 	.word	0x200010c0
 8005b8c:	200010c4 	.word	0x200010c4
 8005b90:	20001120 	.word	0x20001120
 8005b94:	20001128 	.word	0x20001128
 8005b98:	20001110 	.word	0x20001110
 8005b9c:	20000c38 	.word	0x20000c38
 8005ba0:	20000c34 	.word	0x20000c34
 8005ba4:	20001118 	.word	0x20001118
 8005ba8:	2000111c 	.word	0x2000111c

08005bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <vTaskSwitchContext+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bba:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <vTaskSwitchContext+0xb4>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bc0:	e046      	b.n	8005c50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005bc2:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <vTaskSwitchContext+0xb4>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <vTaskSwitchContext+0xb8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e010      	b.n	8005bf2 <vTaskSwitchContext+0x46>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <vTaskSwitchContext+0x40>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <vTaskSwitchContext+0x3e>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	491d      	ldr	r1, [pc, #116]	; (8005c68 <vTaskSwitchContext+0xbc>)
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0e4      	beq.n	8005bd0 <vTaskSwitchContext+0x24>
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <vTaskSwitchContext+0xbc>)
 8005c12:	4413      	add	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3308      	adds	r3, #8
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d104      	bne.n	8005c36 <vTaskSwitchContext+0x8a>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a0b      	ldr	r2, [pc, #44]	; (8005c6c <vTaskSwitchContext+0xc0>)
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4a08      	ldr	r2, [pc, #32]	; (8005c64 <vTaskSwitchContext+0xb8>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <vTaskSwitchContext+0xc0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3354      	adds	r3, #84	; 0x54
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <vTaskSwitchContext+0xc4>)
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20001130 	.word	0x20001130
 8005c60:	2000111c 	.word	0x2000111c
 8005c64:	20001110 	.word	0x20001110
 8005c68:	20000c38 	.word	0x20000c38
 8005c6c:	20000c34 	.word	0x20000c34
 8005c70:	20000014 	.word	0x20000014

08005c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <vTaskPlaceOnEventList+0x44>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fe fd41 	bl	800472a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca8:	2101      	movs	r1, #1
 8005caa:	6838      	ldr	r0, [r7, #0]
 8005cac:	f000 fa82 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000c34 	.word	0x20000c34

08005cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3318      	adds	r3, #24
 8005cea:	4619      	mov	r1, r3
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7fe fcf8 	bl	80046e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	68b8      	ldr	r0, [r7, #8]
 8005d02:	f000 fa57 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
	}
 8005d06:	bf00      	nop
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000c34 	.word	0x20000c34

08005d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	3318      	adds	r3, #24
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fd29 	bl	800479c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <xTaskRemoveFromEventList+0xb0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d11d      	bne.n	8005d8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fd20 	bl	800479c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <xTaskRemoveFromEventList+0xb4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d903      	bls.n	8005d70 <xTaskRemoveFromEventList+0x5c>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <xTaskRemoveFromEventList+0xb4>)
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <xTaskRemoveFromEventList+0xb8>)
 8005d7e:	441a      	add	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fe fcab 	bl	80046e2 <vListInsertEnd>
 8005d8c:	e005      	b.n	8005d9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3318      	adds	r3, #24
 8005d92:	4619      	mov	r1, r3
 8005d94:	480e      	ldr	r0, [pc, #56]	; (8005dd0 <xTaskRemoveFromEventList+0xbc>)
 8005d96:	f7fe fca4 	bl	80046e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <xTaskRemoveFromEventList+0xc0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d905      	bls.n	8005db4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <xTaskRemoveFromEventList+0xc4>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e001      	b.n	8005db8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005db8:	697b      	ldr	r3, [r7, #20]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20001130 	.word	0x20001130
 8005dc8:	20001110 	.word	0x20001110
 8005dcc:	20000c38 	.word	0x20000c38
 8005dd0:	200010c8 	.word	0x200010c8
 8005dd4:	20000c34 	.word	0x20000c34
 8005dd8:	2000111c 	.word	0x2000111c

08005ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <vTaskInternalSetTimeOutState+0x24>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <vTaskInternalSetTimeOutState+0x28>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20001120 	.word	0x20001120
 8005e04:	2000110c 	.word	0x2000110c

08005e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	613b      	str	r3, [r7, #16]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	60fb      	str	r3, [r7, #12]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e4a:	f000 fe83 	bl	8006b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <xTaskCheckForTimeOut+0xbc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d102      	bne.n	8005e6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e023      	b.n	8005eb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <xTaskCheckForTimeOut+0xc0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d007      	beq.n	8005e8a <xTaskCheckForTimeOut+0x82>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d302      	bcc.n	8005e8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e015      	b.n	8005eb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d20b      	bcs.n	8005eac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff9b 	bl	8005ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	e004      	b.n	8005eb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eb6:	f000 fe7d 	bl	8006bb4 <vPortExitCritical>

	return xReturn;
 8005eba:	69fb      	ldr	r3, [r7, #28]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	2000110c 	.word	0x2000110c
 8005ec8:	20001120 	.word	0x20001120

08005ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <vTaskMissedYield+0x14>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	2000111c 	.word	0x2000111c

08005ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005eec:	f000 f854 	bl	8005f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <prvIdleTask+0x2c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d907      	bls.n	8005f08 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <prvIdleTask+0x30>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005f08:	f7fe fb7c 	bl	8004604 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005f0c:	e7ee      	b.n	8005eec <prvIdleTask+0x8>
 8005f0e:	bf00      	nop
 8005f10:	20000c38 	.word	0x20000c38
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e00c      	b.n	8005f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4a12      	ldr	r2, [pc, #72]	; (8005f78 <prvInitialiseTaskLists+0x60>)
 8005f30:	4413      	add	r3, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fba8 	bl	8004688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b37      	cmp	r3, #55	; 0x37
 8005f42:	d9ef      	bls.n	8005f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f44:	480d      	ldr	r0, [pc, #52]	; (8005f7c <prvInitialiseTaskLists+0x64>)
 8005f46:	f7fe fb9f 	bl	8004688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f4a:	480d      	ldr	r0, [pc, #52]	; (8005f80 <prvInitialiseTaskLists+0x68>)
 8005f4c:	f7fe fb9c 	bl	8004688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f50:	480c      	ldr	r0, [pc, #48]	; (8005f84 <prvInitialiseTaskLists+0x6c>)
 8005f52:	f7fe fb99 	bl	8004688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f56:	480c      	ldr	r0, [pc, #48]	; (8005f88 <prvInitialiseTaskLists+0x70>)
 8005f58:	f7fe fb96 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f5c:	480b      	ldr	r0, [pc, #44]	; (8005f8c <prvInitialiseTaskLists+0x74>)
 8005f5e:	f7fe fb93 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <prvInitialiseTaskLists+0x78>)
 8005f64:	4a05      	ldr	r2, [pc, #20]	; (8005f7c <prvInitialiseTaskLists+0x64>)
 8005f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <prvInitialiseTaskLists+0x7c>)
 8005f6a:	4a05      	ldr	r2, [pc, #20]	; (8005f80 <prvInitialiseTaskLists+0x68>)
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000c38 	.word	0x20000c38
 8005f7c:	20001098 	.word	0x20001098
 8005f80:	200010ac 	.word	0x200010ac
 8005f84:	200010c8 	.word	0x200010c8
 8005f88:	200010dc 	.word	0x200010dc
 8005f8c:	200010f4 	.word	0x200010f4
 8005f90:	200010c0 	.word	0x200010c0
 8005f94:	200010c4 	.word	0x200010c4

08005f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f9e:	e019      	b.n	8005fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fa0:	f000 fdd8 	bl	8006b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <prvCheckTasksWaitingTermination+0x50>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fbf3 	bl	800479c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <prvCheckTasksWaitingTermination+0x54>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a0b      	ldr	r2, [pc, #44]	; (8005fec <prvCheckTasksWaitingTermination+0x54>)
 8005fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fca:	f000 fdf3 	bl	8006bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f810 	bl	8005ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e1      	bne.n	8005fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200010dc 	.word	0x200010dc
 8005fec:	20001108 	.word	0x20001108
 8005ff0:	200010f0 	.word	0x200010f0

08005ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3354      	adds	r3, #84	; 0x54
 8006000:	4618      	mov	r0, r3
 8006002:	f001 faa7 	bl	8007554 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800600c:	2b00      	cmp	r3, #0
 800600e:	d108      	bne.n	8006022 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	4618      	mov	r0, r3
 8006016:	f000 ff8b 	bl	8006f30 <vPortFree>
				vPortFree( pxTCB );
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 ff88 	bl	8006f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006020:	e018      	b.n	8006054 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006028:	2b01      	cmp	r3, #1
 800602a:	d103      	bne.n	8006034 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ff7f 	bl	8006f30 <vPortFree>
	}
 8006032:	e00f      	b.n	8006054 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800603a:	2b02      	cmp	r3, #2
 800603c:	d00a      	beq.n	8006054 <prvDeleteTCB+0x60>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <prvDeleteTCB+0x5e>
	}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 800606e:	f04f 32ff 	mov.w	r2, #4294967295
 8006072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006074:	e008      	b.n	8006088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <prvResetNextTaskUnblockTime+0x38>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <prvResetNextTaskUnblockTime+0x3c>)
 8006086:	6013      	str	r3, [r2, #0]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	200010c0 	.word	0x200010c0
 8006098:	20001128 	.word	0x20001128

0800609c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <xTaskGetSchedulerState+0x34>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060aa:	2301      	movs	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e008      	b.n	80060c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b0:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <xTaskGetSchedulerState+0x38>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060b8:	2302      	movs	r3, #2
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	e001      	b.n	80060c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060be:	2300      	movs	r3, #0
 80060c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060c2:	687b      	ldr	r3, [r7, #4]
	}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	20001114 	.word	0x20001114
 80060d4:	20001130 	.word	0x20001130

080060d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d056      	beq.n	800619c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <xTaskPriorityDisinherit+0xd0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d00a      	beq.n	800610e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	60fb      	str	r3, [r7, #12]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613e:	429a      	cmp	r2, r3
 8006140:	d02c      	beq.n	800619c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d128      	bne.n	800619c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	3304      	adds	r3, #4
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fb24 	bl	800479c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xTaskPriorityDisinherit+0xd4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d903      	bls.n	800617c <xTaskPriorityDisinherit+0xa4>
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <xTaskPriorityDisinherit+0xd4>)
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <xTaskPriorityDisinherit+0xd8>)
 800618a:	441a      	add	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe faa5 	bl	80046e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800619c:	697b      	ldr	r3, [r7, #20]
	}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000c34 	.word	0x20000c34
 80061ac:	20001110 	.word	0x20001110
 80061b0:	20000c38 	.word	0x20000c38

080061b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061be:	4b21      	ldr	r3, [pc, #132]	; (8006244 <prvAddCurrentTaskToDelayedList+0x90>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c4:	4b20      	ldr	r3, [pc, #128]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fae6 	bl	800479c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d10a      	bne.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4819      	ldr	r0, [pc, #100]	; (800624c <prvAddCurrentTaskToDelayedList+0x98>)
 80061e8:	f7fe fa7b 	bl	80046e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ec:	e026      	b.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061f6:	4b14      	ldr	r3, [pc, #80]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	429a      	cmp	r2, r3
 8006204:	d209      	bcs.n	800621a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006206:	4b12      	ldr	r3, [pc, #72]	; (8006250 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fe fa89 	bl	800472a <vListInsert>
}
 8006218:	e010      	b.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800621a:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <prvAddCurrentTaskToDelayedList+0x94>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fe fa7f 	bl	800472a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d202      	bcs.n	800623c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006236:	4a08      	ldr	r2, [pc, #32]	; (8006258 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	2000110c 	.word	0x2000110c
 8006248:	20000c34 	.word	0x20000c34
 800624c:	200010f4 	.word	0x200010f4
 8006250:	200010c4 	.word	0x200010c4
 8006254:	200010c0 	.word	0x200010c0
 8006258:	20001128 	.word	0x20001128

0800625c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006266:	f000 fb07 	bl	8006878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800626a:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <xTimerCreateTimerTask+0x80>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d021      	beq.n	80062b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800627a:	1d3a      	adds	r2, r7, #4
 800627c:	f107 0108 	add.w	r1, r7, #8
 8006280:	f107 030c 	add.w	r3, r7, #12
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe f9e5 	bl	8004654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	9202      	str	r2, [sp, #8]
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	2302      	movs	r3, #2
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	460a      	mov	r2, r1
 800629c:	4910      	ldr	r1, [pc, #64]	; (80062e0 <xTimerCreateTimerTask+0x84>)
 800629e:	4811      	ldr	r0, [pc, #68]	; (80062e4 <xTimerCreateTimerTask+0x88>)
 80062a0:	f7ff f8aa 	bl	80053f8 <xTaskCreateStatic>
 80062a4:	4603      	mov	r3, r0
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <xTimerCreateTimerTask+0x8c>)
 80062a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <xTimerCreateTimerTask+0x8c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	613b      	str	r3, [r7, #16]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062d2:	697b      	ldr	r3, [r7, #20]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20001164 	.word	0x20001164
 80062e0:	08008280 	.word	0x08008280
 80062e4:	08006421 	.word	0x08006421
 80062e8:	20001168 	.word	0x20001168

080062ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	623b      	str	r3, [r7, #32]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800631a:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <xTimerGenericCommand+0x98>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02a      	beq.n	8006378 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b05      	cmp	r3, #5
 8006332:	dc18      	bgt.n	8006366 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006334:	f7ff feb2 	bl	800609c <xTaskGetSchedulerState>
 8006338:	4603      	mov	r3, r0
 800633a:	2b02      	cmp	r3, #2
 800633c:	d109      	bne.n	8006352 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <xTimerGenericCommand+0x98>)
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f107 0110 	add.w	r1, r7, #16
 8006346:	2300      	movs	r3, #0
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	f7fe fb91 	bl	8004a70 <xQueueGenericSend>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24
 8006350:	e012      	b.n	8006378 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <xTimerGenericCommand+0x98>)
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f107 0110 	add.w	r1, r7, #16
 800635a:	2300      	movs	r3, #0
 800635c:	2200      	movs	r2, #0
 800635e:	f7fe fb87 	bl	8004a70 <xQueueGenericSend>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24
 8006364:	e008      	b.n	8006378 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <xTimerGenericCommand+0x98>)
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f107 0110 	add.w	r1, r7, #16
 800636e:	2300      	movs	r3, #0
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	f7fe fc97 	bl	8004ca4 <xQueueGenericSendFromISR>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800637a:	4618      	mov	r0, r3
 800637c:	3728      	adds	r7, #40	; 0x28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20001164 	.word	0x20001164

08006388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006392:	4b22      	ldr	r3, [pc, #136]	; (800641c <prvProcessExpiredTimer+0x94>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	3304      	adds	r3, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe f9fb 	bl	800479c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d022      	beq.n	80063fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	18d1      	adds	r1, r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	6978      	ldr	r0, [r7, #20]
 80063c2:	f000 f8d1 	bl	8006568 <prvInsertTimerInActiveList>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01f      	beq.n	800640c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063cc:	2300      	movs	r3, #0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2300      	movs	r3, #0
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	2100      	movs	r1, #0
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff ff88 	bl	80062ec <xTimerGenericCommand>
 80063dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d113      	bne.n	800640c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	4798      	blx	r3
}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	2000115c 	.word	0x2000115c

08006420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006428:	f107 0308 	add.w	r3, r7, #8
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f857 	bl	80064e0 <prvGetNextExpireTime>
 8006432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f803 	bl	8006444 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800643e:	f000 f8d5 	bl	80065ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006442:	e7f1      	b.n	8006428 <prvTimerTask+0x8>

08006444 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800644e:	f7ff fa2f 	bl	80058b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f866 	bl	8006528 <prvSampleTimeNow>
 800645c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d130      	bne.n	80064c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <prvProcessTimerOrBlockTask+0x3c>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d806      	bhi.n	8006480 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006472:	f7ff fa2b 	bl	80058cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006476:	68f9      	ldr	r1, [r7, #12]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff85 	bl	8006388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800647e:	e024      	b.n	80064ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <prvProcessTimerOrBlockTask+0x90>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <prvProcessTimerOrBlockTask+0x50>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <prvProcessTimerOrBlockTask+0x52>
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <prvProcessTimerOrBlockTask+0x94>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	f7fe fed7 	bl	8005258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064aa:	f7ff fa0f 	bl	80058cc <xTaskResumeAll>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <prvProcessTimerOrBlockTask+0x98>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
}
 80064c4:	e001      	b.n	80064ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064c6:	f7ff fa01 	bl	80058cc <xTaskResumeAll>
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20001160 	.word	0x20001160
 80064d8:	20001164 	.word	0x20001164
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <prvGetNextExpireTime+0x44>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <prvGetNextExpireTime+0x16>
 80064f2:	2201      	movs	r2, #1
 80064f4:	e000      	b.n	80064f8 <prvGetNextExpireTime+0x18>
 80064f6:	2200      	movs	r2, #0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006504:	4b07      	ldr	r3, [pc, #28]	; (8006524 <prvGetNextExpireTime+0x44>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e001      	b.n	8006514 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	2000115c 	.word	0x2000115c

08006528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006530:	f7ff fa6a 	bl	8005a08 <xTaskGetTickCount>
 8006534:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <prvSampleTimeNow+0x3c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	429a      	cmp	r2, r3
 800653e:	d205      	bcs.n	800654c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006540:	f000 f936 	bl	80067b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e002      	b.n	8006552 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006552:	4a04      	ldr	r2, [pc, #16]	; (8006564 <prvSampleTimeNow+0x3c>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000116c 	.word	0x2000116c

08006568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d812      	bhi.n	80065b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	429a      	cmp	r2, r3
 800659a:	d302      	bcc.n	80065a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e01b      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <prvInsertTimerInActiveList+0x7c>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fe f8bc 	bl	800472a <vListInsert>
 80065b2:	e012      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d206      	bcs.n	80065ca <prvInsertTimerInActiveList+0x62>
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e007      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <prvInsertTimerInActiveList+0x80>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fe f8a8 	bl	800472a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065da:	697b      	ldr	r3, [r7, #20]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20001160 	.word	0x20001160
 80065e8:	2000115c 	.word	0x2000115c

080065ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f2:	e0ca      	b.n	800678a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da18      	bge.n	800662c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	3304      	adds	r3, #4
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10a      	bne.n	800661c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fb      	str	r3, [r7, #28]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006622:	6850      	ldr	r0, [r2, #4]
 8006624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	4611      	mov	r1, r2
 800662a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f2c0 80aa 	blt.w	8006788 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe f8a9 	bl	800479c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800664a:	463b      	mov	r3, r7
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff ff6b 	bl	8006528 <prvSampleTimeNow>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b09      	cmp	r3, #9
 8006658:	f200 8097 	bhi.w	800678a <prvProcessReceivedCommands+0x19e>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <prvProcessReceivedCommands+0x78>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	0800668d 	.word	0x0800668d
 8006668:	0800668d 	.word	0x0800668d
 800666c:	0800668d 	.word	0x0800668d
 8006670:	08006701 	.word	0x08006701
 8006674:	08006715 	.word	0x08006715
 8006678:	0800675f 	.word	0x0800675f
 800667c:	0800668d 	.word	0x0800668d
 8006680:	0800668d 	.word	0x0800668d
 8006684:	08006701 	.word	0x08006701
 8006688:	08006715 	.word	0x08006715
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	18d1      	adds	r1, r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f7ff ff5c 	bl	8006568 <prvInsertTimerInActiveList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d069      	beq.n	800678a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05e      	beq.n	800678a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	441a      	add	r2, r3
 80066d4:	2300      	movs	r3, #0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	2300      	movs	r3, #0
 80066da:	2100      	movs	r1, #0
 80066dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066de:	f7ff fe05 	bl	80062ec <xTimerGenericCommand>
 80066e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d14f      	bne.n	800678a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	61bb      	str	r3, [r7, #24]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006712:	e03a      	b.n	800678a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	617b      	str	r3, [r7, #20]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	18d1      	adds	r1, r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006758:	f7ff ff06 	bl	8006568 <prvInsertTimerInActiveList>
					break;
 800675c:	e015      	b.n	800678a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800676c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800676e:	f000 fbdf 	bl	8006f30 <vPortFree>
 8006772:	e00a      	b.n	800678a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006786:	e000      	b.n	800678a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <prvProcessReceivedCommands+0x1c0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	1d39      	adds	r1, r7, #4
 8006790:	2200      	movs	r2, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fb38 	bl	8004e08 <xQueueReceive>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f af2a 	bne.w	80065f4 <prvProcessReceivedCommands+0x8>
	}
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	3730      	adds	r7, #48	; 0x30
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20001164 	.word	0x20001164

080067b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b6:	e048      	b.n	800684a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b8:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <prvSwitchTimerLists+0xc0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c2:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <prvSwitchTimerLists+0xc0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fd ffe3 	bl	800479c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02e      	beq.n	800684a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90e      	bls.n	800681c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <prvSwitchTimerLists+0xc0>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f7fd ff88 	bl	800472a <vListInsert>
 800681a:	e016      	b.n	800684a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800681c:	2300      	movs	r3, #0
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	2100      	movs	r1, #0
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fd60 	bl	80062ec <xTimerGenericCommand>
 800682c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	603b      	str	r3, [r7, #0]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <prvSwitchTimerLists+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1b1      	bne.n	80067b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvSwitchTimerLists+0xc0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <prvSwitchTimerLists+0xc4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a04      	ldr	r2, [pc, #16]	; (8006870 <prvSwitchTimerLists+0xc0>)
 8006860:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006862:	4a04      	ldr	r2, [pc, #16]	; (8006874 <prvSwitchTimerLists+0xc4>)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	6013      	str	r3, [r2, #0]
}
 8006868:	bf00      	nop
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	2000115c 	.word	0x2000115c
 8006874:	20001160 	.word	0x20001160

08006878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800687e:	f000 f969 	bl	8006b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d120      	bne.n	80068cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800688a:	4814      	ldr	r0, [pc, #80]	; (80068dc <prvCheckForValidListAndQueue+0x64>)
 800688c:	f7fd fefc 	bl	8004688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006890:	4813      	ldr	r0, [pc, #76]	; (80068e0 <prvCheckForValidListAndQueue+0x68>)
 8006892:	f7fd fef9 	bl	8004688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006896:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <prvCheckForValidListAndQueue+0x6c>)
 8006898:	4a10      	ldr	r2, [pc, #64]	; (80068dc <prvCheckForValidListAndQueue+0x64>)
 800689a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800689c:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <prvCheckForValidListAndQueue+0x70>)
 800689e:	4a10      	ldr	r2, [pc, #64]	; (80068e0 <prvCheckForValidListAndQueue+0x68>)
 80068a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068a2:	2300      	movs	r3, #0
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <prvCheckForValidListAndQueue+0x74>)
 80068a8:	4a11      	ldr	r2, [pc, #68]	; (80068f0 <prvCheckForValidListAndQueue+0x78>)
 80068aa:	2110      	movs	r1, #16
 80068ac:	200a      	movs	r0, #10
 80068ae:	f7fe f807 	bl	80048c0 <xQueueGenericCreateStatic>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068b8:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <prvCheckForValidListAndQueue+0x60>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	490b      	ldr	r1, [pc, #44]	; (80068f4 <prvCheckForValidListAndQueue+0x7c>)
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fc9c 	bl	8005204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068cc:	f000 f972 	bl	8006bb4 <vPortExitCritical>
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20001164 	.word	0x20001164
 80068dc:	20001134 	.word	0x20001134
 80068e0:	20001148 	.word	0x20001148
 80068e4:	2000115c 	.word	0x2000115c
 80068e8:	20001160 	.word	0x20001160
 80068ec:	20001210 	.word	0x20001210
 80068f0:	20001170 	.word	0x20001170
 80068f4:	08008288 	.word	0x08008288

080068f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3b04      	subs	r3, #4
 8006908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b04      	subs	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3b04      	subs	r3, #4
 8006926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006928:	4a0c      	ldr	r2, [pc, #48]	; (800695c <pxPortInitialiseStack+0x64>)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b14      	subs	r3, #20
 8006932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b04      	subs	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f06f 0202 	mvn.w	r2, #2
 8006946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3b20      	subs	r3, #32
 800694c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	08006961 	.word	0x08006961

08006960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <prvTaskExitError+0x54>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d00a      	beq.n	800698a <prvTaskExitError+0x2a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <prvTaskExitError+0x28>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60bb      	str	r3, [r7, #8]
}
 800699c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800699e:	bf00      	nop
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0fc      	beq.n	80069a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000010 	.word	0x20000010
	...

080069c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <pxCurrentTCBConst2>)
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f380 8809 	msr	PSP, r0
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst2>:
 80069e0:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069e8:	4808      	ldr	r0, [pc, #32]	; (8006a0c <prvPortStartFirstTask+0x24>)
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f380 8808 	msr	MSP, r0
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8814 	msr	CONTROL, r0
 80069fa:	b662      	cpsie	i
 80069fc:	b661      	cpsie	f
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	df00      	svc	0
 8006a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a0a:	bf00      	nop
 8006a0c:	e000ed08 	.word	0xe000ed08

08006a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a16:	4b46      	ldr	r3, [pc, #280]	; (8006b30 <xPortStartScheduler+0x120>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a46      	ldr	r2, [pc, #280]	; (8006b34 <xPortStartScheduler+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10a      	bne.n	8006a36 <xPortStartScheduler+0x26>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	613b      	str	r3, [r7, #16]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <xPortStartScheduler+0x120>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3f      	ldr	r2, [pc, #252]	; (8006b38 <xPortStartScheduler+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10a      	bne.n	8006a56 <xPortStartScheduler+0x46>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a56:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <xPortStartScheduler+0x12c>)
 8006a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <xPortStartScheduler+0x130>)
 8006a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a7e:	4b31      	ldr	r3, [pc, #196]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a80:	2207      	movs	r2, #7
 8006a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a84:	e009      	b.n	8006a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a86:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <xPortStartScheduler+0x134>)
 8006a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d0ef      	beq.n	8006a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aa6:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <xPortStartScheduler+0x134>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f1c3 0307 	rsb	r3, r3, #7
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d00a      	beq.n	8006ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60bb      	str	r3, [r7, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xPortStartScheduler+0x134>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <xPortStartScheduler+0x134>)
 8006ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <xPortStartScheduler+0x134>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ada:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <xPortStartScheduler+0x134>)
 8006adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ae6:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <xPortStartScheduler+0x138>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <xPortStartScheduler+0x138>)
 8006aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006af2:	4b15      	ldr	r3, [pc, #84]	; (8006b48 <xPortStartScheduler+0x138>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a14      	ldr	r2, [pc, #80]	; (8006b48 <xPortStartScheduler+0x138>)
 8006af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006afe:	f000 f8dd 	bl	8006cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b02:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <xPortStartScheduler+0x13c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b08:	f000 f8fc 	bl	8006d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <xPortStartScheduler+0x140>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <xPortStartScheduler+0x140>)
 8006b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b18:	f7ff ff66 	bl	80069e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b1c:	f7ff f846 	bl	8005bac <vTaskSwitchContext>
	prvTaskExitError();
 8006b20:	f7ff ff1e 	bl	8006960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed00 	.word	0xe000ed00
 8006b34:	410fc271 	.word	0x410fc271
 8006b38:	410fc270 	.word	0x410fc270
 8006b3c:	e000e400 	.word	0xe000e400
 8006b40:	20001264 	.word	0x20001264
 8006b44:	20001268 	.word	0x20001268
 8006b48:	e000ed20 	.word	0xe000ed20
 8006b4c:	20000010 	.word	0x20000010
 8006b50:	e000ef34 	.word	0xe000ef34

08006b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	607b      	str	r3, [r7, #4]
}
 8006b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <vPortEnterCritical+0x58>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <vPortEnterCritical+0x58>)
 8006b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <vPortEnterCritical+0x58>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10f      	bne.n	8006ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <vPortEnterCritical+0x5c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	603b      	str	r3, [r7, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <vPortEnterCritical+0x4a>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000010 	.word	0x20000010
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <vPortExitCritical+0x50>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <vPortExitCritical+0x24>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	607b      	str	r3, [r7, #4]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <vPortExitCritical+0x50>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <vPortExitCritical+0x50>)
 8006be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vPortExitCritical+0x50>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <vPortExitCritical+0x42>
 8006bea:	2300      	movs	r3, #0
 8006bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
}
 8006bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000010 	.word	0x20000010
	...

08006c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c10:	f3ef 8009 	mrs	r0, PSP
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <pxCurrentTCBConst>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f01e 0f10 	tst.w	lr, #16
 8006c20:	bf08      	it	eq
 8006c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	6010      	str	r0, [r2, #0]
 8006c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c34:	f380 8811 	msr	BASEPRI, r0
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f7fe ffb4 	bl	8005bac <vTaskSwitchContext>
 8006c44:	f04f 0000 	mov.w	r0, #0
 8006c48:	f380 8811 	msr	BASEPRI, r0
 8006c4c:	bc09      	pop	{r0, r3}
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	6808      	ldr	r0, [r1, #0]
 8006c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c56:	f01e 0f10 	tst.w	lr, #16
 8006c5a:	bf08      	it	eq
 8006c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c60:	f380 8809 	msr	PSP, r0
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst>:
 8006c70:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
}
 8006c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c92:	f7fe fec9 	bl	8005a28 <xTaskIncrementTick>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <xPortSysTickHandler+0x40>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f383 8811 	msr	BASEPRI, r3
}
 8006cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <vPortSetupTimerInterrupt+0x38>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <vPortSetupTimerInterrupt+0x3c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <vPortSetupTimerInterrupt+0x40>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	099b      	lsrs	r3, r3, #6
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <vPortSetupTimerInterrupt+0x44>)
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <vPortSetupTimerInterrupt+0x34>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010
 8006cf4:	e000e018 	.word	0xe000e018
 8006cf8:	20000004 	.word	0x20000004
 8006cfc:	10624dd3 	.word	0x10624dd3
 8006d00:	e000e014 	.word	0xe000e014

08006d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d14 <vPortEnableVFP+0x10>
 8006d08:	6801      	ldr	r1, [r0, #0]
 8006d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d0e:	6001      	str	r1, [r0, #0]
 8006d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d12:	bf00      	nop
 8006d14:	e000ed88 	.word	0xe000ed88

08006d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d1e:	f3ef 8305 	mrs	r3, IPSR
 8006d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d914      	bls.n	8006d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d2a:	4a17      	ldr	r2, [pc, #92]	; (8006d88 <vPortValidateInterruptPriority+0x70>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d34:	4b15      	ldr	r3, [pc, #84]	; (8006d8c <vPortValidateInterruptPriority+0x74>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	7afa      	ldrb	r2, [r7, #11]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20a      	bcs.n	8006d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <vPortValidateInterruptPriority+0x78>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <vPortValidateInterruptPriority+0x7c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d90a      	bls.n	8006d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	603b      	str	r3, [r7, #0]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <vPortValidateInterruptPriority+0x60>
	}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	e000e3f0 	.word	0xe000e3f0
 8006d8c:	20001264 	.word	0x20001264
 8006d90:	e000ed0c 	.word	0xe000ed0c
 8006d94:	20001268 	.word	0x20001268

08006d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	; 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006da4:	f7fe fd84 	bl	80058b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006da8:	4b5b      	ldr	r3, [pc, #364]	; (8006f18 <pvPortMalloc+0x180>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006db0:	f000 f920 	bl	8006ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006db4:	4b59      	ldr	r3, [pc, #356]	; (8006f1c <pvPortMalloc+0x184>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 8093 	bne.w	8006ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01d      	beq.n	8006e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dc8:	2208      	movs	r2, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d014      	beq.n	8006e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	3308      	adds	r3, #8
 8006de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <pvPortMalloc+0x6c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d06e      	beq.n	8006ee8 <pvPortMalloc+0x150>
 8006e0a:	4b45      	ldr	r3, [pc, #276]	; (8006f20 <pvPortMalloc+0x188>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d869      	bhi.n	8006ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e14:	4b43      	ldr	r3, [pc, #268]	; (8006f24 <pvPortMalloc+0x18c>)
 8006e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e18:	4b42      	ldr	r3, [pc, #264]	; (8006f24 <pvPortMalloc+0x18c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e1e:	e004      	b.n	8006e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d903      	bls.n	8006e3c <pvPortMalloc+0xa4>
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f1      	bne.n	8006e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e3c:	4b36      	ldr	r3, [pc, #216]	; (8006f18 <pvPortMalloc+0x180>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d050      	beq.n	8006ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	2308      	movs	r3, #8
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d91f      	bls.n	8006ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <pvPortMalloc+0xf8>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	613b      	str	r3, [r7, #16]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ea2:	69b8      	ldr	r0, [r7, #24]
 8006ea4:	f000 f908 	bl	80070b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <pvPortMalloc+0x188>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a1b      	ldr	r2, [pc, #108]	; (8006f20 <pvPortMalloc+0x188>)
 8006eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <pvPortMalloc+0x188>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <pvPortMalloc+0x190>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d203      	bcs.n	8006eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <pvPortMalloc+0x188>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <pvPortMalloc+0x190>)
 8006ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <pvPortMalloc+0x184>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <pvPortMalloc+0x194>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <pvPortMalloc+0x194>)
 8006ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee8:	f7fe fcf0 	bl	80058cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <pvPortMalloc+0x174>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60fb      	str	r3, [r7, #12]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <pvPortMalloc+0x172>
	return pvReturn;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3728      	adds	r7, #40	; 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20001e74 	.word	0x20001e74
 8006f1c:	20001e88 	.word	0x20001e88
 8006f20:	20001e78 	.word	0x20001e78
 8006f24:	20001e6c 	.word	0x20001e6c
 8006f28:	20001e7c 	.word	0x20001e7c
 8006f2c:	20001e80 	.word	0x20001e80

08006f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d04d      	beq.n	8006fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f42:	2308      	movs	r3, #8
 8006f44:	425b      	negs	r3, r3
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <vPortFree+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <vPortFree+0x44>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <vPortFree+0x62>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60bb      	str	r3, [r7, #8]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <vPortFree+0xb8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01e      	beq.n	8006fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11a      	bne.n	8006fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <vPortFree+0xb8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	401a      	ands	r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fb8:	f7fe fc7a 	bl	80058b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <vPortFree+0xbc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <vPortFree+0xbc>)
 8006fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fca:	6938      	ldr	r0, [r7, #16]
 8006fcc:	f000 f874 	bl	80070b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <vPortFree+0xc0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vPortFree+0xc0>)
 8006fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fda:	f7fe fc77 	bl	80058cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20001e88 	.word	0x20001e88
 8006fec:	20001e78 	.word	0x20001e78
 8006ff0:	20001e84 	.word	0x20001e84

08006ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ffa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <prvHeapInit+0xac>)
 8007002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <prvHeapInit+0xac>)
 8007024:	4413      	add	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <prvHeapInit+0xb0>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007032:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <prvHeapInit+0xb0>)
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007040:	2208      	movs	r2, #8
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <prvHeapInit+0xb4>)
 8007054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <prvHeapInit+0xb4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <prvHeapInit+0xb4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvHeapInit+0xb4>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <prvHeapInit+0xb8>)
 8007082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <prvHeapInit+0xbc>)
 800708a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <prvHeapInit+0xc0>)
 800708e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	2000126c 	.word	0x2000126c
 80070a4:	20001e6c 	.word	0x20001e6c
 80070a8:	20001e74 	.word	0x20001e74
 80070ac:	20001e7c 	.word	0x20001e7c
 80070b0:	20001e78 	.word	0x20001e78
 80070b4:	20001e88 	.word	0x20001e88

080070b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <prvInsertBlockIntoFreeList+0xac>)
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e002      	b.n	80070cc <prvInsertBlockIntoFreeList+0x14>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d8f7      	bhi.n	80070c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d108      	bne.n	80070fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d118      	bne.n	8007140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d00d      	beq.n	8007136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e008      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007136:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <prvInsertBlockIntoFreeList+0xb0>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e003      	b.n	8007148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d002      	beq.n	8007156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20001e6c 	.word	0x20001e6c
 8007168:	20001e74 	.word	0x20001e74

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000014 	.word	0x20000014

08007178 <std>:
 8007178:	2300      	movs	r3, #0
 800717a:	b510      	push	{r4, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	e9c0 3300 	strd	r3, r3, [r0]
 8007182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007186:	6083      	str	r3, [r0, #8]
 8007188:	8181      	strh	r1, [r0, #12]
 800718a:	6643      	str	r3, [r0, #100]	; 0x64
 800718c:	81c2      	strh	r2, [r0, #14]
 800718e:	6183      	str	r3, [r0, #24]
 8007190:	4619      	mov	r1, r3
 8007192:	2208      	movs	r2, #8
 8007194:	305c      	adds	r0, #92	; 0x5c
 8007196:	f000 f91a 	bl	80073ce <memset>
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <std+0x38>)
 800719c:	6263      	str	r3, [r4, #36]	; 0x24
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <std+0x3c>)
 80071a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071a2:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <std+0x40>)
 80071a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <std+0x44>)
 80071a8:	6224      	str	r4, [r4, #32]
 80071aa:	6323      	str	r3, [r4, #48]	; 0x30
 80071ac:	bd10      	pop	{r4, pc}
 80071ae:	bf00      	nop
 80071b0:	0800762d 	.word	0x0800762d
 80071b4:	0800764f 	.word	0x0800764f
 80071b8:	08007687 	.word	0x08007687
 80071bc:	080076ab 	.word	0x080076ab

080071c0 <_cleanup_r>:
 80071c0:	4901      	ldr	r1, [pc, #4]	; (80071c8 <_cleanup_r+0x8>)
 80071c2:	f000 b8af 	b.w	8007324 <_fwalk_reent>
 80071c6:	bf00      	nop
 80071c8:	08007805 	.word	0x08007805

080071cc <__sfmoreglue>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	2268      	movs	r2, #104	; 0x68
 80071d0:	1e4d      	subs	r5, r1, #1
 80071d2:	4355      	muls	r5, r2
 80071d4:	460e      	mov	r6, r1
 80071d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071da:	f000 f921 	bl	8007420 <_malloc_r>
 80071de:	4604      	mov	r4, r0
 80071e0:	b140      	cbz	r0, 80071f4 <__sfmoreglue+0x28>
 80071e2:	2100      	movs	r1, #0
 80071e4:	e9c0 1600 	strd	r1, r6, [r0]
 80071e8:	300c      	adds	r0, #12
 80071ea:	60a0      	str	r0, [r4, #8]
 80071ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071f0:	f000 f8ed 	bl	80073ce <memset>
 80071f4:	4620      	mov	r0, r4
 80071f6:	bd70      	pop	{r4, r5, r6, pc}

080071f8 <__sfp_lock_acquire>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__sfp_lock_acquire+0x8>)
 80071fa:	f000 b8d8 	b.w	80073ae <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	20001e8d 	.word	0x20001e8d

08007204 <__sfp_lock_release>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__sfp_lock_release+0x8>)
 8007206:	f000 b8d3 	b.w	80073b0 <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	20001e8d 	.word	0x20001e8d

08007210 <__sinit_lock_acquire>:
 8007210:	4801      	ldr	r0, [pc, #4]	; (8007218 <__sinit_lock_acquire+0x8>)
 8007212:	f000 b8cc 	b.w	80073ae <__retarget_lock_acquire_recursive>
 8007216:	bf00      	nop
 8007218:	20001e8e 	.word	0x20001e8e

0800721c <__sinit_lock_release>:
 800721c:	4801      	ldr	r0, [pc, #4]	; (8007224 <__sinit_lock_release+0x8>)
 800721e:	f000 b8c7 	b.w	80073b0 <__retarget_lock_release_recursive>
 8007222:	bf00      	nop
 8007224:	20001e8e 	.word	0x20001e8e

08007228 <__sinit>:
 8007228:	b510      	push	{r4, lr}
 800722a:	4604      	mov	r4, r0
 800722c:	f7ff fff0 	bl	8007210 <__sinit_lock_acquire>
 8007230:	69a3      	ldr	r3, [r4, #24]
 8007232:	b11b      	cbz	r3, 800723c <__sinit+0x14>
 8007234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007238:	f7ff bff0 	b.w	800721c <__sinit_lock_release>
 800723c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007240:	6523      	str	r3, [r4, #80]	; 0x50
 8007242:	4b13      	ldr	r3, [pc, #76]	; (8007290 <__sinit+0x68>)
 8007244:	4a13      	ldr	r2, [pc, #76]	; (8007294 <__sinit+0x6c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	62a2      	str	r2, [r4, #40]	; 0x28
 800724a:	42a3      	cmp	r3, r4
 800724c:	bf04      	itt	eq
 800724e:	2301      	moveq	r3, #1
 8007250:	61a3      	streq	r3, [r4, #24]
 8007252:	4620      	mov	r0, r4
 8007254:	f000 f820 	bl	8007298 <__sfp>
 8007258:	6060      	str	r0, [r4, #4]
 800725a:	4620      	mov	r0, r4
 800725c:	f000 f81c 	bl	8007298 <__sfp>
 8007260:	60a0      	str	r0, [r4, #8]
 8007262:	4620      	mov	r0, r4
 8007264:	f000 f818 	bl	8007298 <__sfp>
 8007268:	2200      	movs	r2, #0
 800726a:	60e0      	str	r0, [r4, #12]
 800726c:	2104      	movs	r1, #4
 800726e:	6860      	ldr	r0, [r4, #4]
 8007270:	f7ff ff82 	bl	8007178 <std>
 8007274:	68a0      	ldr	r0, [r4, #8]
 8007276:	2201      	movs	r2, #1
 8007278:	2109      	movs	r1, #9
 800727a:	f7ff ff7d 	bl	8007178 <std>
 800727e:	68e0      	ldr	r0, [r4, #12]
 8007280:	2202      	movs	r2, #2
 8007282:	2112      	movs	r1, #18
 8007284:	f7ff ff78 	bl	8007178 <std>
 8007288:	2301      	movs	r3, #1
 800728a:	61a3      	str	r3, [r4, #24]
 800728c:	e7d2      	b.n	8007234 <__sinit+0xc>
 800728e:	bf00      	nop
 8007290:	080083b8 	.word	0x080083b8
 8007294:	080071c1 	.word	0x080071c1

08007298 <__sfp>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	4607      	mov	r7, r0
 800729c:	f7ff ffac 	bl	80071f8 <__sfp_lock_acquire>
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <__sfp+0x84>)
 80072a2:	681e      	ldr	r6, [r3, #0]
 80072a4:	69b3      	ldr	r3, [r6, #24]
 80072a6:	b913      	cbnz	r3, 80072ae <__sfp+0x16>
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7ff ffbd 	bl	8007228 <__sinit>
 80072ae:	3648      	adds	r6, #72	; 0x48
 80072b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	d503      	bpl.n	80072c0 <__sfp+0x28>
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	b30b      	cbz	r3, 8007300 <__sfp+0x68>
 80072bc:	6836      	ldr	r6, [r6, #0]
 80072be:	e7f7      	b.n	80072b0 <__sfp+0x18>
 80072c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072c4:	b9d5      	cbnz	r5, 80072fc <__sfp+0x64>
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <__sfp+0x88>)
 80072c8:	60e3      	str	r3, [r4, #12]
 80072ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072ce:	6665      	str	r5, [r4, #100]	; 0x64
 80072d0:	f000 f86c 	bl	80073ac <__retarget_lock_init_recursive>
 80072d4:	f7ff ff96 	bl	8007204 <__sfp_lock_release>
 80072d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072e0:	6025      	str	r5, [r4, #0]
 80072e2:	61a5      	str	r5, [r4, #24]
 80072e4:	2208      	movs	r2, #8
 80072e6:	4629      	mov	r1, r5
 80072e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072ec:	f000 f86f 	bl	80073ce <memset>
 80072f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072f8:	4620      	mov	r0, r4
 80072fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072fc:	3468      	adds	r4, #104	; 0x68
 80072fe:	e7d9      	b.n	80072b4 <__sfp+0x1c>
 8007300:	2104      	movs	r1, #4
 8007302:	4638      	mov	r0, r7
 8007304:	f7ff ff62 	bl	80071cc <__sfmoreglue>
 8007308:	4604      	mov	r4, r0
 800730a:	6030      	str	r0, [r6, #0]
 800730c:	2800      	cmp	r0, #0
 800730e:	d1d5      	bne.n	80072bc <__sfp+0x24>
 8007310:	f7ff ff78 	bl	8007204 <__sfp_lock_release>
 8007314:	230c      	movs	r3, #12
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	e7ee      	b.n	80072f8 <__sfp+0x60>
 800731a:	bf00      	nop
 800731c:	080083b8 	.word	0x080083b8
 8007320:	ffff0001 	.word	0xffff0001

08007324 <_fwalk_reent>:
 8007324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007328:	4606      	mov	r6, r0
 800732a:	4688      	mov	r8, r1
 800732c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007330:	2700      	movs	r7, #0
 8007332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007336:	f1b9 0901 	subs.w	r9, r9, #1
 800733a:	d505      	bpl.n	8007348 <_fwalk_reent+0x24>
 800733c:	6824      	ldr	r4, [r4, #0]
 800733e:	2c00      	cmp	r4, #0
 8007340:	d1f7      	bne.n	8007332 <_fwalk_reent+0xe>
 8007342:	4638      	mov	r0, r7
 8007344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007348:	89ab      	ldrh	r3, [r5, #12]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d907      	bls.n	800735e <_fwalk_reent+0x3a>
 800734e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007352:	3301      	adds	r3, #1
 8007354:	d003      	beq.n	800735e <_fwalk_reent+0x3a>
 8007356:	4629      	mov	r1, r5
 8007358:	4630      	mov	r0, r6
 800735a:	47c0      	blx	r8
 800735c:	4307      	orrs	r7, r0
 800735e:	3568      	adds	r5, #104	; 0x68
 8007360:	e7e9      	b.n	8007336 <_fwalk_reent+0x12>
	...

08007364 <__libc_init_array>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	4d0d      	ldr	r5, [pc, #52]	; (800739c <__libc_init_array+0x38>)
 8007368:	4c0d      	ldr	r4, [pc, #52]	; (80073a0 <__libc_init_array+0x3c>)
 800736a:	1b64      	subs	r4, r4, r5
 800736c:	10a4      	asrs	r4, r4, #2
 800736e:	2600      	movs	r6, #0
 8007370:	42a6      	cmp	r6, r4
 8007372:	d109      	bne.n	8007388 <__libc_init_array+0x24>
 8007374:	4d0b      	ldr	r5, [pc, #44]	; (80073a4 <__libc_init_array+0x40>)
 8007376:	4c0c      	ldr	r4, [pc, #48]	; (80073a8 <__libc_init_array+0x44>)
 8007378:	f000 ff32 	bl	80081e0 <_init>
 800737c:	1b64      	subs	r4, r4, r5
 800737e:	10a4      	asrs	r4, r4, #2
 8007380:	2600      	movs	r6, #0
 8007382:	42a6      	cmp	r6, r4
 8007384:	d105      	bne.n	8007392 <__libc_init_array+0x2e>
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	f855 3b04 	ldr.w	r3, [r5], #4
 800738c:	4798      	blx	r3
 800738e:	3601      	adds	r6, #1
 8007390:	e7ee      	b.n	8007370 <__libc_init_array+0xc>
 8007392:	f855 3b04 	ldr.w	r3, [r5], #4
 8007396:	4798      	blx	r3
 8007398:	3601      	adds	r6, #1
 800739a:	e7f2      	b.n	8007382 <__libc_init_array+0x1e>
 800739c:	080083f8 	.word	0x080083f8
 80073a0:	080083f8 	.word	0x080083f8
 80073a4:	080083f8 	.word	0x080083f8
 80073a8:	080083fc 	.word	0x080083fc

080073ac <__retarget_lock_init_recursive>:
 80073ac:	4770      	bx	lr

080073ae <__retarget_lock_acquire_recursive>:
 80073ae:	4770      	bx	lr

080073b0 <__retarget_lock_release_recursive>:
 80073b0:	4770      	bx	lr

080073b2 <memcpy>:
 80073b2:	440a      	add	r2, r1
 80073b4:	4291      	cmp	r1, r2
 80073b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ba:	d100      	bne.n	80073be <memcpy+0xc>
 80073bc:	4770      	bx	lr
 80073be:	b510      	push	{r4, lr}
 80073c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c8:	4291      	cmp	r1, r2
 80073ca:	d1f9      	bne.n	80073c0 <memcpy+0xe>
 80073cc:	bd10      	pop	{r4, pc}

080073ce <memset>:
 80073ce:	4402      	add	r2, r0
 80073d0:	4603      	mov	r3, r0
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d100      	bne.n	80073d8 <memset+0xa>
 80073d6:	4770      	bx	lr
 80073d8:	f803 1b01 	strb.w	r1, [r3], #1
 80073dc:	e7f9      	b.n	80073d2 <memset+0x4>
	...

080073e0 <sbrk_aligned>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4e0e      	ldr	r6, [pc, #56]	; (800741c <sbrk_aligned+0x3c>)
 80073e4:	460c      	mov	r4, r1
 80073e6:	6831      	ldr	r1, [r6, #0]
 80073e8:	4605      	mov	r5, r0
 80073ea:	b911      	cbnz	r1, 80073f2 <sbrk_aligned+0x12>
 80073ec:	f000 f90e 	bl	800760c <_sbrk_r>
 80073f0:	6030      	str	r0, [r6, #0]
 80073f2:	4621      	mov	r1, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 f909 	bl	800760c <_sbrk_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d00a      	beq.n	8007414 <sbrk_aligned+0x34>
 80073fe:	1cc4      	adds	r4, r0, #3
 8007400:	f024 0403 	bic.w	r4, r4, #3
 8007404:	42a0      	cmp	r0, r4
 8007406:	d007      	beq.n	8007418 <sbrk_aligned+0x38>
 8007408:	1a21      	subs	r1, r4, r0
 800740a:	4628      	mov	r0, r5
 800740c:	f000 f8fe 	bl	800760c <_sbrk_r>
 8007410:	3001      	adds	r0, #1
 8007412:	d101      	bne.n	8007418 <sbrk_aligned+0x38>
 8007414:	f04f 34ff 	mov.w	r4, #4294967295
 8007418:	4620      	mov	r0, r4
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	20001e94 	.word	0x20001e94

08007420 <_malloc_r>:
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007424:	1ccd      	adds	r5, r1, #3
 8007426:	f025 0503 	bic.w	r5, r5, #3
 800742a:	3508      	adds	r5, #8
 800742c:	2d0c      	cmp	r5, #12
 800742e:	bf38      	it	cc
 8007430:	250c      	movcc	r5, #12
 8007432:	2d00      	cmp	r5, #0
 8007434:	4607      	mov	r7, r0
 8007436:	db01      	blt.n	800743c <_malloc_r+0x1c>
 8007438:	42a9      	cmp	r1, r5
 800743a:	d905      	bls.n	8007448 <_malloc_r+0x28>
 800743c:	230c      	movs	r3, #12
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	2600      	movs	r6, #0
 8007442:	4630      	mov	r0, r6
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007448:	4e2e      	ldr	r6, [pc, #184]	; (8007504 <_malloc_r+0xe4>)
 800744a:	f000 fa29 	bl	80078a0 <__malloc_lock>
 800744e:	6833      	ldr	r3, [r6, #0]
 8007450:	461c      	mov	r4, r3
 8007452:	bb34      	cbnz	r4, 80074a2 <_malloc_r+0x82>
 8007454:	4629      	mov	r1, r5
 8007456:	4638      	mov	r0, r7
 8007458:	f7ff ffc2 	bl	80073e0 <sbrk_aligned>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	4604      	mov	r4, r0
 8007460:	d14d      	bne.n	80074fe <_malloc_r+0xde>
 8007462:	6834      	ldr	r4, [r6, #0]
 8007464:	4626      	mov	r6, r4
 8007466:	2e00      	cmp	r6, #0
 8007468:	d140      	bne.n	80074ec <_malloc_r+0xcc>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	4631      	mov	r1, r6
 800746e:	4638      	mov	r0, r7
 8007470:	eb04 0803 	add.w	r8, r4, r3
 8007474:	f000 f8ca 	bl	800760c <_sbrk_r>
 8007478:	4580      	cmp	r8, r0
 800747a:	d13a      	bne.n	80074f2 <_malloc_r+0xd2>
 800747c:	6821      	ldr	r1, [r4, #0]
 800747e:	3503      	adds	r5, #3
 8007480:	1a6d      	subs	r5, r5, r1
 8007482:	f025 0503 	bic.w	r5, r5, #3
 8007486:	3508      	adds	r5, #8
 8007488:	2d0c      	cmp	r5, #12
 800748a:	bf38      	it	cc
 800748c:	250c      	movcc	r5, #12
 800748e:	4629      	mov	r1, r5
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff ffa5 	bl	80073e0 <sbrk_aligned>
 8007496:	3001      	adds	r0, #1
 8007498:	d02b      	beq.n	80074f2 <_malloc_r+0xd2>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	442b      	add	r3, r5
 800749e:	6023      	str	r3, [r4, #0]
 80074a0:	e00e      	b.n	80074c0 <_malloc_r+0xa0>
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	1b52      	subs	r2, r2, r5
 80074a6:	d41e      	bmi.n	80074e6 <_malloc_r+0xc6>
 80074a8:	2a0b      	cmp	r2, #11
 80074aa:	d916      	bls.n	80074da <_malloc_r+0xba>
 80074ac:	1961      	adds	r1, r4, r5
 80074ae:	42a3      	cmp	r3, r4
 80074b0:	6025      	str	r5, [r4, #0]
 80074b2:	bf18      	it	ne
 80074b4:	6059      	strne	r1, [r3, #4]
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	bf08      	it	eq
 80074ba:	6031      	streq	r1, [r6, #0]
 80074bc:	5162      	str	r2, [r4, r5]
 80074be:	604b      	str	r3, [r1, #4]
 80074c0:	4638      	mov	r0, r7
 80074c2:	f104 060b 	add.w	r6, r4, #11
 80074c6:	f000 f9f1 	bl	80078ac <__malloc_unlock>
 80074ca:	f026 0607 	bic.w	r6, r6, #7
 80074ce:	1d23      	adds	r3, r4, #4
 80074d0:	1af2      	subs	r2, r6, r3
 80074d2:	d0b6      	beq.n	8007442 <_malloc_r+0x22>
 80074d4:	1b9b      	subs	r3, r3, r6
 80074d6:	50a3      	str	r3, [r4, r2]
 80074d8:	e7b3      	b.n	8007442 <_malloc_r+0x22>
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	42a3      	cmp	r3, r4
 80074de:	bf0c      	ite	eq
 80074e0:	6032      	streq	r2, [r6, #0]
 80074e2:	605a      	strne	r2, [r3, #4]
 80074e4:	e7ec      	b.n	80074c0 <_malloc_r+0xa0>
 80074e6:	4623      	mov	r3, r4
 80074e8:	6864      	ldr	r4, [r4, #4]
 80074ea:	e7b2      	b.n	8007452 <_malloc_r+0x32>
 80074ec:	4634      	mov	r4, r6
 80074ee:	6876      	ldr	r6, [r6, #4]
 80074f0:	e7b9      	b.n	8007466 <_malloc_r+0x46>
 80074f2:	230c      	movs	r3, #12
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	4638      	mov	r0, r7
 80074f8:	f000 f9d8 	bl	80078ac <__malloc_unlock>
 80074fc:	e7a1      	b.n	8007442 <_malloc_r+0x22>
 80074fe:	6025      	str	r5, [r4, #0]
 8007500:	e7de      	b.n	80074c0 <_malloc_r+0xa0>
 8007502:	bf00      	nop
 8007504:	20001e90 	.word	0x20001e90

08007508 <iprintf>:
 8007508:	b40f      	push	{r0, r1, r2, r3}
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <iprintf+0x2c>)
 800750c:	b513      	push	{r0, r1, r4, lr}
 800750e:	681c      	ldr	r4, [r3, #0]
 8007510:	b124      	cbz	r4, 800751c <iprintf+0x14>
 8007512:	69a3      	ldr	r3, [r4, #24]
 8007514:	b913      	cbnz	r3, 800751c <iprintf+0x14>
 8007516:	4620      	mov	r0, r4
 8007518:	f7ff fe86 	bl	8007228 <__sinit>
 800751c:	ab05      	add	r3, sp, #20
 800751e:	9a04      	ldr	r2, [sp, #16]
 8007520:	68a1      	ldr	r1, [r4, #8]
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	4620      	mov	r0, r4
 8007526:	f000 fa3d 	bl	80079a4 <_vfiprintf_r>
 800752a:	b002      	add	sp, #8
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007530:	b004      	add	sp, #16
 8007532:	4770      	bx	lr
 8007534:	20000014 	.word	0x20000014

08007538 <cleanup_glue>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	460c      	mov	r4, r1
 800753c:	6809      	ldr	r1, [r1, #0]
 800753e:	4605      	mov	r5, r0
 8007540:	b109      	cbz	r1, 8007546 <cleanup_glue+0xe>
 8007542:	f7ff fff9 	bl	8007538 <cleanup_glue>
 8007546:	4621      	mov	r1, r4
 8007548:	4628      	mov	r0, r5
 800754a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800754e:	f000 b9b3 	b.w	80078b8 <_free_r>
	...

08007554 <_reclaim_reent>:
 8007554:	4b2c      	ldr	r3, [pc, #176]	; (8007608 <_reclaim_reent+0xb4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4283      	cmp	r3, r0
 800755a:	b570      	push	{r4, r5, r6, lr}
 800755c:	4604      	mov	r4, r0
 800755e:	d051      	beq.n	8007604 <_reclaim_reent+0xb0>
 8007560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007562:	b143      	cbz	r3, 8007576 <_reclaim_reent+0x22>
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d14a      	bne.n	8007600 <_reclaim_reent+0xac>
 800756a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756c:	6819      	ldr	r1, [r3, #0]
 800756e:	b111      	cbz	r1, 8007576 <_reclaim_reent+0x22>
 8007570:	4620      	mov	r0, r4
 8007572:	f000 f9a1 	bl	80078b8 <_free_r>
 8007576:	6961      	ldr	r1, [r4, #20]
 8007578:	b111      	cbz	r1, 8007580 <_reclaim_reent+0x2c>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f99c 	bl	80078b8 <_free_r>
 8007580:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007582:	b111      	cbz	r1, 800758a <_reclaim_reent+0x36>
 8007584:	4620      	mov	r0, r4
 8007586:	f000 f997 	bl	80078b8 <_free_r>
 800758a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800758c:	b111      	cbz	r1, 8007594 <_reclaim_reent+0x40>
 800758e:	4620      	mov	r0, r4
 8007590:	f000 f992 	bl	80078b8 <_free_r>
 8007594:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007596:	b111      	cbz	r1, 800759e <_reclaim_reent+0x4a>
 8007598:	4620      	mov	r0, r4
 800759a:	f000 f98d 	bl	80078b8 <_free_r>
 800759e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80075a0:	b111      	cbz	r1, 80075a8 <_reclaim_reent+0x54>
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 f988 	bl	80078b8 <_free_r>
 80075a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80075aa:	b111      	cbz	r1, 80075b2 <_reclaim_reent+0x5e>
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 f983 	bl	80078b8 <_free_r>
 80075b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80075b4:	b111      	cbz	r1, 80075bc <_reclaim_reent+0x68>
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 f97e 	bl	80078b8 <_free_r>
 80075bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075be:	b111      	cbz	r1, 80075c6 <_reclaim_reent+0x72>
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 f979 	bl	80078b8 <_free_r>
 80075c6:	69a3      	ldr	r3, [r4, #24]
 80075c8:	b1e3      	cbz	r3, 8007604 <_reclaim_reent+0xb0>
 80075ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075cc:	4620      	mov	r0, r4
 80075ce:	4798      	blx	r3
 80075d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075d2:	b1b9      	cbz	r1, 8007604 <_reclaim_reent+0xb0>
 80075d4:	4620      	mov	r0, r4
 80075d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075da:	f7ff bfad 	b.w	8007538 <cleanup_glue>
 80075de:	5949      	ldr	r1, [r1, r5]
 80075e0:	b941      	cbnz	r1, 80075f4 <_reclaim_reent+0xa0>
 80075e2:	3504      	adds	r5, #4
 80075e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e6:	2d80      	cmp	r5, #128	; 0x80
 80075e8:	68d9      	ldr	r1, [r3, #12]
 80075ea:	d1f8      	bne.n	80075de <_reclaim_reent+0x8a>
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 f963 	bl	80078b8 <_free_r>
 80075f2:	e7ba      	b.n	800756a <_reclaim_reent+0x16>
 80075f4:	680e      	ldr	r6, [r1, #0]
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f95e 	bl	80078b8 <_free_r>
 80075fc:	4631      	mov	r1, r6
 80075fe:	e7ef      	b.n	80075e0 <_reclaim_reent+0x8c>
 8007600:	2500      	movs	r5, #0
 8007602:	e7ef      	b.n	80075e4 <_reclaim_reent+0x90>
 8007604:	bd70      	pop	{r4, r5, r6, pc}
 8007606:	bf00      	nop
 8007608:	20000014 	.word	0x20000014

0800760c <_sbrk_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_sbrk_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7f9 fbc4 	bl	8000da4 <_sbrk>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_sbrk_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_sbrk_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20001e98 	.word	0x20001e98

0800762c <__sread>:
 800762c:	b510      	push	{r4, lr}
 800762e:	460c      	mov	r4, r1
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	f000 fc7a 	bl	8007f2c <_read_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	bfab      	itete	ge
 800763c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800763e:	89a3      	ldrhlt	r3, [r4, #12]
 8007640:	181b      	addge	r3, r3, r0
 8007642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007646:	bfac      	ite	ge
 8007648:	6563      	strge	r3, [r4, #84]	; 0x54
 800764a:	81a3      	strhlt	r3, [r4, #12]
 800764c:	bd10      	pop	{r4, pc}

0800764e <__swrite>:
 800764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	461f      	mov	r7, r3
 8007654:	898b      	ldrh	r3, [r1, #12]
 8007656:	05db      	lsls	r3, r3, #23
 8007658:	4605      	mov	r5, r0
 800765a:	460c      	mov	r4, r1
 800765c:	4616      	mov	r6, r2
 800765e:	d505      	bpl.n	800766c <__swrite+0x1e>
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	2302      	movs	r3, #2
 8007666:	2200      	movs	r2, #0
 8007668:	f000 f908 	bl	800787c <_lseek_r>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	4632      	mov	r2, r6
 800767a:	463b      	mov	r3, r7
 800767c:	4628      	mov	r0, r5
 800767e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	f000 b817 	b.w	80076b4 <_write_r>

08007686 <__sseek>:
 8007686:	b510      	push	{r4, lr}
 8007688:	460c      	mov	r4, r1
 800768a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768e:	f000 f8f5 	bl	800787c <_lseek_r>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	bf15      	itete	ne
 8007698:	6560      	strne	r0, [r4, #84]	; 0x54
 800769a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800769e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076a2:	81a3      	strheq	r3, [r4, #12]
 80076a4:	bf18      	it	ne
 80076a6:	81a3      	strhne	r3, [r4, #12]
 80076a8:	bd10      	pop	{r4, pc}

080076aa <__sclose>:
 80076aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ae:	f000 b813 	b.w	80076d8 <_close_r>
	...

080076b4 <_write_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_write_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7f9 fb1d 	bl	8000d02 <_write>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_write_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_write_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001e98 	.word	0x20001e98

080076d8 <_close_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d06      	ldr	r5, [pc, #24]	; (80076f4 <_close_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7f9 fb29 	bl	8000d3a <_close>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_close_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_close_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20001e98 	.word	0x20001e98

080076f8 <__sflush_r>:
 80076f8:	898a      	ldrh	r2, [r1, #12]
 80076fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	4605      	mov	r5, r0
 8007700:	0710      	lsls	r0, r2, #28
 8007702:	460c      	mov	r4, r1
 8007704:	d458      	bmi.n	80077b8 <__sflush_r+0xc0>
 8007706:	684b      	ldr	r3, [r1, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	dc05      	bgt.n	8007718 <__sflush_r+0x20>
 800770c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	dc02      	bgt.n	8007718 <__sflush_r+0x20>
 8007712:	2000      	movs	r0, #0
 8007714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771a:	2e00      	cmp	r6, #0
 800771c:	d0f9      	beq.n	8007712 <__sflush_r+0x1a>
 800771e:	2300      	movs	r3, #0
 8007720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007724:	682f      	ldr	r7, [r5, #0]
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	d032      	beq.n	8007790 <__sflush_r+0x98>
 800772a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	075a      	lsls	r2, r3, #29
 8007730:	d505      	bpl.n	800773e <__sflush_r+0x46>
 8007732:	6863      	ldr	r3, [r4, #4]
 8007734:	1ac0      	subs	r0, r0, r3
 8007736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007738:	b10b      	cbz	r3, 800773e <__sflush_r+0x46>
 800773a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800773c:	1ac0      	subs	r0, r0, r3
 800773e:	2300      	movs	r3, #0
 8007740:	4602      	mov	r2, r0
 8007742:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007744:	6a21      	ldr	r1, [r4, #32]
 8007746:	4628      	mov	r0, r5
 8007748:	47b0      	blx	r6
 800774a:	1c43      	adds	r3, r0, #1
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	d106      	bne.n	800775e <__sflush_r+0x66>
 8007750:	6829      	ldr	r1, [r5, #0]
 8007752:	291d      	cmp	r1, #29
 8007754:	d82c      	bhi.n	80077b0 <__sflush_r+0xb8>
 8007756:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <__sflush_r+0x108>)
 8007758:	40ca      	lsrs	r2, r1
 800775a:	07d6      	lsls	r6, r2, #31
 800775c:	d528      	bpl.n	80077b0 <__sflush_r+0xb8>
 800775e:	2200      	movs	r2, #0
 8007760:	6062      	str	r2, [r4, #4]
 8007762:	04d9      	lsls	r1, r3, #19
 8007764:	6922      	ldr	r2, [r4, #16]
 8007766:	6022      	str	r2, [r4, #0]
 8007768:	d504      	bpl.n	8007774 <__sflush_r+0x7c>
 800776a:	1c42      	adds	r2, r0, #1
 800776c:	d101      	bne.n	8007772 <__sflush_r+0x7a>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	b903      	cbnz	r3, 8007774 <__sflush_r+0x7c>
 8007772:	6560      	str	r0, [r4, #84]	; 0x54
 8007774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007776:	602f      	str	r7, [r5, #0]
 8007778:	2900      	cmp	r1, #0
 800777a:	d0ca      	beq.n	8007712 <__sflush_r+0x1a>
 800777c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007780:	4299      	cmp	r1, r3
 8007782:	d002      	beq.n	800778a <__sflush_r+0x92>
 8007784:	4628      	mov	r0, r5
 8007786:	f000 f897 	bl	80078b8 <_free_r>
 800778a:	2000      	movs	r0, #0
 800778c:	6360      	str	r0, [r4, #52]	; 0x34
 800778e:	e7c1      	b.n	8007714 <__sflush_r+0x1c>
 8007790:	6a21      	ldr	r1, [r4, #32]
 8007792:	2301      	movs	r3, #1
 8007794:	4628      	mov	r0, r5
 8007796:	47b0      	blx	r6
 8007798:	1c41      	adds	r1, r0, #1
 800779a:	d1c7      	bne.n	800772c <__sflush_r+0x34>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0c4      	beq.n	800772c <__sflush_r+0x34>
 80077a2:	2b1d      	cmp	r3, #29
 80077a4:	d001      	beq.n	80077aa <__sflush_r+0xb2>
 80077a6:	2b16      	cmp	r3, #22
 80077a8:	d101      	bne.n	80077ae <__sflush_r+0xb6>
 80077aa:	602f      	str	r7, [r5, #0]
 80077ac:	e7b1      	b.n	8007712 <__sflush_r+0x1a>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	e7ad      	b.n	8007714 <__sflush_r+0x1c>
 80077b8:	690f      	ldr	r7, [r1, #16]
 80077ba:	2f00      	cmp	r7, #0
 80077bc:	d0a9      	beq.n	8007712 <__sflush_r+0x1a>
 80077be:	0793      	lsls	r3, r2, #30
 80077c0:	680e      	ldr	r6, [r1, #0]
 80077c2:	bf08      	it	eq
 80077c4:	694b      	ldreq	r3, [r1, #20]
 80077c6:	600f      	str	r7, [r1, #0]
 80077c8:	bf18      	it	ne
 80077ca:	2300      	movne	r3, #0
 80077cc:	eba6 0807 	sub.w	r8, r6, r7
 80077d0:	608b      	str	r3, [r1, #8]
 80077d2:	f1b8 0f00 	cmp.w	r8, #0
 80077d6:	dd9c      	ble.n	8007712 <__sflush_r+0x1a>
 80077d8:	6a21      	ldr	r1, [r4, #32]
 80077da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077dc:	4643      	mov	r3, r8
 80077de:	463a      	mov	r2, r7
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b0      	blx	r6
 80077e4:	2800      	cmp	r0, #0
 80077e6:	dc06      	bgt.n	80077f6 <__sflush_r+0xfe>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e78e      	b.n	8007714 <__sflush_r+0x1c>
 80077f6:	4407      	add	r7, r0
 80077f8:	eba8 0800 	sub.w	r8, r8, r0
 80077fc:	e7e9      	b.n	80077d2 <__sflush_r+0xda>
 80077fe:	bf00      	nop
 8007800:	20400001 	.word	0x20400001

08007804 <_fflush_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	4605      	mov	r5, r0
 800780a:	460c      	mov	r4, r1
 800780c:	b913      	cbnz	r3, 8007814 <_fflush_r+0x10>
 800780e:	2500      	movs	r5, #0
 8007810:	4628      	mov	r0, r5
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	b118      	cbz	r0, 800781e <_fflush_r+0x1a>
 8007816:	6983      	ldr	r3, [r0, #24]
 8007818:	b90b      	cbnz	r3, 800781e <_fflush_r+0x1a>
 800781a:	f7ff fd05 	bl	8007228 <__sinit>
 800781e:	4b14      	ldr	r3, [pc, #80]	; (8007870 <_fflush_r+0x6c>)
 8007820:	429c      	cmp	r4, r3
 8007822:	d11b      	bne.n	800785c <_fflush_r+0x58>
 8007824:	686c      	ldr	r4, [r5, #4]
 8007826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0ef      	beq.n	800780e <_fflush_r+0xa>
 800782e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007830:	07d0      	lsls	r0, r2, #31
 8007832:	d404      	bmi.n	800783e <_fflush_r+0x3a>
 8007834:	0599      	lsls	r1, r3, #22
 8007836:	d402      	bmi.n	800783e <_fflush_r+0x3a>
 8007838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783a:	f7ff fdb8 	bl	80073ae <__retarget_lock_acquire_recursive>
 800783e:	4628      	mov	r0, r5
 8007840:	4621      	mov	r1, r4
 8007842:	f7ff ff59 	bl	80076f8 <__sflush_r>
 8007846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007848:	07da      	lsls	r2, r3, #31
 800784a:	4605      	mov	r5, r0
 800784c:	d4e0      	bmi.n	8007810 <_fflush_r+0xc>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	059b      	lsls	r3, r3, #22
 8007852:	d4dd      	bmi.n	8007810 <_fflush_r+0xc>
 8007854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007856:	f7ff fdab 	bl	80073b0 <__retarget_lock_release_recursive>
 800785a:	e7d9      	b.n	8007810 <_fflush_r+0xc>
 800785c:	4b05      	ldr	r3, [pc, #20]	; (8007874 <_fflush_r+0x70>)
 800785e:	429c      	cmp	r4, r3
 8007860:	d101      	bne.n	8007866 <_fflush_r+0x62>
 8007862:	68ac      	ldr	r4, [r5, #8]
 8007864:	e7df      	b.n	8007826 <_fflush_r+0x22>
 8007866:	4b04      	ldr	r3, [pc, #16]	; (8007878 <_fflush_r+0x74>)
 8007868:	429c      	cmp	r4, r3
 800786a:	bf08      	it	eq
 800786c:	68ec      	ldreq	r4, [r5, #12]
 800786e:	e7da      	b.n	8007826 <_fflush_r+0x22>
 8007870:	08008378 	.word	0x08008378
 8007874:	08008398 	.word	0x08008398
 8007878:	08008358 	.word	0x08008358

0800787c <_lseek_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d07      	ldr	r5, [pc, #28]	; (800789c <_lseek_r+0x20>)
 8007880:	4604      	mov	r4, r0
 8007882:	4608      	mov	r0, r1
 8007884:	4611      	mov	r1, r2
 8007886:	2200      	movs	r2, #0
 8007888:	602a      	str	r2, [r5, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	f7f9 fa7c 	bl	8000d88 <_lseek>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_lseek_r+0x1e>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_lseek_r+0x1e>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	20001e98 	.word	0x20001e98

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__malloc_lock+0x8>)
 80078a2:	f7ff bd84 	b.w	80073ae <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	20001e8c 	.word	0x20001e8c

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f7ff bd7f 	b.w	80073b0 <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	20001e8c 	.word	0x20001e8c

080078b8 <_free_r>:
 80078b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ba:	2900      	cmp	r1, #0
 80078bc:	d044      	beq.n	8007948 <_free_r+0x90>
 80078be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c2:	9001      	str	r0, [sp, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f1a1 0404 	sub.w	r4, r1, #4
 80078ca:	bfb8      	it	lt
 80078cc:	18e4      	addlt	r4, r4, r3
 80078ce:	f7ff ffe7 	bl	80078a0 <__malloc_lock>
 80078d2:	4a1e      	ldr	r2, [pc, #120]	; (800794c <_free_r+0x94>)
 80078d4:	9801      	ldr	r0, [sp, #4]
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	b933      	cbnz	r3, 80078e8 <_free_r+0x30>
 80078da:	6063      	str	r3, [r4, #4]
 80078dc:	6014      	str	r4, [r2, #0]
 80078de:	b003      	add	sp, #12
 80078e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078e4:	f7ff bfe2 	b.w	80078ac <__malloc_unlock>
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d908      	bls.n	80078fe <_free_r+0x46>
 80078ec:	6825      	ldr	r5, [r4, #0]
 80078ee:	1961      	adds	r1, r4, r5
 80078f0:	428b      	cmp	r3, r1
 80078f2:	bf01      	itttt	eq
 80078f4:	6819      	ldreq	r1, [r3, #0]
 80078f6:	685b      	ldreq	r3, [r3, #4]
 80078f8:	1949      	addeq	r1, r1, r5
 80078fa:	6021      	streq	r1, [r4, #0]
 80078fc:	e7ed      	b.n	80078da <_free_r+0x22>
 80078fe:	461a      	mov	r2, r3
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	b10b      	cbz	r3, 8007908 <_free_r+0x50>
 8007904:	42a3      	cmp	r3, r4
 8007906:	d9fa      	bls.n	80078fe <_free_r+0x46>
 8007908:	6811      	ldr	r1, [r2, #0]
 800790a:	1855      	adds	r5, r2, r1
 800790c:	42a5      	cmp	r5, r4
 800790e:	d10b      	bne.n	8007928 <_free_r+0x70>
 8007910:	6824      	ldr	r4, [r4, #0]
 8007912:	4421      	add	r1, r4
 8007914:	1854      	adds	r4, r2, r1
 8007916:	42a3      	cmp	r3, r4
 8007918:	6011      	str	r1, [r2, #0]
 800791a:	d1e0      	bne.n	80078de <_free_r+0x26>
 800791c:	681c      	ldr	r4, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	6053      	str	r3, [r2, #4]
 8007922:	4421      	add	r1, r4
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	e7da      	b.n	80078de <_free_r+0x26>
 8007928:	d902      	bls.n	8007930 <_free_r+0x78>
 800792a:	230c      	movs	r3, #12
 800792c:	6003      	str	r3, [r0, #0]
 800792e:	e7d6      	b.n	80078de <_free_r+0x26>
 8007930:	6825      	ldr	r5, [r4, #0]
 8007932:	1961      	adds	r1, r4, r5
 8007934:	428b      	cmp	r3, r1
 8007936:	bf04      	itt	eq
 8007938:	6819      	ldreq	r1, [r3, #0]
 800793a:	685b      	ldreq	r3, [r3, #4]
 800793c:	6063      	str	r3, [r4, #4]
 800793e:	bf04      	itt	eq
 8007940:	1949      	addeq	r1, r1, r5
 8007942:	6021      	streq	r1, [r4, #0]
 8007944:	6054      	str	r4, [r2, #4]
 8007946:	e7ca      	b.n	80078de <_free_r+0x26>
 8007948:	b003      	add	sp, #12
 800794a:	bd30      	pop	{r4, r5, pc}
 800794c:	20001e90 	.word	0x20001e90

08007950 <__sfputc_r>:
 8007950:	6893      	ldr	r3, [r2, #8]
 8007952:	3b01      	subs	r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	b410      	push	{r4}
 8007958:	6093      	str	r3, [r2, #8]
 800795a:	da08      	bge.n	800796e <__sfputc_r+0x1e>
 800795c:	6994      	ldr	r4, [r2, #24]
 800795e:	42a3      	cmp	r3, r4
 8007960:	db01      	blt.n	8007966 <__sfputc_r+0x16>
 8007962:	290a      	cmp	r1, #10
 8007964:	d103      	bne.n	800796e <__sfputc_r+0x1e>
 8007966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796a:	f000 baf1 	b.w	8007f50 <__swbuf_r>
 800796e:	6813      	ldr	r3, [r2, #0]
 8007970:	1c58      	adds	r0, r3, #1
 8007972:	6010      	str	r0, [r2, #0]
 8007974:	7019      	strb	r1, [r3, #0]
 8007976:	4608      	mov	r0, r1
 8007978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800797c:	4770      	bx	lr

0800797e <__sfputs_r>:
 800797e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	4614      	mov	r4, r2
 8007986:	18d5      	adds	r5, r2, r3
 8007988:	42ac      	cmp	r4, r5
 800798a:	d101      	bne.n	8007990 <__sfputs_r+0x12>
 800798c:	2000      	movs	r0, #0
 800798e:	e007      	b.n	80079a0 <__sfputs_r+0x22>
 8007990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007994:	463a      	mov	r2, r7
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ffda 	bl	8007950 <__sfputc_r>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d1f3      	bne.n	8007988 <__sfputs_r+0xa>
 80079a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079a4 <_vfiprintf_r>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	460d      	mov	r5, r1
 80079aa:	b09d      	sub	sp, #116	; 0x74
 80079ac:	4614      	mov	r4, r2
 80079ae:	4698      	mov	r8, r3
 80079b0:	4606      	mov	r6, r0
 80079b2:	b118      	cbz	r0, 80079bc <_vfiprintf_r+0x18>
 80079b4:	6983      	ldr	r3, [r0, #24]
 80079b6:	b90b      	cbnz	r3, 80079bc <_vfiprintf_r+0x18>
 80079b8:	f7ff fc36 	bl	8007228 <__sinit>
 80079bc:	4b89      	ldr	r3, [pc, #548]	; (8007be4 <_vfiprintf_r+0x240>)
 80079be:	429d      	cmp	r5, r3
 80079c0:	d11b      	bne.n	80079fa <_vfiprintf_r+0x56>
 80079c2:	6875      	ldr	r5, [r6, #4]
 80079c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c6:	07d9      	lsls	r1, r3, #31
 80079c8:	d405      	bmi.n	80079d6 <_vfiprintf_r+0x32>
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	059a      	lsls	r2, r3, #22
 80079ce:	d402      	bmi.n	80079d6 <_vfiprintf_r+0x32>
 80079d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d2:	f7ff fcec 	bl	80073ae <__retarget_lock_acquire_recursive>
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	071b      	lsls	r3, r3, #28
 80079da:	d501      	bpl.n	80079e0 <_vfiprintf_r+0x3c>
 80079dc:	692b      	ldr	r3, [r5, #16]
 80079de:	b9eb      	cbnz	r3, 8007a1c <_vfiprintf_r+0x78>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 fb06 	bl	8007ff4 <__swsetup_r>
 80079e8:	b1c0      	cbz	r0, 8007a1c <_vfiprintf_r+0x78>
 80079ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ec:	07dc      	lsls	r4, r3, #31
 80079ee:	d50e      	bpl.n	8007a0e <_vfiprintf_r+0x6a>
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295
 80079f4:	b01d      	add	sp, #116	; 0x74
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	4b7b      	ldr	r3, [pc, #492]	; (8007be8 <_vfiprintf_r+0x244>)
 80079fc:	429d      	cmp	r5, r3
 80079fe:	d101      	bne.n	8007a04 <_vfiprintf_r+0x60>
 8007a00:	68b5      	ldr	r5, [r6, #8]
 8007a02:	e7df      	b.n	80079c4 <_vfiprintf_r+0x20>
 8007a04:	4b79      	ldr	r3, [pc, #484]	; (8007bec <_vfiprintf_r+0x248>)
 8007a06:	429d      	cmp	r5, r3
 8007a08:	bf08      	it	eq
 8007a0a:	68f5      	ldreq	r5, [r6, #12]
 8007a0c:	e7da      	b.n	80079c4 <_vfiprintf_r+0x20>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	0598      	lsls	r0, r3, #22
 8007a12:	d4ed      	bmi.n	80079f0 <_vfiprintf_r+0x4c>
 8007a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a16:	f7ff fccb 	bl	80073b0 <__retarget_lock_release_recursive>
 8007a1a:	e7e9      	b.n	80079f0 <_vfiprintf_r+0x4c>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a20:	2320      	movs	r3, #32
 8007a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2a:	2330      	movs	r3, #48	; 0x30
 8007a2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bf0 <_vfiprintf_r+0x24c>
 8007a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a34:	f04f 0901 	mov.w	r9, #1
 8007a38:	4623      	mov	r3, r4
 8007a3a:	469a      	mov	sl, r3
 8007a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a40:	b10a      	cbz	r2, 8007a46 <_vfiprintf_r+0xa2>
 8007a42:	2a25      	cmp	r2, #37	; 0x25
 8007a44:	d1f9      	bne.n	8007a3a <_vfiprintf_r+0x96>
 8007a46:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4a:	d00b      	beq.n	8007a64 <_vfiprintf_r+0xc0>
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ff93 	bl	800797e <__sfputs_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f000 80aa 	beq.w	8007bb2 <_vfiprintf_r+0x20e>
 8007a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a60:	445a      	add	r2, fp
 8007a62:	9209      	str	r2, [sp, #36]	; 0x24
 8007a64:	f89a 3000 	ldrb.w	r3, [sl]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80a2 	beq.w	8007bb2 <_vfiprintf_r+0x20e>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a78:	f10a 0a01 	add.w	sl, sl, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	9307      	str	r3, [sp, #28]
 8007a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a84:	931a      	str	r3, [sp, #104]	; 0x68
 8007a86:	4654      	mov	r4, sl
 8007a88:	2205      	movs	r2, #5
 8007a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8e:	4858      	ldr	r0, [pc, #352]	; (8007bf0 <_vfiprintf_r+0x24c>)
 8007a90:	f7f8 fb76 	bl	8000180 <memchr>
 8007a94:	9a04      	ldr	r2, [sp, #16]
 8007a96:	b9d8      	cbnz	r0, 8007ad0 <_vfiprintf_r+0x12c>
 8007a98:	06d1      	lsls	r1, r2, #27
 8007a9a:	bf44      	itt	mi
 8007a9c:	2320      	movmi	r3, #32
 8007a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa2:	0713      	lsls	r3, r2, #28
 8007aa4:	bf44      	itt	mi
 8007aa6:	232b      	movmi	r3, #43	; 0x2b
 8007aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aac:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab2:	d015      	beq.n	8007ae0 <_vfiprintf_r+0x13c>
 8007ab4:	9a07      	ldr	r2, [sp, #28]
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f04f 0c0a 	mov.w	ip, #10
 8007abe:	4621      	mov	r1, r4
 8007ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac4:	3b30      	subs	r3, #48	; 0x30
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d94e      	bls.n	8007b68 <_vfiprintf_r+0x1c4>
 8007aca:	b1b0      	cbz	r0, 8007afa <_vfiprintf_r+0x156>
 8007acc:	9207      	str	r2, [sp, #28]
 8007ace:	e014      	b.n	8007afa <_vfiprintf_r+0x156>
 8007ad0:	eba0 0308 	sub.w	r3, r0, r8
 8007ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	46a2      	mov	sl, r4
 8007ade:	e7d2      	b.n	8007a86 <_vfiprintf_r+0xe2>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d19      	adds	r1, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bfbb      	ittet	lt
 8007aec:	425b      	neglt	r3, r3
 8007aee:	f042 0202 	orrlt.w	r2, r2, #2
 8007af2:	9307      	strge	r3, [sp, #28]
 8007af4:	9307      	strlt	r3, [sp, #28]
 8007af6:	bfb8      	it	lt
 8007af8:	9204      	strlt	r2, [sp, #16]
 8007afa:	7823      	ldrb	r3, [r4, #0]
 8007afc:	2b2e      	cmp	r3, #46	; 0x2e
 8007afe:	d10c      	bne.n	8007b1a <_vfiprintf_r+0x176>
 8007b00:	7863      	ldrb	r3, [r4, #1]
 8007b02:	2b2a      	cmp	r3, #42	; 0x2a
 8007b04:	d135      	bne.n	8007b72 <_vfiprintf_r+0x1ce>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9203      	str	r2, [sp, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfb8      	it	lt
 8007b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b16:	3402      	adds	r4, #2
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c00 <_vfiprintf_r+0x25c>
 8007b1e:	7821      	ldrb	r1, [r4, #0]
 8007b20:	2203      	movs	r2, #3
 8007b22:	4650      	mov	r0, sl
 8007b24:	f7f8 fb2c 	bl	8000180 <memchr>
 8007b28:	b140      	cbz	r0, 8007b3c <_vfiprintf_r+0x198>
 8007b2a:	2340      	movs	r3, #64	; 0x40
 8007b2c:	eba0 000a 	sub.w	r0, r0, sl
 8007b30:	fa03 f000 	lsl.w	r0, r3, r0
 8007b34:	9b04      	ldr	r3, [sp, #16]
 8007b36:	4303      	orrs	r3, r0
 8007b38:	3401      	adds	r4, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b40:	482c      	ldr	r0, [pc, #176]	; (8007bf4 <_vfiprintf_r+0x250>)
 8007b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b46:	2206      	movs	r2, #6
 8007b48:	f7f8 fb1a 	bl	8000180 <memchr>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d03f      	beq.n	8007bd0 <_vfiprintf_r+0x22c>
 8007b50:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <_vfiprintf_r+0x254>)
 8007b52:	bb1b      	cbnz	r3, 8007b9c <_vfiprintf_r+0x1f8>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	3307      	adds	r3, #7
 8007b58:	f023 0307 	bic.w	r3, r3, #7
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b62:	443b      	add	r3, r7
 8007b64:	9309      	str	r3, [sp, #36]	; 0x24
 8007b66:	e767      	b.n	8007a38 <_vfiprintf_r+0x94>
 8007b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	2001      	movs	r0, #1
 8007b70:	e7a5      	b.n	8007abe <_vfiprintf_r+0x11a>
 8007b72:	2300      	movs	r3, #0
 8007b74:	3401      	adds	r4, #1
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0c0a 	mov.w	ip, #10
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b84:	3a30      	subs	r2, #48	; 0x30
 8007b86:	2a09      	cmp	r2, #9
 8007b88:	d903      	bls.n	8007b92 <_vfiprintf_r+0x1ee>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0c5      	beq.n	8007b1a <_vfiprintf_r+0x176>
 8007b8e:	9105      	str	r1, [sp, #20]
 8007b90:	e7c3      	b.n	8007b1a <_vfiprintf_r+0x176>
 8007b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b96:	4604      	mov	r4, r0
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e7f0      	b.n	8007b7e <_vfiprintf_r+0x1da>
 8007b9c:	ab03      	add	r3, sp, #12
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	4b16      	ldr	r3, [pc, #88]	; (8007bfc <_vfiprintf_r+0x258>)
 8007ba4:	a904      	add	r1, sp, #16
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f3af 8000 	nop.w
 8007bac:	4607      	mov	r7, r0
 8007bae:	1c78      	adds	r0, r7, #1
 8007bb0:	d1d6      	bne.n	8007b60 <_vfiprintf_r+0x1bc>
 8007bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb4:	07d9      	lsls	r1, r3, #31
 8007bb6:	d405      	bmi.n	8007bc4 <_vfiprintf_r+0x220>
 8007bb8:	89ab      	ldrh	r3, [r5, #12]
 8007bba:	059a      	lsls	r2, r3, #22
 8007bbc:	d402      	bmi.n	8007bc4 <_vfiprintf_r+0x220>
 8007bbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc0:	f7ff fbf6 	bl	80073b0 <__retarget_lock_release_recursive>
 8007bc4:	89ab      	ldrh	r3, [r5, #12]
 8007bc6:	065b      	lsls	r3, r3, #25
 8007bc8:	f53f af12 	bmi.w	80079f0 <_vfiprintf_r+0x4c>
 8007bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bce:	e711      	b.n	80079f4 <_vfiprintf_r+0x50>
 8007bd0:	ab03      	add	r3, sp, #12
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <_vfiprintf_r+0x258>)
 8007bd8:	a904      	add	r1, sp, #16
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 f880 	bl	8007ce0 <_printf_i>
 8007be0:	e7e4      	b.n	8007bac <_vfiprintf_r+0x208>
 8007be2:	bf00      	nop
 8007be4:	08008378 	.word	0x08008378
 8007be8:	08008398 	.word	0x08008398
 8007bec:	08008358 	.word	0x08008358
 8007bf0:	080083bc 	.word	0x080083bc
 8007bf4:	080083c6 	.word	0x080083c6
 8007bf8:	00000000 	.word	0x00000000
 8007bfc:	0800797f 	.word	0x0800797f
 8007c00:	080083c2 	.word	0x080083c2

08007c04 <_printf_common>:
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	4616      	mov	r6, r2
 8007c0a:	4699      	mov	r9, r3
 8007c0c:	688a      	ldr	r2, [r1, #8]
 8007c0e:	690b      	ldr	r3, [r1, #16]
 8007c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	bfb8      	it	lt
 8007c18:	4613      	movlt	r3, r2
 8007c1a:	6033      	str	r3, [r6, #0]
 8007c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c20:	4607      	mov	r7, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b10a      	cbz	r2, 8007c2a <_printf_common+0x26>
 8007c26:	3301      	adds	r3, #1
 8007c28:	6033      	str	r3, [r6, #0]
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	0699      	lsls	r1, r3, #26
 8007c2e:	bf42      	ittt	mi
 8007c30:	6833      	ldrmi	r3, [r6, #0]
 8007c32:	3302      	addmi	r3, #2
 8007c34:	6033      	strmi	r3, [r6, #0]
 8007c36:	6825      	ldr	r5, [r4, #0]
 8007c38:	f015 0506 	ands.w	r5, r5, #6
 8007c3c:	d106      	bne.n	8007c4c <_printf_common+0x48>
 8007c3e:	f104 0a19 	add.w	sl, r4, #25
 8007c42:	68e3      	ldr	r3, [r4, #12]
 8007c44:	6832      	ldr	r2, [r6, #0]
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	42ab      	cmp	r3, r5
 8007c4a:	dc26      	bgt.n	8007c9a <_printf_common+0x96>
 8007c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c50:	1e13      	subs	r3, r2, #0
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	bf18      	it	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	0692      	lsls	r2, r2, #26
 8007c5a:	d42b      	bmi.n	8007cb4 <_printf_common+0xb0>
 8007c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c60:	4649      	mov	r1, r9
 8007c62:	4638      	mov	r0, r7
 8007c64:	47c0      	blx	r8
 8007c66:	3001      	adds	r0, #1
 8007c68:	d01e      	beq.n	8007ca8 <_printf_common+0xa4>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	68e5      	ldr	r5, [r4, #12]
 8007c6e:	6832      	ldr	r2, [r6, #0]
 8007c70:	f003 0306 	and.w	r3, r3, #6
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	bf08      	it	eq
 8007c78:	1aad      	subeq	r5, r5, r2
 8007c7a:	68a3      	ldr	r3, [r4, #8]
 8007c7c:	6922      	ldr	r2, [r4, #16]
 8007c7e:	bf0c      	ite	eq
 8007c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c84:	2500      	movne	r5, #0
 8007c86:	4293      	cmp	r3, r2
 8007c88:	bfc4      	itt	gt
 8007c8a:	1a9b      	subgt	r3, r3, r2
 8007c8c:	18ed      	addgt	r5, r5, r3
 8007c8e:	2600      	movs	r6, #0
 8007c90:	341a      	adds	r4, #26
 8007c92:	42b5      	cmp	r5, r6
 8007c94:	d11a      	bne.n	8007ccc <_printf_common+0xc8>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e008      	b.n	8007cac <_printf_common+0xa8>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	47c0      	blx	r8
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d103      	bne.n	8007cb0 <_printf_common+0xac>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	e7c6      	b.n	8007c42 <_printf_common+0x3e>
 8007cb4:	18e1      	adds	r1, r4, r3
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	2030      	movs	r0, #48	; 0x30
 8007cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cbe:	4422      	add	r2, r4
 8007cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc8:	3302      	adds	r3, #2
 8007cca:	e7c7      	b.n	8007c5c <_printf_common+0x58>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c0      	blx	r8
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d0e6      	beq.n	8007ca8 <_printf_common+0xa4>
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7d9      	b.n	8007c92 <_printf_common+0x8e>
	...

08007ce0 <_printf_i>:
 8007ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	7e0f      	ldrb	r7, [r1, #24]
 8007ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ce8:	2f78      	cmp	r7, #120	; 0x78
 8007cea:	4691      	mov	r9, r2
 8007cec:	4680      	mov	r8, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cf6:	d807      	bhi.n	8007d08 <_printf_i+0x28>
 8007cf8:	2f62      	cmp	r7, #98	; 0x62
 8007cfa:	d80a      	bhi.n	8007d12 <_printf_i+0x32>
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	f000 80d8 	beq.w	8007eb2 <_printf_i+0x1d2>
 8007d02:	2f58      	cmp	r7, #88	; 0x58
 8007d04:	f000 80a3 	beq.w	8007e4e <_printf_i+0x16e>
 8007d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d10:	e03a      	b.n	8007d88 <_printf_i+0xa8>
 8007d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d16:	2b15      	cmp	r3, #21
 8007d18:	d8f6      	bhi.n	8007d08 <_printf_i+0x28>
 8007d1a:	a101      	add	r1, pc, #4	; (adr r1, 8007d20 <_printf_i+0x40>)
 8007d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d20:	08007d79 	.word	0x08007d79
 8007d24:	08007d8d 	.word	0x08007d8d
 8007d28:	08007d09 	.word	0x08007d09
 8007d2c:	08007d09 	.word	0x08007d09
 8007d30:	08007d09 	.word	0x08007d09
 8007d34:	08007d09 	.word	0x08007d09
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007d09 	.word	0x08007d09
 8007d40:	08007d09 	.word	0x08007d09
 8007d44:	08007d09 	.word	0x08007d09
 8007d48:	08007d09 	.word	0x08007d09
 8007d4c:	08007e99 	.word	0x08007e99
 8007d50:	08007dbd 	.word	0x08007dbd
 8007d54:	08007e7b 	.word	0x08007e7b
 8007d58:	08007d09 	.word	0x08007d09
 8007d5c:	08007d09 	.word	0x08007d09
 8007d60:	08007ebb 	.word	0x08007ebb
 8007d64:	08007d09 	.word	0x08007d09
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007d09 	.word	0x08007d09
 8007d70:	08007d09 	.word	0x08007d09
 8007d74:	08007e83 	.word	0x08007e83
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	1d1a      	adds	r2, r3, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	602a      	str	r2, [r5, #0]
 8007d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0a3      	b.n	8007ed4 <_printf_i+0x1f4>
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	6829      	ldr	r1, [r5, #0]
 8007d90:	0606      	lsls	r6, r0, #24
 8007d92:	f101 0304 	add.w	r3, r1, #4
 8007d96:	d50a      	bpl.n	8007dae <_printf_i+0xce>
 8007d98:	680e      	ldr	r6, [r1, #0]
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	2e00      	cmp	r6, #0
 8007d9e:	da03      	bge.n	8007da8 <_printf_i+0xc8>
 8007da0:	232d      	movs	r3, #45	; 0x2d
 8007da2:	4276      	negs	r6, r6
 8007da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da8:	485e      	ldr	r0, [pc, #376]	; (8007f24 <_printf_i+0x244>)
 8007daa:	230a      	movs	r3, #10
 8007dac:	e019      	b.n	8007de2 <_printf_i+0x102>
 8007dae:	680e      	ldr	r6, [r1, #0]
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007db6:	bf18      	it	ne
 8007db8:	b236      	sxthne	r6, r6
 8007dba:	e7ef      	b.n	8007d9c <_printf_i+0xbc>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	6029      	str	r1, [r5, #0]
 8007dc4:	0601      	lsls	r1, r0, #24
 8007dc6:	d501      	bpl.n	8007dcc <_printf_i+0xec>
 8007dc8:	681e      	ldr	r6, [r3, #0]
 8007dca:	e002      	b.n	8007dd2 <_printf_i+0xf2>
 8007dcc:	0646      	lsls	r6, r0, #25
 8007dce:	d5fb      	bpl.n	8007dc8 <_printf_i+0xe8>
 8007dd0:	881e      	ldrh	r6, [r3, #0]
 8007dd2:	4854      	ldr	r0, [pc, #336]	; (8007f24 <_printf_i+0x244>)
 8007dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2308      	moveq	r3, #8
 8007dda:	230a      	movne	r3, #10
 8007ddc:	2100      	movs	r1, #0
 8007dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007de2:	6865      	ldr	r5, [r4, #4]
 8007de4:	60a5      	str	r5, [r4, #8]
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	bfa2      	ittt	ge
 8007dea:	6821      	ldrge	r1, [r4, #0]
 8007dec:	f021 0104 	bicge.w	r1, r1, #4
 8007df0:	6021      	strge	r1, [r4, #0]
 8007df2:	b90e      	cbnz	r6, 8007df8 <_printf_i+0x118>
 8007df4:	2d00      	cmp	r5, #0
 8007df6:	d04d      	beq.n	8007e94 <_printf_i+0x1b4>
 8007df8:	4615      	mov	r5, r2
 8007dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8007e02:	5dc7      	ldrb	r7, [r0, r7]
 8007e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e08:	4637      	mov	r7, r6
 8007e0a:	42bb      	cmp	r3, r7
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	d9f4      	bls.n	8007dfa <_printf_i+0x11a>
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d10b      	bne.n	8007e2c <_printf_i+0x14c>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	07de      	lsls	r6, r3, #31
 8007e18:	d508      	bpl.n	8007e2c <_printf_i+0x14c>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	6861      	ldr	r1, [r4, #4]
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	bfde      	ittt	le
 8007e22:	2330      	movle	r3, #48	; 0x30
 8007e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e2c:	1b52      	subs	r2, r2, r5
 8007e2e:	6122      	str	r2, [r4, #16]
 8007e30:	f8cd a000 	str.w	sl, [sp]
 8007e34:	464b      	mov	r3, r9
 8007e36:	aa03      	add	r2, sp, #12
 8007e38:	4621      	mov	r1, r4
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	f7ff fee2 	bl	8007c04 <_printf_common>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d14c      	bne.n	8007ede <_printf_i+0x1fe>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	b004      	add	sp, #16
 8007e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4e:	4835      	ldr	r0, [pc, #212]	; (8007f24 <_printf_i+0x244>)
 8007e50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e54:	6829      	ldr	r1, [r5, #0]
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e5c:	6029      	str	r1, [r5, #0]
 8007e5e:	061d      	lsls	r5, r3, #24
 8007e60:	d514      	bpl.n	8007e8c <_printf_i+0x1ac>
 8007e62:	07df      	lsls	r7, r3, #31
 8007e64:	bf44      	itt	mi
 8007e66:	f043 0320 	orrmi.w	r3, r3, #32
 8007e6a:	6023      	strmi	r3, [r4, #0]
 8007e6c:	b91e      	cbnz	r6, 8007e76 <_printf_i+0x196>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	f023 0320 	bic.w	r3, r3, #32
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	2310      	movs	r3, #16
 8007e78:	e7b0      	b.n	8007ddc <_printf_i+0xfc>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	f043 0320 	orr.w	r3, r3, #32
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	2378      	movs	r3, #120	; 0x78
 8007e84:	4828      	ldr	r0, [pc, #160]	; (8007f28 <_printf_i+0x248>)
 8007e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e8a:	e7e3      	b.n	8007e54 <_printf_i+0x174>
 8007e8c:	0659      	lsls	r1, r3, #25
 8007e8e:	bf48      	it	mi
 8007e90:	b2b6      	uxthmi	r6, r6
 8007e92:	e7e6      	b.n	8007e62 <_printf_i+0x182>
 8007e94:	4615      	mov	r5, r2
 8007e96:	e7bb      	b.n	8007e10 <_printf_i+0x130>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	6826      	ldr	r6, [r4, #0]
 8007e9c:	6961      	ldr	r1, [r4, #20]
 8007e9e:	1d18      	adds	r0, r3, #4
 8007ea0:	6028      	str	r0, [r5, #0]
 8007ea2:	0635      	lsls	r5, r6, #24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	d501      	bpl.n	8007eac <_printf_i+0x1cc>
 8007ea8:	6019      	str	r1, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <_printf_i+0x1d2>
 8007eac:	0670      	lsls	r0, r6, #25
 8007eae:	d5fb      	bpl.n	8007ea8 <_printf_i+0x1c8>
 8007eb0:	8019      	strh	r1, [r3, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	4615      	mov	r5, r2
 8007eb8:	e7ba      	b.n	8007e30 <_printf_i+0x150>
 8007eba:	682b      	ldr	r3, [r5, #0]
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	602a      	str	r2, [r5, #0]
 8007ec0:	681d      	ldr	r5, [r3, #0]
 8007ec2:	6862      	ldr	r2, [r4, #4]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f7f8 f95a 	bl	8000180 <memchr>
 8007ecc:	b108      	cbz	r0, 8007ed2 <_printf_i+0x1f2>
 8007ece:	1b40      	subs	r0, r0, r5
 8007ed0:	6060      	str	r0, [r4, #4]
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007edc:	e7a8      	b.n	8007e30 <_printf_i+0x150>
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	47d0      	blx	sl
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d0ab      	beq.n	8007e44 <_printf_i+0x164>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	079b      	lsls	r3, r3, #30
 8007ef0:	d413      	bmi.n	8007f1a <_printf_i+0x23a>
 8007ef2:	68e0      	ldr	r0, [r4, #12]
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	4298      	cmp	r0, r3
 8007ef8:	bfb8      	it	lt
 8007efa:	4618      	movlt	r0, r3
 8007efc:	e7a4      	b.n	8007e48 <_printf_i+0x168>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4632      	mov	r2, r6
 8007f02:	4649      	mov	r1, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	47d0      	blx	sl
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d09b      	beq.n	8007e44 <_printf_i+0x164>
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	68e3      	ldr	r3, [r4, #12]
 8007f10:	9903      	ldr	r1, [sp, #12]
 8007f12:	1a5b      	subs	r3, r3, r1
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dcf2      	bgt.n	8007efe <_printf_i+0x21e>
 8007f18:	e7eb      	b.n	8007ef2 <_printf_i+0x212>
 8007f1a:	2500      	movs	r5, #0
 8007f1c:	f104 0619 	add.w	r6, r4, #25
 8007f20:	e7f5      	b.n	8007f0e <_printf_i+0x22e>
 8007f22:	bf00      	nop
 8007f24:	080083cd 	.word	0x080083cd
 8007f28:	080083de 	.word	0x080083de

08007f2c <_read_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	; (8007f4c <_read_r+0x20>)
 8007f30:	4604      	mov	r4, r0
 8007f32:	4608      	mov	r0, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f7f8 fec4 	bl	8000cc8 <_read>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_read_r+0x1e>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_read_r+0x1e>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	20001e98 	.word	0x20001e98

08007f50 <__swbuf_r>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	460e      	mov	r6, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	4605      	mov	r5, r0
 8007f58:	b118      	cbz	r0, 8007f62 <__swbuf_r+0x12>
 8007f5a:	6983      	ldr	r3, [r0, #24]
 8007f5c:	b90b      	cbnz	r3, 8007f62 <__swbuf_r+0x12>
 8007f5e:	f7ff f963 	bl	8007228 <__sinit>
 8007f62:	4b21      	ldr	r3, [pc, #132]	; (8007fe8 <__swbuf_r+0x98>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d12b      	bne.n	8007fc0 <__swbuf_r+0x70>
 8007f68:	686c      	ldr	r4, [r5, #4]
 8007f6a:	69a3      	ldr	r3, [r4, #24]
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	071a      	lsls	r2, r3, #28
 8007f72:	d52f      	bpl.n	8007fd4 <__swbuf_r+0x84>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	b36b      	cbz	r3, 8007fd4 <__swbuf_r+0x84>
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	6820      	ldr	r0, [r4, #0]
 8007f7c:	1ac0      	subs	r0, r0, r3
 8007f7e:	6963      	ldr	r3, [r4, #20]
 8007f80:	b2f6      	uxtb	r6, r6
 8007f82:	4283      	cmp	r3, r0
 8007f84:	4637      	mov	r7, r6
 8007f86:	dc04      	bgt.n	8007f92 <__swbuf_r+0x42>
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f7ff fc3a 	bl	8007804 <_fflush_r>
 8007f90:	bb30      	cbnz	r0, 8007fe0 <__swbuf_r+0x90>
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	60a3      	str	r3, [r4, #8]
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	701e      	strb	r6, [r3, #0]
 8007fa0:	6963      	ldr	r3, [r4, #20]
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	4283      	cmp	r3, r0
 8007fa6:	d004      	beq.n	8007fb2 <__swbuf_r+0x62>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	07db      	lsls	r3, r3, #31
 8007fac:	d506      	bpl.n	8007fbc <__swbuf_r+0x6c>
 8007fae:	2e0a      	cmp	r6, #10
 8007fb0:	d104      	bne.n	8007fbc <__swbuf_r+0x6c>
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f7ff fc25 	bl	8007804 <_fflush_r>
 8007fba:	b988      	cbnz	r0, 8007fe0 <__swbuf_r+0x90>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <__swbuf_r+0x9c>)
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d101      	bne.n	8007fca <__swbuf_r+0x7a>
 8007fc6:	68ac      	ldr	r4, [r5, #8]
 8007fc8:	e7cf      	b.n	8007f6a <__swbuf_r+0x1a>
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <__swbuf_r+0xa0>)
 8007fcc:	429c      	cmp	r4, r3
 8007fce:	bf08      	it	eq
 8007fd0:	68ec      	ldreq	r4, [r5, #12]
 8007fd2:	e7ca      	b.n	8007f6a <__swbuf_r+0x1a>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 f80c 	bl	8007ff4 <__swsetup_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0cb      	beq.n	8007f78 <__swbuf_r+0x28>
 8007fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe4:	e7ea      	b.n	8007fbc <__swbuf_r+0x6c>
 8007fe6:	bf00      	nop
 8007fe8:	08008378 	.word	0x08008378
 8007fec:	08008398 	.word	0x08008398
 8007ff0:	08008358 	.word	0x08008358

08007ff4 <__swsetup_r>:
 8007ff4:	4b32      	ldr	r3, [pc, #200]	; (80080c0 <__swsetup_r+0xcc>)
 8007ff6:	b570      	push	{r4, r5, r6, lr}
 8007ff8:	681d      	ldr	r5, [r3, #0]
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	b125      	cbz	r5, 800800a <__swsetup_r+0x16>
 8008000:	69ab      	ldr	r3, [r5, #24]
 8008002:	b913      	cbnz	r3, 800800a <__swsetup_r+0x16>
 8008004:	4628      	mov	r0, r5
 8008006:	f7ff f90f 	bl	8007228 <__sinit>
 800800a:	4b2e      	ldr	r3, [pc, #184]	; (80080c4 <__swsetup_r+0xd0>)
 800800c:	429c      	cmp	r4, r3
 800800e:	d10f      	bne.n	8008030 <__swsetup_r+0x3c>
 8008010:	686c      	ldr	r4, [r5, #4]
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008018:	0719      	lsls	r1, r3, #28
 800801a:	d42c      	bmi.n	8008076 <__swsetup_r+0x82>
 800801c:	06dd      	lsls	r5, r3, #27
 800801e:	d411      	bmi.n	8008044 <__swsetup_r+0x50>
 8008020:	2309      	movs	r3, #9
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	f04f 30ff 	mov.w	r0, #4294967295
 800802e:	e03e      	b.n	80080ae <__swsetup_r+0xba>
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <__swsetup_r+0xd4>)
 8008032:	429c      	cmp	r4, r3
 8008034:	d101      	bne.n	800803a <__swsetup_r+0x46>
 8008036:	68ac      	ldr	r4, [r5, #8]
 8008038:	e7eb      	b.n	8008012 <__swsetup_r+0x1e>
 800803a:	4b24      	ldr	r3, [pc, #144]	; (80080cc <__swsetup_r+0xd8>)
 800803c:	429c      	cmp	r4, r3
 800803e:	bf08      	it	eq
 8008040:	68ec      	ldreq	r4, [r5, #12]
 8008042:	e7e6      	b.n	8008012 <__swsetup_r+0x1e>
 8008044:	0758      	lsls	r0, r3, #29
 8008046:	d512      	bpl.n	800806e <__swsetup_r+0x7a>
 8008048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804a:	b141      	cbz	r1, 800805e <__swsetup_r+0x6a>
 800804c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <__swsetup_r+0x66>
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff fc2f 	bl	80078b8 <_free_r>
 800805a:	2300      	movs	r3, #0
 800805c:	6363      	str	r3, [r4, #52]	; 0x34
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	2300      	movs	r3, #0
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f043 0308 	orr.w	r3, r3, #8
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	b94b      	cbnz	r3, 800808e <__swsetup_r+0x9a>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008084:	d003      	beq.n	800808e <__swsetup_r+0x9a>
 8008086:	4621      	mov	r1, r4
 8008088:	4630      	mov	r0, r6
 800808a:	f000 f847 	bl	800811c <__smakebuf_r>
 800808e:	89a0      	ldrh	r0, [r4, #12]
 8008090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008094:	f010 0301 	ands.w	r3, r0, #1
 8008098:	d00a      	beq.n	80080b0 <__swsetup_r+0xbc>
 800809a:	2300      	movs	r3, #0
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	6963      	ldr	r3, [r4, #20]
 80080a0:	425b      	negs	r3, r3
 80080a2:	61a3      	str	r3, [r4, #24]
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	b943      	cbnz	r3, 80080ba <__swsetup_r+0xc6>
 80080a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080ac:	d1ba      	bne.n	8008024 <__swsetup_r+0x30>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	0781      	lsls	r1, r0, #30
 80080b2:	bf58      	it	pl
 80080b4:	6963      	ldrpl	r3, [r4, #20]
 80080b6:	60a3      	str	r3, [r4, #8]
 80080b8:	e7f4      	b.n	80080a4 <__swsetup_r+0xb0>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e7f7      	b.n	80080ae <__swsetup_r+0xba>
 80080be:	bf00      	nop
 80080c0:	20000014 	.word	0x20000014
 80080c4:	08008378 	.word	0x08008378
 80080c8:	08008398 	.word	0x08008398
 80080cc:	08008358 	.word	0x08008358

080080d0 <__swhatbuf_r>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	460e      	mov	r6, r1
 80080d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d8:	2900      	cmp	r1, #0
 80080da:	b096      	sub	sp, #88	; 0x58
 80080dc:	4614      	mov	r4, r2
 80080de:	461d      	mov	r5, r3
 80080e0:	da08      	bge.n	80080f4 <__swhatbuf_r+0x24>
 80080e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	061a      	lsls	r2, r3, #24
 80080ec:	d410      	bmi.n	8008110 <__swhatbuf_r+0x40>
 80080ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f2:	e00e      	b.n	8008112 <__swhatbuf_r+0x42>
 80080f4:	466a      	mov	r2, sp
 80080f6:	f000 f851 	bl	800819c <_fstat_r>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	dbf1      	blt.n	80080e2 <__swhatbuf_r+0x12>
 80080fe:	9a01      	ldr	r2, [sp, #4]
 8008100:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008104:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008108:	425a      	negs	r2, r3
 800810a:	415a      	adcs	r2, r3
 800810c:	602a      	str	r2, [r5, #0]
 800810e:	e7ee      	b.n	80080ee <__swhatbuf_r+0x1e>
 8008110:	2340      	movs	r3, #64	; 0x40
 8008112:	2000      	movs	r0, #0
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	b016      	add	sp, #88	; 0x58
 8008118:	bd70      	pop	{r4, r5, r6, pc}
	...

0800811c <__smakebuf_r>:
 800811c:	898b      	ldrh	r3, [r1, #12]
 800811e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008120:	079d      	lsls	r5, r3, #30
 8008122:	4606      	mov	r6, r0
 8008124:	460c      	mov	r4, r1
 8008126:	d507      	bpl.n	8008138 <__smakebuf_r+0x1c>
 8008128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	2301      	movs	r3, #1
 8008132:	6163      	str	r3, [r4, #20]
 8008134:	b002      	add	sp, #8
 8008136:	bd70      	pop	{r4, r5, r6, pc}
 8008138:	ab01      	add	r3, sp, #4
 800813a:	466a      	mov	r2, sp
 800813c:	f7ff ffc8 	bl	80080d0 <__swhatbuf_r>
 8008140:	9900      	ldr	r1, [sp, #0]
 8008142:	4605      	mov	r5, r0
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff f96b 	bl	8007420 <_malloc_r>
 800814a:	b948      	cbnz	r0, 8008160 <__smakebuf_r+0x44>
 800814c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008150:	059a      	lsls	r2, r3, #22
 8008152:	d4ef      	bmi.n	8008134 <__smakebuf_r+0x18>
 8008154:	f023 0303 	bic.w	r3, r3, #3
 8008158:	f043 0302 	orr.w	r3, r3, #2
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	e7e3      	b.n	8008128 <__smakebuf_r+0xc>
 8008160:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <__smakebuf_r+0x7c>)
 8008162:	62b3      	str	r3, [r6, #40]	; 0x28
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	6163      	str	r3, [r4, #20]
 8008172:	9b01      	ldr	r3, [sp, #4]
 8008174:	6120      	str	r0, [r4, #16]
 8008176:	b15b      	cbz	r3, 8008190 <__smakebuf_r+0x74>
 8008178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800817c:	4630      	mov	r0, r6
 800817e:	f000 f81f 	bl	80081c0 <_isatty_r>
 8008182:	b128      	cbz	r0, 8008190 <__smakebuf_r+0x74>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	f043 0301 	orr.w	r3, r3, #1
 800818e:	81a3      	strh	r3, [r4, #12]
 8008190:	89a0      	ldrh	r0, [r4, #12]
 8008192:	4305      	orrs	r5, r0
 8008194:	81a5      	strh	r5, [r4, #12]
 8008196:	e7cd      	b.n	8008134 <__smakebuf_r+0x18>
 8008198:	080071c1 	.word	0x080071c1

0800819c <_fstat_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d07      	ldr	r5, [pc, #28]	; (80081bc <_fstat_r+0x20>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	4611      	mov	r1, r2
 80081a8:	602b      	str	r3, [r5, #0]
 80081aa:	f7f8 fdd2 	bl	8000d52 <_fstat>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d102      	bne.n	80081b8 <_fstat_r+0x1c>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	b103      	cbz	r3, 80081b8 <_fstat_r+0x1c>
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	bd38      	pop	{r3, r4, r5, pc}
 80081ba:	bf00      	nop
 80081bc:	20001e98 	.word	0x20001e98

080081c0 <_isatty_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d06      	ldr	r5, [pc, #24]	; (80081dc <_isatty_r+0x1c>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7f8 fdd1 	bl	8000d72 <_isatty>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_isatty_r+0x1a>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_isatty_r+0x1a>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	20001e98 	.word	0x20001e98

080081e0 <_init>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

080081ec <_fini>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr
