
40_Cmsis-RTOS_osTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007310  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  080075fc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e3c  20000078  08007670  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001eb4  08007670  00021eb4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025b1e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004561  00000000  00000000  00045bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002200  00000000  00000000  0004a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002088  00000000  00000000  0004c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004ec7  00000000  00000000  0004e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001faa7  00000000  00000000  00053277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee472  00000000  00000000  00072d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00161190  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009428  00000000  00000000  001611e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007438 	.word	0x08007438

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007438 	.word	0x08007438

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:

// Timer Ids
osTimerId_t timer_1_id, timer_2_id;

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a4      	sub	sp, #144	; 0x90
 80004e8:	af00      	add	r7, sp, #0

  HAL_Init();
 80004ea:	f000 fca7 	bl	8000e3c <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f93b 	bl	8000768 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 fa23 	bl	800093c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f9ad 	bl	8000854 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 f9f7 	bl	80008ec <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 80004fe:	f003 ffab 	bl	8004458 <osKernelInitialize>

  // Creating Timers
  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
 8000502:	2300      	movs	r3, #0
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	4838      	ldr	r0, [pc, #224]	; (80005ec <main+0x108>)
 800050a:	f004 f8b1 	bl	8004670 <osTimerNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a37      	ldr	r2, [pc, #220]	; (80005f0 <main+0x10c>)
 8000512:	6013      	str	r3, [r2, #0]
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);
 8000514:	2300      	movs	r3, #0
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	4836      	ldr	r0, [pc, #216]	; (80005f4 <main+0x110>)
 800051c:	f004 f8a8 	bl	8004670 <osTimerNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a35      	ldr	r2, [pc, #212]	; (80005f8 <main+0x114>)
 8000524:	6013      	str	r3, [r2, #0]

  // Create Threads
  osThreadAttr_t greenThreadAttribs = {
 8000526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800052a:	2224      	movs	r2, #36	; 0x24
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 feb8 	bl	80072a4 <memset>
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <main+0x118>)
 8000536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000540:	2318      	movs	r3, #24
 8000542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	2224      	movs	r2, #36	; 0x24
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fea8 	bl	80072a4 <memset>
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <main+0x11c>)
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
 8000558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800055e:	2319      	movs	r3, #25
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal1
  };

  osThreadAttr_t orangeThreadAttribs = {
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	2224      	movs	r2, #36	; 0x24
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f006 fe9a 	bl	80072a4 <memset>
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <main+0x120>)
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
 8000574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
 800057a:	231a      	movs	r3, #26
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal2
  };

  osThreadAttr_t blueThreadAttribs = {
 800057e:	463b      	mov	r3, r7
 8000580:	2224      	movs	r2, #36	; 0x24
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f006 fe8d 	bl	80072a4 <memset>
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <main+0x124>)
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	231b      	movs	r3, #27
 8000596:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal3
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	461a      	mov	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0x128>)
 80005a2:	f003 ffa3 	bl	80044ec <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a19      	ldr	r2, [pc, #100]	; (8000610 <main+0x12c>)
 80005aa:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 80005ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b0:	461a      	mov	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <main+0x130>)
 80005b6:	f003 ff99 	bl	80044ec <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <main+0x134>)
 80005be:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	461a      	mov	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	4814      	ldr	r0, [pc, #80]	; (800061c <main+0x138>)
 80005ca:	f003 ff8f 	bl	80044ec <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a13      	ldr	r2, [pc, #76]	; (8000620 <main+0x13c>)
 80005d2:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	4812      	ldr	r0, [pc, #72]	; (8000624 <main+0x140>)
 80005dc:	f003 ff86 	bl	80044ec <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <main+0x144>)
 80005e4:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005e6:	f003 ff5b 	bl	80044a0 <osKernelStart>

  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x106>
 80005ec:	08000721 	.word	0x08000721
 80005f0:	20000444 	.word	0x20000444
 80005f4:	08000745 	.word	0x08000745
 80005f8:	20000448 	.word	0x20000448
 80005fc:	08007450 	.word	0x08007450
 8000600:	0800745c 	.word	0x0800745c
 8000604:	08007468 	.word	0x08007468
 8000608:	08007474 	.word	0x08007474
 800060c:	0800062d 	.word	0x0800062d
 8000610:	20000438 	.word	0x20000438
 8000614:	08000661 	.word	0x08000661
 8000618:	20000434 	.word	0x20000434
 800061c:	08000695 	.word	0x08000695
 8000620:	20000440 	.word	0x20000440
 8000624:	080006c9 	.word	0x080006c9
 8000628:	2000043c 	.word	0x2000043c

0800062c <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <vGreenLedControllerTask+0x30>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <vGreenLedControllerTask+0x30>)
 800063c:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e002      	b.n	800064a <vGreenLedControllerTask+0x1e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000650:	4293      	cmp	r3, r2
 8000652:	d9f7      	bls.n	8000644 <vGreenLedControllerTask+0x18>
		osDelay(100);
 8000654:	2064      	movs	r0, #100	; 0x64
 8000656:	f003 ffdb 	bl	8004610 <osDelay>
		++Green_TaskProfiler;
 800065a:	e7eb      	b.n	8000634 <vGreenLedControllerTask+0x8>
 800065c:	20000424 	.word	0x20000424

08000660 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Red_TaskProfiler;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <vRedLedControllerTask+0x30>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <vRedLedControllerTask+0x30>)
 8000670:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	e002      	b.n	800067e <vRedLedControllerTask+0x1e>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000684:	4293      	cmp	r3, r2
 8000686:	d9f7      	bls.n	8000678 <vRedLedControllerTask+0x18>
		osDelay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f003 ffc1 	bl	8004610 <osDelay>
		++Red_TaskProfiler;
 800068e:	e7eb      	b.n	8000668 <vRedLedControllerTask+0x8>
 8000690:	20000420 	.word	0x20000420

08000694 <vOrangeLedControllerTask>:
	}
}


void vOrangeLedControllerTask(void *pvParameters)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Orange_TaskProfiler;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vOrangeLedControllerTask+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <vOrangeLedControllerTask+0x30>)
 80006a4:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e002      	b.n	80006b2 <vOrangeLedControllerTask+0x1e>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d9f7      	bls.n	80006ac <vOrangeLedControllerTask+0x18>
		osDelay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f003 ffa7 	bl	8004610 <osDelay>
		++Orange_TaskProfiler;
 80006c2:	e7eb      	b.n	800069c <vOrangeLedControllerTask+0x8>
 80006c4:	2000041c 	.word	0x2000041c

080006c8 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

	osTimerStart(timer_1_id, 5000);			// Set timer 1 period to 5000 ticks
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <vBlueLedControllerTask+0x4c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 f845 	bl	8004768 <osTimerStart>
	osTimerStart(timer_2_id, 1000);			// Set timer 2 period to 1000 ticks
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <vBlueLedControllerTask+0x50>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 f83e 	bl	8004768 <osTimerStart>

	while(1)
	{
		++Blue_TaskProfiler;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <vBlueLedControllerTask+0x54>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <vBlueLedControllerTask+0x54>)
 80006f4:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e002      	b.n	8000702 <vBlueLedControllerTask+0x3a>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000708:	4293      	cmp	r3, r2
 800070a:	d9f7      	bls.n	80006fc <vBlueLedControllerTask+0x34>
		osDelay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f003 ff7f 	bl	8004610 <osDelay>
		++Blue_TaskProfiler;
 8000712:	e7eb      	b.n	80006ec <vBlueLedControllerTask+0x24>
 8000714:	20000444 	.word	0x20000444
 8000718:	20000448 	.word	0x20000448
 800071c:	20000428 	.word	0x20000428

08000720 <Timer1_Callback>:
	}
}

void Timer1_Callback(void *arg)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	timer_1_TaskProfiler++;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <Timer1_Callback+0x20>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <Timer1_Callback+0x20>)
 8000730:	6013      	str	r3, [r2, #0]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	2000042c 	.word	0x2000042c

08000744 <Timer2_Callback>:

void Timer2_Callback(void *arg)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	timer_2_TaskProfiler++;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <Timer2_Callback+0x20>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <Timer2_Callback+0x20>)
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000430 	.word	0x20000430

08000768 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09a      	sub	sp, #104	; 0x68
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2248      	movs	r2, #72	; 0x48
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f006 fd94 	bl	80072a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800079c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f023 0303 	bic.w	r3, r3, #3
 80007a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b2:	f000 ff99 	bl	80016e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fe64 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <SystemClock_Config+0xe8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <SystemClock_Config+0xe8>)
 80007c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <SystemClock_Config+0xe8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007d8:	2327      	movs	r3, #39	; 0x27
 80007da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fb61 	bl	8001ecc <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000810:	f000 f8fe 	bl	8000a10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000814:	236f      	movs	r3, #111	; 0x6f
 8000816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000818:	2302      	movs	r3, #2
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f001 febd 	bl	80025b4 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000840:	f000 f8e6 	bl	8000a10 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000844:	f002 fcaa 	bl	800319c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000848:	bf00      	nop
 800084a:	3768      	adds	r7, #104	; 0x68
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58000400 	.word	0x58000400

08000854 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <MX_LPUART1_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800089e:	f003 f82d 	bl	80038fc <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f8b2 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 80008b0:	f003 fc88 	bl	80041c4 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f8a9 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 80008c2:	f003 fcbd 	bl	8004240 <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f8a0 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 80008d2:	f003 fc3e 	bl	8004152 <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f898 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000094 	.word	0x20000094
 80008e8:	40008000 	.word	0x40008000

080008ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USB_PCD_Init+0x48>)
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <MX_USB_PCD_Init+0x4c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USB_PCD_Init+0x48>)
 80008f8:	2208      	movs	r2, #8
 80008fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_USB_PCD_Init+0x48>)
 80008fe:	2202      	movs	r2, #2
 8000900:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000904:	2202      	movs	r2, #2
 8000906:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_USB_PCD_Init+0x48>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USB_PCD_Init+0x48>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USB_PCD_Init+0x48>)
 8000922:	f000 fd3f 	bl	80013a4 <HAL_PCD_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800092c:	f000 f870 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000124 	.word	0x20000124
 8000938:	40006800 	.word	0x40006800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	2004      	movs	r0, #4
 8000952:	f7ff fdad 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fdaa 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fda7 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2008      	movs	r0, #8
 8000964:	f7ff fda4 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2123      	movs	r1, #35	; 0x23
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_GPIO_Init+0xa4>)
 800096e:	f000 fd01 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	2310      	movs	r3, #16
 8000974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_GPIO_Init+0xa8>)
 8000984:	f000 fb86 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000988:	2323      	movs	r3, #35	; 0x23
 800098a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <MX_GPIO_Init+0xa4>)
 800099e:	f000 fb79 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009a2:	2303      	movs	r3, #3
 80009a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_GPIO_Init+0xac>)
 80009b4:	f000 fb6e 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009b8:	23c0      	movs	r3, #192	; 0xc0
 80009ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c8:	2307      	movs	r3, #7
 80009ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_GPIO_Init+0xa4>)
 80009d2:	f000 fb5f 	bl	8001094 <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	48000400 	.word	0x48000400
 80009e4:	48000800 	.word	0x48000800
 80009e8:	48000c00 	.word	0x48000c00

080009ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fe:	f000 fa3d 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40012c00 	.word	0x40012c00

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>

08000a1a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b085      	sub	sp, #20
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a70:	68fb      	ldr	r3, [r7, #12]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	f06f 0001 	mvn.w	r0, #1
 8000ac6:	f000 fabd 	bl	8001044 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fe17 	bl	8001708 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000ada:	f000 fe57 	bl	800178c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09c      	sub	sp, #112	; 0x70
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2250      	movs	r2, #80	; 0x50
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f006 fbcb 	bl	80072a4 <memset>
  if(huart->Instance==LPUART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <HAL_UART_MspInit+0x84>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d124      	bne.n	8000b62 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 f9c3 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b30:	f7ff ff6e 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff ffa2 	bl	8000a7e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f7ff ff6d 	bl	8000a1a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b40:	230c      	movs	r3, #12
 8000b42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b50:	2308      	movs	r3, #8
 8000b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 fa99 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3770      	adds	r7, #112	; 0x70
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40008000 	.word	0x40008000

08000b70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b09c      	sub	sp, #112	; 0x70
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2250      	movs	r2, #80	; 0x50
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f006 fb87 	bl	80072a4 <memset>
  if(hpcd->Instance==USB)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_PCD_MspInit+0xa8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d136      	bne.n	8000c0e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ba6:	2318      	movs	r3, #24
 8000ba8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000bb6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bc0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 f96f 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000bd8:	f7ff ff1a 	bl	8000a10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff ff1c 	bl	8000a1a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000be2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000be6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 fa47 	bl	8001094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c06:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c0a:	f7ff ff1f 	bl	8000a4c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3770      	adds	r7, #112	; 0x70
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40006800 	.word	0x40006800

08000c1c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c40:	68fb      	ldr	r3, [r7, #12]
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2019      	movs	r0, #25
 8000c66:	f000 f9ed 	bl	8001044 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 fa04 	bl	8001078 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c74:	f7ff ffd2 	bl	8000c1c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c78:	f107 0208 	add.w	r2, r7, #8
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fe82 	bl	800298c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c88:	f001 fe6a 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8000c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <HAL_InitTick+0x8c>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_InitTick+0x90>)
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_InitTick+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_InitTick+0x90>)
 8000ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000caa:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_InitTick+0x90>)
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_InitTick+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_InitTick+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cbc:	4808      	ldr	r0, [pc, #32]	; (8000ce0 <HAL_InitTick+0x90>)
 8000cbe:	f002 fb84 	bl	80033ca <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_InitTick+0x90>)
 8000cca:	f002 fbdf 	bl	800348c <HAL_TIM_Base_Start_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	2000044c 	.word	0x2000044c
 8000ce4:	40012c00 	.word	0x40012c00

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d1a:	f002 fc05 	bl	8003528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000044c 	.word	0x2000044c

08000d28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <SystemInit+0x98>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <SystemInit+0x98>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d50:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d54:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <SystemInit+0x9c>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d72:	f023 0305 	bic.w	r3, r3, #5
 8000d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <SystemInit+0xa0>)
 8000d94:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <SystemInit+0xa0>)
 8000d9c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	faf6fefb 	.word	0xfaf6fefb
 8000dc8:	22041000 	.word	0x22041000

08000dcc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000dcc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd0:	3304      	adds	r3, #4

08000dd2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000dd6:	d3f9      	bcc.n	8000dcc <CopyDataInit>
  bx lr
 8000dd8:	4770      	bx	lr

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dda:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ddc:	3004      	adds	r0, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dde:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>
  bx lr
 8000de2:	4770      	bx	lr

08000de4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff ff9e 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <LoopForever+0x8>)
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <LoopForever+0xc>)
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <LoopForever+0x10>)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f7ff ffed 	bl	8000dd2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopForever+0x14>)
 8000dfa:	490c      	ldr	r1, [pc, #48]	; (8000e2c <LoopForever+0x18>)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f7ff ffee 	bl	8000dde <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopForever+0x1c>)
 8000e04:	490b      	ldr	r1, [pc, #44]	; (8000e34 <LoopForever+0x20>)
 8000e06:	2300      	movs	r3, #0
 8000e08:	f7ff ffe9 	bl	8000dde <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0c:	f006 fa16 	bl	800723c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e10:	f7ff fb68 	bl	80004e4 <main>

08000e14 <LoopForever>:

LoopForever:
  b LoopForever
 8000e14:	e7fe      	b.n	8000e14 <LoopForever>
 8000e16:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000e18:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	20000078 	.word	0x20000078
 8000e24:	080075fc 	.word	0x080075fc
  INIT_BSS _sbss, _ebss
 8000e28:	20000078 	.word	0x20000078
 8000e2c:	20001eb4 	.word	0x20001eb4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e30:	20030000 	.word	0x20030000
 8000e34:	20030000 	.word	0x20030000

08000e38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_Init+0x3c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_Init+0x3c>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f8eb 	bl	800102e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e58:	200f      	movs	r0, #15
 8000e5a:	f7ff fef9 	bl	8000c50 <HAL_InitTick>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	e001      	b.n	8000e6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6a:	f7ff fe21 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58004000 	.word	0x58004000

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000000c 	.word	0x2000000c
 8000ea0:	20000498 	.word	0x20000498

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000498 	.word	0x20000498

08000ebc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTickPrio+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff4c 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001052:	f7ff ff63 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001056:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff ffb3 	bl	8000fc8 <NVIC_EncodePriority>
 8001062:	4602      	mov	r2, r0
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff82 	bl	8000f74 <__NVIC_SetPriority>
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff56 	bl	8000f38 <__NVIC_EnableIRQ>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e14c      	b.n	800133e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 813e 	beq.w	8001338 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x40>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	6939      	ldr	r1, [r7, #16]
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0203 	and.w	r2, r3, #3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8098 	beq.w	8001338 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001208:	4a54      	ldr	r2, [pc, #336]	; (800135c <HAL_GPIO_Init+0x2c8>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001232:	d019      	beq.n	8001268 <HAL_GPIO_Init+0x1d4>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1d0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a49      	ldr	r2, [pc, #292]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1cc>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_GPIO_Init+0x2d4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1c8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a47      	ldr	r2, [pc, #284]	; (800136c <HAL_GPIO_Init+0x2d8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1c4>
 8001254:	2304      	movs	r3, #4
 8001256:	e008      	b.n	800126a <HAL_GPIO_Init+0x1d6>
 8001258:	2307      	movs	r3, #7
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1d6>
 800125c:	2303      	movs	r3, #3
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1d6>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1d6>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1d6>
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127a:	4938      	ldr	r1, [pc, #224]	; (800135c <HAL_GPIO_Init+0x2c8>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ac:	4a30      	ldr	r2, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 80012de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 800130c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001330:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_GPIO_Init+0x2dc>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	f47f aeab 	bne.w	80010a4 <HAL_GPIO_Init+0x10>
  }
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	58000800 	.word	0x58000800

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af06      	add	r7, sp, #24
 80013aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0dd      	b.n	8001572 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fbd0 	bl	8000b70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 ffb8 	bl	8004358 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e04d      	b.n	800148a <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3305      	adds	r3, #5
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	3304      	adds	r3, #4
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	b298      	uxth	r0, r3
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	333a      	adds	r3, #58	; 0x3a
 800142e:	4602      	mov	r2, r0
 8001430:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3307      	adds	r3, #7
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	333c      	adds	r3, #60	; 0x3c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3340      	adds	r3, #64	; 0x40
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	3344      	adds	r3, #68	; 0x44
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	3301      	adds	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ac      	bcc.n	80013ee <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e044      	b.n	8001524 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	3301      	adds	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3b5      	bcc.n	800149a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	687e      	ldr	r6, [r7, #4]
 8001536:	466d      	mov	r5, sp
 8001538:	f106 0410 	add.w	r4, r6, #16
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001544:	e885 0003 	stmia.w	r5, {r0, r1}
 8001548:	1d33      	adds	r3, r6, #4
 800154a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f002 ff1e 	bl	800438e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d102      	bne.n	8001570 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f805 	bl	800157a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800157a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80015da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015de:	4905      	ldr	r1, [pc, #20]	; (80015f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58000800 	.word	0x58000800

080015f8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <LL_EXTI_DisableIT_0_31+0x28>)
 8001602:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	43db      	mvns	r3, r3
 800160a:	4905      	ldr	r1, [pc, #20]	; (8001620 <LL_EXTI_DisableIT_0_31+0x28>)
 800160c:	4013      	ands	r3, r2
 800160e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	58000800 	.word	0x58000800

08001624 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800162e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	43db      	mvns	r3, r3
 8001636:	4905      	ldr	r1, [pc, #20]	; (800164c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001638:	4013      	ands	r3, r2
 800163a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	58000800 	.word	0x58000800

08001650 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4904      	ldr	r1, [pc, #16]	; (8001670 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]

}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58000800 	.word	0x58000800

08001674 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	43db      	mvns	r3, r3
 8001684:	4904      	ldr	r1, [pc, #16]	; (8001698 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001686:	4013      	ands	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	58000800 	.word	0x58000800

0800169c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4904      	ldr	r1, [pc, #16]	; (80016bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	58000800 	.word	0x58000800

080016c0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4904      	ldr	r1, [pc, #16]	; (80016e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	58000800 	.word	0x58000800

080016e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	58000400 	.word	0x58000400

08001708 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_PWR_ConfigPVD+0x80>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 020e 	bic.w	r2, r3, #14
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	491a      	ldr	r1, [pc, #104]	; (8001788 <HAL_PWR_ConfigPVD+0x80>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8001722:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001726:	f7ff ff67 	bl	80015f8 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800172a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800172e:	f7ff ff79 	bl	8001624 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001732:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001736:	f7ff ffc3 	bl	80016c0 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800173a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800173e:	f7ff ff99 	bl	8001674 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800174e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001752:	f7ff ff3d 	bl	80015d0 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001762:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001766:	f7ff ff73 	bl	8001650 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001776:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800177a:	f7ff ff8f 	bl	800169c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58000400 	.word	0x58000400

0800178c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_PWR_EnablePVD+0x1c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_PWR_EnablePVD+0x1c>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6053      	str	r3, [r2, #4]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	58000400 	.word	0x58000400

080017ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	58000400 	.word	0x58000400

080017c8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017da:	d101      	bne.n	80017e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800182c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800183a:	d101      	bne.n	8001840 <LL_RCC_HSE_IsReady+0x18>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <LL_RCC_HSE_IsReady+0x1a>
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189a:	d101      	bne.n	80018a0 <LL_RCC_HSI_IsReady+0x18>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_RCC_HSI_IsReady+0x1a>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b02      	cmp	r3, #2
 800192c:	d101      	bne.n	8001932 <LL_RCC_HSI48_IsReady+0x18>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_RCC_HSI48_IsReady+0x1a>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d101      	bne.n	80019de <LL_RCC_LSE_IsReady+0x18>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_RCC_LSE_IsReady+0x1a>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d101      	bne.n	8001a46 <LL_RCC_LSI1_IsReady+0x18>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_RCC_LSI1_IsReady+0x1a>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d101      	bne.n	8001aae <LL_RCC_LSI2_IsReady+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_RCC_LSI2_IsReady+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d101      	bne.n	8001b3a <LL_RCC_MSI_IsReady+0x16>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_RCC_MSI_IsReady+0x18>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2bb0      	cmp	r3, #176	; 0xb0
 8001b84:	d901      	bls.n	8001b8a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b86:	23b0      	movs	r3, #176	; 0xb0
 8001b88:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b8a:	687b      	ldr	r3, [r7, #4]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 0203 	bic.w	r2, r3, #3
 8001bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c66:	f023 020f 	bic.w	r2, r3, #15
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da0:	d101      	bne.n	8001da6 <LL_RCC_PLL_IsReady+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_RCC_PLL_IsReady+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0303 	and.w	r3, r3, #3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d101      	bne.n	8001e2c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e4c:	d101      	bne.n	8001e52 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e72:	d101      	bne.n	8001e78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e96:	d101      	bne.n	8001e9c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001eba:	d101      	bne.n	8001ec0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b08d      	sub	sp, #52	; 0x34
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e363      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 808d 	beq.w	8002006 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eec:	f7ff fe7d 	bl	8001bea <LL_RCC_GetSysClkSource>
 8001ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef2:	f7ff ff83 	bl	8001dfc <LL_RCC_PLL_GetMainSource>
 8001ef6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3e>
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	2b0c      	cmp	r3, #12
 8001f02:	d147      	bne.n	8001f94 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d144      	bne.n	8001f94 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e347      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f1a:	f7ff fe28 	bl	8001b6e <LL_RCC_MSI_GetRange>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	429c      	cmp	r4, r3
 8001f22:	d914      	bls.n	8001f4e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fd61 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e336      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fe02 	bl	8001b46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fe26 	bl	8001b98 <LL_RCC_MSI_SetCalibTrimming>
 8001f4c:	e013      	b.n	8001f76 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fdf7 	bl	8001b46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fe1b 	bl	8001b98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fd42 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e317      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f76:	f000 fcc9 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4aa4      	ldr	r2, [pc, #656]	; (8002210 <HAL_RCC_OscConfig+0x344>)
 8001f7e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f80:	4ba4      	ldr	r3, [pc, #656]	; (8002214 <HAL_RCC_OscConfig+0x348>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe63 	bl	8000c50 <HAL_InitTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d039      	beq.n	8002004 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e308      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01e      	beq.n	8001fda <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f9c:	f7ff fda4 	bl	8001ae8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff80 	bl	8000ea4 <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa8:	f7fe ff7c 	bl	8000ea4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2f5      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fba:	f7ff fdb3 	bl	8001b24 <LL_RCC_MSI_IsReady>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f1      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fdbc 	bl	8001b46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fde0 	bl	8001b98 <LL_RCC_MSI_SetCalibTrimming>
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fda:	f7ff fd94 	bl	8001b06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff61 	bl	8000ea4 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ff5d 	bl	8000ea4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e2d6      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ff8:	f7ff fd94 	bl	8001b24 <LL_RCC_MSI_IsReady>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x11a>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002004:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d047      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002012:	f7ff fdea 	bl	8001bea <LL_RCC_GetSysClkSource>
 8002016:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002018:	f7ff fef0 	bl	8001dfc <LL_RCC_PLL_GetMainSource>
 800201c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d005      	beq.n	8002030 <HAL_RCC_OscConfig+0x164>
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d108      	bne.n	800203c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d134      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e2b4      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d102      	bne.n	800204c <HAL_RCC_OscConfig+0x180>
 8002046:	f7ff fbd1 	bl	80017ec <LL_RCC_HSE_Enable>
 800204a:	e001      	b.n	8002050 <HAL_RCC_OscConfig+0x184>
 800204c:	f7ff fbdd 	bl	800180a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ff24 	bl	8000ea4 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe ff20 	bl	8000ea4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e299      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002072:	f7ff fbd9 	bl	8001828 <LL_RCC_HSE_IsReady>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f1      	beq.n	8002060 <HAL_RCC_OscConfig+0x194>
 800207c:	e011      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe ff11 	bl	8000ea4 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002086:	f7fe ff0d 	bl	8000ea4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	; 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e286      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002098:	f7ff fbc6 	bl	8001828 <LL_RCC_HSE_IsReady>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f1      	bne.n	8002086 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04c      	beq.n	8002148 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ae:	f7ff fd9c 	bl	8001bea <LL_RCC_GetSysClkSource>
 80020b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b4:	f7ff fea2 	bl	8001dfc <LL_RCC_PLL_GetMainSource>
 80020b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x200>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d10e      	bne.n	80020e4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e266      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fbe5 	bl	80018ac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020e2:	e031      	b.n	8002148 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d019      	beq.n	8002120 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	f7ff fbae 	bl	800184c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe fed8 	bl	8000ea4 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7fe fed4 	bl	8000ea4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e24d      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800210a:	f7ff fbbd 	bl	8001888 <LL_RCC_HSI_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f1      	beq.n	80020f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fbc7 	bl	80018ac <LL_RCC_HSI_SetCalibTrimming>
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002120:	f7ff fba3 	bl	800186a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe febe 	bl	8000ea4 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7fe feba 	bl	8000ea4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e233      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800213e:	f7ff fba3 	bl	8001888 <LL_RCC_HSI_IsReady>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f1      	bne.n	800212c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a3 	beq.w	80022a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d076      	beq.n	8002258 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d046      	beq.n	8002204 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002176:	f7ff fc5a 	bl	8001a2e <LL_RCC_LSI1_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d113      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002180:	f7ff fc33 	bl	80019ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002184:	f7fe fe8e 	bl	8000ea4 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800218c:	f7fe fe8a 	bl	8000ea4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e203      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800219e:	f7ff fc46 	bl	8001a2e <LL_RCC_LSI1_IsReady>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f1      	beq.n	800218c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80021a8:	f7ff fc53 	bl	8001a52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fe7a 	bl	8000ea4 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021b4:	f7fe fe76 	bl	8000ea4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1ef      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80021c6:	f7ff fc66 	bl	8001a96 <LL_RCC_LSI2_IsReady>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f1      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fc70 	bl	8001aba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80021da:	f7ff fc17 	bl	8001a0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fe61 	bl	8000ea4 <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021e6:	f7fe fe5d 	bl	8000ea4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1d6      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021f8:	f7ff fc19 	bl	8001a2e <LL_RCC_LSI1_IsReady>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f1      	bne.n	80021e6 <HAL_RCC_OscConfig+0x31a>
 8002202:	e051      	b.n	80022a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002204:	f7ff fbf1 	bl	80019ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fe4c 	bl	8000ea4 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800220e:	e00c      	b.n	800222a <HAL_RCC_OscConfig+0x35e>
 8002210:	20000004 	.word	0x20000004
 8002214:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002218:	f7fe fe44 	bl	8000ea4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1bd      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800222a:	f7ff fc00 	bl	8001a2e <LL_RCC_LSI1_IsReady>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f1      	beq.n	8002218 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002234:	f7ff fc1e 	bl	8001a74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800223a:	f7fe fe33 	bl	8000ea4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1ac      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800224c:	f7ff fc23 	bl	8001a96 <LL_RCC_LSI2_IsReady>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f1      	bne.n	800223a <HAL_RCC_OscConfig+0x36e>
 8002256:	e027      	b.n	80022a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002258:	f7ff fc0c 	bl	8001a74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7fe fe22 	bl	8000ea4 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002264:	f7fe fe1e 	bl	8000ea4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e197      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002276:	f7ff fc0e 	bl	8001a96 <LL_RCC_LSI2_IsReady>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f1      	bne.n	8002264 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002280:	f7ff fbc4 	bl	8001a0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fe0e 	bl	8000ea4 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800228c:	f7fe fe0a 	bl	8000ea4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e183      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800229e:	f7ff fbc6 	bl	8001a2e <LL_RCC_LSI1_IsReady>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f1      	bne.n	800228c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4ba7      	ldr	r3, [pc, #668]	; (8002554 <HAL_RCC_OscConfig+0x688>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d114      	bne.n	80022ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022c0:	f7ff fa12 	bl	80016e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fdee 	bl	8000ea4 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022cc:	f7fe fdea 	bl	8000ea4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e163      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022de:	4b9d      	ldr	r3, [pc, #628]	; (8002554 <HAL_RCC_OscConfig+0x688>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_RCC_OscConfig+0x42c>
 80022f2:	f7ff fb24 	bl	800193e <LL_RCC_LSE_Enable>
 80022f6:	e00c      	b.n	8002312 <HAL_RCC_OscConfig+0x446>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d104      	bne.n	800230a <HAL_RCC_OscConfig+0x43e>
 8002300:	f7ff fb3f 	bl	8001982 <LL_RCC_LSE_EnableBypass>
 8002304:	f7ff fb1b 	bl	800193e <LL_RCC_LSE_Enable>
 8002308:	e003      	b.n	8002312 <HAL_RCC_OscConfig+0x446>
 800230a:	f7ff fb29 	bl	8001960 <LL_RCC_LSE_Disable>
 800230e:	f7ff fb49 	bl	80019a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d014      	beq.n	8002344 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe fdc3 	bl	8000ea4 <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe fdbf 	bl	8000ea4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e136      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002338:	f7ff fb45 	bl	80019c6 <LL_RCC_LSE_IsReady>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0ef      	beq.n	8002322 <HAL_RCC_OscConfig+0x456>
 8002342:	e013      	b.n	800236c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe fdae 	bl	8000ea4 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe fdaa 	bl	8000ea4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e121      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002362:	f7ff fb30 	bl	80019c6 <LL_RCC_LSE_IsReady>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ef      	bne.n	800234c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d014      	beq.n	80023aa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002380:	f7ff faa9 	bl	80018d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fd8e 	bl	8000ea4 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238c:	f7fe fd8a 	bl	8000ea4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e103      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800239e:	f7ff fabc 	bl	800191a <LL_RCC_HSI48_IsReady>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f1      	beq.n	800238c <HAL_RCC_OscConfig+0x4c0>
 80023a8:	e013      	b.n	80023d2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023aa:	f7ff faa5 	bl	80018f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ae:	f7fe fd79 	bl	8000ea4 <HAL_GetTick>
 80023b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b6:	f7fe fd75 	bl	8000ea4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0ee      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80023c8:	f7ff faa7 	bl	800191a <LL_RCC_HSI48_IsReady>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f1      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80e4 	beq.w	80025a4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023dc:	f7ff fc05 	bl	8001bea <LL_RCC_GetSysClkSource>
 80023e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	f040 80b4 	bne.w	800255c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	429a      	cmp	r2, r3
 8002400:	d123      	bne.n	800244a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d11c      	bne.n	800244a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d114      	bne.n	800244a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d10d      	bne.n	800244a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d05d      	beq.n	8002506 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d058      	beq.n	8002502 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0a1      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002462:	f7ff fc85 	bl	8001d70 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002466:	f7fe fd1d 	bl	8000ea4 <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe fd19 	bl	8000ea4 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e092      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_OscConfig+0x68c>)
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a6:	0212      	lsls	r2, r2, #8
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024ba:	430a      	orrs	r2, r1
 80024bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c4:	f7ff fc45 	bl	8001d52 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d8:	f7fe fce4 	bl	8000ea4 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fce0 	bl	8000ea4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e059      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002500:	e050      	b.n	80025a4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e04f      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d147      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002514:	f7ff fc1d 	bl	8001d52 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002528:	f7fe fcbc 	bl	8000ea4 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fcb8 	bl	8000ea4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e031      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ef      	beq.n	8002530 <HAL_RCC_OscConfig+0x664>
 8002550:	e028      	b.n	80025a4 <HAL_RCC_OscConfig+0x6d8>
 8002552:	bf00      	nop
 8002554:	58000400 	.word	0x58000400
 8002558:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d01e      	beq.n	80025a0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002562:	f7ff fc05 	bl	8001d70 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fc9d 	bl	8000ea4 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fc99 	bl	8000ea4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e012      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ef      	bne.n	800256e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_OscConfig+0x6e4>)
 800259a:	4013      	ands	r3, r2
 800259c:	60cb      	str	r3, [r1, #12]
 800259e:	e001      	b.n	80025a4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3734      	adds	r7, #52	; 0x34
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	eefefffc 	.word	0xeefefffc

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e12d      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b98      	ldr	r3, [pc, #608]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d91b      	bls.n	800260e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b95      	ldr	r3, [pc, #596]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4993      	ldr	r1, [pc, #588]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e6:	f7fe fc5d 	bl	8000ea4 <HAL_GetTick>
 80025ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025ee:	f7fe fc59 	bl	8000ea4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e111      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002600:	4b8a      	ldr	r3, [pc, #552]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d1ef      	bne.n	80025ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff faef 	bl	8001c02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002624:	f7fe fc3e 	bl	8000ea4 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800262c:	f7fe fc3a 	bl	8000ea4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0f2      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800263e:	f7ff fbe9 	bl	8001e14 <LL_RCC_IsActiveFlag_HPRE>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f1      	beq.n	800262c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d016      	beq.n	8002682 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fae6 	bl	8001c2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800265e:	f7fe fc21 	bl	8000ea4 <HAL_GetTick>
 8002662:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002666:	f7fe fc1d 	bl	8000ea4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0d5      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002678:	f7ff fbde 	bl	8001e38 <LL_RCC_IsActiveFlag_C2HPRE>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f1      	beq.n	8002666 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fadf 	bl	8001c56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002698:	f7fe fc04 	bl	8000ea4 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026a0:	f7fe fc00 	bl	8000ea4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0b8      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026b2:	f7ff fbd4 	bl	8001e5e <LL_RCC_IsActiveFlag_SHDHPRE>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f1      	beq.n	80026a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fad9 	bl	8001c84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026d2:	f7fe fbe7 	bl	8000ea4 <HAL_GetTick>
 80026d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026da:	f7fe fbe3 	bl	8000ea4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e09b      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026ec:	f7ff fbca 	bl	8001e84 <LL_RCC_IsActiveFlag_PPRE1>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f1      	beq.n	80026da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d017      	beq.n	8002732 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff facf 	bl	8001cac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800270e:	f7fe fbc9 	bl	8000ea4 <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002716:	f7fe fbc5 	bl	8000ea4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e07d      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002728:	f7ff fbbe 	bl	8001ea8 <LL_RCC_IsActiveFlag_PPRE2>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f1      	beq.n	8002716 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d043      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d106      	bne.n	8002754 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002746:	f7ff f86f 	bl	8001828 <LL_RCC_HSE_IsReady>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11e      	bne.n	800278e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e067      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d106      	bne.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800275c:	f7ff fb17 	bl	8001d8e <LL_RCC_PLL_IsReady>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d113      	bne.n	800278e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e05c      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002772:	f7ff f9d7 	bl	8001b24 <LL_RCC_MSI_IsReady>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e051      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002780:	f7ff f882 	bl	8001888 <LL_RCC_HSI_IsReady>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e04a      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fa15 	bl	8001bc2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fb84 	bl	8000ea4 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fb80 	bl	8000ea4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e036      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	f7ff fa18 	bl	8001bea <LL_RCC_GetSysClkSource>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d1ec      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d21b      	bcs.n	800280c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d4:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 0207 	bic.w	r2, r3, #7
 80027dc:	4913      	ldr	r1, [pc, #76]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fb5e 	bl	8000ea4 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ec:	f7fe fb5a 	bl	8000ea4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e012      	b.n	8002824 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_ClockConfig+0x278>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d1ef      	bne.n	80027ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800280c:	f000 f87e 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002810:	4603      	mov	r3, r0
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_RCC_ClockConfig+0x27c>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002816:	f7fe fb51 	bl	8000ebc <HAL_GetTickPrio>
 800281a:	4603      	mov	r3, r0
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa17 	bl	8000c50 <HAL_InitTick>
 8002822:	4603      	mov	r3, r0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	58004000 	.word	0x58004000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283a:	f7ff f9d6 	bl	8001bea <LL_RCC_GetSysClkSource>
 800283e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002846:	f7ff f992 	bl	8001b6e <LL_RCC_MSI_GetRange>
 800284a:	4603      	mov	r3, r0
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e04b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d102      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e045      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d10a      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800286e:	f7fe ffab 	bl	80017c8 <LL_RCC_HSE_IsEnabledDiv2>
 8002872:	4603      	mov	r3, r0
 8002874:	2b01      	cmp	r3, #1
 8002876:	d102      	bne.n	800287e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_GetSysClockFreq+0xd0>)
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e03a      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e037      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002884:	f7ff faba 	bl	8001dfc <LL_RCC_PLL_GetMainSource>
 8002888:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d003      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x64>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x6a>
 8002896:	e00d      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCC_GetSysClockFreq+0xd0>)
 800289a:	60bb      	str	r3, [r7, #8]
        break;
 800289c:	e015      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800289e:	f7fe ff93 	bl	80017c8 <LL_RCC_HSE_IsEnabledDiv2>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028aa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028ac:	e00d      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028b0:	60bb      	str	r3, [r7, #8]
        break;
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028b4:	f7ff f95b 	bl	8001b6e <LL_RCC_MSI_GetRange>
 80028b8:	4603      	mov	r3, r0
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	60bb      	str	r3, [r7, #8]
        break;
 80028c8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80028ca:	f7ff fa72 	bl	8001db2 <LL_RCC_PLL_GetN>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	fb03 f402 	mul.w	r4, r3, r2
 80028d6:	f7ff fa85 	bl	8001de4 <LL_RCC_PLL_GetDivider>
 80028da:	4603      	mov	r3, r0
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	3301      	adds	r3, #1
 80028e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80028e4:	f7ff fa72 	bl	8001dcc <LL_RCC_PLL_GetR>
 80028e8:	4603      	mov	r3, r0
 80028ea:	0f5b      	lsrs	r3, r3, #29
 80028ec:	3301      	adds	r3, #1
 80028ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80028f2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	bf00      	nop
 8002900:	08007524 	.word	0x08007524
 8002904:	00f42400 	.word	0x00f42400
 8002908:	01e84800 	.word	0x01e84800

0800290c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b598      	push	{r3, r4, r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002910:	f7ff ff90 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8002914:	4604      	mov	r4, r0
 8002916:	f7ff f9dd 	bl	8001cd4 <LL_RCC_GetAHBPrescaler>
 800291a:	4603      	mov	r3, r0
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a03      	ldr	r2, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x24>)
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd98      	pop	{r3, r4, r7, pc}
 8002930:	080074c4 	.word	0x080074c4

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b598      	push	{r3, r4, r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002938:	f7ff ffe8 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800293c:	4604      	mov	r4, r0
 800293e:	f7ff f9f0 	bl	8001d22 <LL_RCC_GetAPB1Prescaler>
 8002942:	4603      	mov	r3, r0
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <HAL_RCC_GetPCLK1Freq+0x28>)
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd98      	pop	{r3, r4, r7, pc}
 800295c:	08007504 	.word	0x08007504

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b598      	push	{r3, r4, r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002964:	f7ff ffd2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002968:	4604      	mov	r4, r0
 800296a:	f7ff f9e6 	bl	8001d3a <LL_RCC_GetAPB2Prescaler>
 800296e:	4603      	mov	r3, r0
 8002970:	0adb      	lsrs	r3, r3, #11
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd98      	pop	{r3, r4, r7, pc}
 8002988:	08007504 	.word	0x08007504

0800298c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	226f      	movs	r2, #111	; 0x6f
 800299a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800299c:	f7ff f925 	bl	8001bea <LL_RCC_GetSysClkSource>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80029a6:	f7ff f995 	bl	8001cd4 <LL_RCC_GetAHBPrescaler>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80029b0:	f7ff f9b7 	bl	8001d22 <LL_RCC_GetAPB1Prescaler>
 80029b4:	4602      	mov	r2, r0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80029ba:	f7ff f9be 	bl	8001d3a <LL_RCC_GetAPB2Prescaler>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80029c4:	f7ff f992 	bl	8001cec <LL_C2_RCC_GetAHBPrescaler>
 80029c8:	4602      	mov	r2, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80029ce:	f7ff f99a 	bl	8001d06 <LL_RCC_GetAHB4Prescaler>
 80029d2:	4602      	mov	r2, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_RCC_GetClockConfig+0x60>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0207 	and.w	r2, r3, #7
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	601a      	str	r2, [r3, #0]
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	58004000 	.word	0x58004000

080029f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2bb0      	cmp	r3, #176	; 0xb0
 80029fc:	d903      	bls.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e007      	b.n	8002a16 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a16:	f7ff f976 	bl	8001d06 <LL_RCC_GetAHB4Prescaler>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	0c9c      	lsrs	r4, r3, #18
 8002a3a:	f7fe feb7 	bl	80017ac <HAL_PWREx_GetVoltageRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f000 f80c 	bl	8002a60 <RCC_SetFlashLatency>
 8002a48:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd90      	pop	{r4, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	08007524 	.word	0x08007524
 8002a58:	080074c4 	.word	0x080074c4
 8002a5c:	431bde83 	.word	0x431bde83

08002a60 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b093      	sub	sp, #76	; 0x4c
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <RCC_SetFlashLatency+0xe8>)
 8002a6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002a76:	4a35      	ldr	r2, [pc, #212]	; (8002b4c <RCC_SetFlashLatency+0xec>)
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <RCC_SetFlashLatency+0xf0>)
 8002a84:	f107 040c 	add.w	r4, r7, #12
 8002a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a8e:	2300      	movs	r3, #0
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d11a      	bne.n	8002ad0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9e:	e013      	b.n	8002ac8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	3348      	adds	r3, #72	; 0x48
 8002aa6:	443b      	add	r3, r7
 8002aa8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d807      	bhi.n	8002ac2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	3348      	adds	r3, #72	; 0x48
 8002ab8:	443b      	add	r3, r7
 8002aba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ac0:	e020      	b.n	8002b04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d9e8      	bls.n	8002aa0 <RCC_SetFlashLatency+0x40>
 8002ace:	e019      	b.n	8002b04 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad4:	e013      	b.n	8002afe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	3348      	adds	r3, #72	; 0x48
 8002adc:	443b      	add	r3, r7
 8002ade:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d807      	bhi.n	8002af8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	3348      	adds	r3, #72	; 0x48
 8002aee:	443b      	add	r3, r7
 8002af0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002af4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002af6:	e005      	b.n	8002b04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afa:	3301      	adds	r3, #1
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d9e8      	bls.n	8002ad6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <RCC_SetFlashLatency+0xf4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 0207 	bic.w	r2, r3, #7
 8002b0c:	4911      	ldr	r1, [pc, #68]	; (8002b54 <RCC_SetFlashLatency+0xf4>)
 8002b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b14:	f7fe f9c6 	bl	8000ea4 <HAL_GetTick>
 8002b18:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b1a:	e008      	b.n	8002b2e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b1c:	f7fe f9c2 	bl	8000ea4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e007      	b.n	8002b3e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <RCC_SetFlashLatency+0xf4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1ef      	bne.n	8002b1c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	374c      	adds	r7, #76	; 0x4c
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	bf00      	nop
 8002b48:	08007480 	.word	0x08007480
 8002b4c:	08007490 	.word	0x08007490
 8002b50:	0800749c 	.word	0x0800749c
 8002b54:	58004000 	.word	0x58004000

08002b58 <LL_RCC_LSE_IsEnabled>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <LL_RCC_LSE_IsEnabled+0x18>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <LL_RCC_LSE_IsEnabled+0x1a>
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_LSE_IsReady>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d101      	bne.n	8002b94 <LL_RCC_LSE_IsReady+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_RCC_LSE_IsReady+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_RCC_SetRFWKPClockSource>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_SetSMPSClockSource>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f023 0203 	bic.w	r2, r3, #3
 8002bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_SetSMPSPrescaler>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_SetUSARTClockSource>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_SetLPUARTClockSource>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_SetI2CClockSource>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_SetLPTIMClockSource>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_SetSAIClockSource>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_SetRNGClockSource>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_SetCLK48ClockSource>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_SetUSBClockSource>:
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ffe3 	bl	8002d58 <LL_RCC_SetCLK48ClockSource>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <LL_RCC_SetADCClockSource>:
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_SetRTCClockSource>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_GetRTCClockSource>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_ForceBackupDomainReset>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_RCC_PLLSAI1_Enable>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_PLLSAI1_Disable>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e80:	6013      	str	r3, [r2, #0]
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_PLLSAI1_IsReady>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9e:	d101      	bne.n	8002ea4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d034      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ed4:	d021      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002ed6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eda:	d81b      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee0:	d01d      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee6:	d815      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef0:	d110      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f02:	e00d      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f94d 	bl	80031a8 <RCCEx_PLLSAI1_ConfigNP>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	77fb      	strb	r3, [r7, #31]
        break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f20:	7ffb      	ldrb	r3, [r7, #31]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fee8 	bl	8002d00 <LL_RCC_SetSAIClockSource>
 8002f30:	e001      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d046      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f42:	f7ff ff56 	bl	8002df2 <LL_RCC_GetRTCClockSource>
 8002f46:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d03c      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f52:	f7fe fbc9 	bl	80016e8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff30 	bl	8002dc6 <LL_RCC_SetRTCClockSource>
 8002f66:	e02e      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f72:	f7ff ff4b 	bl	8002e0c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002f76:	f7ff ff5a 	bl	8002e2e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002f92:	f7ff fde1 	bl	8002b58 <LL_RCC_LSE_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f9c:	f7fd ff82 	bl	8000ea4 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fd ff7e 	bl	8000ea4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d902      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	77fb      	strb	r3, [r7, #31]
              break;
 8002fba:	e004      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fbc:	f7ff fdde 	bl	8002b7c <LL_RCC_LSE_IsReady>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d1ee      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
 8002fc8:	77bb      	strb	r3, [r7, #30]
 8002fca:	e001      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fe2a 	bl	8002c3a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fe35 	bl	8002c66 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fe5d 	bl	8002ccc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fe52 	bl	8002ccc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fe2a 	bl	8002c92 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe1f 	bl	8002c92 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d022      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fe8d 	bl	8002d84 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003072:	d107      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003082:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800308c:	d10b      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f8e3 	bl	800325e <RCCEx_PLLSAI1_ConfigNQ>
 8003098:	4603      	mov	r3, r0
 800309a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800309c:	7ffb      	ldrb	r3, [r7, #31]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02b      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030c4:	d003      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe2a 	bl	8002d2c <LL_RCC_SetRNGClockSource>
 80030d8:	e00a      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7ff fe21 	bl	8002d2c <LL_RCC_SetRNGClockSource>
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fe34 	bl	8002d58 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80030f8:	d107      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003108:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d022      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe3d 	bl	8002d9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003128:	d107      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003142:	d10b      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f8e3 	bl	8003314 <RCCEx_PLLSAI1_ConfigNR>
 800314e:	4603      	mov	r3, r0
 8003150:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003152:	7ffb      	ldrb	r3, [r7, #31]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fd26 	bl	8002bbe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fd45 	bl	8002c12 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fd2c 	bl	8002bea <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003192:	7fbb      	ldrb	r3, [r7, #30]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80031a0:	f7ff fcfe 	bl	8002ba0 <LL_RCC_MSI_EnablePLLMode>
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031b4:	f7ff fe5b 	bl	8002e6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031b8:	f7fd fe74 	bl	8000ea4 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031be:	e009      	b.n	80031d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c0:	f7fd fe70 	bl	8000ea4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d902      	bls.n	80031d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
      break;
 80031d2:	e004      	b.n	80031de <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031d4:	f7ff fe5a 	bl	8002e8c <LL_RCC_PLLSAI1_IsReady>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d137      	bne.n	8003254 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f8:	4313      	orrs	r3, r2
 80031fa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320e:	4313      	orrs	r3, r2
 8003210:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003212:	f7ff fe1d 	bl	8002e50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003216:	f7fd fe45 	bl	8000ea4 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800321c:	e009      	b.n	8003232 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800321e:	f7fd fe41 	bl	8000ea4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d902      	bls.n	8003232 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	73fb      	strb	r3, [r7, #15]
        break;
 8003230:	e004      	b.n	800323c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003232:	f7ff fe2b 	bl	8002e8c <LL_RCC_PLLSAI1_IsReady>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d1f0      	bne.n	800321e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800326a:	f7ff fe00 	bl	8002e6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800326e:	f7fd fe19 	bl	8000ea4 <HAL_GetTick>
 8003272:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003274:	e009      	b.n	800328a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003276:	f7fd fe15 	bl	8000ea4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d902      	bls.n	800328a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e004      	b.n	8003294 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800328a:	f7ff fdff 	bl	8002e8c <LL_RCC_PLLSAI1_IsReady>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d137      	bne.n	800330a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c4:	4313      	orrs	r3, r2
 80032c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032c8:	f7ff fdc2 	bl	8002e50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd fdea 	bl	8000ea4 <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032d2:	e009      	b.n	80032e8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d4:	f7fd fde6 	bl	8000ea4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	73fb      	strb	r3, [r7, #15]
        break;
 80032e6:	e004      	b.n	80032f2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032e8:	f7ff fdd0 	bl	8002e8c <LL_RCC_PLLSAI1_IsReady>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d1f0      	bne.n	80032d4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003306:	4313      	orrs	r3, r2
 8003308:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003320:	f7ff fda5 	bl	8002e6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003324:	f7fd fdbe 	bl	8000ea4 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800332a:	e009      	b.n	8003340 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800332c:	f7fd fdba 	bl	8000ea4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	73fb      	strb	r3, [r7, #15]
      break;
 800333e:	e004      	b.n	800334a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003340:	f7ff fda4 	bl	8002e8c <LL_RCC_PLLSAI1_IsReady>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d137      	bne.n	80033c0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003364:	4313      	orrs	r3, r2
 8003366:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337a:	4313      	orrs	r3, r2
 800337c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800337e:	f7ff fd67 	bl	8002e50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003382:	f7fd fd8f 	bl	8000ea4 <HAL_GetTick>
 8003386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003388:	e009      	b.n	800339e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338a:	f7fd fd8b 	bl	8000ea4 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d902      	bls.n	800339e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	73fb      	strb	r3, [r7, #15]
        break;
 800339c:	e004      	b.n	80033a8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800339e:	f7ff fd75 	bl	8002e8c <LL_RCC_PLLSAI1_IsReady>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d1f0      	bne.n	800338a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033bc:	4313      	orrs	r3, r2
 80033be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e049      	b.n	8003470 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f841 	bl	8003478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 f9d5 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e036      	b.n	8003512 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_TIM_Base_Start_IT+0x94>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x44>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d115      	bne.n	80034fc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_TIM_Base_Start_IT+0x98>)
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d015      	beq.n	800350e <HAL_TIM_Base_Start_IT+0x82>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d011      	beq.n	800350e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	e008      	b.n	800350e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e000      	b.n	8003510 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00
 8003524:	00010007 	.word	0x00010007

08003528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0202 	mvn.w	r2, #2
 8003554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f905 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8f7 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f908 	bl	800378e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0204 	mvn.w	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8db 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8cd 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8de 	bl	800378e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8b1 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8a3 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8b4 	bl	800378e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b10      	cmp	r3, #16
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0210 	mvn.w	r2, #16
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2208      	movs	r2, #8
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f887 	bl	800377a <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f879 	bl	8003766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f88a 	bl	800378e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0201 	mvn.w	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd f9a0 	bl	80009ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8de 	bl	8003894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e6:	d10e      	bne.n	8003706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d107      	bne.n	8003706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8d1 	bl	80038a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d10e      	bne.n	8003732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d107      	bne.n	8003732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f838 	bl	80037a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b20      	cmp	r3, #32
 800373e:	d10e      	bne.n	800375e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d107      	bne.n	800375e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0220 	mvn.w	r2, #32
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f891 	bl	8003880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <TIM_Base_SetConfig+0xbc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0x20>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d108      	bne.n	80037ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <TIM_Base_SetConfig+0xbc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x52>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x52>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <TIM_Base_SetConfig+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x52>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <TIM_Base_SetConfig+0xc4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <TIM_Base_SetConfig+0xbc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0xa0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <TIM_Base_SetConfig+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0xa0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <TIM_Base_SetConfig+0xc4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d103      	bne.n	8003860 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	615a      	str	r2, [r3, #20]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800

08003880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_GetUSARTClockSource>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4013      	ands	r3, r2
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_RCC_GetLPUARTClockSource>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4013      	ands	r3, r2
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e042      	b.n	8003994 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd f8e1 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2224      	movs	r2, #36	; 0x24
 800392a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f82c 	bl	800399c <UART_SetConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e022      	b.n	8003994 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa46 	bl	8003de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 facd 	bl	8003f2c <UART_CheckIdleState>
 8003992:	4603      	mov	r3, r0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800399c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a0:	b08c      	sub	sp, #48	; 0x30
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4baf      	ldr	r3, [pc, #700]	; (8003c88 <UART_SetConfig+0x2ec>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4aa4      	ldr	r2, [pc, #656]	; (8003c8c <UART_SetConfig+0x2f0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a04:	4313      	orrs	r3, r2
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	f023 010f 	bic.w	r1, r3, #15
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a95      	ldr	r2, [pc, #596]	; (8003c90 <UART_SetConfig+0x2f4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d125      	bne.n	8003a8c <UART_SetConfig+0xf0>
 8003a40:	2003      	movs	r0, #3
 8003a42:	f7ff ff3b 	bl	80038bc <LL_RCC_GetUSARTClockSource>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d81b      	bhi.n	8003a84 <UART_SetConfig+0xe8>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <UART_SetConfig+0xb8>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a7d 	.word	0x08003a7d
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6a:	e042      	b.n	8003af2 <UART_SetConfig+0x156>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a72:	e03e      	b.n	8003af2 <UART_SetConfig+0x156>
 8003a74:	2304      	movs	r3, #4
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7a:	e03a      	b.n	8003af2 <UART_SetConfig+0x156>
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a82:	e036      	b.n	8003af2 <UART_SetConfig+0x156>
 8003a84:	2310      	movs	r3, #16
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8a:	e032      	b.n	8003af2 <UART_SetConfig+0x156>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7e      	ldr	r2, [pc, #504]	; (8003c8c <UART_SetConfig+0x2f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d12a      	bne.n	8003aec <UART_SetConfig+0x150>
 8003a96:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a9a:	f7ff ff1f 	bl	80038dc <LL_RCC_GetLPUARTClockSource>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa4:	d01a      	beq.n	8003adc <UART_SetConfig+0x140>
 8003aa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aaa:	d81b      	bhi.n	8003ae4 <UART_SetConfig+0x148>
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab0:	d00c      	beq.n	8003acc <UART_SetConfig+0x130>
 8003ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab6:	d815      	bhi.n	8003ae4 <UART_SetConfig+0x148>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <UART_SetConfig+0x128>
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d008      	beq.n	8003ad4 <UART_SetConfig+0x138>
 8003ac2:	e00f      	b.n	8003ae4 <UART_SetConfig+0x148>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aca:	e012      	b.n	8003af2 <UART_SetConfig+0x156>
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad2:	e00e      	b.n	8003af2 <UART_SetConfig+0x156>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ada:	e00a      	b.n	8003af2 <UART_SetConfig+0x156>
 8003adc:	2308      	movs	r3, #8
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	e006      	b.n	8003af2 <UART_SetConfig+0x156>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e002      	b.n	8003af2 <UART_SetConfig+0x156>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a65      	ldr	r2, [pc, #404]	; (8003c8c <UART_SetConfig+0x2f0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	f040 8097 	bne.w	8003c2c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003afe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d823      	bhi.n	8003b4e <UART_SetConfig+0x1b2>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0x170>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b4f 	.word	0x08003b4f
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b4f 	.word	0x08003b4f
 8003b1c:	08003b3f 	.word	0x08003b3f
 8003b20:	08003b4f 	.word	0x08003b4f
 8003b24:	08003b4f 	.word	0x08003b4f
 8003b28:	08003b4f 	.word	0x08003b4f
 8003b2c:	08003b47 	.word	0x08003b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7fe ff00 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8003b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b36:	e010      	b.n	8003b5a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b38:	4b56      	ldr	r3, [pc, #344]	; (8003c94 <UART_SetConfig+0x2f8>)
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b3c:	e00d      	b.n	8003b5a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3e:	f7fe fe79 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b44:	e009      	b.n	8003b5a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b4c:	e005      	b.n	8003b5a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 812a 	beq.w	8003db6 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	4a4c      	ldr	r2, [pc, #304]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d305      	bcc.n	8003b92 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d903      	bls.n	8003b9a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b98:	e10d      	b.n	8003db6 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	60fa      	str	r2, [r7, #12]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <UART_SetConfig+0x2fc>)
 8003ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2200      	movs	r2, #0
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bbc:	f7fc fae0 	bl	8000180 <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	020b      	lsls	r3, r1, #8
 8003bd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bd6:	0202      	lsls	r2, r0, #8
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	6849      	ldr	r1, [r1, #4]
 8003bdc:	0849      	lsrs	r1, r1, #1
 8003bde:	2000      	movs	r0, #0
 8003be0:	460c      	mov	r4, r1
 8003be2:	4605      	mov	r5, r0
 8003be4:	eb12 0804 	adds.w	r8, r2, r4
 8003be8:	eb43 0905 	adc.w	r9, r3, r5
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	469a      	mov	sl, r3
 8003bf4:	4693      	mov	fp, r2
 8003bf6:	4652      	mov	r2, sl
 8003bf8:	465b      	mov	r3, fp
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	f7fc fabf 	bl	8000180 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4613      	mov	r3, r2
 8003c08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c10:	d308      	bcc.n	8003c24 <UART_SetConfig+0x288>
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c18:	d204      	bcs.n	8003c24 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a3a      	ldr	r2, [r7, #32]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	e0c8      	b.n	8003db6 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c2a:	e0c4      	b.n	8003db6 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	d16d      	bne.n	8003d12 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	2b07      	cmp	r3, #7
 8003c3e:	d82d      	bhi.n	8003c9c <UART_SetConfig+0x300>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x2ac>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c69 	.word	0x08003c69
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c9d 	.word	0x08003c9d
 8003c54:	08003c77 	.word	0x08003c77
 8003c58:	08003c9d 	.word	0x08003c9d
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7fe fe7a 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c6e:	e01b      	b.n	8003ca8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <UART_SetConfig+0x2f8>)
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c74:	e018      	b.n	8003ca8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7fe fddd 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c7c:	e014      	b.n	8003ca8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c84:	e010      	b.n	8003ca8 <UART_SetConfig+0x30c>
 8003c86:	bf00      	nop
 8003c88:	cfff69f3 	.word	0xcfff69f3
 8003c8c:	40008000 	.word	0x40008000
 8003c90:	40013800 	.word	0x40013800
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	08007564 	.word	0x08007564
      default:
        pclk = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8083 	beq.w	8003db6 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	4a4a      	ldr	r2, [pc, #296]	; (8003de0 <UART_SetConfig+0x444>)
 8003cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc2:	005a      	lsls	r2, r3, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	441a      	add	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d916      	bls.n	8003d0a <UART_SetConfig+0x36e>
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce2:	d212      	bcs.n	8003d0a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f023 030f 	bic.w	r3, r3, #15
 8003cec:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	8bfb      	ldrh	r3, [r7, #30]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	8bfa      	ldrh	r2, [r7, #30]
 8003d06:	60da      	str	r2, [r3, #12]
 8003d08:	e055      	b.n	8003db6 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d10:	e051      	b.n	8003db6 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d16:	3b01      	subs	r3, #1
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d822      	bhi.n	8003d62 <UART_SetConfig+0x3c6>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0x388>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d45 	.word	0x08003d45
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d63 	.word	0x08003d63
 8003d30:	08003d53 	.word	0x08003d53
 8003d34:	08003d63 	.word	0x08003d63
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d63 	.word	0x08003d63
 8003d40:	08003d5b 	.word	0x08003d5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7fe fe0c 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d4a:	e010      	b.n	8003d6e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <UART_SetConfig+0x448>)
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d50:	e00d      	b.n	8003d6e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7fe fd6f 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d58:	e009      	b.n	8003d6e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e005      	b.n	8003d6e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <UART_SetConfig+0x444>)
 8003d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	441a      	add	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	d908      	bls.n	8003db0 <UART_SetConfig+0x414>
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d204      	bcs.n	8003db0 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e002      	b.n	8003db6 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003dd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3730      	adds	r7, #48	; 0x30
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de0:	08007564 	.word	0x08007564
 8003de4:	00f42400 	.word	0x00f42400

08003de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01a      	beq.n	8003efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee6:	d10a      	bne.n	8003efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f3c:	f7fc ffb2 	bl	8000ea4 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d10e      	bne.n	8003f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f82f 	bl	8003fc2 <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e025      	b.n	8003fba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f819 	bl	8003fc2 <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00f      	b.n	8003fba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b09c      	sub	sp, #112	; 0x70
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd2:	e0a9      	b.n	8004128 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	f000 80a5 	beq.w	8004128 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fc ff61 	bl	8000ea4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d140      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004008:	667b      	str	r3, [r7, #100]	; 0x64
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004014:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004018:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e6      	bne.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3308      	adds	r3, #8
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	663b      	str	r3, [r7, #96]	; 0x60
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3308      	adds	r3, #8
 8004044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004046:	64ba      	str	r2, [r7, #72]	; 0x48
 8004048:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800404c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e069      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d051      	beq.n	8004128 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d149      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800409c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e6      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3308      	adds	r3, #8
 80040d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	613b      	str	r3, [r7, #16]
   return(result);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040f0:	623a      	str	r2, [r7, #32]
 80040f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	69f9      	ldr	r1, [r7, #28]
 80040f6:	6a3a      	ldr	r2, [r7, #32]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e010      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	429a      	cmp	r2, r3
 8004144:	f43f af46 	beq.w	8003fd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3770      	adds	r7, #112	; 0x70
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UARTEx_DisableFifoMode+0x16>
 8004164:	2302      	movs	r3, #2
 8004166:	e027      	b.n	80041b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004196:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041d8:	2302      	movs	r3, #2
 80041da:	e02d      	b.n	8004238 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f84f 	bl	80042bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004254:	2302      	movs	r3, #2
 8004256:	e02d      	b.n	80042b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f811 	bl	80042bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042dc:	e031      	b.n	8004342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042de:	2308      	movs	r3, #8
 80042e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042e2:	2308      	movs	r3, #8
 80042e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	0e5b      	lsrs	r3, r3, #25
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	0f5b      	lsrs	r3, r3, #29
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004306:	7bbb      	ldrb	r3, [r7, #14]
 8004308:	7b3a      	ldrb	r2, [r7, #12]
 800430a:	4911      	ldr	r1, [pc, #68]	; (8004350 <UARTEx_SetNbDataToProcess+0x94>)
 800430c:	5c8a      	ldrb	r2, [r1, r2]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004312:	7b3a      	ldrb	r2, [r7, #12]
 8004314:	490f      	ldr	r1, [pc, #60]	; (8004354 <UARTEx_SetNbDataToProcess+0x98>)
 8004316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004318:	fb93 f3f2 	sdiv	r3, r3, r2
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	7b7a      	ldrb	r2, [r7, #13]
 8004328:	4909      	ldr	r1, [pc, #36]	; (8004350 <UARTEx_SetNbDataToProcess+0x94>)
 800432a:	5c8a      	ldrb	r2, [r1, r2]
 800432c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004330:	7b7a      	ldrb	r2, [r7, #13]
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <UARTEx_SetNbDataToProcess+0x98>)
 8004334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004336:	fb93 f3f2 	sdiv	r3, r3, r2
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	0800757c 	.word	0x0800757c
 8004354:	08007584 	.word	0x08007584

08004358 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004360:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004364:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	b29b      	uxth	r3, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	b29b      	uxth	r3, r3
 8004376:	4013      	ands	r3, r2
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800438e:	b084      	sub	sp, #16
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	f107 0014 	add.w	r0, r7, #20
 800439c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	b004      	add	sp, #16
 80043ce:	4770      	bx	lr

080043d0 <__NVIC_SetPriority>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db0a      	blt.n	80043fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <__NVIC_SetPriority+0x4c>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	440b      	add	r3, r1
 80043f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043f8:	e00a      	b.n	8004410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <__NVIC_SetPriority+0x50>)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3b04      	subs	r3, #4
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	440b      	add	r3, r1
 800440e:	761a      	strb	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Handler+0x1c>)
 800442a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800442c:	f001 fde6 	bl	8005ffc <xTaskGetSchedulerState>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004436:	f002 fc87 	bl	8006d48 <xPortSysTickHandler>
  }
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004448:	2100      	movs	r1, #0
 800444a:	f06f 0004 	mvn.w	r0, #4
 800444e:	f7ff ffbf 	bl	80043d0 <__NVIC_SetPriority>
#endif
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800445e:	f3ef 8305 	mrs	r3, IPSR
 8004462:	603b      	str	r3, [r7, #0]
  return(result);
 8004464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800446a:	f06f 0305 	mvn.w	r3, #5
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e00c      	b.n	800448c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <osKernelInitialize+0x44>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <osKernelInitialize+0x44>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004480:	2300      	movs	r3, #0
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	e002      	b.n	800448c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800448c:	687b      	ldr	r3, [r7, #4]
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2000049c 	.word	0x2000049c

080044a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	603b      	str	r3, [r7, #0]
  return(result);
 80044ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80044b2:	f06f 0305 	mvn.w	r3, #5
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e010      	b.n	80044dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <osKernelStart+0x48>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d109      	bne.n	80044d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044c2:	f7ff ffbf 	bl	8004444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <osKernelStart+0x48>)
 80044c8:	2202      	movs	r2, #2
 80044ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044cc:	f001 f93a 	bl	8005744 <vTaskStartScheduler>
      stat = osOK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	e002      	b.n	80044dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044dc:	687b      	ldr	r3, [r7, #4]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2000049c 	.word	0x2000049c

080044ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	; 0x38
 80044f0:	af04      	add	r7, sp, #16
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044fc:	f3ef 8305 	mrs	r3, IPSR
 8004500:	617b      	str	r3, [r7, #20]
  return(result);
 8004502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004504:	2b00      	cmp	r3, #0
 8004506:	d17e      	bne.n	8004606 <osThreadNew+0x11a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d07b      	beq.n	8004606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004512:	2318      	movs	r3, #24
 8004514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d045      	beq.n	80045b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <osThreadNew+0x48>
        name = attr->name;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <osThreadNew+0x6e>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b38      	cmp	r3, #56	; 0x38
 800454c:	d805      	bhi.n	800455a <osThreadNew+0x6e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <osThreadNew+0x72>
        return (NULL);
 800455a:	2300      	movs	r3, #0
 800455c:	e054      	b.n	8004608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00e      	beq.n	8004594 <osThreadNew+0xa8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2bbb      	cmp	r3, #187	; 0xbb
 800457c:	d90a      	bls.n	8004594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <osThreadNew+0xa8>
        mem = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e010      	b.n	80045b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10c      	bne.n	80045b6 <osThreadNew+0xca>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <osThreadNew+0xca>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <osThreadNew+0xca>
          mem = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e001      	b.n	80045b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d110      	bne.n	80045de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045c4:	9202      	str	r2, [sp, #8]
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 feca 	bl	800536c <xTaskCreateStatic>
 80045d8:	4603      	mov	r3, r0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	e013      	b.n	8004606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d110      	bne.n	8004606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 ff15 	bl	8005426 <xTaskCreate>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <osThreadNew+0x11a>
            hTask = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004606:	693b      	ldr	r3, [r7, #16]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	; 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004618:	f3ef 8305 	mrs	r3, IPSR
 800461c:	60bb      	str	r3, [r7, #8]
  return(result);
 800461e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <osDelay+0x1c>
    stat = osErrorISR;
 8004624:	f06f 0305 	mvn.w	r3, #5
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e007      	b.n	800463c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 f850 	bl	80056dc <vTaskDelay>
    }
  }

  return (stat);
 800463c:	68fb      	ldr	r3, [r7, #12]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f002 f99c 	bl	800698c <pvTimerGetTimerID>
 8004654:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <TimerCallback+0x22>
    callb->func (callb->arg);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	4610      	mov	r0, r2
 8004666:	4798      	blx	r3
  }
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	460b      	mov	r3, r1
 800467e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004684:	f3ef 8305 	mrs	r3, IPSR
 8004688:	613b      	str	r3, [r7, #16]
  return(result);
 800468a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800468c:	2b00      	cmp	r3, #0
 800468e:	d163      	bne.n	8004758 <osTimerNew+0xe8>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d060      	beq.n	8004758 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004696:	2008      	movs	r0, #8
 8004698:	f002 fbe6 	bl	8006e68 <pvPortMalloc>
 800469c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d059      	beq.n	8004758 <osTimerNew+0xe8>
      callb->func = func;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <osTimerNew+0x4c>
        reload = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e001      	b.n	80046c0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295
 80046c4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <osTimerNew+0x6e>
          name = attr->name;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d006      	beq.n	80046f4 <osTimerNew+0x84>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b2b      	cmp	r3, #43	; 0x2b
 80046ec:	d902      	bls.n	80046f4 <osTimerNew+0x84>
          mem = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e00c      	b.n	800470e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <osTimerNew+0x9e>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <osTimerNew+0x9e>
            mem = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e001      	b.n	800470e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10c      	bne.n	800472e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <osTimerNew+0xf4>)
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	2101      	movs	r1, #1
 8004724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004726:	f001 fdb2 	bl	800628e <xTimerCreateStatic>
 800472a:	6238      	str	r0, [r7, #32]
 800472c:	e00b      	b.n	8004746 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d108      	bne.n	8004746 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <osTimerNew+0xf4>)
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	2101      	movs	r1, #1
 800473e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004740:	f001 fd84 	bl	800624c <xTimerCreate>
 8004744:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <osTimerNew+0xe8>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <osTimerNew+0xe8>
        vPortFree (callb);
 8004752:	6978      	ldr	r0, [r7, #20]
 8004754:	f002 fc54 	bl	8007000 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004758:	6a3b      	ldr	r3, [r7, #32]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3728      	adds	r7, #40	; 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	08004647 	.word	0x08004647

08004768 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af02      	add	r7, sp, #8
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004776:	f3ef 8305 	mrs	r3, IPSR
 800477a:	60fb      	str	r3, [r7, #12]
  return(result);
 800477c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <osTimerStart+0x22>
    stat = osErrorISR;
 8004782:	f06f 0305 	mvn.w	r3, #5
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e017      	b.n	80047ba <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004790:	f06f 0303 	mvn.w	r3, #3
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e010      	b.n	80047ba <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004798:	2300      	movs	r3, #0
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2300      	movs	r3, #0
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	2104      	movs	r1, #4
 80047a2:	6938      	ldr	r0, [r7, #16]
 80047a4:	f001 fdec 	bl	8006380 <xTimerGenericCommand>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <osTimerStart+0x4c>
      stat = osOK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e002      	b.n	80047ba <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80047b4:	f06f 0302 	mvn.w	r3, #2
 80047b8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80047d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <vApplicationGetIdleTaskMemory+0x30>)
 80047da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	200004a0 	.word	0x200004a0
 80047f4:	2000055c 	.word	0x2000055c

080047f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a07      	ldr	r2, [pc, #28]	; (8004824 <vApplicationGetTimerTaskMemory+0x2c>)
 8004808:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a06      	ldr	r2, [pc, #24]	; (8004828 <vApplicationGetTimerTaskMemory+0x30>)
 800480e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004816:	601a      	str	r2, [r3, #0]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	2000075c 	.word	0x2000075c
 8004828:	20000818 	.word	0x20000818

0800482c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f103 0208 	add.w	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f103 0208 	add.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d103      	bne.n	80048ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e00c      	b.n	8004908 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3308      	adds	r3, #8
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e002      	b.n	80048fc <vListInsert+0x2e>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d2f6      	bcs.n	80048f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6892      	ldr	r2, [r2, #8]
 8004956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6852      	ldr	r2, [r2, #4]
 8004960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d103      	bne.n	8004974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1e5a      	subs	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049be:	f002 f931 	bl	8006c24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	3b01      	subs	r3, #1
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	441a      	add	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	22ff      	movs	r2, #255	; 0xff
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	22ff      	movs	r2, #255	; 0xff
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d114      	bne.n	8004a3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f929 	bl	8005c78 <xTaskRemoveFromEventList>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <xQueueGenericReset+0xcc>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	e009      	b.n	8004a52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3310      	adds	r3, #16
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fef2 	bl	800482c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3324      	adds	r3, #36	; 0x24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff feed 	bl	800482c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a52:	f002 f917 	bl	8006c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08e      	sub	sp, #56	; 0x38
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <xQueueGenericCreateStatic+0x52>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <xQueueGenericCreateStatic+0x56>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <xQueueGenericCreateStatic+0x58>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	623b      	str	r3, [r7, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <xQueueGenericCreateStatic+0x7e>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <xQueueGenericCreateStatic+0x82>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <xQueueGenericCreateStatic+0x84>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61fb      	str	r3, [r7, #28]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b02:	2350      	movs	r3, #80	; 0x50
 8004b04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b50      	cmp	r3, #80	; 0x50
 8004b0a:	d00a      	beq.n	8004b22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61bb      	str	r3, [r7, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f805 	bl	8004b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3730      	adds	r7, #48	; 0x30
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e002      	b.n	8004b76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b82:	2101      	movs	r1, #1
 8004b84:	69b8      	ldr	r0, [r7, #24]
 8004b86:	f7ff ff05 	bl	8004994 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	; 0x38
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004baa:	2300      	movs	r3, #0
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericSend+0x32>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <xQueueGenericSend+0x40>
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <xQueueGenericSend+0x44>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <xQueueGenericSend+0x46>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <xQueueGenericSend+0x60>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d103      	bne.n	8004c0a <xQueueGenericSend+0x6e>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <xQueueGenericSend+0x72>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueGenericSend+0x74>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericSend+0x8e>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	623b      	str	r3, [r7, #32]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c2a:	f001 f9e7 	bl	8005ffc <xTaskGetSchedulerState>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <xQueueGenericSend+0x9e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <xQueueGenericSend+0xa2>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <xQueueGenericSend+0xa4>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	61fb      	str	r3, [r7, #28]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c5a:	f001 ffe3 	bl	8006c24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <xQueueGenericSend+0xd4>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d129      	bne.n	8004cc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c76:	f000 fa0b 	bl	8005090 <prvCopyDataToQueue>
 8004c7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d010      	beq.n	8004ca6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fff5 	bl	8005c78 <xTaskRemoveFromEventList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c94:	4b3f      	ldr	r3, [pc, #252]	; (8004d94 <xQueueGenericSend+0x1f8>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	e00a      	b.n	8004cbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cac:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <xQueueGenericSend+0x1f8>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cbc:	f001 ffe2 	bl	8006c84 <vPortExitCritical>
				return pdPASS;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e063      	b.n	8004d8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cca:	f001 ffdb 	bl	8006c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e05c      	b.n	8004d8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f82f 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce6:	f001 ffcd 	bl	8006c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cea:	f000 fd9b 	bl	8005824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cee:	f001 ff99 	bl	8006c24 <vPortEnterCritical>
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d103      	bne.n	8004d08 <xQueueGenericSend+0x16c>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d103      	bne.n	8004d1e <xQueueGenericSend+0x182>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1e:	f001 ffb1 	bl	8006c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d22:	1d3a      	adds	r2, r7, #4
 8004d24:	f107 0314 	add.w	r3, r7, #20
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 f81e 	bl	8005d6c <xTaskCheckForTimeOut>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d124      	bne.n	8004d80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d38:	f000 faa2 	bl	8005280 <prvIsQueueFull>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d018      	beq.n	8004d74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	3310      	adds	r3, #16
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 ff44 	bl	8005bd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d52:	f000 fa2d 	bl	80051b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d56:	f000 fd73 	bl	8005840 <xTaskResumeAll>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f af7c 	bne.w	8004c5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <xQueueGenericSend+0x1f8>)
 8004d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	e772      	b.n	8004c5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d76:	f000 fa1b 	bl	80051b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d7a:	f000 fd61 	bl	8005840 <xTaskResumeAll>
 8004d7e:	e76c      	b.n	8004c5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d82:	f000 fa15 	bl	80051b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d86:	f000 fd5b 	bl	8005840 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3738      	adds	r7, #56	; 0x38
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b090      	sub	sp, #64	; 0x40
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <xQueueGenericSendFromISR+0x3c>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <xQueueGenericSendFromISR+0x40>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <xQueueGenericSendFromISR+0x42>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d103      	bne.n	8004e02 <xQueueGenericSendFromISR+0x6a>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <xQueueGenericSendFromISR+0x6e>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericSendFromISR+0x70>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e22:	f001 ffe1 	bl	8006de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e26:	f3ef 8211 	mrs	r2, BASEPRI
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	61fa      	str	r2, [r7, #28]
 8004e3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d302      	bcc.n	8004e54 <xQueueGenericSendFromISR+0xbc>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d12f      	bne.n	8004eb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e6a:	f000 f911 	bl	8005090 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d112      	bne.n	8004e9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d016      	beq.n	8004eae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fef7 	bl	8005c78 <xTaskRemoveFromEventList>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e007      	b.n	8004eae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	b25a      	sxtb	r2, r3
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004eb2:	e001      	b.n	8004eb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ec2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3740      	adds	r7, #64	; 0x40
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <xQueueReceive+0x30>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	623b      	str	r3, [r7, #32]
}
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <xQueueReceive+0x3e>
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <xQueueReceive+0x42>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <xQueueReceive+0x44>
 8004f12:	2300      	movs	r3, #0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xQueueReceive+0x5e>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61fb      	str	r3, [r7, #28]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f2e:	f001 f865 	bl	8005ffc <xTaskGetSchedulerState>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <xQueueReceive+0x6e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <xQueueReceive+0x72>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <xQueueReceive+0x74>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xQueueReceive+0x8e>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	61bb      	str	r3, [r7, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f5e:	f001 fe61 	bl	8006c24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01f      	beq.n	8004fae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f72:	f000 f8f7 	bl	8005164 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1e5a      	subs	r2, r3, #1
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00f      	beq.n	8004fa6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	3310      	adds	r3, #16
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fe74 	bl	8005c78 <xTaskRemoveFromEventList>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f96:	4b3d      	ldr	r3, [pc, #244]	; (800508c <xQueueReceive+0x1bc>)
 8004f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fa6:	f001 fe6d 	bl	8006c84 <vPortExitCritical>
				return pdPASS;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e069      	b.n	8005082 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fb4:	f001 fe66 	bl	8006c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e062      	b.n	8005082 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc2:	f107 0310 	add.w	r3, r7, #16
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 feba 	bl	8005d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fd0:	f001 fe58 	bl	8006c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fd4:	f000 fc26 	bl	8005824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd8:	f001 fe24 	bl	8006c24 <vPortEnterCritical>
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <xQueueReceive+0x122>
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d103      	bne.n	8005008 <xQueueReceive+0x138>
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005008:	f001 fe3c 	bl	8006c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800500c:	1d3a      	adds	r2, r7, #4
 800500e:	f107 0310 	add.w	r3, r7, #16
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fea9 	bl	8005d6c <xTaskCheckForTimeOut>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d123      	bne.n	8005068 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005022:	f000 f917 	bl	8005254 <prvIsQueueEmpty>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	3324      	adds	r3, #36	; 0x24
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fdcf 	bl	8005bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800503a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800503c:	f000 f8b8 	bl	80051b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005040:	f000 fbfe 	bl	8005840 <xTaskResumeAll>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d189      	bne.n	8004f5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <xQueueReceive+0x1bc>)
 800504c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	e780      	b.n	8004f5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800505c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505e:	f000 f8a7 	bl	80051b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005062:	f000 fbed 	bl	8005840 <xTaskResumeAll>
 8005066:	e77a      	b.n	8004f5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800506a:	f000 f8a1 	bl	80051b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800506e:	f000 fbe7 	bl	8005840 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005074:	f000 f8ee 	bl	8005254 <prvIsQueueEmpty>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	f43f af6f 	beq.w	8004f5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005080:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005082:	4618      	mov	r0, r3
 8005084:	3730      	adds	r7, #48	; 0x30
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10d      	bne.n	80050ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d14d      	bne.n	8005152 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 ffbc 	bl	8006038 <xTaskPriorityDisinherit>
 80050c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	e043      	b.n	8005152 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d119      	bne.n	8005104 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6858      	ldr	r0, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	461a      	mov	r2, r3
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	f002 f8d4 	bl	8007288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	441a      	add	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d32b      	bcc.n	8005152 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	e026      	b.n	8005152 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68d8      	ldr	r0, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	461a      	mov	r2, r3
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	f002 f8ba 	bl	8007288 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	425b      	negs	r3, r3
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d207      	bcs.n	8005140 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	425b      	negs	r3, r3
 800513a:	441a      	add	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d105      	bne.n	8005152 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	3b01      	subs	r3, #1
 8005150:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800515a:	697b      	ldr	r3, [r7, #20]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d018      	beq.n	80051a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	441a      	add	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d303      	bcc.n	8005198 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68d9      	ldr	r1, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	461a      	mov	r2, r3
 80051a2:	6838      	ldr	r0, [r7, #0]
 80051a4:	f002 f870 	bl	8007288 <memcpy>
	}
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051b8:	f001 fd34 	bl	8006c24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c4:	e011      	b.n	80051ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d012      	beq.n	80051f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3324      	adds	r3, #36	; 0x24
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fd50 	bl	8005c78 <xTaskRemoveFromEventList>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051de:	f000 fe27 	bl	8005e30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dce9      	bgt.n	80051c6 <prvUnlockQueue+0x16>
 80051f2:	e000      	b.n	80051f6 <prvUnlockQueue+0x46>
					break;
 80051f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	22ff      	movs	r2, #255	; 0xff
 80051fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051fe:	f001 fd41 	bl	8006c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005202:	f001 fd0f 	bl	8006c24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800520c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800520e:	e011      	b.n	8005234 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d012      	beq.n	800523e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3310      	adds	r3, #16
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fd2b 	bl	8005c78 <xTaskRemoveFromEventList>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005228:	f000 fe02 	bl	8005e30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	3b01      	subs	r3, #1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005238:	2b00      	cmp	r3, #0
 800523a:	dce9      	bgt.n	8005210 <prvUnlockQueue+0x60>
 800523c:	e000      	b.n	8005240 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800523e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	22ff      	movs	r2, #255	; 0xff
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005248:	f001 fd1c 	bl	8006c84 <vPortExitCritical>
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800525c:	f001 fce2 	bl	8006c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e001      	b.n	8005272 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005272:	f001 fd07 	bl	8006c84 <vPortExitCritical>

	return xReturn;
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005288:	f001 fccc 	bl	8006c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	429a      	cmp	r2, r3
 8005296:	d102      	bne.n	800529e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e001      	b.n	80052a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052a2:	f001 fcef 	bl	8006c84 <vPortExitCritical>

	return xReturn;
 80052a6:	68fb      	ldr	r3, [r7, #12]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e014      	b.n	80052ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052c0:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <vQueueAddToRegistry+0x50>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10b      	bne.n	80052e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052cc:	490c      	ldr	r1, [pc, #48]	; (8005300 <vQueueAddToRegistry+0x50>)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <vQueueAddToRegistry+0x50>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052e2:	e006      	b.n	80052f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b07      	cmp	r3, #7
 80052ee:	d9e7      	bls.n	80052c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000c18 	.word	0x20000c18

08005304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005314:	f001 fc86 	bl	8006c24 <vPortEnterCritical>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800531e:	b25b      	sxtb	r3, r3
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d103      	bne.n	800532e <vQueueWaitForMessageRestricted+0x2a>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005334:	b25b      	sxtb	r3, r3
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d103      	bne.n	8005344 <vQueueWaitForMessageRestricted+0x40>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005344:	f001 fc9e 	bl	8006c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fc61 	bl	8005c20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff ff26 	bl	80051b0 <prvUnlockQueue>
	}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af04      	add	r7, sp, #16
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	61fb      	str	r3, [r7, #28]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053b2:	23bc      	movs	r3, #188	; 0xbc
 80053b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2bbc      	cmp	r3, #188	; 0xbc
 80053ba:	d00a      	beq.n	80053d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	61bb      	str	r3, [r7, #24]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01e      	beq.n	8005418 <xTaskCreateStatic+0xac>
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053f2:	2300      	movs	r3, #0
 80053f4:	9303      	str	r3, [sp, #12]
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	9302      	str	r3, [sp, #8]
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f850 	bl	80054b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005412:	f000 f8f3 	bl	80055fc <prvAddNewTaskToReadyList>
 8005416:	e001      	b.n	800541c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800541c:	697b      	ldr	r3, [r7, #20]
	}
 800541e:	4618      	mov	r0, r3
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005426:	b580      	push	{r7, lr}
 8005428:	b08c      	sub	sp, #48	; 0x30
 800542a:	af04      	add	r7, sp, #16
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f001 fd14 	bl	8006e68 <pvPortMalloc>
 8005440:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005448:	20bc      	movs	r0, #188	; 0xbc
 800544a:	f001 fd0d 	bl	8006e68 <pvPortMalloc>
 800544e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
 800545c:	e005      	b.n	800546a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800545e:	6978      	ldr	r0, [r7, #20]
 8005460:	f001 fdce 	bl	8007000 <vPortFree>
 8005464:	e001      	b.n	800546a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d017      	beq.n	80054a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	2300      	movs	r3, #0
 800547c:	9303      	str	r3, [sp, #12]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	9302      	str	r3, [sp, #8]
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f80e 	bl	80054b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005494:	69f8      	ldr	r0, [r7, #28]
 8005496:	f000 f8b1 	bl	80055fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800549a:	2301      	movs	r3, #1
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e002      	b.n	80054a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295
 80054a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a6:	69bb      	ldr	r3, [r7, #24]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	461a      	mov	r2, r3
 80054c8:	21a5      	movs	r1, #165	; 0xa5
 80054ca:	f001 feeb 	bl	80072a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054d8:	3b01      	subs	r3, #1
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f023 0307 	bic.w	r3, r3, #7
 80054e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	617b      	str	r3, [r7, #20]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01f      	beq.n	800554e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e012      	b.n	800553a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	7819      	ldrb	r1, [r3, #0]
 800551c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	3334      	adds	r3, #52	; 0x34
 8005524:	460a      	mov	r2, r1
 8005526:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b0f      	cmp	r3, #15
 800553e:	d9e9      	bls.n	8005514 <prvInitialiseNewTask+0x64>
 8005540:	e000      	b.n	8005544 <prvInitialiseNewTask+0x94>
			{
				break;
 8005542:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800554c:	e003      	b.n	8005556 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	2b37      	cmp	r3, #55	; 0x37
 800555a:	d901      	bls.n	8005560 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800555c:	2337      	movs	r3, #55	; 0x37
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800556a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2200      	movs	r2, #0
 8005570:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	3304      	adds	r3, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f978 	bl	800486c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	3318      	adds	r3, #24
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff f973 	bl	800486c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	3354      	adds	r3, #84	; 0x54
 80055b0:	2260      	movs	r2, #96	; 0x60
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fe75 	bl	80072a4 <memset>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <prvInitialiseNewTask+0x140>)
 80055be:	659a      	str	r2, [r3, #88]	; 0x58
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	4a0c      	ldr	r2, [pc, #48]	; (80055f4 <prvInitialiseNewTask+0x144>)
 80055c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	4a0b      	ldr	r2, [pc, #44]	; (80055f8 <prvInitialiseNewTask+0x148>)
 80055ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	69b8      	ldr	r0, [r7, #24]
 80055d2:	f001 f9fb 	bl	80069cc <pxPortInitialiseStack>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e8:	bf00      	nop
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	080075ac 	.word	0x080075ac
 80055f4:	080075cc 	.word	0x080075cc
 80055f8:	0800758c 	.word	0x0800758c

080055fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005604:	f001 fb0e 	bl	8006c24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005608:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a2c      	ldr	r2, [pc, #176]	; (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 8005610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005612:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800561a:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005620:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d110      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005628:	f000 fc26 	bl	8005e78 <prvInitialiseTaskLists>
 800562c:	e00d      	b.n	800564a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800562e:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <prvAddNewTaskToReadyList+0xcc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005636:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	429a      	cmp	r2, r3
 8005642:	d802      	bhi.n	800564a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005644:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <prvAddNewTaskToReadyList+0xd0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <prvAddNewTaskToReadyList+0xd0>)
 8005652:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <prvAddNewTaskToReadyList+0xd0>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <prvAddNewTaskToReadyList+0xd4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <prvAddNewTaskToReadyList+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <prvAddNewTaskToReadyList+0xd4>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a15      	ldr	r2, [pc, #84]	; (80056d4 <prvAddNewTaskToReadyList+0xd8>)
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f7ff f8fd 	bl	8004886 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800568c:	f001 fafa 	bl	8006c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <prvAddNewTaskToReadyList+0xcc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d207      	bcs.n	80056b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <prvAddNewTaskToReadyList+0xdc>)
 80056a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2000112c 	.word	0x2000112c
 80056c4:	20000c58 	.word	0x20000c58
 80056c8:	20001138 	.word	0x20001138
 80056cc:	20001148 	.word	0x20001148
 80056d0:	20001134 	.word	0x20001134
 80056d4:	20000c5c 	.word	0x20000c5c
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d017      	beq.n	800571e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <vTaskDelay+0x60>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <vTaskDelay+0x30>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800570c:	f000 f88a 	bl	8005824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005710:	2100      	movs	r1, #0
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fcfe 	bl	8006114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005718:	f000 f892 	bl	8005840 <xTaskResumeAll>
 800571c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <vTaskDelay+0x64>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20001154 	.word	0x20001154
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005752:	463a      	mov	r2, r7
 8005754:	1d39      	adds	r1, r7, #4
 8005756:	f107 0308 	add.w	r3, r7, #8
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff f832 	bl	80047c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	9202      	str	r2, [sp, #8]
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	2300      	movs	r3, #0
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	2300      	movs	r3, #0
 8005770:	460a      	mov	r2, r1
 8005772:	4924      	ldr	r1, [pc, #144]	; (8005804 <vTaskStartScheduler+0xc0>)
 8005774:	4824      	ldr	r0, [pc, #144]	; (8005808 <vTaskStartScheduler+0xc4>)
 8005776:	f7ff fdf9 	bl	800536c <xTaskCreateStatic>
 800577a:	4603      	mov	r3, r0
 800577c:	4a23      	ldr	r2, [pc, #140]	; (800580c <vTaskStartScheduler+0xc8>)
 800577e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005780:	4b22      	ldr	r3, [pc, #136]	; (800580c <vTaskStartScheduler+0xc8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005788:	2301      	movs	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e001      	b.n	8005792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d102      	bne.n	800579e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005798:	f000 fd10 	bl	80061bc <xTimerCreateTimerTask>
 800579c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d11b      	bne.n	80057dc <vTaskStartScheduler+0x98>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	613b      	str	r3, [r7, #16]
}
 80057b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057b8:	4b15      	ldr	r3, [pc, #84]	; (8005810 <vTaskStartScheduler+0xcc>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3354      	adds	r3, #84	; 0x54
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <vTaskStartScheduler+0xd0>)
 80057c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <vTaskStartScheduler+0xd4>)
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <vTaskStartScheduler+0xd8>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057d0:	4b13      	ldr	r3, [pc, #76]	; (8005820 <vTaskStartScheduler+0xdc>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057d6:	f001 f983 	bl	8006ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057da:	e00e      	b.n	80057fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d10a      	bne.n	80057fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	60fb      	str	r3, [r7, #12]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <vTaskStartScheduler+0xb4>
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	080074ac 	.word	0x080074ac
 8005808:	08005e49 	.word	0x08005e49
 800580c:	20001150 	.word	0x20001150
 8005810:	20000c58 	.word	0x20000c58
 8005814:	20000014 	.word	0x20000014
 8005818:	2000114c 	.word	0x2000114c
 800581c:	20001138 	.word	0x20001138
 8005820:	20001130 	.word	0x20001130

08005824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <vTaskSuspendAll+0x18>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	4a03      	ldr	r2, [pc, #12]	; (800583c <vTaskSuspendAll+0x18>)
 8005830:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005832:	bf00      	nop
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20001154 	.word	0x20001154

08005840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800584e:	4b42      	ldr	r3, [pc, #264]	; (8005958 <xTaskResumeAll+0x118>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <xTaskResumeAll+0x2c>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	603b      	str	r3, [r7, #0]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800586c:	f001 f9da 	bl	8006c24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005870:	4b39      	ldr	r3, [pc, #228]	; (8005958 <xTaskResumeAll+0x118>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3b01      	subs	r3, #1
 8005876:	4a38      	ldr	r2, [pc, #224]	; (8005958 <xTaskResumeAll+0x118>)
 8005878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800587a:	4b37      	ldr	r3, [pc, #220]	; (8005958 <xTaskResumeAll+0x118>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d162      	bne.n	8005948 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <xTaskResumeAll+0x11c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d05e      	beq.n	8005948 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800588a:	e02f      	b.n	80058ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588c:	4b34      	ldr	r3, [pc, #208]	; (8005960 <xTaskResumeAll+0x120>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3318      	adds	r3, #24
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f851 	bl	8004940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f84c 	bl	8004940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ac:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <xTaskResumeAll+0x124>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d903      	bls.n	80058bc <xTaskResumeAll+0x7c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <xTaskResumeAll+0x124>)
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a27      	ldr	r2, [pc, #156]	; (8005968 <xTaskResumeAll+0x128>)
 80058ca:	441a      	add	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f7fe ffd7 	bl	8004886 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058dc:	4b23      	ldr	r3, [pc, #140]	; (800596c <xTaskResumeAll+0x12c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058e6:	4b22      	ldr	r3, [pc, #136]	; (8005970 <xTaskResumeAll+0x130>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ec:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <xTaskResumeAll+0x120>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1cb      	bne.n	800588c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058fa:	f000 fb5f 	bl	8005fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <xTaskResumeAll+0x134>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800590a:	f000 f847 	bl	800599c <xTaskIncrementTick>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <xTaskResumeAll+0x130>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3b01      	subs	r3, #1
 800591e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f1      	bne.n	800590a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <xTaskResumeAll+0x134>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <xTaskResumeAll+0x130>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <xTaskResumeAll+0x138>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005948:	f001 f99c 	bl	8006c84 <vPortExitCritical>

	return xAlreadyYielded;
 800594c:	68bb      	ldr	r3, [r7, #8]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20001154 	.word	0x20001154
 800595c:	2000112c 	.word	0x2000112c
 8005960:	200010ec 	.word	0x200010ec
 8005964:	20001134 	.word	0x20001134
 8005968:	20000c5c 	.word	0x20000c5c
 800596c:	20000c58 	.word	0x20000c58
 8005970:	20001140 	.word	0x20001140
 8005974:	2000113c 	.word	0x2000113c
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <xTaskGetTickCount+0x1c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005988:	687b      	ldr	r3, [r7, #4]
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20001130 	.word	0x20001130

0800599c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <xTaskIncrementTick+0x148>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f040 808f 	bne.w	8005ace <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059b0:	4b4d      	ldr	r3, [pc, #308]	; (8005ae8 <xTaskIncrementTick+0x14c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059b8:	4a4b      	ldr	r2, [pc, #300]	; (8005ae8 <xTaskIncrementTick+0x14c>)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d120      	bne.n	8005a06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059c4:	4b49      	ldr	r3, [pc, #292]	; (8005aec <xTaskIncrementTick+0x150>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	603b      	str	r3, [r7, #0]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xTaskIncrementTick+0x46>
 80059e4:	4b41      	ldr	r3, [pc, #260]	; (8005aec <xTaskIncrementTick+0x150>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <xTaskIncrementTick+0x154>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a3f      	ldr	r2, [pc, #252]	; (8005aec <xTaskIncrementTick+0x150>)
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4a3f      	ldr	r2, [pc, #252]	; (8005af0 <xTaskIncrementTick+0x154>)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4b3e      	ldr	r3, [pc, #248]	; (8005af4 <xTaskIncrementTick+0x158>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	4a3d      	ldr	r2, [pc, #244]	; (8005af4 <xTaskIncrementTick+0x158>)
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	f000 fadb 	bl	8005fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a06:	4b3c      	ldr	r3, [pc, #240]	; (8005af8 <xTaskIncrementTick+0x15c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d349      	bcc.n	8005aa4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a10:	4b36      	ldr	r3, [pc, #216]	; (8005aec <xTaskIncrementTick+0x150>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1a:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <xTaskIncrementTick+0x15c>)
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	601a      	str	r2, [r3, #0]
					break;
 8005a22:	e03f      	b.n	8005aa4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a24:	4b31      	ldr	r3, [pc, #196]	; (8005aec <xTaskIncrementTick+0x150>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d203      	bcs.n	8005a44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a3c:	4a2e      	ldr	r2, [pc, #184]	; (8005af8 <xTaskIncrementTick+0x15c>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a42:	e02f      	b.n	8005aa4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe ff79 	bl	8004940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	3318      	adds	r3, #24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ff70 	bl	8004940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <xTaskIncrementTick+0x160>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <xTaskIncrementTick+0xd8>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <xTaskIncrementTick+0x160>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <xTaskIncrementTick+0x164>)
 8005a82:	441a      	add	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7fe fefb 	bl	8004886 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <xTaskIncrementTick+0x168>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3b8      	bcc.n	8005a10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa2:	e7b5      	b.n	8005a10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <xTaskIncrementTick+0x168>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aaa:	4915      	ldr	r1, [pc, #84]	; (8005b00 <xTaskIncrementTick+0x164>)
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d901      	bls.n	8005ac0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ac0:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <xTaskIncrementTick+0x16c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	e004      	b.n	8005ad8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ace:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <xTaskIncrementTick+0x170>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <xTaskIncrementTick+0x170>)
 8005ad6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ad8:	697b      	ldr	r3, [r7, #20]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20001154 	.word	0x20001154
 8005ae8:	20001130 	.word	0x20001130
 8005aec:	200010e4 	.word	0x200010e4
 8005af0:	200010e8 	.word	0x200010e8
 8005af4:	20001144 	.word	0x20001144
 8005af8:	2000114c 	.word	0x2000114c
 8005afc:	20001134 	.word	0x20001134
 8005b00:	20000c5c 	.word	0x20000c5c
 8005b04:	20000c58 	.word	0x20000c58
 8005b08:	20001140 	.word	0x20001140
 8005b0c:	2000113c 	.word	0x2000113c

08005b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b16:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <vTaskSwitchContext+0xb0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b1e:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <vTaskSwitchContext+0xb4>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b24:	e046      	b.n	8005bb4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005b26:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <vTaskSwitchContext+0xb4>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2c:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <vTaskSwitchContext+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e010      	b.n	8005b56 <vTaskSwitchContext+0x46>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <vTaskSwitchContext+0x3e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	491d      	ldr	r1, [pc, #116]	; (8005bcc <vTaskSwitchContext+0xbc>)
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0e4      	beq.n	8005b34 <vTaskSwitchContext+0x24>
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <vTaskSwitchContext+0xbc>)
 8005b76:	4413      	add	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	605a      	str	r2, [r3, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d104      	bne.n	8005b9a <vTaskSwitchContext+0x8a>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a0b      	ldr	r2, [pc, #44]	; (8005bd0 <vTaskSwitchContext+0xc0>)
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <vTaskSwitchContext+0xb8>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <vTaskSwitchContext+0xc0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3354      	adds	r3, #84	; 0x54
 8005bb0:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <vTaskSwitchContext+0xc4>)
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	20001154 	.word	0x20001154
 8005bc4:	20001140 	.word	0x20001140
 8005bc8:	20001134 	.word	0x20001134
 8005bcc:	20000c5c 	.word	0x20000c5c
 8005bd0:	20000c58 	.word	0x20000c58
 8005bd4:	20000014 	.word	0x20000014

08005bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfe:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <vTaskPlaceOnEventList+0x44>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3318      	adds	r3, #24
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fe fe61 	bl	80048ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	6838      	ldr	r0, [r7, #0]
 8005c10:	f000 fa80 	bl	8006114 <prvAddCurrentTaskToDelayedList>
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000c58 	.word	0x20000c58

08005c20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	617b      	str	r3, [r7, #20]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7fe fe18 	bl	8004886 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	68b8      	ldr	r0, [r7, #8]
 8005c66:	f000 fa55 	bl	8006114 <prvAddCurrentTaskToDelayedList>
	}
 8005c6a:	bf00      	nop
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000c58 	.word	0x20000c58

08005c78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60fb      	str	r3, [r7, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fe49 	bl	8004940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cae:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <xTaskRemoveFromEventList+0xb0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11d      	bne.n	8005cf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fe40 	bl	8004940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <xTaskRemoveFromEventList+0xb4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d903      	bls.n	8005cd4 <xTaskRemoveFromEventList+0x5c>
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <xTaskRemoveFromEventList+0xb4>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <xTaskRemoveFromEventList+0xb8>)
 8005ce2:	441a      	add	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fe fdcb 	bl	8004886 <vListInsertEnd>
 8005cf0:	e005      	b.n	8005cfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	480e      	ldr	r0, [pc, #56]	; (8005d34 <xTaskRemoveFromEventList+0xbc>)
 8005cfa:	f7fe fdc4 	bl	8004886 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <xTaskRemoveFromEventList+0xc0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d905      	bls.n	8005d18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <xTaskRemoveFromEventList+0xc4>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e001      	b.n	8005d1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d1c:	697b      	ldr	r3, [r7, #20]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20001154 	.word	0x20001154
 8005d2c:	20001134 	.word	0x20001134
 8005d30:	20000c5c 	.word	0x20000c5c
 8005d34:	200010ec 	.word	0x200010ec
 8005d38:	20000c58 	.word	0x20000c58
 8005d3c:	20001140 	.word	0x20001140

08005d40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <vTaskInternalSetTimeOutState+0x24>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <vTaskInternalSetTimeOutState+0x28>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	605a      	str	r2, [r3, #4]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20001144 	.word	0x20001144
 8005d68:	20001130 	.word	0x20001130

08005d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60fb      	str	r3, [r7, #12]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005dae:	f000 ff39 	bl	8006c24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <xTaskCheckForTimeOut+0xbc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d102      	bne.n	8005dd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e023      	b.n	8005e1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <xTaskCheckForTimeOut+0xc0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d007      	beq.n	8005dee <xTaskCheckForTimeOut+0x82>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	e015      	b.n	8005e1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d20b      	bcs.n	8005e10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ff9b 	bl	8005d40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	e004      	b.n	8005e1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e1a:	f000 ff33 	bl	8006c84 <vPortExitCritical>

	return xReturn;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20001130 	.word	0x20001130
 8005e2c:	20001144 	.word	0x20001144

08005e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <vTaskMissedYield+0x14>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	20001140 	.word	0x20001140

08005e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e50:	f000 f852 	bl	8005ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <prvIdleTask+0x28>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d9f9      	bls.n	8005e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <prvIdleTask+0x2c>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e6c:	e7f0      	b.n	8005e50 <prvIdleTask+0x8>
 8005e6e:	bf00      	nop
 8005e70:	20000c5c 	.word	0x20000c5c
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	e00c      	b.n	8005e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <prvInitialiseTaskLists+0x60>)
 8005e90:	4413      	add	r3, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fcca 	bl	800482c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b37      	cmp	r3, #55	; 0x37
 8005ea2:	d9ef      	bls.n	8005e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ea4:	480d      	ldr	r0, [pc, #52]	; (8005edc <prvInitialiseTaskLists+0x64>)
 8005ea6:	f7fe fcc1 	bl	800482c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eaa:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <prvInitialiseTaskLists+0x68>)
 8005eac:	f7fe fcbe 	bl	800482c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb0:	480c      	ldr	r0, [pc, #48]	; (8005ee4 <prvInitialiseTaskLists+0x6c>)
 8005eb2:	f7fe fcbb 	bl	800482c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eb6:	480c      	ldr	r0, [pc, #48]	; (8005ee8 <prvInitialiseTaskLists+0x70>)
 8005eb8:	f7fe fcb8 	bl	800482c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ebc:	480b      	ldr	r0, [pc, #44]	; (8005eec <prvInitialiseTaskLists+0x74>)
 8005ebe:	f7fe fcb5 	bl	800482c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <prvInitialiseTaskLists+0x78>)
 8005ec4:	4a05      	ldr	r2, [pc, #20]	; (8005edc <prvInitialiseTaskLists+0x64>)
 8005ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvInitialiseTaskLists+0x7c>)
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <prvInitialiseTaskLists+0x68>)
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000c5c 	.word	0x20000c5c
 8005edc:	200010bc 	.word	0x200010bc
 8005ee0:	200010d0 	.word	0x200010d0
 8005ee4:	200010ec 	.word	0x200010ec
 8005ee8:	20001100 	.word	0x20001100
 8005eec:	20001118 	.word	0x20001118
 8005ef0:	200010e4 	.word	0x200010e4
 8005ef4:	200010e8 	.word	0x200010e8

08005ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efe:	e019      	b.n	8005f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f00:	f000 fe90 	bl	8006c24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f04:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <prvCheckTasksWaitingTermination+0x50>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fd15 	bl	8004940 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	4a0b      	ldr	r2, [pc, #44]	; (8005f4c <prvCheckTasksWaitingTermination+0x54>)
 8005f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <prvCheckTasksWaitingTermination+0x58>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <prvCheckTasksWaitingTermination+0x58>)
 8005f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f2a:	f000 feab 	bl	8006c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f810 	bl	8005f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvCheckTasksWaitingTermination+0x58>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e1      	bne.n	8005f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20001100 	.word	0x20001100
 8005f4c:	2000112c 	.word	0x2000112c
 8005f50:	20001114 	.word	0x20001114

08005f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3354      	adds	r3, #84	; 0x54
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 f9b5 	bl	80072d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d108      	bne.n	8005f82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f843 	bl	8007000 <vPortFree>
				vPortFree( pxTCB );
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 f840 	bl	8007000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f80:	e018      	b.n	8005fb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d103      	bne.n	8005f94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 f837 	bl	8007000 <vPortFree>
	}
 8005f92:	e00f      	b.n	8005fb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d00a      	beq.n	8005fb4 <prvDeleteTCB+0x60>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60fb      	str	r3, [r7, #12]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <prvDeleteTCB+0x5e>
	}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd4:	e008      	b.n	8005fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a04      	ldr	r2, [pc, #16]	; (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	200010e4 	.word	0x200010e4
 8005ff8:	2000114c 	.word	0x2000114c

08005ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <xTaskGetSchedulerState+0x34>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800600a:	2301      	movs	r3, #1
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	e008      	b.n	8006022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <xTaskGetSchedulerState+0x38>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006018:	2302      	movs	r3, #2
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e001      	b.n	8006022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006022:	687b      	ldr	r3, [r7, #4]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	20001138 	.word	0x20001138
 8006034:	20001154 	.word	0x20001154

08006038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d056      	beq.n	80060fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800604e:	4b2e      	ldr	r3, [pc, #184]	; (8006108 <xTaskPriorityDisinherit+0xd0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	d00a      	beq.n	800606e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60bb      	str	r3, [r7, #8]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	1e5a      	subs	r2, r3, #1
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d02c      	beq.n	80060fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d128      	bne.n	80060fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fc46 	bl	8004940 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <xTaskPriorityDisinherit+0xd4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <xTaskPriorityDisinherit+0xa4>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a0c      	ldr	r2, [pc, #48]	; (800610c <xTaskPriorityDisinherit+0xd4>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a09      	ldr	r2, [pc, #36]	; (8006110 <xTaskPriorityDisinherit+0xd8>)
 80060ea:	441a      	add	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fbc7 	bl	8004886 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060fc:	697b      	ldr	r3, [r7, #20]
	}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000c58 	.word	0x20000c58
 800610c:	20001134 	.word	0x20001134
 8006110:	20000c5c 	.word	0x20000c5c

08006114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800611e:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006124:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc08 	bl	8004940 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d10a      	bne.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4819      	ldr	r0, [pc, #100]	; (80061ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006148:	f7fe fb9d 	bl	8004886 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800614c:	e026      	b.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d209      	bcs.n	800617a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fe fbab 	bl	80048ce <vListInsert>
}
 8006178:	e010      	b.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617a:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fba1 	bl	80048ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	d202      	bcs.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006196:	4a08      	ldr	r2, [pc, #32]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20001130 	.word	0x20001130
 80061a8:	20000c58 	.word	0x20000c58
 80061ac:	20001118 	.word	0x20001118
 80061b0:	200010e8 	.word	0x200010e8
 80061b4:	200010e4 	.word	0x200010e4
 80061b8:	2000114c 	.word	0x2000114c

080061bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061c6:	f000 fba1 	bl	800690c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ca:	4b1c      	ldr	r3, [pc, #112]	; (800623c <xTimerCreateTimerTask+0x80>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d021      	beq.n	8006216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061da:	1d3a      	adds	r2, r7, #4
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe fb07 	bl	80047f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2302      	movs	r3, #2
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	460a      	mov	r2, r1
 80061fc:	4910      	ldr	r1, [pc, #64]	; (8006240 <xTimerCreateTimerTask+0x84>)
 80061fe:	4811      	ldr	r0, [pc, #68]	; (8006244 <xTimerCreateTimerTask+0x88>)
 8006200:	f7ff f8b4 	bl	800536c <xTaskCreateStatic>
 8006204:	4603      	mov	r3, r0
 8006206:	4a10      	ldr	r2, [pc, #64]	; (8006248 <xTimerCreateTimerTask+0x8c>)
 8006208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <xTimerCreateTimerTask+0x8c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006212:	2301      	movs	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	613b      	str	r3, [r7, #16]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006232:	697b      	ldr	r3, [r7, #20]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20001188 	.word	0x20001188
 8006240:	080074b4 	.word	0x080074b4
 8006244:	080064b5 	.word	0x080064b5
 8006248:	2000118c 	.word	0x2000118c

0800624c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800625a:	202c      	movs	r0, #44	; 0x2c
 800625c:	f000 fe04 	bl	8006e68 <pvPortMalloc>
 8006260:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f843 	bl	800630a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006284:	697b      	ldr	r3, [r7, #20]
	}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800628e:	b580      	push	{r7, lr}
 8006290:	b08a      	sub	sp, #40	; 0x28
 8006292:	af02      	add	r7, sp, #8
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800629c:	232c      	movs	r3, #44	; 0x2c
 800629e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b2c      	cmp	r3, #44	; 0x2c
 80062a4:	d00a      	beq.n	80062bc <xTimerCreateStatic+0x2e>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	61bb      	str	r3, [r7, #24]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xTimerCreateStatic+0x4c>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	617b      	str	r3, [r7, #20]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f805 	bl	800630a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006300:	69fb      	ldr	r3, [r7, #28]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617b      	str	r3, [r7, #20]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01e      	beq.n	8006378 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800633a:	f000 fae7 	bl	800690c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fa86 	bl	800486c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800636c:	f043 0304 	orr.w	r3, r3, #4
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006378:	bf00      	nop
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800638e:	2300      	movs	r3, #0
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	623b      	str	r3, [r7, #32]
}
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063ae:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <xTimerGenericCommand+0x98>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02a      	beq.n	800640c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	dc18      	bgt.n	80063fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063c8:	f7ff fe18 	bl	8005ffc <xTaskGetSchedulerState>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d109      	bne.n	80063e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <xTimerGenericCommand+0x98>)
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f107 0110 	add.w	r1, r7, #16
 80063da:	2300      	movs	r3, #0
 80063dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063de:	f7fe fbdd 	bl	8004b9c <xQueueGenericSend>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24
 80063e4:	e012      	b.n	800640c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <xTimerGenericCommand+0x98>)
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	f107 0110 	add.w	r1, r7, #16
 80063ee:	2300      	movs	r3, #0
 80063f0:	2200      	movs	r2, #0
 80063f2:	f7fe fbd3 	bl	8004b9c <xQueueGenericSend>
 80063f6:	6278      	str	r0, [r7, #36]	; 0x24
 80063f8:	e008      	b.n	800640c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <xTimerGenericCommand+0x98>)
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f107 0110 	add.w	r1, r7, #16
 8006402:	2300      	movs	r3, #0
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	f7fe fcc7 	bl	8004d98 <xQueueGenericSendFromISR>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20001188 	.word	0x20001188

0800641c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006426:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <prvProcessExpiredTimer+0x94>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fa83 	bl	8004940 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d022      	beq.n	800648e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	18d1      	adds	r1, r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	6978      	ldr	r0, [r7, #20]
 8006456:	f000 f8d1 	bl	80065fc <prvInsertTimerInActiveList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01f      	beq.n	80064a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006460:	2300      	movs	r3, #0
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	2100      	movs	r1, #0
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff ff88 	bl	8006380 <xTimerGenericCommand>
 8006470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d113      	bne.n	80064a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	6978      	ldr	r0, [r7, #20]
 80064a6:	4798      	blx	r3
}
 80064a8:	bf00      	nop
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20001180 	.word	0x20001180

080064b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064bc:	f107 0308 	add.w	r3, r7, #8
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f857 	bl	8006574 <prvGetNextExpireTime>
 80064c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f803 	bl	80064d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064d2:	f000 f8d5 	bl	8006680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064d6:	e7f1      	b.n	80064bc <prvTimerTask+0x8>

080064d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064e2:	f7ff f99f 	bl	8005824 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f866 	bl	80065bc <prvSampleTimeNow>
 80064f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d130      	bne.n	800655a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <prvProcessTimerOrBlockTask+0x3c>
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	429a      	cmp	r2, r3
 8006504:	d806      	bhi.n	8006514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006506:	f7ff f99b 	bl	8005840 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff85 	bl	800641c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006512:	e024      	b.n	800655e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800651a:	4b13      	ldr	r3, [pc, #76]	; (8006568 <prvProcessTimerOrBlockTask+0x90>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <prvProcessTimerOrBlockTask+0x50>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <prvProcessTimerOrBlockTask+0x52>
 8006528:	2300      	movs	r3, #0
 800652a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <prvProcessTimerOrBlockTask+0x94>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	f7fe fee3 	bl	8005304 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800653e:	f7ff f97f 	bl	8005840 <xTaskResumeAll>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <prvProcessTimerOrBlockTask+0x98>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
}
 8006558:	e001      	b.n	800655e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800655a:	f7ff f971 	bl	8005840 <xTaskResumeAll>
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20001184 	.word	0x20001184
 800656c:	20001188 	.word	0x20001188
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800657c:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <prvGetNextExpireTime+0x44>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <prvGetNextExpireTime+0x16>
 8006586:	2201      	movs	r2, #1
 8006588:	e000      	b.n	800658c <prvGetNextExpireTime+0x18>
 800658a:	2200      	movs	r2, #0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <prvGetNextExpireTime+0x44>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e001      	b.n	80065a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20001180 	.word	0x20001180

080065bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065c4:	f7ff f9da 	bl	800597c <xTaskGetTickCount>
 80065c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <prvSampleTimeNow+0x3c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d205      	bcs.n	80065e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065d4:	f000 f936 	bl	8006844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e002      	b.n	80065e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065e6:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <prvSampleTimeNow+0x3c>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20001190 	.word	0x20001190

080065fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d812      	bhi.n	8006648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e01b      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <prvInsertTimerInActiveList+0x7c>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe f944 	bl	80048ce <vListInsert>
 8006646:	e012      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d206      	bcs.n	800665e <prvInsertTimerInActiveList+0x62>
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d302      	bcc.n	800665e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e007      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <prvInsertTimerInActiveList+0x80>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fe f930 	bl	80048ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800666e:	697b      	ldr	r3, [r7, #20]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20001184 	.word	0x20001184
 800667c:	20001180 	.word	0x20001180

08006680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006686:	e0ca      	b.n	800681e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da18      	bge.n	80066c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	3304      	adds	r3, #4
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61fb      	str	r3, [r7, #28]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b6:	6850      	ldr	r0, [r2, #4]
 80066b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ba:	6892      	ldr	r2, [r2, #8]
 80066bc:	4611      	mov	r1, r2
 80066be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f2c0 80aa 	blt.w	800681c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	3304      	adds	r3, #4
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe f931 	bl	8004940 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066de:	463b      	mov	r3, r7
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ff6b 	bl	80065bc <prvSampleTimeNow>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	f200 8097 	bhi.w	800681e <prvProcessReceivedCommands+0x19e>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <prvProcessReceivedCommands+0x78>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006721 	.word	0x08006721
 8006704:	08006795 	.word	0x08006795
 8006708:	080067a9 	.word	0x080067a9
 800670c:	080067f3 	.word	0x080067f3
 8006710:	08006721 	.word	0x08006721
 8006714:	08006721 	.word	0x08006721
 8006718:	08006795 	.word	0x08006795
 800671c:	080067a9 	.word	0x080067a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	18d1      	adds	r1, r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006740:	f7ff ff5c 	bl	80065fc <prvInsertTimerInActiveList>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d069      	beq.n	800681e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05e      	beq.n	800681e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	441a      	add	r2, r3
 8006768:	2300      	movs	r3, #0
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	2100      	movs	r1, #0
 8006770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006772:	f7ff fe05 	bl	8006380 <xTimerGenericCommand>
 8006776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d14f      	bne.n	800681e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61bb      	str	r3, [r7, #24]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067a6:	e03a      	b.n	800681e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	617b      	str	r3, [r7, #20]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	18d1      	adds	r1, r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ec:	f7ff ff06 	bl	80065fc <prvInsertTimerInActiveList>
					break;
 80067f0:	e015      	b.n	800681e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006802:	f000 fbfd 	bl	8007000 <vPortFree>
 8006806:	e00a      	b.n	800681e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800681a:	e000      	b.n	800681e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800681c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800681e:	4b08      	ldr	r3, [pc, #32]	; (8006840 <prvProcessReceivedCommands+0x1c0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	1d39      	adds	r1, r7, #4
 8006824:	2200      	movs	r2, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fb52 	bl	8004ed0 <xQueueReceive>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	f47f af2a 	bne.w	8006688 <prvProcessReceivedCommands+0x8>
	}
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3730      	adds	r7, #48	; 0x30
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20001188 	.word	0x20001188

08006844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800684a:	e048      	b.n	80068de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <prvSwitchTimerLists+0xc0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <prvSwitchTimerLists+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe f86b 	bl	8004940 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02e      	beq.n	80068de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d90e      	bls.n	80068b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800689e:	4b19      	ldr	r3, [pc, #100]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7fe f810 	bl	80048ce <vListInsert>
 80068ae:	e016      	b.n	80068de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068b0:	2300      	movs	r3, #0
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	2300      	movs	r3, #0
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff fd60 	bl	8006380 <xTimerGenericCommand>
 80068c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	603b      	str	r3, [r7, #0]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068de:	4b09      	ldr	r3, [pc, #36]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1b1      	bne.n	800684c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <prvSwitchTimerLists+0xc4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a04      	ldr	r2, [pc, #16]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068f6:	4a04      	ldr	r2, [pc, #16]	; (8006908 <prvSwitchTimerLists+0xc4>)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6013      	str	r3, [r2, #0]
}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20001180 	.word	0x20001180
 8006908:	20001184 	.word	0x20001184

0800690c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006912:	f000 f987 	bl	8006c24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d120      	bne.n	8006960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800691e:	4814      	ldr	r0, [pc, #80]	; (8006970 <prvCheckForValidListAndQueue+0x64>)
 8006920:	f7fd ff84 	bl	800482c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006924:	4813      	ldr	r0, [pc, #76]	; (8006974 <prvCheckForValidListAndQueue+0x68>)
 8006926:	f7fd ff81 	bl	800482c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <prvCheckForValidListAndQueue+0x6c>)
 800692c:	4a10      	ldr	r2, [pc, #64]	; (8006970 <prvCheckForValidListAndQueue+0x64>)
 800692e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006930:	4b12      	ldr	r3, [pc, #72]	; (800697c <prvCheckForValidListAndQueue+0x70>)
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <prvCheckForValidListAndQueue+0x68>)
 8006934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006936:	2300      	movs	r3, #0
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <prvCheckForValidListAndQueue+0x74>)
 800693c:	4a11      	ldr	r2, [pc, #68]	; (8006984 <prvCheckForValidListAndQueue+0x78>)
 800693e:	2110      	movs	r1, #16
 8006940:	200a      	movs	r0, #10
 8006942:	f7fe f88f 	bl	8004a64 <xQueueGenericCreateStatic>
 8006946:	4603      	mov	r3, r0
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 800694a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	490b      	ldr	r1, [pc, #44]	; (8006988 <prvCheckForValidListAndQueue+0x7c>)
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fca8 	bl	80052b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006960:	f000 f990 	bl	8006c84 <vPortExitCritical>
}
 8006964:	bf00      	nop
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20001188 	.word	0x20001188
 8006970:	20001158 	.word	0x20001158
 8006974:	2000116c 	.word	0x2000116c
 8006978:	20001180 	.word	0x20001180
 800697c:	20001184 	.word	0x20001184
 8006980:	20001234 	.word	0x20001234
 8006984:	20001194 	.word	0x20001194
 8006988:	080074bc 	.word	0x080074bc

0800698c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60fb      	str	r3, [r7, #12]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80069b4:	f000 f936 	bl	8006c24 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80069be:	f000 f961 	bl	8006c84 <vPortExitCritical>

	return pvReturn;
 80069c2:	693b      	ldr	r3, [r7, #16]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3b04      	subs	r3, #4
 80069dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3b04      	subs	r3, #4
 80069ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3b04      	subs	r3, #4
 80069fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069fc:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <pxPortInitialiseStack+0x64>)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b14      	subs	r3, #20
 8006a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f06f 0202 	mvn.w	r2, #2
 8006a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3b20      	subs	r3, #32
 8006a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a22:	68fb      	ldr	r3, [r7, #12]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	08006a35 	.word	0x08006a35

08006a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a3e:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <prvTaskExitError+0x54>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d00a      	beq.n	8006a5e <prvTaskExitError+0x2a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <prvTaskExitError+0x28>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	60bb      	str	r3, [r7, #8]
}
 8006a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a72:	bf00      	nop
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0fc      	beq.n	8006a74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	20000010 	.word	0x20000010
 8006a8c:	00000000 	.word	0x00000000

08006a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <pxCurrentTCBConst2>)
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	f380 8809 	msr	PSP, r0
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	4770      	bx	lr
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst2>:
 8006ab0:	20000c58 	.word	0x20000c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ab8:	4808      	ldr	r0, [pc, #32]	; (8006adc <prvPortStartFirstTask+0x24>)
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	6800      	ldr	r0, [r0, #0]
 8006abe:	f380 8808 	msr	MSP, r0
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8814 	msr	CONTROL, r0
 8006aca:	b662      	cpsie	i
 8006acc:	b661      	cpsie	f
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	df00      	svc	0
 8006ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ada:	bf00      	nop
 8006adc:	e000ed08 	.word	0xe000ed08

08006ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ae6:	4b46      	ldr	r3, [pc, #280]	; (8006c00 <xPortStartScheduler+0x120>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a46      	ldr	r2, [pc, #280]	; (8006c04 <xPortStartScheduler+0x124>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d10a      	bne.n	8006b06 <xPortStartScheduler+0x26>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b06:	4b3e      	ldr	r3, [pc, #248]	; (8006c00 <xPortStartScheduler+0x120>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a3f      	ldr	r2, [pc, #252]	; (8006c08 <xPortStartScheduler+0x128>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10a      	bne.n	8006b26 <xPortStartScheduler+0x46>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	60fb      	str	r3, [r7, #12]
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <xPortStartScheduler+0x12c>)
 8006b28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	22ff      	movs	r2, #255	; 0xff
 8006b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b31      	ldr	r3, [pc, #196]	; (8006c10 <xPortStartScheduler+0x130>)
 8006b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b4e:	4b31      	ldr	r3, [pc, #196]	; (8006c14 <xPortStartScheduler+0x134>)
 8006b50:	2207      	movs	r2, #7
 8006b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b54:	e009      	b.n	8006b6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b56:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <xPortStartScheduler+0x134>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	4a2d      	ldr	r2, [pc, #180]	; (8006c14 <xPortStartScheduler+0x134>)
 8006b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d0ef      	beq.n	8006b56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b76:	4b27      	ldr	r3, [pc, #156]	; (8006c14 <xPortStartScheduler+0x134>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1c3 0307 	rsb	r3, r3, #7
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d00a      	beq.n	8006b98 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	60bb      	str	r3, [r7, #8]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b98:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <xPortStartScheduler+0x134>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <xPortStartScheduler+0x134>)
 8006ba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <xPortStartScheduler+0x134>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006baa:	4a1a      	ldr	r2, [pc, #104]	; (8006c14 <xPortStartScheduler+0x134>)
 8006bac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bb6:	4b18      	ldr	r3, [pc, #96]	; (8006c18 <xPortStartScheduler+0x138>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <xPortStartScheduler+0x138>)
 8006bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bc2:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <xPortStartScheduler+0x138>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <xPortStartScheduler+0x138>)
 8006bc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bce:	f000 f8dd 	bl	8006d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bd2:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <xPortStartScheduler+0x13c>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bd8:	f000 f8fc 	bl	8006dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <xPortStartScheduler+0x140>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <xPortStartScheduler+0x140>)
 8006be2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006be6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006be8:	f7ff ff66 	bl	8006ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bec:	f7fe ff90 	bl	8005b10 <vTaskSwitchContext>
	prvTaskExitError();
 8006bf0:	f7ff ff20 	bl	8006a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	e000ed00 	.word	0xe000ed00
 8006c04:	410fc271 	.word	0x410fc271
 8006c08:	410fc270 	.word	0x410fc270
 8006c0c:	e000e400 	.word	0xe000e400
 8006c10:	20001284 	.word	0x20001284
 8006c14:	20001288 	.word	0x20001288
 8006c18:	e000ed20 	.word	0xe000ed20
 8006c1c:	20000010 	.word	0x20000010
 8006c20:	e000ef34 	.word	0xe000ef34

08006c24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	607b      	str	r3, [r7, #4]
}
 8006c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <vPortEnterCritical+0x58>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a0d      	ldr	r2, [pc, #52]	; (8006c7c <vPortEnterCritical+0x58>)
 8006c46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <vPortEnterCritical+0x58>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d10f      	bne.n	8006c70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <vPortEnterCritical+0x5c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	603b      	str	r3, [r7, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <vPortEnterCritical+0x4a>
	}
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20000010 	.word	0x20000010
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <vPortExitCritical+0x50>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <vPortExitCritical+0x24>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	607b      	str	r3, [r7, #4]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <vPortExitCritical+0x50>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <vPortExitCritical+0x50>)
 8006cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <vPortExitCritical+0x50>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d105      	bne.n	8006cc6 <vPortExitCritical+0x42>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f383 8811 	msr	BASEPRI, r3
}
 8006cc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000010 	.word	0x20000010
	...

08006ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ce0:	f3ef 8009 	mrs	r0, PSP
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <pxCurrentTCBConst>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f01e 0f10 	tst.w	lr, #16
 8006cf0:	bf08      	it	eq
 8006cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d04:	f380 8811 	msr	BASEPRI, r0
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f7fe fefe 	bl	8005b10 <vTaskSwitchContext>
 8006d14:	f04f 0000 	mov.w	r0, #0
 8006d18:	f380 8811 	msr	BASEPRI, r0
 8006d1c:	bc09      	pop	{r0, r3}
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	6808      	ldr	r0, [r1, #0]
 8006d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d26:	f01e 0f10 	tst.w	lr, #16
 8006d2a:	bf08      	it	eq
 8006d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d30:	f380 8809 	msr	PSP, r0
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst>:
 8006d40:	20000c58 	.word	0x20000c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	607b      	str	r3, [r7, #4]
}
 8006d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d62:	f7fe fe1b 	bl	800599c <xTaskIncrementTick>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <xPortSysTickHandler+0x40>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f383 8811 	msr	BASEPRI, r3
}
 8006d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <vPortSetupTimerInterrupt+0x38>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <vPortSetupTimerInterrupt+0x3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <vPortSetupTimerInterrupt+0x40>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <vPortSetupTimerInterrupt+0x44>)
 8006daa:	3b01      	subs	r3, #1
 8006dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dae:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <vPortSetupTimerInterrupt+0x34>)
 8006db0:	2207      	movs	r2, #7
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000e010 	.word	0xe000e010
 8006dc4:	e000e018 	.word	0xe000e018
 8006dc8:	20000004 	.word	0x20000004
 8006dcc:	10624dd3 	.word	0x10624dd3
 8006dd0:	e000e014 	.word	0xe000e014

08006dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006de4 <vPortEnableVFP+0x10>
 8006dd8:	6801      	ldr	r1, [r0, #0]
 8006dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dde:	6001      	str	r1, [r0, #0]
 8006de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed88 	.word	0xe000ed88

08006de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d914      	bls.n	8006e24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <vPortValidateInterruptPriority+0x70>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e04:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <vPortValidateInterruptPriority+0x74>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	7afa      	ldrb	r2, [r7, #11]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20a      	bcs.n	8006e24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e24:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <vPortValidateInterruptPriority+0x78>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <vPortValidateInterruptPriority+0x7c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d90a      	bls.n	8006e4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	603b      	str	r3, [r7, #0]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <vPortValidateInterruptPriority+0x60>
	}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	e000e3f0 	.word	0xe000e3f0
 8006e5c:	20001284 	.word	0x20001284
 8006e60:	e000ed0c 	.word	0xe000ed0c
 8006e64:	20001288 	.word	0x20001288

08006e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e74:	f7fe fcd6 	bl	8005824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e78:	4b5b      	ldr	r3, [pc, #364]	; (8006fe8 <pvPortMalloc+0x180>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e80:	f000 f920 	bl	80070c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e84:	4b59      	ldr	r3, [pc, #356]	; (8006fec <pvPortMalloc+0x184>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 8093 	bne.w	8006fb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01d      	beq.n	8006ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e98:	2208      	movs	r2, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d014      	beq.n	8006ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f023 0307 	bic.w	r3, r3, #7
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	617b      	str	r3, [r7, #20]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d06e      	beq.n	8006fb8 <pvPortMalloc+0x150>
 8006eda:	4b45      	ldr	r3, [pc, #276]	; (8006ff0 <pvPortMalloc+0x188>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d869      	bhi.n	8006fb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ee4:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <pvPortMalloc+0x18c>)
 8006ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ee8:	4b42      	ldr	r3, [pc, #264]	; (8006ff4 <pvPortMalloc+0x18c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eee:	e004      	b.n	8006efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d903      	bls.n	8006f0c <pvPortMalloc+0xa4>
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f1      	bne.n	8006ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f0c:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <pvPortMalloc+0x180>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d050      	beq.n	8006fb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	4413      	add	r3, r2
 8006f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	2308      	movs	r3, #8
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d91f      	bls.n	8006f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <pvPortMalloc+0xf8>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	613b      	str	r3, [r7, #16]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f72:	69b8      	ldr	r0, [r7, #24]
 8006f74:	f000 f908 	bl	8007188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f86:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <pvPortMalloc+0x190>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d203      	bcs.n	8006f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f92:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <pvPortMalloc+0x190>)
 8006f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <pvPortMalloc+0x184>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <pvPortMalloc+0x194>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <pvPortMalloc+0x194>)
 8006fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fb8:	f7fe fc42 	bl	8005840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <pvPortMalloc+0x174>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60fb      	str	r3, [r7, #12]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <pvPortMalloc+0x172>
	return pvReturn;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3728      	adds	r7, #40	; 0x28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20001e94 	.word	0x20001e94
 8006fec:	20001ea8 	.word	0x20001ea8
 8006ff0:	20001e98 	.word	0x20001e98
 8006ff4:	20001e8c 	.word	0x20001e8c
 8006ff8:	20001e9c 	.word	0x20001e9c
 8006ffc:	20001ea0 	.word	0x20001ea0

08007000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04d      	beq.n	80070ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007012:	2308      	movs	r3, #8
 8007014:	425b      	negs	r3, r3
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <vPortFree+0xb8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <vPortFree+0x44>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60fb      	str	r3, [r7, #12]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <vPortFree+0x62>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60bb      	str	r3, [r7, #8]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <vPortFree+0xb8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01e      	beq.n	80070ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11a      	bne.n	80070ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <vPortFree+0xb8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007088:	f7fe fbcc 	bl	8005824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <vPortFree+0xbc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4413      	add	r3, r2
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <vPortFree+0xbc>)
 8007098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800709a:	6938      	ldr	r0, [r7, #16]
 800709c:	f000 f874 	bl	8007188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <vPortFree+0xc0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	4a06      	ldr	r2, [pc, #24]	; (80070c0 <vPortFree+0xc0>)
 80070a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070aa:	f7fe fbc9 	bl	8005840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070ae:	bf00      	nop
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20001ea8 	.word	0x20001ea8
 80070bc:	20001e98 	.word	0x20001e98
 80070c0:	20001ea4 	.word	0x20001ea4

080070c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80070ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070d0:	4b27      	ldr	r3, [pc, #156]	; (8007170 <prvHeapInit+0xac>)
 80070d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00c      	beq.n	80070f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3307      	adds	r3, #7
 80070e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <prvHeapInit+0xac>)
 80070f4:	4413      	add	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070fc:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <prvHeapInit+0xb0>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <prvHeapInit+0xb0>)
 8007104:	2200      	movs	r2, #0
 8007106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007110:	2208      	movs	r2, #8
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a15      	ldr	r2, [pc, #84]	; (8007178 <prvHeapInit+0xb4>)
 8007124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <prvHeapInit+0xb4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800712e:	4b12      	ldr	r3, [pc, #72]	; (8007178 <prvHeapInit+0xb4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <prvHeapInit+0xb4>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <prvHeapInit+0xb8>)
 8007152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	4a09      	ldr	r2, [pc, #36]	; (8007180 <prvHeapInit+0xbc>)
 800715a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <prvHeapInit+0xc0>)
 800715e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	2000128c 	.word	0x2000128c
 8007174:	20001e8c 	.word	0x20001e8c
 8007178:	20001e94 	.word	0x20001e94
 800717c:	20001e9c 	.word	0x20001e9c
 8007180:	20001e98 	.word	0x20001e98
 8007184:	20001ea8 	.word	0x20001ea8

08007188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007190:	4b28      	ldr	r3, [pc, #160]	; (8007234 <prvInsertBlockIntoFreeList+0xac>)
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e002      	b.n	800719c <prvInsertBlockIntoFreeList+0x14>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d8f7      	bhi.n	8007196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d108      	bne.n	80071ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	441a      	add	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d118      	bne.n	8007210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b15      	ldr	r3, [pc, #84]	; (8007238 <prvInsertBlockIntoFreeList+0xb0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d00d      	beq.n	8007206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	441a      	add	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e008      	b.n	8007218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <prvInsertBlockIntoFreeList+0xb0>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e003      	b.n	8007218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d002      	beq.n	8007226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20001e8c 	.word	0x20001e8c
 8007238:	20001e94 	.word	0x20001e94

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4d0d      	ldr	r5, [pc, #52]	; (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2600      	movs	r6, #0
 8007248:	42a6      	cmp	r6, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4d0b      	ldr	r5, [pc, #44]	; (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <__libc_init_array+0x44>)
 8007250:	f000 f8f2 	bl	8007438 <_init>
 8007254:	1b64      	subs	r4, r4, r5
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2600      	movs	r6, #0
 800725a:	42a6      	cmp	r6, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f855 3b04 	ldr.w	r3, [r5], #4
 8007264:	4798      	blx	r3
 8007266:	3601      	adds	r6, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f855 3b04 	ldr.w	r3, [r5], #4
 800726e:	4798      	blx	r3
 8007270:	3601      	adds	r6, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	080075f4 	.word	0x080075f4
 8007278:	080075f4 	.word	0x080075f4
 800727c:	080075f4 	.word	0x080075f4
 8007280:	080075f8 	.word	0x080075f8

08007284 <__retarget_lock_acquire_recursive>:
 8007284:	4770      	bx	lr

08007286 <__retarget_lock_release_recursive>:
 8007286:	4770      	bx	lr

08007288 <memcpy>:
 8007288:	440a      	add	r2, r1
 800728a:	4291      	cmp	r1, r2
 800728c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007290:	d100      	bne.n	8007294 <memcpy+0xc>
 8007292:	4770      	bx	lr
 8007294:	b510      	push	{r4, lr}
 8007296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800729e:	4291      	cmp	r1, r2
 80072a0:	d1f9      	bne.n	8007296 <memcpy+0xe>
 80072a2:	bd10      	pop	{r4, pc}

080072a4 <memset>:
 80072a4:	4402      	add	r2, r0
 80072a6:	4603      	mov	r3, r0
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d100      	bne.n	80072ae <memset+0xa>
 80072ac:	4770      	bx	lr
 80072ae:	f803 1b01 	strb.w	r1, [r3], #1
 80072b2:	e7f9      	b.n	80072a8 <memset+0x4>

080072b4 <cleanup_glue>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	460c      	mov	r4, r1
 80072b8:	6809      	ldr	r1, [r1, #0]
 80072ba:	4605      	mov	r5, r0
 80072bc:	b109      	cbz	r1, 80072c2 <cleanup_glue+0xe>
 80072be:	f7ff fff9 	bl	80072b4 <cleanup_glue>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ca:	f000 b869 	b.w	80073a0 <_free_r>
	...

080072d0 <_reclaim_reent>:
 80072d0:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <_reclaim_reent+0xb4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4283      	cmp	r3, r0
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	d051      	beq.n	8007380 <_reclaim_reent+0xb0>
 80072dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072de:	b143      	cbz	r3, 80072f2 <_reclaim_reent+0x22>
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d14a      	bne.n	800737c <_reclaim_reent+0xac>
 80072e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e8:	6819      	ldr	r1, [r3, #0]
 80072ea:	b111      	cbz	r1, 80072f2 <_reclaim_reent+0x22>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 f857 	bl	80073a0 <_free_r>
 80072f2:	6961      	ldr	r1, [r4, #20]
 80072f4:	b111      	cbz	r1, 80072fc <_reclaim_reent+0x2c>
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 f852 	bl	80073a0 <_free_r>
 80072fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072fe:	b111      	cbz	r1, 8007306 <_reclaim_reent+0x36>
 8007300:	4620      	mov	r0, r4
 8007302:	f000 f84d 	bl	80073a0 <_free_r>
 8007306:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007308:	b111      	cbz	r1, 8007310 <_reclaim_reent+0x40>
 800730a:	4620      	mov	r0, r4
 800730c:	f000 f848 	bl	80073a0 <_free_r>
 8007310:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007312:	b111      	cbz	r1, 800731a <_reclaim_reent+0x4a>
 8007314:	4620      	mov	r0, r4
 8007316:	f000 f843 	bl	80073a0 <_free_r>
 800731a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800731c:	b111      	cbz	r1, 8007324 <_reclaim_reent+0x54>
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f83e 	bl	80073a0 <_free_r>
 8007324:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007326:	b111      	cbz	r1, 800732e <_reclaim_reent+0x5e>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 f839 	bl	80073a0 <_free_r>
 800732e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007330:	b111      	cbz	r1, 8007338 <_reclaim_reent+0x68>
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f834 	bl	80073a0 <_free_r>
 8007338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800733a:	b111      	cbz	r1, 8007342 <_reclaim_reent+0x72>
 800733c:	4620      	mov	r0, r4
 800733e:	f000 f82f 	bl	80073a0 <_free_r>
 8007342:	69a3      	ldr	r3, [r4, #24]
 8007344:	b1e3      	cbz	r3, 8007380 <_reclaim_reent+0xb0>
 8007346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007348:	4620      	mov	r0, r4
 800734a:	4798      	blx	r3
 800734c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800734e:	b1b9      	cbz	r1, 8007380 <_reclaim_reent+0xb0>
 8007350:	4620      	mov	r0, r4
 8007352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007356:	f7ff bfad 	b.w	80072b4 <cleanup_glue>
 800735a:	5949      	ldr	r1, [r1, r5]
 800735c:	b941      	cbnz	r1, 8007370 <_reclaim_reent+0xa0>
 800735e:	3504      	adds	r5, #4
 8007360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007362:	2d80      	cmp	r5, #128	; 0x80
 8007364:	68d9      	ldr	r1, [r3, #12]
 8007366:	d1f8      	bne.n	800735a <_reclaim_reent+0x8a>
 8007368:	4620      	mov	r0, r4
 800736a:	f000 f819 	bl	80073a0 <_free_r>
 800736e:	e7ba      	b.n	80072e6 <_reclaim_reent+0x16>
 8007370:	680e      	ldr	r6, [r1, #0]
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f814 	bl	80073a0 <_free_r>
 8007378:	4631      	mov	r1, r6
 800737a:	e7ef      	b.n	800735c <_reclaim_reent+0x8c>
 800737c:	2500      	movs	r5, #0
 800737e:	e7ef      	b.n	8007360 <_reclaim_reent+0x90>
 8007380:	bd70      	pop	{r4, r5, r6, pc}
 8007382:	bf00      	nop
 8007384:	20000014 	.word	0x20000014

08007388 <__malloc_lock>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__malloc_lock+0x8>)
 800738a:	f7ff bf7b 	b.w	8007284 <__retarget_lock_acquire_recursive>
 800738e:	bf00      	nop
 8007390:	20001eac 	.word	0x20001eac

08007394 <__malloc_unlock>:
 8007394:	4801      	ldr	r0, [pc, #4]	; (800739c <__malloc_unlock+0x8>)
 8007396:	f7ff bf76 	b.w	8007286 <__retarget_lock_release_recursive>
 800739a:	bf00      	nop
 800739c:	20001eac 	.word	0x20001eac

080073a0 <_free_r>:
 80073a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d044      	beq.n	8007430 <_free_r+0x90>
 80073a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073aa:	9001      	str	r0, [sp, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f1a1 0404 	sub.w	r4, r1, #4
 80073b2:	bfb8      	it	lt
 80073b4:	18e4      	addlt	r4, r4, r3
 80073b6:	f7ff ffe7 	bl	8007388 <__malloc_lock>
 80073ba:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <_free_r+0x94>)
 80073bc:	9801      	ldr	r0, [sp, #4]
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	b933      	cbnz	r3, 80073d0 <_free_r+0x30>
 80073c2:	6063      	str	r3, [r4, #4]
 80073c4:	6014      	str	r4, [r2, #0]
 80073c6:	b003      	add	sp, #12
 80073c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073cc:	f7ff bfe2 	b.w	8007394 <__malloc_unlock>
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d908      	bls.n	80073e6 <_free_r+0x46>
 80073d4:	6825      	ldr	r5, [r4, #0]
 80073d6:	1961      	adds	r1, r4, r5
 80073d8:	428b      	cmp	r3, r1
 80073da:	bf01      	itttt	eq
 80073dc:	6819      	ldreq	r1, [r3, #0]
 80073de:	685b      	ldreq	r3, [r3, #4]
 80073e0:	1949      	addeq	r1, r1, r5
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	e7ed      	b.n	80073c2 <_free_r+0x22>
 80073e6:	461a      	mov	r2, r3
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	b10b      	cbz	r3, 80073f0 <_free_r+0x50>
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	d9fa      	bls.n	80073e6 <_free_r+0x46>
 80073f0:	6811      	ldr	r1, [r2, #0]
 80073f2:	1855      	adds	r5, r2, r1
 80073f4:	42a5      	cmp	r5, r4
 80073f6:	d10b      	bne.n	8007410 <_free_r+0x70>
 80073f8:	6824      	ldr	r4, [r4, #0]
 80073fa:	4421      	add	r1, r4
 80073fc:	1854      	adds	r4, r2, r1
 80073fe:	42a3      	cmp	r3, r4
 8007400:	6011      	str	r1, [r2, #0]
 8007402:	d1e0      	bne.n	80073c6 <_free_r+0x26>
 8007404:	681c      	ldr	r4, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	6053      	str	r3, [r2, #4]
 800740a:	4421      	add	r1, r4
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	e7da      	b.n	80073c6 <_free_r+0x26>
 8007410:	d902      	bls.n	8007418 <_free_r+0x78>
 8007412:	230c      	movs	r3, #12
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	e7d6      	b.n	80073c6 <_free_r+0x26>
 8007418:	6825      	ldr	r5, [r4, #0]
 800741a:	1961      	adds	r1, r4, r5
 800741c:	428b      	cmp	r3, r1
 800741e:	bf04      	itt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	bf04      	itt	eq
 8007428:	1949      	addeq	r1, r1, r5
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	6054      	str	r4, [r2, #4]
 800742e:	e7ca      	b.n	80073c6 <_free_r+0x26>
 8007430:	b003      	add	sp, #12
 8007432:	bd30      	pop	{r4, r5, pc}
 8007434:	20001eb0 	.word	0x20001eb0

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
