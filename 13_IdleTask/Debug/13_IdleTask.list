
13_IdleTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08006f58  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e18  20000078  08006fcc  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001e90  08006fcc  00021e90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002575d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004576  00000000  00000000  00045805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002208  00000000  00000000  00049d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002090  00000000  00000000  0004bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004e96  00000000  00000000  0004e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fa6a  00000000  00000000  00052eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee359  00000000  00000000  00072918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00160c71  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000943c  00000000  00000000  00160cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08006d88 	.word	0x08006d88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08006d88 	.word	0x08006d88

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
void vBlueLedControllerTask(void *pvParameters);
void vRedLedControllerTask(void *pvParameters);
void vGreenLedControllerTask(void *pvParameters);

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8

  HAL_Init();
 80004ea:	f000 fbdd 	bl	8000ca8 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f871 	bl	80005d4 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f959 	bl	80007a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f8e3 	bl	80006c0 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 f92d 	bl	8000758 <MX_USB_PCD_Init>

  xTaskCreate(vBlueLedControllerTask,
 80004fe:	2300      	movs	r3, #0
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <main+0x5c>)
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <main+0x60>)
 800050e:	f004 fcde 	bl	8004ece <xTaskCreate>
              100,
              NULL,
              1,
              NULL);

  xTaskCreate(vRedLedControllerTask,
 8000512:	2300      	movs	r3, #0
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <main+0x64>)
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x68>)
 8000522:	f004 fcd4 	bl	8004ece <xTaskCreate>
              100,
              NULL,
              1,
              NULL);

  xTaskCreate(vGreenLedControllerTask,
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <main+0x6c>)
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x70>)
 8000536:	f004 fcca 	bl	8004ece <xTaskCreate>
              100,
              NULL,
              1,
              NULL);

  vTaskStartScheduler();
 800053a:	f004 fe57 	bl	80051ec <vTaskStartScheduler>

  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x5a>
 8000540:	08006da0 	.word	0x08006da0
 8000544:	08000559 	.word	0x08000559
 8000548:	08006db4 	.word	0x08006db4
 800054c:	08000579 	.word	0x08000579
 8000550:	08006dc8 	.word	0x08006dc8
 8000554:	08000599 	.word	0x08000599

08000558 <vBlueLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueTaskProfiler++;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <vBlueLedControllerTask+0x1c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a03      	ldr	r2, [pc, #12]	; (8000574 <vBlueLedControllerTask+0x1c>)
 8000568:	6013      	str	r3, [r2, #0]
		vTaskDelay(_250ms);
 800056a:	23fa      	movs	r3, #250	; 0xfa
 800056c:	4618      	mov	r0, r3
 800056e:	f004 fe09 	bl	8005184 <vTaskDelay>
		BlueTaskProfiler++;
 8000572:	e7f5      	b.n	8000560 <vBlueLedControllerTask+0x8>
 8000574:	20000094 	.word	0x20000094

08000578 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <vRedLedControllerTask+0x1c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a03      	ldr	r2, [pc, #12]	; (8000594 <vRedLedControllerTask+0x1c>)
 8000588:	6013      	str	r3, [r2, #0]
		vTaskDelay(_250ms);
 800058a:	23fa      	movs	r3, #250	; 0xfa
 800058c:	4618      	mov	r0, r3
 800058e:	f004 fdf9 	bl	8005184 <vTaskDelay>
		RedTaskProfiler++;
 8000592:	e7f5      	b.n	8000580 <vRedLedControllerTask+0x8>
 8000594:	20000098 	.word	0x20000098

08000598 <vGreenLedControllerTask>:

	}
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <vGreenLedControllerTask+0x1c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <vGreenLedControllerTask+0x1c>)
 80005a8:	6013      	str	r3, [r2, #0]
		vTaskDelay(_250ms);
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fde9 	bl	8005184 <vTaskDelay>
		GreenTaskProfiler++;
 80005b2:	e7f5      	b.n	80005a0 <vGreenLedControllerTask+0x8>
 80005b4:	2000009c 	.word	0x2000009c

080005b8 <vApplicationIdleHook>:
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

void vApplicationIdleHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	IdleTaskProfiler++;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <vApplicationIdleHook+0x18>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <vApplicationIdleHook+0x18>)
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200000a0 	.word	0x200000a0

080005d4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09a      	sub	sp, #104	; 0x68
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2248      	movs	r2, #72	; 0x48
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f006 fb06 	bl	8006bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000608:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800060a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	f023 0303 	bic.w	r3, r3, #3
 8000614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061e:	f000 ff99 	bl	8001554 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ff2e 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xe8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <SystemClock_Config+0xe8>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <SystemClock_Config+0xe8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000644:	2327      	movs	r3, #39	; 0x27
 8000646:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000660:	2300      	movs	r3, #0
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fb61 	bl	8001d38 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800067c:	f000 f8fe 	bl	800087c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000680:	236f      	movs	r3, #111	; 0x6f
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2101      	movs	r1, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 febd 	bl	8002420 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006ac:	f000 f8e6 	bl	800087c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b0:	f002 fcaa 	bl	8003008 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b4:	bf00      	nop
 80006b6:	3768      	adds	r7, #104	; 0x68
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58000400 	.word	0x58000400

080006c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006c6:	4a23      	ldr	r2, [pc, #140]	; (8000754 <MX_LPUART1_UART_Init+0x94>)
 80006c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 800070a:	f003 f82d 	bl	8003768 <HAL_UART_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000714:	f000 f8b2 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 800071c:	f003 fc88 	bl	8004030 <HAL_UARTEx_SetTxFifoThreshold>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000726:	f000 f8a9 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 800072e:	f003 fcbd 	bl	80040ac <HAL_UARTEx_SetRxFifoThreshold>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000738:	f000 f8a0 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_LPUART1_UART_Init+0x90>)
 800073e:	f003 fc3e 	bl	8003fbe <HAL_UARTEx_DisableFifoMode>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000748:	f000 f898 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000a4 	.word	0x200000a4
 8000754:	40008000 	.word	0x40008000

08000758 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MX_USB_PCD_Init+0x4c>)
 8000760:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 8000764:	2208      	movs	r2, #8
 8000766:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 800076a:	2202      	movs	r2, #2
 800076c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 8000770:	2202      	movs	r2, #2
 8000772:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_USB_PCD_Init+0x48>)
 800078e:	f000 fd3f 	bl	8001210 <HAL_PCD_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000798:	f000 f870 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000134 	.word	0x20000134
 80007a4:	40006800 	.word	0x40006800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff fe77 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fe74 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff fe71 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2008      	movs	r0, #8
 80007d0:	f7ff fe6e 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2123      	movs	r1, #35	; 0x23
 80007d8:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_GPIO_Init+0xa4>)
 80007da:	f000 fd01 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	2310      	movs	r3, #16
 80007e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <MX_GPIO_Init+0xa8>)
 80007f0:	f000 fb86 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80007f4:	2323      	movs	r3, #35	; 0x23
 80007f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <MX_GPIO_Init+0xa4>)
 800080a:	f000 fb79 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800080e:	2303      	movs	r3, #3
 8000810:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0xac>)
 8000820:	f000 fb6e 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000824:	23c0      	movs	r3, #192	; 0xc0
 8000826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000834:	2307      	movs	r3, #7
 8000836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_GPIO_Init+0xa4>)
 800083e:	f000 fb5f 	bl	8000f00 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	48000400 	.word	0x48000400
 8000850:	48000800 	.word	0x48000800
 8000854:	48000c00 	.word	0x48000c00

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086a:	f000 fa3d 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40012c00 	.word	0x40012c00

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>

08000886 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800088e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4313      	orrs	r3, r2
 800089c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800089e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008dc:	68fb      	ldr	r3, [r7, #12]
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80008f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4313      	orrs	r3, r2
 8000900:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4013      	ands	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f000 fabd 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800093e:	463b      	mov	r3, r7
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fe17 	bl	8001574 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000946:	f000 fe57 	bl	80015f8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	; 0x70
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2250      	movs	r2, #80	; 0x50
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f006 f93d 	bl	8006bf4 <memset>
  if(huart->Instance==LPUART1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_UART_MspInit+0x84>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d124      	bne.n	80009ce <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000984:	2302      	movs	r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f9c3 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800099c:	f7ff ff6e 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ffa2 	bl	80008ea <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff ff6d 	bl	8000886 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ac:	230c      	movs	r3, #12
 80009ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009bc:	2308      	movs	r3, #8
 80009be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f000 fa99 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3770      	adds	r7, #112	; 0x70
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40008000 	.word	0x40008000

080009dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	; 0x70
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2250      	movs	r2, #80	; 0x50
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f006 f8f9 	bl	8006bf4 <memset>
  if(hpcd->Instance==USB)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <HAL_PCD_MspInit+0xa8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d136      	bne.n	8000a7a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a10:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000a12:	2318      	movs	r3, #24
 8000a14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000a22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a26:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 f96f 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000a44:	f7ff ff1a 	bl	800087c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff1c 	bl	8000886 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a60:	230a      	movs	r3, #10
 8000a62:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 fa47 	bl	8000f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a72:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a76:	f7ff ff1f 	bl	80008b8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3770      	adds	r7, #112	; 0x70
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40006800 	.word	0x40006800

08000a88 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aac:	68fb      	ldr	r3, [r7, #12]
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2019      	movs	r0, #25
 8000ad2:	f000 f9ed 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ad6:	2019      	movs	r0, #25
 8000ad8:	f000 fa04 	bl	8000ee4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000adc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ae0:	f7ff ffd2 	bl	8000a88 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fe82 	bl	80027f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000af4:	f001 fe6a 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8000af8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0x8c>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	0c9b      	lsrs	r3, r3, #18
 8000b04:	3b01      	subs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_InitTick+0x90>)
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_InitTick+0x94>)
 8000b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_InitTick+0x90>)
 8000b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_InitTick+0x90>)
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_InitTick+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_InitTick+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <HAL_InitTick+0x90>)
 8000b2a:	f002 fb84 	bl	8003236 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d104      	bne.n	8000b3e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_InitTick+0x90>)
 8000b36:	f002 fbdf 	bl	80032f8 <HAL_TIM_Base_Start_IT>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	2000042c 	.word	0x2000042c
 8000b50:	40012c00 	.word	0x40012c00

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b86:	f002 fc05 	bl	8003394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000042c 	.word	0x2000042c

08000b94 <SystemInit>:
 * @param  None
 * @retval None
 */
void
SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <SystemInit+0x98>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <SystemInit+0x98>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000bc0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t) 0xFAF6FEFBU;
 8000bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <SystemInit+0x9c>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t) 0xFFFFFFFAU;
 8000bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bde:	f023 0305 	bic.w	r3, r3, #5
 8000be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t) 0xFFFFFFFEU;
 8000be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf2:	f023 0301 	bic.w	r3, r3, #1
 8000bf6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <SystemInit+0xa0>)
 8000c00:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <SystemInit+0xa0>)
 8000c08:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	faf6fefb 	.word	0xfaf6fefb
 8000c34:	22041000 	.word	0x22041000

08000c38 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c38:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3c:	3304      	adds	r3, #4

08000c3e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c40:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c42:	d3f9      	bcc.n	8000c38 <CopyDataInit>
  bx lr
 8000c44:	4770      	bx	lr

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c46:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c48:	3004      	adds	r0, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c4a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>
  bx lr
 8000c4e:	4770      	bx	lr

08000c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c54:	f7ff ff9e 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <LoopForever+0x8>)
 8000c5a:	490c      	ldr	r1, [pc, #48]	; (8000c8c <LoopForever+0xc>)
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <LoopForever+0x10>)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f7ff ffed 	bl	8000c3e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <LoopForever+0x14>)
 8000c66:	490c      	ldr	r1, [pc, #48]	; (8000c98 <LoopForever+0x18>)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f7ff ffee 	bl	8000c4a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopForever+0x1c>)
 8000c70:	490b      	ldr	r1, [pc, #44]	; (8000ca0 <LoopForever+0x20>)
 8000c72:	2300      	movs	r3, #0
 8000c74:	f7ff ffe9 	bl	8000c4a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c78:	f005 ff88 	bl	8006b8c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000c7c:	f7ff fc32 	bl	80004e4 <main>

08000c80 <LoopForever>:

LoopForever:
  b LoopForever
 8000c80:	e7fe      	b.n	8000c80 <LoopForever>
 8000c82:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000c84:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	20000078 	.word	0x20000078
 8000c90:	08006f58 	.word	0x08006f58
  INIT_BSS _sbss, _ebss
 8000c94:	20000078 	.word	0x20000078
 8000c98:	20001e90 	.word	0x20001e90
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c9c:	20030000 	.word	0x20030000
 8000ca0:	20030000 	.word	0x20030000

08000ca4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_Init+0x3c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_Init+0x3c>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f8eb 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	f7ff fef9 	bl	8000abc <HAL_InitTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e001      	b.n	8000cda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd6:	f7ff fe21 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58004000 	.word	0x58004000

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000000c 	.word	0x2000000c
 8000d0c:	20000478 	.word	0x20000478

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000478 	.word	0x20000478

08000d28 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTickPrio+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebe:	f7ff ff63 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f7ff ffb3 	bl	8000e34 <NVIC_EncodePriority>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff82 	bl	8000de0 <__NVIC_SetPriority>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff56 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e14c      	b.n	80011aa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 813e 	beq.w	80011a4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d005      	beq.n	8000f40 <HAL_GPIO_Init+0x40>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d017      	beq.n	8000fde <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	6939      	ldr	r1, [r7, #16]
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0203 	and.w	r2, r3, #3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8098 	beq.w	80011a4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001074:	4a54      	ldr	r2, [pc, #336]	; (80011c8 <HAL_GPIO_Init+0x2c8>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800109e:	d019      	beq.n	80010d4 <HAL_GPIO_Init+0x1d4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a4a      	ldr	r2, [pc, #296]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <HAL_GPIO_Init+0x1d0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a49      	ldr	r2, [pc, #292]	; (80011d0 <HAL_GPIO_Init+0x2d0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1cc>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_GPIO_Init+0x2d4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1c8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a47      	ldr	r2, [pc, #284]	; (80011d8 <HAL_GPIO_Init+0x2d8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1c4>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e008      	b.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010c4:	2307      	movs	r3, #7
 80010c6:	e006      	b.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010c8:	2303      	movs	r3, #3
 80010ca:	e004      	b.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010d4:	2300      	movs	r3, #0
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	4093      	lsls	r3, r2
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e6:	4938      	ldr	r1, [pc, #224]	; (80011c8 <HAL_GPIO_Init+0x2c8>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001118:	4a30      	ldr	r2, [pc, #192]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 800114a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800116e:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 8001178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_GPIO_Init+0x2dc>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f47f aeab 	bne.w	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	48001000 	.word	0x48001000
 80011dc:	58000800 	.word	0x58000800

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af06      	add	r7, sp, #24
 8001216:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0dd      	b.n	80013de <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fbd0 	bl	80009dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2203      	movs	r2, #3
 8001240:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 ffb8 	bl	80041c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e04d      	b.n	80012f6 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3305      	adds	r3, #5
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	3304      	adds	r3, #4
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	b298      	uxth	r0, r3
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	333a      	adds	r3, #58	; 0x3a
 800129a:	4602      	mov	r2, r0
 800129c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	3307      	adds	r3, #7
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	333c      	adds	r3, #60	; 0x3c
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3340      	adds	r3, #64	; 0x40
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3344      	adds	r3, #68	; 0x44
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ac      	bcc.n	800125a <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e044      	b.n	8001390 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3b5      	bcc.n	8001306 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	687e      	ldr	r6, [r7, #4]
 80013a2:	466d      	mov	r5, sp
 80013a4:	f106 0410 	add.w	r4, r6, #16
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b4:	1d33      	adds	r3, r6, #4
 80013b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f002 ff1e 	bl	80041fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d102      	bne.n	80013dc <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f805 	bl	80013e6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800140a:	b29b      	uxth	r3, r3
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800141e:	b29b      	uxth	r3, r3
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <LL_EXTI_EnableIT_0_31+0x24>)
 8001446:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800144a:	4905      	ldr	r1, [pc, #20]	; (8001460 <LL_EXTI_EnableIT_0_31+0x24>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4313      	orrs	r3, r2
 8001450:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	58000800 	.word	0x58000800

08001464 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <LL_EXTI_DisableIT_0_31+0x28>)
 800146e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	43db      	mvns	r3, r3
 8001476:	4905      	ldr	r1, [pc, #20]	; (800148c <LL_EXTI_DisableIT_0_31+0x28>)
 8001478:	4013      	ands	r3, r2
 800147a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	58000800 	.word	0x58000800

08001490 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800149a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4905      	ldr	r1, [pc, #20]	; (80014b8 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	58000800 	.word	0x58000800

080014bc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4904      	ldr	r1, [pc, #16]	; (80014dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]

}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	58000800 	.word	0x58000800

080014e0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	58000800 	.word	0x58000800

08001508 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	58000800 	.word	0x58000800

0800152c <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	43db      	mvns	r3, r3
 800153c:	4904      	ldr	r1, [pc, #16]	; (8001550 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800153e:	4013      	ands	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	58000800 	.word	0x58000800

08001554 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	58000400 	.word	0x58000400

08001574 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_PWR_ConfigPVD+0x80>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 020e 	bic.w	r2, r3, #14
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	491a      	ldr	r1, [pc, #104]	; (80015f4 <HAL_PWR_ConfigPVD+0x80>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800158e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001592:	f7ff ff67 	bl	8001464 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8001596:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800159a:	f7ff ff79 	bl	8001490 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800159e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015a2:	f7ff ffc3 	bl	800152c <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80015a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015aa:	f7ff ff99 	bl	80014e0 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80015ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015be:	f7ff ff3d 	bl	800143c <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80015ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015d2:	f7ff ff73 	bl	80014bc <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80015e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015e6:	f7ff ff8f 	bl	8001508 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	58000400 	.word	0x58000400

080015f8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_PWR_EnablePVD+0x1c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_PWR_EnablePVD+0x1c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6053      	str	r3, [r2, #4]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	58000400 	.word	0x58000400

08001618 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_PWREx_GetVoltageRange+0x18>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	58000400 	.word	0x58000400

08001634 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001646:	d101      	bne.n	800164c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016a6:	d101      	bne.n	80016ac <LL_RCC_HSE_IsReady+0x18>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <LL_RCC_HSE_IsReady+0x1a>
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e8:	6013      	str	r3, [r2, #0]
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001706:	d101      	bne.n	800170c <LL_RCC_HSI_IsReady+0x18>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <LL_RCC_HSI_IsReady+0x1a>
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800174e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b02      	cmp	r3, #2
 8001798:	d101      	bne.n	800179e <LL_RCC_HSI48_IsReady+0x18>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_RCC_HSI48_IsReady+0x1a>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d101      	bne.n	800184a <LL_RCC_LSE_IsReady+0x18>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_RCC_LSE_IsReady+0x1a>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d101      	bne.n	80018b2 <LL_RCC_LSI1_IsReady+0x18>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_RCC_LSI1_IsReady+0x1a>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d101      	bne.n	800191a <LL_RCC_LSI2_IsReady+0x18>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <LL_RCC_LSI2_IsReady+0x1a>
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001942:	4313      	orrs	r3, r2
 8001944:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d101      	bne.n	80019a6 <LL_RCC_MSI_IsReady+0x16>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_RCC_MSI_IsReady+0x18>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2bb0      	cmp	r3, #176	; 0xb0
 80019f0:	d901      	bls.n	80019f6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80019f2:	23b0      	movs	r3, #176	; 0xb0
 80019f4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80019f6:	687b      	ldr	r3, [r7, #4]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 0203 	bic.w	r2, r3, #3
 8001a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ad2:	f023 020f 	bic.w	r2, r3, #15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c0c:	d101      	bne.n	8001c12 <LL_RCC_PLL_IsReady+0x18>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_RCC_PLL_IsReady+0x1a>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d101      	bne.n	8001c98 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cb8:	d101      	bne.n	8001cbe <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d101      	bne.n	8001ce4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d02:	d101      	bne.n	8001d08 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d26:	d101      	bne.n	8001d2c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b08d      	sub	sp, #52	; 0x34
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e363      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 808d 	beq.w	8001e72 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d58:	f7ff fe7d 	bl	8001a56 <LL_RCC_GetSysClkSource>
 8001d5c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5e:	f7ff ff83 	bl	8001c68 <LL_RCC_PLL_GetMainSource>
 8001d62:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3e>
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d147      	bne.n	8001e00 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d144      	bne.n	8001e00 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e347      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001d86:	f7ff fe28 	bl	80019da <LL_RCC_MSI_GetRange>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	429c      	cmp	r4, r3
 8001d8e:	d914      	bls.n	8001dba <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fd61 	bl	800285c <RCC_SetFlashLatencyFromMSIRange>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e336      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fe02 	bl	80019b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fe26 	bl	8001a04 <LL_RCC_MSI_SetCalibTrimming>
 8001db8:	e013      	b.n	8001de2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fdf7 	bl	80019b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe1b 	bl	8001a04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fd42 	bl	800285c <RCC_SetFlashLatencyFromMSIRange>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e317      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001de2:	f000 fcc9 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4aa4      	ldr	r2, [pc, #656]	; (800207c <HAL_RCC_OscConfig+0x344>)
 8001dea:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dec:	4ba4      	ldr	r3, [pc, #656]	; (8002080 <HAL_RCC_OscConfig+0x348>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fe63 	bl	8000abc <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d039      	beq.n	8001e70 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e308      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01e      	beq.n	8001e46 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e08:	f7ff fda4 	bl	8001954 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff80 	bl	8000d10 <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e14:	f7fe ff7c 	bl	8000d10 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e2f5      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e26:	f7ff fdb3 	bl	8001990 <LL_RCC_MSI_IsReady>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fdbc 	bl	80019b2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fde0 	bl	8001a04 <LL_RCC_MSI_SetCalibTrimming>
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e46:	f7ff fd94 	bl	8001972 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ff61 	bl	8000d10 <HAL_GetTick>
 8001e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e52:	f7fe ff5d 	bl	8000d10 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e2d6      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e64:	f7ff fd94 	bl	8001990 <LL_RCC_MSI_IsReady>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f1      	bne.n	8001e52 <HAL_RCC_OscConfig+0x11a>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e70:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d047      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7e:	f7ff fdea 	bl	8001a56 <LL_RCC_GetSysClkSource>
 8001e82:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	f7ff fef0 	bl	8001c68 <LL_RCC_PLL_GetMainSource>
 8001e88:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x164>
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d134      	bne.n	8001f0e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e2b4      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d102      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x180>
 8001eb2:	f7ff fbd1 	bl	8001658 <LL_RCC_HSE_Enable>
 8001eb6:	e001      	b.n	8001ebc <HAL_RCC_OscConfig+0x184>
 8001eb8:	f7ff fbdd 	bl	8001676 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe ff24 	bl	8000d10 <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe ff20 	bl	8000d10 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e299      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ede:	f7ff fbd9 	bl	8001694 <LL_RCC_HSE_IsReady>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f1      	beq.n	8001ecc <HAL_RCC_OscConfig+0x194>
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe ff11 	bl	8000d10 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef2:	f7fe ff0d 	bl	8000d10 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e286      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f04:	f7ff fbc6 	bl	8001694 <LL_RCC_HSE_IsReady>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f1      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d04c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	f7ff fd9c 	bl	8001a56 <LL_RCC_GetSysClkSource>
 8001f1e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f20:	f7ff fea2 	bl	8001c68 <LL_RCC_PLL_GetMainSource>
 8001f24:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x200>
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d10e      	bne.n	8001f50 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d10b      	bne.n	8001f50 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e266      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fbe5 	bl	8001718 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f4e:	e031      	b.n	8001fb4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d019      	beq.n	8001f8c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	f7ff fbae 	bl	80016b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fed8 	bl	8000d10 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7fe fed4 	bl	8000d10 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e24d      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f76:	f7ff fbbd 	bl	80016f4 <LL_RCC_HSI_IsReady>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f1      	beq.n	8001f64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fbc7 	bl	8001718 <LL_RCC_HSI_SetCalibTrimming>
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8c:	f7ff fba3 	bl	80016d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7fe febe 	bl	8000d10 <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7fe feba 	bl	8000d10 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e233      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001faa:	f7ff fba3 	bl	80016f4 <LL_RCC_HSI_IsReady>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f1      	bne.n	8001f98 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a3 	beq.w	8002114 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d076      	beq.n	80020c4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d046      	beq.n	8002070 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001fe2:	f7ff fc5a 	bl	800189a <LL_RCC_LSI1_IsReady>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d113      	bne.n	8002014 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001fec:	f7ff fc33 	bl	8001856 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff0:	f7fe fe8e 	bl	8000d10 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ff8:	f7fe fe8a 	bl	8000d10 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e203      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800200a:	f7ff fc46 	bl	800189a <LL_RCC_LSI1_IsReady>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f1      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002014:	f7ff fc53 	bl	80018be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe7a 	bl	8000d10 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002020:	f7fe fe76 	bl	8000d10 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b03      	cmp	r3, #3
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1ef      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002032:	f7ff fc66 	bl	8001902 <LL_RCC_LSI2_IsReady>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f1      	beq.n	8002020 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fc70 	bl	8001926 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002046:	f7ff fc17 	bl	8001878 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fe61 	bl	8000d10 <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002052:	f7fe fe5d 	bl	8000d10 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1d6      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002064:	f7ff fc19 	bl	800189a <LL_RCC_LSI1_IsReady>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f1      	bne.n	8002052 <HAL_RCC_OscConfig+0x31a>
 800206e:	e051      	b.n	8002114 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002070:	f7ff fbf1 	bl	8001856 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fe4c 	bl	8000d10 <HAL_GetTick>
 8002078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800207a:	e00c      	b.n	8002096 <HAL_RCC_OscConfig+0x35e>
 800207c:	20000004 	.word	0x20000004
 8002080:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002084:	f7fe fe44 	bl	8000d10 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1bd      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002096:	f7ff fc00 	bl	800189a <LL_RCC_LSI1_IsReady>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f1      	beq.n	8002084 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80020a0:	f7ff fc1e 	bl	80018e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020a6:	f7fe fe33 	bl	8000d10 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e1ac      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80020b8:	f7ff fc23 	bl	8001902 <LL_RCC_LSI2_IsReady>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f1      	bne.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 80020c2:	e027      	b.n	8002114 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80020c4:	f7ff fc0c 	bl	80018e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fe22 	bl	8000d10 <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020d0:	f7fe fe1e 	bl	8000d10 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e197      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80020e2:	f7ff fc0e 	bl	8001902 <LL_RCC_LSI2_IsReady>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f1      	bne.n	80020d0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80020ec:	f7ff fbc4 	bl	8001878 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fe0e 	bl	8000d10 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020f8:	f7fe fe0a 	bl	8000d10 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e183      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800210a:	f7ff fbc6 	bl	800189a <LL_RCC_LSI1_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f1      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d05b      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4ba7      	ldr	r3, [pc, #668]	; (80023c0 <HAL_RCC_OscConfig+0x688>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d114      	bne.n	8002156 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800212c:	f7ff fa12 	bl	8001554 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002130:	f7fe fdee 	bl	8000d10 <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7fe fdea 	bl	8000d10 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e163      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214a:	4b9d      	ldr	r3, [pc, #628]	; (80023c0 <HAL_RCC_OscConfig+0x688>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x42c>
 800215e:	f7ff fb24 	bl	80017aa <LL_RCC_LSE_Enable>
 8002162:	e00c      	b.n	800217e <HAL_RCC_OscConfig+0x446>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d104      	bne.n	8002176 <HAL_RCC_OscConfig+0x43e>
 800216c:	f7ff fb3f 	bl	80017ee <LL_RCC_LSE_EnableBypass>
 8002170:	f7ff fb1b 	bl	80017aa <LL_RCC_LSE_Enable>
 8002174:	e003      	b.n	800217e <HAL_RCC_OscConfig+0x446>
 8002176:	f7ff fb29 	bl	80017cc <LL_RCC_LSE_Disable>
 800217a:	f7ff fb49 	bl	8001810 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d014      	beq.n	80021b0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe fdc3 	bl	8000d10 <HAL_GetTick>
 800218a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fdbf 	bl	8000d10 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e136      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80021a4:	f7ff fb45 	bl	8001832 <LL_RCC_LSE_IsReady>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ef      	beq.n	800218e <HAL_RCC_OscConfig+0x456>
 80021ae:	e013      	b.n	80021d8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fdae 	bl	8000d10 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe fdaa 	bl	8000d10 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e121      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80021ce:	f7ff fb30 	bl	8001832 <LL_RCC_LSE_IsReady>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ef      	bne.n	80021b8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02c      	beq.n	800223e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d014      	beq.n	8002216 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021ec:	f7ff faa9 	bl	8001742 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe fd8e 	bl	8000d10 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f8:	f7fe fd8a 	bl	8000d10 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e103      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800220a:	f7ff fabc 	bl	8001786 <LL_RCC_HSI48_IsReady>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f1      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4c0>
 8002214:	e013      	b.n	800223e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002216:	f7ff faa5 	bl	8001764 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe fd79 	bl	8000d10 <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002222:	f7fe fd75 	bl	8000d10 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0ee      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002234:	f7ff faa7 	bl	8001786 <LL_RCC_HSI48_IsReady>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f1      	bne.n	8002222 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80e4 	beq.w	8002410 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002248:	f7ff fc05 	bl	8001a56 <LL_RCC_GetSysClkSource>
 800224c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	2b02      	cmp	r3, #2
 800225c:	f040 80b4 	bne.w	80023c8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0203 	and.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	429a      	cmp	r2, r3
 800226c:	d123      	bne.n	80022b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d11c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d114      	bne.n	80022b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d10d      	bne.n	80022b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d05d      	beq.n	8002372 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d058      	beq.n	800236e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0a1      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022ce:	f7ff fc85 	bl	8001bdc <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d2:	f7fe fd1d 	bl	8000d10 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fd19 	bl	8000d10 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e092      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ef      	bne.n	80022da <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_OscConfig+0x68c>)
 8002302:	4013      	ands	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002312:	0212      	lsls	r2, r2, #8
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002326:	430a      	orrs	r2, r1
 8002328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002330:	f7ff fc45 	bl	8001bbe <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002344:	f7fe fce4 	bl	8000d10 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fce0 	bl	8000d10 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e059      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ef      	beq.n	800234c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	e050      	b.n	8002410 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e04f      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d147      	bne.n	8002410 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002380:	f7ff fc1d 	bl	8001bbe <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002392:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002394:	f7fe fcbc 	bl	8000d10 <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fcb8 	bl	8000d10 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e031      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ef      	beq.n	800239c <HAL_RCC_OscConfig+0x664>
 80023bc:	e028      	b.n	8002410 <HAL_RCC_OscConfig+0x6d8>
 80023be:	bf00      	nop
 80023c0:	58000400 	.word	0x58000400
 80023c4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d01e      	beq.n	800240c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	f7ff fc05 	bl	8001bdc <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fc9d 	bl	8000d10 <HAL_GetTick>
 80023d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fc99 	bl	8000d10 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e012      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ef      	bne.n	80023da <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_OscConfig+0x6e4>)
 8002406:	4013      	ands	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
 800240a:	e001      	b.n	8002410 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3734      	adds	r7, #52	; 0x34
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	bf00      	nop
 800241c:	eefefffc 	.word	0xeefefffc

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e12d      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b98      	ldr	r3, [pc, #608]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d91b      	bls.n	800247a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b95      	ldr	r3, [pc, #596]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4993      	ldr	r1, [pc, #588]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002452:	f7fe fc5d 	bl	8000d10 <HAL_GetTick>
 8002456:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002458:	e008      	b.n	800246c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800245a:	f7fe fc59 	bl	8000d10 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e111      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246c:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d1ef      	bne.n	800245a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff faef 	bl	8001a6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002490:	f7fe fc3e 	bl	8000d10 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002498:	f7fe fc3a 	bl	8000d10 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0f2      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80024aa:	f7ff fbe9 	bl	8001c80 <LL_RCC_IsActiveFlag_HPRE>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f1      	beq.n	8002498 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fae6 	bl	8001a96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fc21 	bl	8000d10 <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024d2:	f7fe fc1d 	bl	8000d10 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0d5      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024e4:	f7ff fbde 	bl	8001ca4 <LL_RCC_IsActiveFlag_C2HPRE>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f1      	beq.n	80024d2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fadf 	bl	8001ac2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002504:	f7fe fc04 	bl	8000d10 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800250c:	f7fe fc00 	bl	8000d10 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0b8      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800251e:	f7ff fbd4 	bl	8001cca <LL_RCC_IsActiveFlag_SHDHPRE>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f1      	beq.n	800250c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d016      	beq.n	8002562 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fad9 	bl	8001af0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800253e:	f7fe fbe7 	bl	8000d10 <HAL_GetTick>
 8002542:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002546:	f7fe fbe3 	bl	8000d10 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e09b      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002558:	f7ff fbca 	bl	8001cf0 <LL_RCC_IsActiveFlag_PPRE1>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f1      	beq.n	8002546 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d017      	beq.n	800259e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff facf 	bl	8001b18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800257a:	f7fe fbc9 	bl	8000d10 <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002582:	f7fe fbc5 	bl	8000d10 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e07d      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002594:	f7ff fbbe 	bl	8001d14 <LL_RCC_IsActiveFlag_PPRE2>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f1      	beq.n	8002582 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d043      	beq.n	8002632 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80025b2:	f7ff f86f 	bl	8001694 <LL_RCC_HSE_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11e      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e067      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80025c8:	f7ff fb17 	bl	8001bfa <LL_RCC_PLL_IsReady>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d113      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e05c      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80025de:	f7ff f9d7 	bl	8001990 <LL_RCC_MSI_IsReady>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e051      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80025ec:	f7ff f882 	bl	80016f4 <LL_RCC_HSI_IsReady>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e04a      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fa15 	bl	8001a2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fb84 	bl	8000d10 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fb80 	bl	8000d10 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e036      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	f7ff fa18 	bl	8001a56 <LL_RCC_GetSysClkSource>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	429a      	cmp	r2, r3
 8002630:	d1ec      	bne.n	800260c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d21b      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 0207 	bic.w	r2, r3, #7
 8002648:	4913      	ldr	r1, [pc, #76]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002650:	f7fe fb5e 	bl	8000d10 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	e008      	b.n	800266a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002658:	f7fe fb5a 	bl	8000d10 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e012      	b.n	8002690 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x278>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d1ef      	bne.n	8002658 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002678:	f000 f87e 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 800267c:	4603      	mov	r3, r0
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_RCC_ClockConfig+0x27c>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002682:	f7fe fb51 	bl	8000d28 <HAL_GetTickPrio>
 8002686:	4603      	mov	r3, r0
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa17 	bl	8000abc <HAL_InitTick>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	58004000 	.word	0x58004000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	f7ff f9d6 	bl	8001a56 <LL_RCC_GetSysClkSource>
 80026aa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026b2:	f7ff f992 	bl	80019da <LL_RCC_MSI_GetRange>
 80026b6:	4603      	mov	r3, r0
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <HAL_RCC_GetSysClockFreq+0xcc>)
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e04b      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d102      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e045      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d10a      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026da:	f7fe ffab 	bl	8001634 <LL_RCC_HSE_IsEnabledDiv2>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e03a      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e037      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80026f0:	f7ff faba 	bl	8001c68 <LL_RCC_PLL_GetMainSource>
 80026f4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d003      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x64>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x6a>
 8002702:	e00d      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002706:	60bb      	str	r3, [r7, #8]
        break;
 8002708:	e015      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800270a:	f7fe ff93 	bl	8001634 <LL_RCC_HSE_IsEnabledDiv2>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	d102      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002716:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002718:	e00d      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_RCC_GetSysClockFreq+0xd4>)
 800271c:	60bb      	str	r3, [r7, #8]
        break;
 800271e:	e00a      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002720:	f7ff f95b 	bl	80019da <LL_RCC_MSI_GetRange>
 8002724:	4603      	mov	r3, r0
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_RCC_GetSysClockFreq+0xcc>)
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	60bb      	str	r3, [r7, #8]
        break;
 8002734:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002736:	f7ff fa72 	bl	8001c1e <LL_RCC_PLL_GetN>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	fb03 f402 	mul.w	r4, r3, r2
 8002742:	f7ff fa85 	bl	8001c50 <LL_RCC_PLL_GetDivider>
 8002746:	4603      	mov	r3, r0
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	3301      	adds	r3, #1
 800274c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002750:	f7ff fa72 	bl	8001c38 <LL_RCC_PLL_GetR>
 8002754:	4603      	mov	r3, r0
 8002756:	0f5b      	lsrs	r3, r3, #29
 8002758:	3301      	adds	r3, #1
 800275a:	fbb4 f3f3 	udiv	r3, r4, r3
 800275e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	bf00      	nop
 800276c:	08006e80 	.word	0x08006e80
 8002770:	00f42400 	.word	0x00f42400
 8002774:	01e84800 	.word	0x01e84800

08002778 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b598      	push	{r3, r4, r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800277c:	f7ff ff90 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8002780:	4604      	mov	r4, r0
 8002782:	f7ff f9dd 	bl	8001b40 <LL_RCC_GetAHBPrescaler>
 8002786:	4603      	mov	r3, r0
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x24>)
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd98      	pop	{r3, r4, r7, pc}
 800279c:	08006e20 	.word	0x08006e20

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b598      	push	{r3, r4, r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027a4:	f7ff ffe8 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027a8:	4604      	mov	r4, r0
 80027aa:	f7ff f9f0 	bl	8001b8e <LL_RCC_GetAPB1Prescaler>
 80027ae:	4603      	mov	r3, r0
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd98      	pop	{r3, r4, r7, pc}
 80027c8:	08006e60 	.word	0x08006e60

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b598      	push	{r3, r4, r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80027d0:	f7ff ffd2 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027d4:	4604      	mov	r4, r0
 80027d6:	f7ff f9e6 	bl	8001ba6 <LL_RCC_GetAPB2Prescaler>
 80027da:	4603      	mov	r3, r0
 80027dc:	0adb      	lsrs	r3, r3, #11
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd98      	pop	{r3, r4, r7, pc}
 80027f4:	08006e60 	.word	0x08006e60

080027f8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	226f      	movs	r2, #111	; 0x6f
 8002806:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002808:	f7ff f925 	bl	8001a56 <LL_RCC_GetSysClkSource>
 800280c:	4602      	mov	r2, r0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002812:	f7ff f995 	bl	8001b40 <LL_RCC_GetAHBPrescaler>
 8002816:	4602      	mov	r2, r0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800281c:	f7ff f9b7 	bl	8001b8e <LL_RCC_GetAPB1Prescaler>
 8002820:	4602      	mov	r2, r0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002826:	f7ff f9be 	bl	8001ba6 <LL_RCC_GetAPB2Prescaler>
 800282a:	4602      	mov	r2, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002830:	f7ff f992 	bl	8001b58 <LL_C2_RCC_GetAHBPrescaler>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800283a:	f7ff f99a 	bl	8001b72 <LL_RCC_GetAHB4Prescaler>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_RCC_GetClockConfig+0x60>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0207 	and.w	r2, r3, #7
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	601a      	str	r2, [r3, #0]
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	58004000 	.word	0x58004000

0800285c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2bb0      	cmp	r3, #176	; 0xb0
 8002868:	d903      	bls.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e007      	b.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002882:	f7ff f976 	bl	8001b72 <LL_RCC_GetAHB4Prescaler>
 8002886:	4603      	mov	r3, r0
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0c9c      	lsrs	r4, r3, #18
 80028a6:	f7fe feb7 	bl	8001618 <HAL_PWREx_GetVoltageRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4619      	mov	r1, r3
 80028ae:	4620      	mov	r0, r4
 80028b0:	f000 f80c 	bl	80028cc <RCC_SetFlashLatency>
 80028b4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop
 80028c0:	08006e80 	.word	0x08006e80
 80028c4:	08006e20 	.word	0x08006e20
 80028c8:	431bde83 	.word	0x431bde83

080028cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b093      	sub	sp, #76	; 0x4c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <RCC_SetFlashLatency+0xe8>)
 80028d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80028e2:	4a35      	ldr	r2, [pc, #212]	; (80029b8 <RCC_SetFlashLatency+0xec>)
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <RCC_SetFlashLatency+0xf0>)
 80028f0:	f107 040c 	add.w	r4, r7, #12
 80028f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80028fa:	2300      	movs	r3, #0
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002904:	d11a      	bne.n	800293c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002906:	2300      	movs	r3, #0
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
 800290a:	e013      	b.n	8002934 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3348      	adds	r3, #72	; 0x48
 8002912:	443b      	add	r3, r7
 8002914:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d807      	bhi.n	800292e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800291e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	443b      	add	r3, r7
 8002926:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800292c:	e020      	b.n	8002970 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800292e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002930:	3301      	adds	r3, #1
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	2b03      	cmp	r3, #3
 8002938:	d9e8      	bls.n	800290c <RCC_SetFlashLatency+0x40>
 800293a:	e019      	b.n	8002970 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800293c:	2300      	movs	r3, #0
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	e013      	b.n	800296a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3348      	adds	r3, #72	; 0x48
 8002948:	443b      	add	r3, r7
 800294a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	d807      	bhi.n	8002964 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3348      	adds	r3, #72	; 0x48
 800295a:	443b      	add	r3, r7
 800295c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002962:	e005      	b.n	8002970 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	3301      	adds	r3, #1
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	2b02      	cmp	r3, #2
 800296e:	d9e8      	bls.n	8002942 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <RCC_SetFlashLatency+0xf4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0207 	bic.w	r2, r3, #7
 8002978:	4911      	ldr	r1, [pc, #68]	; (80029c0 <RCC_SetFlashLatency+0xf4>)
 800297a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002980:	f7fe f9c6 	bl	8000d10 <HAL_GetTick>
 8002984:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002986:	e008      	b.n	800299a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002988:	f7fe f9c2 	bl	8000d10 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e007      	b.n	80029aa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <RCC_SetFlashLatency+0xf4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1ef      	bne.n	8002988 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	374c      	adds	r7, #76	; 0x4c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	08006ddc 	.word	0x08006ddc
 80029b8:	08006dec 	.word	0x08006dec
 80029bc:	08006df8 	.word	0x08006df8
 80029c0:	58004000 	.word	0x58004000

080029c4 <LL_RCC_LSE_IsEnabled>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <LL_RCC_LSE_IsEnabled+0x18>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_RCC_LSE_IsEnabled+0x1a>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_LSE_IsReady>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d101      	bne.n	8002a00 <LL_RCC_LSE_IsReady+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_RCC_LSE_IsReady+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_MSI_EnablePLLMode>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_SetRFWKPClockSource>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_SetSMPSClockSource>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f023 0203 	bic.w	r2, r3, #3
 8002a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_SetSMPSPrescaler>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_SetUSARTClockSource>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_SetLPUARTClockSource>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_SetI2CClockSource>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b16:	43db      	mvns	r3, r3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_SetLPTIMClockSource>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0c1b      	lsrs	r3, r3, #16
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_SetSAIClockSource>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_SetRNGClockSource>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_SetCLK48ClockSource>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_SetUSBClockSource>:
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffe3 	bl	8002bc4 <LL_RCC_SetCLK48ClockSource>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <LL_RCC_SetADCClockSource>:
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_SetRTCClockSource>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_GetRTCClockSource>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_ForceBackupDomainReset>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_PLLSAI1_Enable>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_PLLSAI1_Disable>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cec:	6013      	str	r3, [r2, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_PLLSAI1_IsReady>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d0a:	d101      	bne.n	8002d10 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d034      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d40:	d021      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d46:	d81b      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d4c:	d01d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d52:	d815      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5c:	d110      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d6e:	e00d      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f94d 	bl	8003014 <RCCEx_PLLSAI1_ConfigNP>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d7e:	e005      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]
        break;
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fee8 	bl	8002b6c <LL_RCC_SetSAIClockSource>
 8002d9c:	e001      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d046      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002dae:	f7ff ff56 	bl	8002c5e <LL_RCC_GetRTCClockSource>
 8002db2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d03c      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002dbe:	f7fe fbc9 	bl	8001554 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff30 	bl	8002c32 <LL_RCC_SetRTCClockSource>
 8002dd2:	e02e      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002dde:	f7ff ff4b 	bl	8002c78 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002de2:	f7ff ff5a 	bl	8002c9a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002dfe:	f7ff fde1 	bl	80029c4 <LL_RCC_LSE_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d114      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e08:	f7fd ff82 	bl	8000d10 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fd ff7e 	bl	8000d10 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d902      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	77fb      	strb	r3, [r7, #31]
              break;
 8002e26:	e004      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e28:	f7ff fdde 	bl	80029e8 <LL_RCC_LSE_IsReady>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	77bb      	strb	r3, [r7, #30]
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7ffb      	ldrb	r3, [r7, #31]
 8002e3a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe2a 	bl	8002aa6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe35 	bl	8002ad2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fe5d 	bl	8002b38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fe52 	bl	8002b38 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fe2a 	bl	8002afe <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fe1f 	bl	8002afe <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d022      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe8d 	bl	8002bf0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eee:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef8:	d10b      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8e3 	bl	80030ca <RCCEx_PLLSAI1_ConfigNQ>
 8002f04:	4603      	mov	r3, r0
 8002f06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d02b      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f30:	d003      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe2a 	bl	8002b98 <LL_RCC_SetRNGClockSource>
 8002f44:	e00a      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7ff fe21 	bl	8002b98 <LL_RCC_SetRNGClockSource>
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fe34 	bl	8002bc4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002f64:	d107      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f74:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d022      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe3d 	bl	8002c06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8e3 	bl	8003180 <RCCEx_PLLSAI1_ConfigNR>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fd26 	bl	8002a2a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fd45 	bl	8002a7e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fd2c 	bl	8002a56 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002ffe:	7fbb      	ldrb	r3, [r7, #30]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800300c:	f7ff fcfe 	bl	8002a0c <LL_RCC_MSI_EnablePLLMode>
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}

08003014 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003020:	f7ff fe5b 	bl	8002cda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003024:	f7fd fe74 	bl	8000d10 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800302a:	e009      	b.n	8003040 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800302c:	f7fd fe70 	bl	8000d10 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	73fb      	strb	r3, [r7, #15]
      break;
 800303e:	e004      	b.n	800304a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003040:	f7ff fe5a 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d137      	bne.n	80030c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003064:	4313      	orrs	r3, r2
 8003066:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307a:	4313      	orrs	r3, r2
 800307c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800307e:	f7ff fe1d 	bl	8002cbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003082:	f7fd fe45 	bl	8000d10 <HAL_GetTick>
 8003086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003088:	e009      	b.n	800309e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800308a:	f7fd fe41 	bl	8000d10 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d902      	bls.n	800309e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	73fb      	strb	r3, [r7, #15]
        break;
 800309c:	e004      	b.n	80030a8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800309e:	f7ff fe2b 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d1f0      	bne.n	800308a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030bc:	4313      	orrs	r3, r2
 80030be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030d6:	f7ff fe00 	bl	8002cda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030da:	f7fd fe19 	bl	8000d10 <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030e0:	e009      	b.n	80030f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e2:	f7fd fe15 	bl	8000d10 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e004      	b.n	8003100 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030f6:	f7ff fdff 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d137      	bne.n	8003176 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003130:	4313      	orrs	r3, r2
 8003132:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003134:	f7ff fdc2 	bl	8002cbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fd fdea 	bl	8000d10 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003140:	f7fd fde6 	bl	8000d10 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
        break;
 8003152:	e004      	b.n	800315e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003154:	f7ff fdd0 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d1f0      	bne.n	8003140 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003172:	4313      	orrs	r3, r2
 8003174:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800318c:	f7ff fda5 	bl	8002cda <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003190:	f7fd fdbe 	bl	8000d10 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003196:	e009      	b.n	80031ac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003198:	f7fd fdba 	bl	8000d10 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d902      	bls.n	80031ac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	73fb      	strb	r3, [r7, #15]
      break;
 80031aa:	e004      	b.n	80031b6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ac:	f7ff fda4 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d137      	bne.n	800322c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d0:	4313      	orrs	r3, r2
 80031d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031ea:	f7ff fd67 	bl	8002cbc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fd fd8f 	bl	8000d10 <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031f4:	e009      	b.n	800320a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f6:	f7fd fd8b 	bl	8000d10 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d902      	bls.n	800320a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	73fb      	strb	r3, [r7, #15]
        break;
 8003208:	e004      	b.n	8003214 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800320a:	f7ff fd75 	bl	8002cf8 <LL_RCC_PLLSAI1_IsReady>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d1f0      	bne.n	80031f6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003228:	4313      	orrs	r3, r2
 800322a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e049      	b.n	80032dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f841 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f000 f9d5 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e036      	b.n	800337e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a17      	ldr	r2, [pc, #92]	; (800338c <HAL_TIM_Base_Start_IT+0x94>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x44>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333a:	d115      	bne.n	8003368 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_TIM_Base_Start_IT+0x98>)
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b06      	cmp	r3, #6
 800334c:	d015      	beq.n	800337a <HAL_TIM_Base_Start_IT+0x82>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d011      	beq.n	800337a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	e008      	b.n	800337a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e000      	b.n	800337c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00
 8003390:	00010007 	.word	0x00010007

08003394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0202 	mvn.w	r2, #2
 80033c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f905 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8f7 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f908 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d122      	bne.n	8003444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d11b      	bne.n	8003444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0204 	mvn.w	r2, #4
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8db 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8cd 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f8de 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b08      	cmp	r3, #8
 8003450:	d122      	bne.n	8003498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b08      	cmp	r3, #8
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0208 	mvn.w	r2, #8
 8003468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8b1 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8a3 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8b4 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d122      	bne.n	80034ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d11b      	bne.n	80034ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0210 	mvn.w	r2, #16
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2208      	movs	r2, #8
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f887 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f879 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f88a 	bl	80035fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0201 	mvn.w	r2, #1
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd f9a0 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8de 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003552:	d10e      	bne.n	8003572 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d107      	bne.n	8003572 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8d1 	bl	8003714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f838 	bl	800360e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d10e      	bne.n	80035ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0220 	mvn.w	r2, #32
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f891 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <TIM_Base_SetConfig+0xbc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x20>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <TIM_Base_SetConfig+0xbc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0x52>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0x52>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <TIM_Base_SetConfig+0xc0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0x52>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <TIM_Base_SetConfig+0xc4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <TIM_Base_SetConfig+0xbc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <TIM_Base_SetConfig+0xa0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <TIM_Base_SetConfig+0xc0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <TIM_Base_SetConfig+0xa0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <TIM_Base_SetConfig+0xc4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d103      	bne.n	80036cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	615a      	str	r2, [r3, #20]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_RCC_GetUSARTClockSource>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4013      	ands	r3, r2
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_RCC_GetLPUARTClockSource>:
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4013      	ands	r3, r2
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e042      	b.n	8003800 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd f8e1 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2224      	movs	r2, #36	; 0x24
 8003796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f82c 	bl	8003808 <UART_SetConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa46 	bl	8003c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 facd 	bl	8003d98 <UART_CheckIdleState>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b08c      	sub	sp, #48	; 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4baf      	ldr	r3, [pc, #700]	; (8003af4 <UART_SetConfig+0x2ec>)
 8003838:	4013      	ands	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4aa4      	ldr	r2, [pc, #656]	; (8003af8 <UART_SetConfig+0x2f0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	4313      	orrs	r3, r2
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800387e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 010f 	bic.w	r1, r3, #15
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a95      	ldr	r2, [pc, #596]	; (8003afc <UART_SetConfig+0x2f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0xf0>
 80038ac:	2003      	movs	r0, #3
 80038ae:	f7ff ff3b 	bl	8003728 <LL_RCC_GetUSARTClockSource>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d81b      	bhi.n	80038f0 <UART_SetConfig+0xe8>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xb8>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e042      	b.n	800395e <UART_SetConfig+0x156>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e03e      	b.n	800395e <UART_SetConfig+0x156>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e03a      	b.n	800395e <UART_SetConfig+0x156>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e036      	b.n	800395e <UART_SetConfig+0x156>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e032      	b.n	800395e <UART_SetConfig+0x156>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <UART_SetConfig+0x2f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12a      	bne.n	8003958 <UART_SetConfig+0x150>
 8003902:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003906:	f7ff ff1f 	bl	8003748 <LL_RCC_GetLPUARTClockSource>
 800390a:	4603      	mov	r3, r0
 800390c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003910:	d01a      	beq.n	8003948 <UART_SetConfig+0x140>
 8003912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003916:	d81b      	bhi.n	8003950 <UART_SetConfig+0x148>
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	d00c      	beq.n	8003938 <UART_SetConfig+0x130>
 800391e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003922:	d815      	bhi.n	8003950 <UART_SetConfig+0x148>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <UART_SetConfig+0x128>
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	d008      	beq.n	8003940 <UART_SetConfig+0x138>
 800392e:	e00f      	b.n	8003950 <UART_SetConfig+0x148>
 8003930:	2300      	movs	r3, #0
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003936:	e012      	b.n	800395e <UART_SetConfig+0x156>
 8003938:	2302      	movs	r3, #2
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393e:	e00e      	b.n	800395e <UART_SetConfig+0x156>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003946:	e00a      	b.n	800395e <UART_SetConfig+0x156>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394e:	e006      	b.n	800395e <UART_SetConfig+0x156>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003956:	e002      	b.n	800395e <UART_SetConfig+0x156>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <UART_SetConfig+0x2f0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f040 8097 	bne.w	8003a98 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800396a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800396e:	2b08      	cmp	r3, #8
 8003970:	d823      	bhi.n	80039ba <UART_SetConfig+0x1b2>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x170>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	0800399d 	.word	0x0800399d
 800397c:	080039bb 	.word	0x080039bb
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039ab 	.word	0x080039ab
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039bb 	.word	0x080039bb
 8003994:	080039bb 	.word	0x080039bb
 8003998:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7fe ff00 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039a2:	e010      	b.n	80039c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <UART_SetConfig+0x2f8>)
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039a8:	e00d      	b.n	80039c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fe79 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039b0:	e009      	b.n	80039c6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039b8:	e005      	b.n	80039c6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 812a 	beq.w	8003c22 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	4a4c      	ldr	r2, [pc, #304]	; (8003b04 <UART_SetConfig+0x2fc>)
 80039d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d8:	461a      	mov	r2, r3
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d305      	bcc.n	80039fe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d903      	bls.n	8003a06 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a04:	e10d      	b.n	8003c22 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	60fa      	str	r2, [r7, #12]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <UART_SetConfig+0x2fc>)
 8003a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a28:	f7fc fbaa 	bl	8000180 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	020b      	lsls	r3, r1, #8
 8003a3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a42:	0202      	lsls	r2, r0, #8
 8003a44:	6979      	ldr	r1, [r7, #20]
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	0849      	lsrs	r1, r1, #1
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	4605      	mov	r5, r0
 8003a50:	eb12 0804 	adds.w	r8, r2, r4
 8003a54:	eb43 0905 	adc.w	r9, r3, r5
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	469a      	mov	sl, r3
 8003a60:	4693      	mov	fp, r2
 8003a62:	4652      	mov	r2, sl
 8003a64:	465b      	mov	r3, fp
 8003a66:	4640      	mov	r0, r8
 8003a68:	4649      	mov	r1, r9
 8003a6a:	f7fc fb89 	bl	8000180 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4613      	mov	r3, r2
 8003a74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7c:	d308      	bcc.n	8003a90 <UART_SetConfig+0x288>
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a84:	d204      	bcs.n	8003a90 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e0c8      	b.n	8003c22 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a96:	e0c4      	b.n	8003c22 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d16d      	bne.n	8003b7e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d82d      	bhi.n	8003b08 <UART_SetConfig+0x300>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x2ac>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ad5 	.word	0x08003ad5
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003b09 	.word	0x08003b09
 8003ac0:	08003ae3 	.word	0x08003ae3
 8003ac4:	08003b09 	.word	0x08003b09
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b09 	.word	0x08003b09
 8003ad0:	08003aeb 	.word	0x08003aeb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad4:	f7fe fe7a 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ada:	e01b      	b.n	8003b14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <UART_SetConfig+0x2f8>)
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ae0:	e018      	b.n	8003b14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae2:	f7fe fddd 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ae8:	e014      	b.n	8003b14 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003af0:	e010      	b.n	8003b14 <UART_SetConfig+0x30c>
 8003af2:	bf00      	nop
 8003af4:	cfff69f3 	.word	0xcfff69f3
 8003af8:	40008000 	.word	0x40008000
 8003afc:	40013800 	.word	0x40013800
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	08006ec0 	.word	0x08006ec0
      default:
        pclk = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8083 	beq.w	8003c22 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <UART_SetConfig+0x444>)
 8003b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b26:	461a      	mov	r2, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2e:	005a      	lsls	r2, r3, #1
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	441a      	add	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	2b0f      	cmp	r3, #15
 8003b46:	d916      	bls.n	8003b76 <UART_SetConfig+0x36e>
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4e:	d212      	bcs.n	8003b76 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f023 030f 	bic.w	r3, r3, #15
 8003b58:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	8bfb      	ldrh	r3, [r7, #30]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	8bfa      	ldrh	r2, [r7, #30]
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e055      	b.n	8003c22 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b7c:	e051      	b.n	8003c22 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b82:	3b01      	subs	r3, #1
 8003b84:	2b07      	cmp	r3, #7
 8003b86:	d822      	bhi.n	8003bce <UART_SetConfig+0x3c6>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0x388>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb1 	.word	0x08003bb1
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bbf 	.word	0x08003bbf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bcf 	.word	0x08003bcf
 8003ba8:	08003bcf 	.word	0x08003bcf
 8003bac:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe fe0c 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8003bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bb6:	e010      	b.n	8003bda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <UART_SetConfig+0x448>)
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bbc:	e00d      	b.n	8003bda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fd6f 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bc4:	e009      	b.n	8003bda <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bcc:	e005      	b.n	8003bda <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <UART_SetConfig+0x444>)
 8003be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	441a      	add	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	d908      	bls.n	8003c1c <UART_SetConfig+0x414>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d204      	bcs.n	8003c1c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a3a      	ldr	r2, [r7, #32]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	e002      	b.n	8003c22 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3730      	adds	r7, #48	; 0x30
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4c:	08006ec0 	.word	0x08006ec0
 8003c50:	00f42400 	.word	0x00f42400

08003c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d52:	d10a      	bne.n	8003d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003da8:	f7fc ffb2 	bl	8000d10 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d10e      	bne.n	8003dda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f82f 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e025      	b.n	8003e26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d10e      	bne.n	8003e06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f819 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e00f      	b.n	8003e26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b09c      	sub	sp, #112	; 0x70
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3e:	e0a9      	b.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	f000 80a5 	beq.w	8003f94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fc ff61 	bl	8000d10 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d140      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e74:	667b      	str	r3, [r7, #100]	; 0x64
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e069      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d051      	beq.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efe:	d149      	bne.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e6      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f5c:	623a      	str	r2, [r7, #32]
 8003f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	69f9      	ldr	r1, [r7, #28]
 8003f62:	6a3a      	ldr	r2, [r7, #32]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e010      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	f43f af46 	beq.w	8003e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3770      	adds	r7, #112	; 0x70
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e027      	b.n	8004024 <HAL_UARTEx_DisableFifoMode+0x66>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004002:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e02d      	b.n	80040a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f84f 	bl	8004128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e02d      	b.n	8004120 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	; 0x24
 80040d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f811 	bl	8004128 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004148:	e031      	b.n	80041ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800414a:	2308      	movs	r3, #8
 800414c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800414e:	2308      	movs	r3, #8
 8004150:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	0e5b      	lsrs	r3, r3, #25
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	0f5b      	lsrs	r3, r3, #29
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004172:	7bbb      	ldrb	r3, [r7, #14]
 8004174:	7b3a      	ldrb	r2, [r7, #12]
 8004176:	4911      	ldr	r1, [pc, #68]	; (80041bc <UARTEx_SetNbDataToProcess+0x94>)
 8004178:	5c8a      	ldrb	r2, [r1, r2]
 800417a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800417e:	7b3a      	ldrb	r2, [r7, #12]
 8004180:	490f      	ldr	r1, [pc, #60]	; (80041c0 <UARTEx_SetNbDataToProcess+0x98>)
 8004182:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004184:	fb93 f3f2 	sdiv	r3, r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	7b7a      	ldrb	r2, [r7, #13]
 8004194:	4909      	ldr	r1, [pc, #36]	; (80041bc <UARTEx_SetNbDataToProcess+0x94>)
 8004196:	5c8a      	ldrb	r2, [r1, r2]
 8004198:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800419c:	7b7a      	ldrb	r2, [r7, #13]
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <UARTEx_SetNbDataToProcess+0x98>)
 80041a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	08006ed8 	.word	0x08006ed8
 80041c0:	08006ee0 	.word	0x08006ee0

080041c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80041d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4013      	ands	r3, r2
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041fa:	b084      	sub	sp, #16
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	f107 0014 	add.w	r0, r7, #20
 8004208:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	b004      	add	sp, #16
 800423a:	4770      	bx	lr

0800423c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <SysTick_Handler+0x1c>)
 8004242:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004244:	f001 fc38 	bl	8005ab8 <xTaskGetSchedulerState>
 8004248:	4603      	mov	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800424e:	f002 fa23 	bl	8006698 <xPortSysTickHandler>
  }
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	e000e010 	.word	0xe000e010

0800425c <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a07      	ldr	r2, [pc, #28]	; (8004298 <vApplicationGetIdleTaskMemory+0x2c>)
 800427c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <vApplicationGetIdleTaskMemory+0x30>)
 8004282:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	601a      	str	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	2000047c 	.word	0x2000047c
 800429c:	20000538 	.word	0x20000538

080042a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <vApplicationGetTimerTaskMemory+0x2c>)
 80042b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a06      	ldr	r2, [pc, #24]	; (80042d0 <vApplicationGetTimerTaskMemory+0x30>)
 80042b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042be:	601a      	str	r2, [r3, #0]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	20000738 	.word	0x20000738
 80042d0:	200007f4 	.word	0x200007f4

080042d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f103 0208 	add.w	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f103 0208 	add.w	r2, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f103 0208 	add.w	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d103      	bne.n	8004396 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e00c      	b.n	80043b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3308      	adds	r3, #8
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e002      	b.n	80043a4 <vListInsert+0x2e>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d2f6      	bcs.n	800439e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6852      	ldr	r2, [r2, #4]
 8004408:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d103      	bne.n	800441c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	1e5a      	subs	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004466:	f002 f885 	bl	8006574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	3b01      	subs	r3, #1
 8004498:	68f9      	ldr	r1, [r7, #12]
 800449a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	441a      	add	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	22ff      	movs	r2, #255	; 0xff
 80044aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	22ff      	movs	r2, #255	; 0xff
 80044b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d114      	bne.n	80044e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01a      	beq.n	80044fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3310      	adds	r3, #16
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 f931 	bl	8005730 <xTaskRemoveFromEventList>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d012      	beq.n	80044fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <xQueueGenericReset+0xcc>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	e009      	b.n	80044fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3310      	adds	r3, #16
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fef2 	bl	80042d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3324      	adds	r3, #36	; 0x24
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff feed 	bl	80042d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044fa:	f002 f86b 	bl	80065d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044fe:	2301      	movs	r3, #1
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <xQueueGenericCreateStatic+0x52>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <xQueueGenericCreateStatic+0x56>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <xQueueGenericCreateStatic+0x58>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	623b      	str	r3, [r7, #32]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <xQueueGenericCreateStatic+0x7e>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <xQueueGenericCreateStatic+0x82>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericCreateStatic+0x84>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	61fb      	str	r3, [r7, #28]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045aa:	2350      	movs	r3, #80	; 0x50
 80045ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b50      	cmp	r3, #80	; 0x50
 80045b2:	d00a      	beq.n	80045ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	61bb      	str	r3, [r7, #24]
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f805 	bl	80045fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3730      	adds	r7, #48	; 0x30
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e002      	b.n	800461e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800462a:	2101      	movs	r1, #1
 800462c:	69b8      	ldr	r0, [r7, #24]
 800462e:	f7ff ff05 	bl	800443c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	; 0x38
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004652:	2300      	movs	r3, #0
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <xQueueGenericSend+0x32>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d103      	bne.n	8004684 <xQueueGenericSend+0x40>
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <xQueueGenericSend+0x44>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <xQueueGenericSend+0x46>
 8004688:	2300      	movs	r3, #0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <xQueueGenericSend+0x60>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d103      	bne.n	80046b2 <xQueueGenericSend+0x6e>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <xQueueGenericSend+0x72>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xQueueGenericSend+0x74>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	623b      	str	r3, [r7, #32]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046d2:	f001 f9f1 	bl	8005ab8 <xTaskGetSchedulerState>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <xQueueGenericSend+0x9e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <xQueueGenericSend+0xa2>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <xQueueGenericSend+0xa4>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <xQueueGenericSend+0xbe>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	61fb      	str	r3, [r7, #28]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004702:	f001 ff37 	bl	8006574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <xQueueGenericSend+0xd4>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d129      	bne.n	800476c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800471e:	f000 fa0b 	bl	8004b38 <prvCopyDataToQueue>
 8004722:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fffd 	bl	8005730 <xTaskRemoveFromEventList>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d013      	beq.n	8004764 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800473c:	4b3f      	ldr	r3, [pc, #252]	; (800483c <xQueueGenericSend+0x1f8>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	e00a      	b.n	8004764 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <xQueueGenericSend+0x1f8>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004764:	f001 ff36 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 8004768:	2301      	movs	r3, #1
 800476a:	e063      	b.n	8004834 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004772:	f001 ff2f 	bl	80065d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004776:	2300      	movs	r3, #0
 8004778:	e05c      	b.n	8004834 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	4618      	mov	r0, r3
 8004786:	f001 f837 	bl	80057f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800478e:	f001 ff21 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004792:	f000 fd9b 	bl	80052cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004796:	f001 feed 	bl	8006574 <vPortEnterCritical>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d103      	bne.n	80047b0 <xQueueGenericSend+0x16c>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b6:	b25b      	sxtb	r3, r3
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d103      	bne.n	80047c6 <xQueueGenericSend+0x182>
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c6:	f001 ff05 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ca:	1d3a      	adds	r2, r7, #4
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f826 	bl	8005824 <xTaskCheckForTimeOut>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d124      	bne.n	8004828 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e0:	f000 faa2 	bl	8004d28 <prvIsQueueFull>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d018      	beq.n	800481c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	3310      	adds	r3, #16
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 ff4c 	bl	8005690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fa:	f000 fa2d 	bl	8004c58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047fe:	f000 fd73 	bl	80052e8 <xTaskResumeAll>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f af7c 	bne.w	8004702 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <xQueueGenericSend+0x1f8>)
 800480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	e772      	b.n	8004702 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800481c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481e:	f000 fa1b 	bl	8004c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004822:	f000 fd61 	bl	80052e8 <xTaskResumeAll>
 8004826:	e76c      	b.n	8004702 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482a:	f000 fa15 	bl	8004c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800482e:	f000 fd5b 	bl	80052e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004832:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004834:	4618      	mov	r0, r3
 8004836:	3738      	adds	r7, #56	; 0x38
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	e000ed04 	.word	0xe000ed04

08004840 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b090      	sub	sp, #64	; 0x40
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <xQueueGenericSendFromISR+0x3c>
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <xQueueGenericSendFromISR+0x40>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <xQueueGenericSendFromISR+0x42>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSendFromISR+0x6a>
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <xQueueGenericSendFromISR+0x6e>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <xQueueGenericSendFromISR+0x70>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	623b      	str	r3, [r7, #32]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ca:	f001 ff35 	bl	8006738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048ce:	f3ef 8211 	mrs	r2, BASEPRI
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	61fa      	str	r2, [r7, #28]
 80048e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <xQueueGenericSendFromISR+0xbc>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d12f      	bne.n	800495c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004912:	f000 f911 	bl	8004b38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004916:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d112      	bne.n	8004946 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d016      	beq.n	8004956 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	3324      	adds	r3, #36	; 0x24
 800492c:	4618      	mov	r0, r3
 800492e:	f000 feff 	bl	8005730 <xTaskRemoveFromEventList>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00e      	beq.n	8004956 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e007      	b.n	8004956 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800494a:	3301      	adds	r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	b25a      	sxtb	r2, r3
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004956:	2301      	movs	r3, #1
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800495a:	e001      	b.n	8004960 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800495c:	2300      	movs	r3, #0
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800496a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800496e:	4618      	mov	r0, r3
 8004970:	3740      	adds	r7, #64	; 0x40
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08c      	sub	sp, #48	; 0x30
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <xQueueReceive+0x30>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	623b      	str	r3, [r7, #32]
}
 80049a4:	bf00      	nop
 80049a6:	e7fe      	b.n	80049a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <xQueueReceive+0x3e>
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <xQueueReceive+0x42>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <xQueueReceive+0x44>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xQueueReceive+0x5e>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	61fb      	str	r3, [r7, #28]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049d6:	f001 f86f 	bl	8005ab8 <xTaskGetSchedulerState>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <xQueueReceive+0x6e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <xQueueReceive+0x72>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <xQueueReceive+0x74>
 80049ea:	2300      	movs	r3, #0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xQueueReceive+0x8e>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	61bb      	str	r3, [r7, #24]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a06:	f001 fdb5 	bl	8006574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01f      	beq.n	8004a56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1a:	f000 f8f7 	bl	8004c0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00f      	beq.n	8004a4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	3310      	adds	r3, #16
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fe7c 	bl	8005730 <xTaskRemoveFromEventList>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <xQueueReceive+0x1bc>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a4e:	f001 fdc1 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e069      	b.n	8004b2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a5c:	f001 fdba 	bl	80065d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e062      	b.n	8004b2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a6a:	f107 0310 	add.w	r3, r7, #16
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fec2 	bl	80057f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a78:	f001 fdac 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a7c:	f000 fc26 	bl	80052cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a80:	f001 fd78 	bl	8006574 <vPortEnterCritical>
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d103      	bne.n	8004a9a <xQueueReceive+0x122>
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <xQueueReceive+0x138>
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab0:	f001 fd90 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ab4:	1d3a      	adds	r2, r7, #4
 8004ab6:	f107 0310 	add.w	r3, r7, #16
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 feb1 	bl	8005824 <xTaskCheckForTimeOut>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d123      	bne.n	8004b10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aca:	f000 f917 	bl	8004cfc <prvIsQueueEmpty>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d017      	beq.n	8004b04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fdd7 	bl	8005690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae4:	f000 f8b8 	bl	8004c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ae8:	f000 fbfe 	bl	80052e8 <xTaskResumeAll>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d189      	bne.n	8004a06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <xQueueReceive+0x1bc>)
 8004af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	e780      	b.n	8004a06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b06:	f000 f8a7 	bl	8004c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b0a:	f000 fbed 	bl	80052e8 <xTaskResumeAll>
 8004b0e:	e77a      	b.n	8004a06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b12:	f000 f8a1 	bl	8004c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b16:	f000 fbe7 	bl	80052e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1c:	f000 f8ee 	bl	8004cfc <prvIsQueueEmpty>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f43f af6f 	beq.w	8004a06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3730      	adds	r7, #48	; 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d14d      	bne.n	8004bfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ffc6 	bl	8005af4 <xTaskPriorityDisinherit>
 8004b68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	e043      	b.n	8004bfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d119      	bne.n	8004bac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6858      	ldr	r0, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	461a      	mov	r2, r3
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	f002 f828 	bl	8006bd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d32b      	bcc.n	8004bfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	e026      	b.n	8004bfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68d8      	ldr	r0, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	f002 f80e 	bl	8006bd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d207      	bcs.n	8004be8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	425b      	negs	r3, r3
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d105      	bne.n	8004bfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	441a      	add	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d303      	bcc.n	8004c40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68d9      	ldr	r1, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6838      	ldr	r0, [r7, #0]
 8004c4c:	f001 ffc4 	bl	8006bd8 <memcpy>
	}
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c60:	f001 fc88 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c6c:	e011      	b.n	8004c92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fd58 	bl	8005730 <xTaskRemoveFromEventList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c86:	f000 fe2f 	bl	80058e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dce9      	bgt.n	8004c6e <prvUnlockQueue+0x16>
 8004c9a:	e000      	b.n	8004c9e <prvUnlockQueue+0x46>
					break;
 8004c9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ca6:	f001 fc95 	bl	80065d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004caa:	f001 fc63 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cb6:	e011      	b.n	8004cdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fd33 	bl	8005730 <xTaskRemoveFromEventList>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cd0:	f000 fe0a 	bl	80058e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dce9      	bgt.n	8004cb8 <prvUnlockQueue+0x60>
 8004ce4:	e000      	b.n	8004ce8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ce6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	22ff      	movs	r2, #255	; 0xff
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cf0:	f001 fc70 	bl	80065d4 <vPortExitCritical>
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d04:	f001 fc36 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e001      	b.n	8004d1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f001 fc5b 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d30:	f001 fc20 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d102      	bne.n	8004d46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d40:	2301      	movs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e001      	b.n	8004d4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d4a:	f001 fc43 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e014      	b.n	8004d92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d68:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <vQueueAddToRegistry+0x50>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d74:	490c      	ldr	r1, [pc, #48]	; (8004da8 <vQueueAddToRegistry+0x50>)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <vQueueAddToRegistry+0x50>)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d8a:	e006      	b.n	8004d9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b07      	cmp	r3, #7
 8004d96:	d9e7      	bls.n	8004d68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000bf4 	.word	0x20000bf4

08004dac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004dbc:	f001 fbda 	bl	8006574 <vPortEnterCritical>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d103      	bne.n	8004dd6 <vQueueWaitForMessageRestricted+0x2a>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ddc:	b25b      	sxtb	r3, r3
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d103      	bne.n	8004dec <vQueueWaitForMessageRestricted+0x40>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dec:	f001 fbf2 	bl	80065d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3324      	adds	r3, #36	; 0x24
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fc69 	bl	80056d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f7ff ff26 	bl	8004c58 <prvUnlockQueue>
	}
 8004e0c:	bf00      	nop
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af04      	add	r7, sp, #16
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	623b      	str	r3, [r7, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61fb      	str	r3, [r7, #28]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e5a:	23bc      	movs	r3, #188	; 0xbc
 8004e5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2bbc      	cmp	r3, #188	; 0xbc
 8004e62:	d00a      	beq.n	8004e7a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	61bb      	str	r3, [r7, #24]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01e      	beq.n	8004ec0 <xTaskCreateStatic+0xac>
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	9302      	str	r3, [sp, #8]
 8004ea2:	f107 0314 	add.w	r3, r7, #20
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f850 	bl	8004f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eba:	f000 f8f3 	bl	80050a4 <prvAddNewTaskToReadyList>
 8004ebe:	e001      	b.n	8004ec4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ec4:	697b      	ldr	r3, [r7, #20]
	}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b08c      	sub	sp, #48	; 0x30
 8004ed2:	af04      	add	r7, sp, #16
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 fc68 	bl	80067b8 <pvPortMalloc>
 8004ee8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ef0:	20bc      	movs	r0, #188	; 0xbc
 8004ef2:	f001 fc61 	bl	80067b8 <pvPortMalloc>
 8004ef6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
 8004f04:	e005      	b.n	8004f12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f06:	6978      	ldr	r0, [r7, #20]
 8004f08:	f001 fd22 	bl	8006950 <vPortFree>
 8004f0c:	e001      	b.n	8004f12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d017      	beq.n	8004f48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f20:	88fa      	ldrh	r2, [r7, #6]
 8004f22:	2300      	movs	r3, #0
 8004f24:	9303      	str	r3, [sp, #12]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	9302      	str	r3, [sp, #8]
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f80e 	bl	8004f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f3c:	69f8      	ldr	r0, [r7, #28]
 8004f3e:	f000 f8b1 	bl	80050a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f42:	2301      	movs	r3, #1
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e002      	b.n	8004f4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	461a      	mov	r2, r3
 8004f70:	21a5      	movs	r1, #165	; 0xa5
 8004f72:	f001 fe3f 	bl	8006bf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f80:	3b01      	subs	r3, #1
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f023 0307 	bic.w	r3, r3, #7
 8004f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	617b      	str	r3, [r7, #20]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01f      	beq.n	8004ff6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e012      	b.n	8004fe2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	7819      	ldrb	r1, [r3, #0]
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	3334      	adds	r3, #52	; 0x34
 8004fcc:	460a      	mov	r2, r1
 8004fce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b0f      	cmp	r3, #15
 8004fe6:	d9e9      	bls.n	8004fbc <prvInitialiseNewTask+0x64>
 8004fe8:	e000      	b.n	8004fec <prvInitialiseNewTask+0x94>
			{
				break;
 8004fea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff4:	e003      	b.n	8004ffe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2b37      	cmp	r3, #55	; 0x37
 8005002:	d901      	bls.n	8005008 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005004:	2337      	movs	r3, #55	; 0x37
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005012:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2200      	movs	r2, #0
 8005018:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f978 	bl	8004314 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	3318      	adds	r3, #24
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff f973 	bl	8004314 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	2200      	movs	r2, #0
 8005048:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2200      	movs	r2, #0
 8005050:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	3354      	adds	r3, #84	; 0x54
 8005058:	2260      	movs	r2, #96	; 0x60
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fdc9 	bl	8006bf4 <memset>
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <prvInitialiseNewTask+0x140>)
 8005066:	659a      	str	r2, [r3, #88]	; 0x58
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	4a0c      	ldr	r2, [pc, #48]	; (800509c <prvInitialiseNewTask+0x144>)
 800506c:	65da      	str	r2, [r3, #92]	; 0x5c
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <prvInitialiseNewTask+0x148>)
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	69b8      	ldr	r0, [r7, #24]
 800507a:	f001 f94b 	bl	8006314 <pxPortInitialiseStack>
 800507e:	4602      	mov	r2, r0
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005090:	bf00      	nop
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	08006f08 	.word	0x08006f08
 800509c:	08006f28 	.word	0x08006f28
 80050a0:	08006ee8 	.word	0x08006ee8

080050a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050ac:	f001 fa62 	bl	8006574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <prvAddNewTaskToReadyList+0xc4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <prvAddNewTaskToReadyList+0xc4>)
 80050b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050c2:	4a2a      	ldr	r2, [pc, #168]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <prvAddNewTaskToReadyList+0xc4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d110      	bne.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d0:	f000 fc30 	bl	8005934 <prvInitialiseTaskLists>
 80050d4:	e00d      	b.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <prvAddNewTaskToReadyList+0xcc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050de:	4b23      	ldr	r3, [pc, #140]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d802      	bhi.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <prvAddNewTaskToReadyList+0xd0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <prvAddNewTaskToReadyList+0xd0>)
 80050fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <prvAddNewTaskToReadyList+0xd0>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <prvAddNewTaskToReadyList+0xd4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <prvAddNewTaskToReadyList+0x74>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <prvAddNewTaskToReadyList+0xd4>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <prvAddNewTaskToReadyList+0xd8>)
 8005126:	441a      	add	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7ff f8fd 	bl	800432e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005134:	f001 fa4e 	bl	80065d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <prvAddNewTaskToReadyList+0xcc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	429a      	cmp	r2, r3
 800514c:	d207      	bcs.n	800515e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <prvAddNewTaskToReadyList+0xdc>)
 8005150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20001108 	.word	0x20001108
 800516c:	20000c34 	.word	0x20000c34
 8005170:	20001114 	.word	0x20001114
 8005174:	20001124 	.word	0x20001124
 8005178:	20001110 	.word	0x20001110
 800517c:	20000c38 	.word	0x20000c38
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d017      	beq.n	80051c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <vTaskDelay+0x60>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <vTaskDelay+0x30>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60bb      	str	r3, [r7, #8]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051b4:	f000 f88a 	bl	80052cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051b8:	2100      	movs	r1, #0
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fd08 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051c0:	f000 f892 	bl	80052e8 <xTaskResumeAll>
 80051c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <vTaskDelay+0x64>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20001130 	.word	0x20001130
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051fa:	463a      	mov	r2, r7
 80051fc:	1d39      	adds	r1, r7, #4
 80051fe:	f107 0308 	add.w	r3, r7, #8
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f832 	bl	800426c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	9202      	str	r2, [sp, #8]
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	2300      	movs	r3, #0
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	2300      	movs	r3, #0
 8005218:	460a      	mov	r2, r1
 800521a:	4924      	ldr	r1, [pc, #144]	; (80052ac <vTaskStartScheduler+0xc0>)
 800521c:	4824      	ldr	r0, [pc, #144]	; (80052b0 <vTaskStartScheduler+0xc4>)
 800521e:	f7ff fdf9 	bl	8004e14 <xTaskCreateStatic>
 8005222:	4603      	mov	r3, r0
 8005224:	4a23      	ldr	r2, [pc, #140]	; (80052b4 <vTaskStartScheduler+0xc8>)
 8005226:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005228:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <vTaskStartScheduler+0xc8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005230:	2301      	movs	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e001      	b.n	800523a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d102      	bne.n	8005246 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005240:	f000 fd1a 	bl	8005c78 <xTimerCreateTimerTask>
 8005244:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d11b      	bne.n	8005284 <vTaskStartScheduler+0x98>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	613b      	str	r3, [r7, #16]
}
 800525e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005260:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <vTaskStartScheduler+0xcc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3354      	adds	r3, #84	; 0x54
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <vTaskStartScheduler+0xd0>)
 8005268:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <vTaskStartScheduler+0xd4>)
 800526c:	f04f 32ff 	mov.w	r2, #4294967295
 8005270:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005272:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <vTaskStartScheduler+0xd8>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <vTaskStartScheduler+0xdc>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800527e:	f001 f8d7 	bl	8006430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005282:	e00e      	b.n	80052a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d10a      	bne.n	80052a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <vTaskStartScheduler+0xb4>
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	08006e08 	.word	0x08006e08
 80052b0:	08005901 	.word	0x08005901
 80052b4:	2000112c 	.word	0x2000112c
 80052b8:	20000c34 	.word	0x20000c34
 80052bc:	20000014 	.word	0x20000014
 80052c0:	20001128 	.word	0x20001128
 80052c4:	20001114 	.word	0x20001114
 80052c8:	2000110c 	.word	0x2000110c

080052cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <vTaskSuspendAll+0x18>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a03      	ldr	r2, [pc, #12]	; (80052e4 <vTaskSuspendAll+0x18>)
 80052d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052da:	bf00      	nop
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	20001130 	.word	0x20001130

080052e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052f6:	4b42      	ldr	r3, [pc, #264]	; (8005400 <xTaskResumeAll+0x118>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <xTaskResumeAll+0x2c>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005314:	f001 f92e 	bl	8006574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005318:	4b39      	ldr	r3, [pc, #228]	; (8005400 <xTaskResumeAll+0x118>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3b01      	subs	r3, #1
 800531e:	4a38      	ldr	r2, [pc, #224]	; (8005400 <xTaskResumeAll+0x118>)
 8005320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005322:	4b37      	ldr	r3, [pc, #220]	; (8005400 <xTaskResumeAll+0x118>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d162      	bne.n	80053f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800532a:	4b36      	ldr	r3, [pc, #216]	; (8005404 <xTaskResumeAll+0x11c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d05e      	beq.n	80053f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005332:	e02f      	b.n	8005394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005334:	4b34      	ldr	r3, [pc, #208]	; (8005408 <xTaskResumeAll+0x120>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3318      	adds	r3, #24
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff f851 	bl	80043e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3304      	adds	r3, #4
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff f84c 	bl	80043e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b2d      	ldr	r3, [pc, #180]	; (800540c <xTaskResumeAll+0x124>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d903      	bls.n	8005364 <xTaskResumeAll+0x7c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a2a      	ldr	r2, [pc, #168]	; (800540c <xTaskResumeAll+0x124>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4a27      	ldr	r2, [pc, #156]	; (8005410 <xTaskResumeAll+0x128>)
 8005372:	441a      	add	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f7fe ffd7 	bl	800432e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b23      	ldr	r3, [pc, #140]	; (8005414 <xTaskResumeAll+0x12c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <xTaskResumeAll+0x130>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <xTaskResumeAll+0x120>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1cb      	bne.n	8005334 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a2:	f000 fb69 	bl	8005a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <xTaskResumeAll+0x134>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b2:	f000 f847 	bl	8005444 <xTaskIncrementTick>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <xTaskResumeAll+0x130>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f1      	bne.n	80053b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <xTaskResumeAll+0x134>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <xTaskResumeAll+0x130>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e0:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <xTaskResumeAll+0x138>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053f0:	f001 f8f0 	bl	80065d4 <vPortExitCritical>

	return xAlreadyYielded;
 80053f4:	68bb      	ldr	r3, [r7, #8]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20001130 	.word	0x20001130
 8005404:	20001108 	.word	0x20001108
 8005408:	200010c8 	.word	0x200010c8
 800540c:	20001110 	.word	0x20001110
 8005410:	20000c38 	.word	0x20000c38
 8005414:	20000c34 	.word	0x20000c34
 8005418:	2000111c 	.word	0x2000111c
 800541c:	20001118 	.word	0x20001118
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <xTaskGetTickCount+0x1c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005430:	687b      	ldr	r3, [r7, #4]
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	2000110c 	.word	0x2000110c

08005444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800544e:	4b53      	ldr	r3, [pc, #332]	; (800559c <xTaskIncrementTick+0x158>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 8095 	bne.w	8005582 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <xTaskIncrementTick+0x15c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3301      	adds	r3, #1
 800545e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005460:	4a4f      	ldr	r2, [pc, #316]	; (80055a0 <xTaskIncrementTick+0x15c>)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d120      	bne.n	80054ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800546c:	4b4d      	ldr	r3, [pc, #308]	; (80055a4 <xTaskIncrementTick+0x160>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <xTaskIncrementTick+0x48>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	603b      	str	r3, [r7, #0]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xTaskIncrementTick+0x46>
 800548c:	4b45      	ldr	r3, [pc, #276]	; (80055a4 <xTaskIncrementTick+0x160>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	4b45      	ldr	r3, [pc, #276]	; (80055a8 <xTaskIncrementTick+0x164>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a43      	ldr	r2, [pc, #268]	; (80055a4 <xTaskIncrementTick+0x160>)
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4a43      	ldr	r2, [pc, #268]	; (80055a8 <xTaskIncrementTick+0x164>)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	4b42      	ldr	r3, [pc, #264]	; (80055ac <xTaskIncrementTick+0x168>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a41      	ldr	r2, [pc, #260]	; (80055ac <xTaskIncrementTick+0x168>)
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	f000 fae5 	bl	8005a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054ae:	4b40      	ldr	r3, [pc, #256]	; (80055b0 <xTaskIncrementTick+0x16c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d349      	bcc.n	800554c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054b8:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <xTaskIncrementTick+0x160>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c2:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <xTaskIncrementTick+0x16c>)
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	601a      	str	r2, [r3, #0]
					break;
 80054ca:	e03f      	b.n	800554c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054cc:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <xTaskIncrementTick+0x160>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d203      	bcs.n	80054ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054e4:	4a32      	ldr	r2, [pc, #200]	; (80055b0 <xTaskIncrementTick+0x16c>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054ea:	e02f      	b.n	800554c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe ff79 	bl	80043e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3318      	adds	r3, #24
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe ff70 	bl	80043e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <xTaskIncrementTick+0x170>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d903      	bls.n	800551c <xTaskIncrementTick+0xd8>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <xTaskIncrementTick+0x170>)
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <xTaskIncrementTick+0x174>)
 800552a:	441a      	add	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7fe fefb 	bl	800432e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <xTaskIncrementTick+0x178>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	429a      	cmp	r2, r3
 8005544:	d3b8      	bcc.n	80054b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800554a:	e7b5      	b.n	80054b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <xTaskIncrementTick+0x178>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005552:	4919      	ldr	r1, [pc, #100]	; (80055b8 <xTaskIncrementTick+0x174>)
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d901      	bls.n	8005568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <xTaskIncrementTick+0x17c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8005570:	f7fe fe74 	bl	800425c <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <xTaskIncrementTick+0x180>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e006      	b.n	8005590 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <xTaskIncrementTick+0x17c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <xTaskIncrementTick+0x17c>)
 800558a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800558c:	f7fe fe66 	bl	800425c <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8005590:	697b      	ldr	r3, [r7, #20]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20001130 	.word	0x20001130
 80055a0:	2000110c 	.word	0x2000110c
 80055a4:	200010c0 	.word	0x200010c0
 80055a8:	200010c4 	.word	0x200010c4
 80055ac:	20001120 	.word	0x20001120
 80055b0:	20001128 	.word	0x20001128
 80055b4:	20001110 	.word	0x20001110
 80055b8:	20000c38 	.word	0x20000c38
 80055bc:	20000c34 	.word	0x20000c34
 80055c0:	20001118 	.word	0x20001118
 80055c4:	2000111c 	.word	0x2000111c

080055c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055ce:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <vTaskSwitchContext+0xb0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <vTaskSwitchContext+0xb4>)
 80055d8:	2201      	movs	r2, #1
 80055da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055dc:	e046      	b.n	800566c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80055de:	4b27      	ldr	r3, [pc, #156]	; (800567c <vTaskSwitchContext+0xb4>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e4:	4b26      	ldr	r3, [pc, #152]	; (8005680 <vTaskSwitchContext+0xb8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e010      	b.n	800560e <vTaskSwitchContext+0x46>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <vTaskSwitchContext+0x40>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	607b      	str	r3, [r7, #4]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <vTaskSwitchContext+0x3e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3b01      	subs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	491d      	ldr	r1, [pc, #116]	; (8005684 <vTaskSwitchContext+0xbc>)
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0e4      	beq.n	80055ec <vTaskSwitchContext+0x24>
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <vTaskSwitchContext+0xbc>)
 800562e:	4413      	add	r3, r2
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	3308      	adds	r3, #8
 8005644:	429a      	cmp	r2, r3
 8005646:	d104      	bne.n	8005652 <vTaskSwitchContext+0x8a>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <vTaskSwitchContext+0xc0>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <vTaskSwitchContext+0xb8>)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <vTaskSwitchContext+0xc0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3354      	adds	r3, #84	; 0x54
 8005668:	4a08      	ldr	r2, [pc, #32]	; (800568c <vTaskSwitchContext+0xc4>)
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20001130 	.word	0x20001130
 800567c:	2000111c 	.word	0x2000111c
 8005680:	20001110 	.word	0x20001110
 8005684:	20000c38 	.word	0x20000c38
 8005688:	20000c34 	.word	0x20000c34
 800568c:	20000014 	.word	0x20000014

08005690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <vTaskPlaceOnEventList+0x44>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3318      	adds	r3, #24
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fe fe59 	bl	8004376 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056c4:	2101      	movs	r1, #1
 80056c6:	6838      	ldr	r0, [r7, #0]
 80056c8:	f000 fa82 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000c34 	.word	0x20000c34

080056d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	617b      	str	r3, [r7, #20]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <vTaskPlaceOnEventListRestricted+0x54>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3318      	adds	r3, #24
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7fe fe10 	bl	800432e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005714:	f04f 33ff 	mov.w	r3, #4294967295
 8005718:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	68b8      	ldr	r0, [r7, #8]
 800571e:	f000 fa57 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
	}
 8005722:	bf00      	nop
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000c34 	.word	0x20000c34

08005730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	3318      	adds	r3, #24
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe fe41 	bl	80043e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <xTaskRemoveFromEventList+0xb0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11d      	bne.n	80057aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fe38 	bl	80043e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <xTaskRemoveFromEventList+0xb4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d903      	bls.n	800578c <xTaskRemoveFromEventList+0x5c>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <xTaskRemoveFromEventList+0xb4>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <xTaskRemoveFromEventList+0xb8>)
 800579a:	441a      	add	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe fdc3 	bl	800432e <vListInsertEnd>
 80057a8:	e005      	b.n	80057b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3318      	adds	r3, #24
 80057ae:	4619      	mov	r1, r3
 80057b0:	480e      	ldr	r0, [pc, #56]	; (80057ec <xTaskRemoveFromEventList+0xbc>)
 80057b2:	f7fe fdbc 	bl	800432e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <xTaskRemoveFromEventList+0xc0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d905      	bls.n	80057d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057c4:	2301      	movs	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <xTaskRemoveFromEventList+0xc4>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e001      	b.n	80057d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057d4:	697b      	ldr	r3, [r7, #20]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20001130 	.word	0x20001130
 80057e4:	20001110 	.word	0x20001110
 80057e8:	20000c38 	.word	0x20000c38
 80057ec:	200010c8 	.word	0x200010c8
 80057f0:	20000c34 	.word	0x20000c34
 80057f4:	2000111c 	.word	0x2000111c

080057f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <vTaskInternalSetTimeOutState+0x24>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <vTaskInternalSetTimeOutState+0x28>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	605a      	str	r2, [r3, #4]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20001120 	.word	0x20001120
 8005820:	2000110c 	.word	0x2000110c

08005824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	613b      	str	r3, [r7, #16]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005866:	f000 fe85 	bl	8006574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <xTaskCheckForTimeOut+0xbc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d102      	bne.n	800588a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	e023      	b.n	80058d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <xTaskCheckForTimeOut+0xc0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d007      	beq.n	80058a6 <xTaskCheckForTimeOut+0x82>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	e015      	b.n	80058d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d20b      	bcs.n	80058c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ff9b 	bl	80057f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e004      	b.n	80058d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058d2:	f000 fe7f 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 80058d6:	69fb      	ldr	r3, [r7, #28]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	2000110c 	.word	0x2000110c
 80058e4:	20001120 	.word	0x20001120

080058e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <vTaskMissedYield+0x14>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	2000111c 	.word	0x2000111c

08005900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005908:	f000 f854 	bl	80059b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <prvIdleTask+0x2c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d907      	bls.n	8005924 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <prvIdleTask+0x30>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005924:	f7fa fe48 	bl	80005b8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005928:	e7ee      	b.n	8005908 <prvIdleTask+0x8>
 800592a:	bf00      	nop
 800592c:	20000c38 	.word	0x20000c38
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e00c      	b.n	800595a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <prvInitialiseTaskLists+0x60>)
 800594c:	4413      	add	r3, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fcc0 	bl	80042d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3301      	adds	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b37      	cmp	r3, #55	; 0x37
 800595e:	d9ef      	bls.n	8005940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005960:	480d      	ldr	r0, [pc, #52]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005962:	f7fe fcb7 	bl	80042d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005968:	f7fe fcb4 	bl	80042d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800596c:	480c      	ldr	r0, [pc, #48]	; (80059a0 <prvInitialiseTaskLists+0x6c>)
 800596e:	f7fe fcb1 	bl	80042d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005972:	480c      	ldr	r0, [pc, #48]	; (80059a4 <prvInitialiseTaskLists+0x70>)
 8005974:	f7fe fcae 	bl	80042d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005978:	480b      	ldr	r0, [pc, #44]	; (80059a8 <prvInitialiseTaskLists+0x74>)
 800597a:	f7fe fcab 	bl	80042d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <prvInitialiseTaskLists+0x78>)
 8005980:	4a05      	ldr	r2, [pc, #20]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvInitialiseTaskLists+0x7c>)
 8005986:	4a05      	ldr	r2, [pc, #20]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000c38 	.word	0x20000c38
 8005998:	20001098 	.word	0x20001098
 800599c:	200010ac 	.word	0x200010ac
 80059a0:	200010c8 	.word	0x200010c8
 80059a4:	200010dc 	.word	0x200010dc
 80059a8:	200010f4 	.word	0x200010f4
 80059ac:	200010c0 	.word	0x200010c0
 80059b0:	200010c4 	.word	0x200010c4

080059b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ba:	e019      	b.n	80059f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059bc:	f000 fdda 	bl	8006574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c0:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <prvCheckTasksWaitingTermination+0x50>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fd0b 	bl	80043e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4a0b      	ldr	r2, [pc, #44]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <prvCheckTasksWaitingTermination+0x58>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <prvCheckTasksWaitingTermination+0x58>)
 80059e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059e6:	f000 fdf5 	bl	80065d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f810 	bl	8005a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <prvCheckTasksWaitingTermination+0x58>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e1      	bne.n	80059bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200010dc 	.word	0x200010dc
 8005a08:	20001108 	.word	0x20001108
 8005a0c:	200010f0 	.word	0x200010f0

08005a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3354      	adds	r3, #84	; 0x54
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 f8ff 	bl	8006c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d108      	bne.n	8005a3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 ff8d 	bl	8006950 <vPortFree>
				vPortFree( pxTCB );
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 ff8a 	bl	8006950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a3c:	e018      	b.n	8005a70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d103      	bne.n	8005a50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 ff81 	bl	8006950 <vPortFree>
	}
 8005a4e:	e00f      	b.n	8005a70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d00a      	beq.n	8005a70 <prvDeleteTCB+0x60>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60fb      	str	r3, [r7, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <prvDeleteTCB+0x5e>
	}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a90:	e008      	b.n	8005aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	200010c0 	.word	0x200010c0
 8005ab4:	20001128 	.word	0x20001128

08005ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <xTaskGetSchedulerState+0x34>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e008      	b.n	8005ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <xTaskGetSchedulerState+0x38>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	e001      	b.n	8005ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ade:	687b      	ldr	r3, [r7, #4]
	}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20001114 	.word	0x20001114
 8005af0:	20001130 	.word	0x20001130

08005af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d056      	beq.n	8005bb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <xTaskPriorityDisinherit+0xd0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d00a      	beq.n	8005b2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60bb      	str	r3, [r7, #8]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	1e5a      	subs	r2, r3, #1
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d02c      	beq.n	8005bb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d128      	bne.n	8005bb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fc3c 	bl	80043e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <xTaskPriorityDisinherit+0xd4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d903      	bls.n	8005b98 <xTaskPriorityDisinherit+0xa4>
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <xTaskPriorityDisinherit+0xd4>)
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <xTaskPriorityDisinherit+0xd8>)
 8005ba6:	441a      	add	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f7fe fbbd 	bl	800432e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bb8:	697b      	ldr	r3, [r7, #20]
	}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000c34 	.word	0x20000c34
 8005bc8:	20001110 	.word	0x20001110
 8005bcc:	20000c38 	.word	0x20000c38

08005bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bda:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be0:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fbfe 	bl	80043e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d10a      	bne.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4819      	ldr	r0, [pc, #100]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c04:	f7fe fb93 	bl	800432e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c08:	e026      	b.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d209      	bcs.n	8005c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fba1 	bl	8004376 <vListInsert>
}
 8005c34:	e010      	b.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fe fb97 	bl	8004376 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d202      	bcs.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	2000110c 	.word	0x2000110c
 8005c64:	20000c34 	.word	0x20000c34
 8005c68:	200010f4 	.word	0x200010f4
 8005c6c:	200010c4 	.word	0x200010c4
 8005c70:	200010c0 	.word	0x200010c0
 8005c74:	20001128 	.word	0x20001128

08005c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c82:	f000 fb07 	bl	8006294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c86:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <xTimerCreateTimerTask+0x80>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d021      	beq.n	8005cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c96:	1d3a      	adds	r2, r7, #4
 8005c98:	f107 0108 	add.w	r1, r7, #8
 8005c9c:	f107 030c 	add.w	r3, r7, #12
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe fafd 	bl	80042a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	9202      	str	r2, [sp, #8]
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	4910      	ldr	r1, [pc, #64]	; (8005cfc <xTimerCreateTimerTask+0x84>)
 8005cba:	4811      	ldr	r0, [pc, #68]	; (8005d00 <xTimerCreateTimerTask+0x88>)
 8005cbc:	f7ff f8aa 	bl	8004e14 <xTaskCreateStatic>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <xTimerCreateTimerTask+0x8c>)
 8005cc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <xTimerCreateTimerTask+0x8c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	613b      	str	r3, [r7, #16]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20001164 	.word	0x20001164
 8005cfc:	08006e10 	.word	0x08006e10
 8005d00:	08005e3d 	.word	0x08005e3d
 8005d04:	20001168 	.word	0x20001168

08005d08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	623b      	str	r3, [r7, #32]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02a      	beq.n	8005d94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	dc18      	bgt.n	8005d82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d50:	f7ff feb2 	bl	8005ab8 <xTaskGetSchedulerState>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d109      	bne.n	8005d6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f107 0110 	add.w	r1, r7, #16
 8005d62:	2300      	movs	r3, #0
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	f7fe fc6d 	bl	8004644 <xQueueGenericSend>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d6c:	e012      	b.n	8005d94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f107 0110 	add.w	r1, r7, #16
 8005d76:	2300      	movs	r3, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f7fe fc63 	bl	8004644 <xQueueGenericSend>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d80:	e008      	b.n	8005d94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f107 0110 	add.w	r1, r7, #16
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	f7fe fd57 	bl	8004840 <xQueueGenericSendFromISR>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	; 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20001164 	.word	0x20001164

08005da4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <prvProcessExpiredTimer+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fb13 	bl	80043e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d022      	beq.n	8005e16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	18d1      	adds	r1, r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	6978      	ldr	r0, [r7, #20]
 8005dde:	f000 f8d1 	bl	8005f84 <prvInsertTimerInActiveList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01f      	beq.n	8005e28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	2100      	movs	r1, #0
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7ff ff88 	bl	8005d08 <xTimerGenericCommand>
 8005df8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d113      	bne.n	8005e28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	4798      	blx	r3
}
 8005e30:	bf00      	nop
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2000115c 	.word	0x2000115c

08005e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f857 	bl	8005efc <prvGetNextExpireTime>
 8005e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f803 	bl	8005e60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e5a:	f000 f8d5 	bl	8006008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e5e:	e7f1      	b.n	8005e44 <prvTimerTask+0x8>

08005e60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e6a:	f7ff fa2f 	bl	80052cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f866 	bl	8005f44 <prvSampleTimeNow>
 8005e78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d130      	bne.n	8005ee2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d806      	bhi.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e8e:	f7ff fa2b 	bl	80052e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff85 	bl	8005da4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e9a:	e024      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <prvProcessTimerOrBlockTask+0x90>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <prvProcessTimerOrBlockTask+0x50>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <prvProcessTimerOrBlockTask+0x52>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvProcessTimerOrBlockTask+0x94>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fe ff73 	bl	8004dac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ec6:	f7ff fa0f 	bl	80052e8 <xTaskResumeAll>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvProcessTimerOrBlockTask+0x98>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
}
 8005ee0:	e001      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ee2:	f7ff fa01 	bl	80052e8 <xTaskResumeAll>
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20001160 	.word	0x20001160
 8005ef4:	20001164 	.word	0x20001164
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <prvGetNextExpireTime+0x16>
 8005f0e:	2201      	movs	r2, #1
 8005f10:	e000      	b.n	8005f14 <prvGetNextExpireTime+0x18>
 8005f12:	2200      	movs	r2, #0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e001      	b.n	8005f30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	2000115c 	.word	0x2000115c

08005f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f4c:	f7ff fa6a 	bl	8005424 <xTaskGetTickCount>
 8005f50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d205      	bcs.n	8005f68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f5c:	f000 f936 	bl	80061cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f6e:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	2000116c 	.word	0x2000116c

08005f84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d812      	bhi.n	8005fd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e01b      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <prvInsertTimerInActiveList+0x7c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fe f9d4 	bl	8004376 <vListInsert>
 8005fce:	e012      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d206      	bcs.n	8005fe6 <prvInsertTimerInActiveList+0x62>
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e007      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <prvInsertTimerInActiveList+0x80>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fe f9c0 	bl	8004376 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20001160 	.word	0x20001160
 8006004:	2000115c 	.word	0x2000115c

08006008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	e0ca      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da18      	bge.n	8006048 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	3304      	adds	r3, #4
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61fb      	str	r3, [r7, #28]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603e:	6850      	ldr	r0, [r2, #4]
 8006040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	4611      	mov	r1, r2
 8006046:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f2c0 80aa 	blt.w	80061a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe f9c1 	bl	80043e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006066:	463b      	mov	r3, r7
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff6b 	bl	8005f44 <prvSampleTimeNow>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b09      	cmp	r3, #9
 8006074:	f200 8097 	bhi.w	80061a6 <prvProcessReceivedCommands+0x19e>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <prvProcessReceivedCommands+0x78>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	0800611d 	.word	0x0800611d
 8006090:	08006131 	.word	0x08006131
 8006094:	0800617b 	.word	0x0800617b
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060a9 	.word	0x080060a9
 80060a0:	0800611d 	.word	0x0800611d
 80060a4:	08006131 	.word	0x08006131
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f7ff ff5c 	bl	8005f84 <prvInsertTimerInActiveList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d069      	beq.n	80061a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05e      	beq.n	80061a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	441a      	add	r2, r3
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fa:	f7ff fe05 	bl	8005d08 <xTimerGenericCommand>
 80060fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d14f      	bne.n	80061a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	61bb      	str	r3, [r7, #24]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800612e:	e03a      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	617b      	str	r3, [r7, #20]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	18d1      	adds	r1, r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006174:	f7ff ff06 	bl	8005f84 <prvInsertTimerInActiveList>
					break;
 8006178:	e015      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618a:	f000 fbe1 	bl	8006950 <vPortFree>
 800618e:	e00a      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061a2:	e000      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a6:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <prvProcessReceivedCommands+0x1c0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1d39      	adds	r1, r7, #4
 80061ac:	2200      	movs	r2, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fbe2 	bl	8004978 <xQueueReceive>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f af2a 	bne.w	8006010 <prvProcessReceivedCommands+0x8>
	}
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3730      	adds	r7, #48	; 0x30
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20001164 	.word	0x20001164

080061cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d2:	e048      	b.n	8006266 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061d4:	4b2d      	ldr	r3, [pc, #180]	; (800628c <prvSwitchTimerLists+0xc0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b2b      	ldr	r3, [pc, #172]	; (800628c <prvSwitchTimerLists+0xc0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe f8fb 	bl	80043e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02e      	beq.n	8006266 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90e      	bls.n	8006238 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006226:	4b19      	ldr	r3, [pc, #100]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe f8a0 	bl	8004376 <vListInsert>
 8006236:	e016      	b.n	8006266 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006238:	2300      	movs	r3, #0
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fd60 	bl	8005d08 <xTimerGenericCommand>
 8006248:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	603b      	str	r3, [r7, #0]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1b1      	bne.n	80061d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <prvSwitchTimerLists+0xc4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a04      	ldr	r2, [pc, #16]	; (800628c <prvSwitchTimerLists+0xc0>)
 800627c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <prvSwitchTimerLists+0xc4>)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	2000115c 	.word	0x2000115c
 8006290:	20001160 	.word	0x20001160

08006294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800629a:	f000 f96b 	bl	8006574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800629e:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d120      	bne.n	80062e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062a6:	4814      	ldr	r0, [pc, #80]	; (80062f8 <prvCheckForValidListAndQueue+0x64>)
 80062a8:	f7fe f814 	bl	80042d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062ac:	4813      	ldr	r0, [pc, #76]	; (80062fc <prvCheckForValidListAndQueue+0x68>)
 80062ae:	f7fe f811 	bl	80042d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <prvCheckForValidListAndQueue+0x6c>)
 80062b4:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <prvCheckForValidListAndQueue+0x64>)
 80062b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <prvCheckForValidListAndQueue+0x70>)
 80062ba:	4a10      	ldr	r2, [pc, #64]	; (80062fc <prvCheckForValidListAndQueue+0x68>)
 80062bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062be:	2300      	movs	r3, #0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <prvCheckForValidListAndQueue+0x74>)
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <prvCheckForValidListAndQueue+0x78>)
 80062c6:	2110      	movs	r1, #16
 80062c8:	200a      	movs	r0, #10
 80062ca:	f7fe f91f 	bl	800450c <xQueueGenericCreateStatic>
 80062ce:	4603      	mov	r3, r0
 80062d0:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	490b      	ldr	r1, [pc, #44]	; (8006310 <prvCheckForValidListAndQueue+0x7c>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fd38 	bl	8004d58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f000 f974 	bl	80065d4 <vPortExitCritical>
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20001164 	.word	0x20001164
 80062f8:	20001134 	.word	0x20001134
 80062fc:	20001148 	.word	0x20001148
 8006300:	2000115c 	.word	0x2000115c
 8006304:	20001160 	.word	0x20001160
 8006308:	20001210 	.word	0x20001210
 800630c:	20001170 	.word	0x20001170
 8006310:	08006e18 	.word	0x08006e18

08006314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b04      	subs	r3, #4
 8006324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800632c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b04      	subs	r3, #4
 8006332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3b04      	subs	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006344:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <pxPortInitialiseStack+0x64>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b14      	subs	r3, #20
 800634e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3b04      	subs	r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f06f 0202 	mvn.w	r2, #2
 8006362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b20      	subs	r3, #32
 8006368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800636a:	68fb      	ldr	r3, [r7, #12]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	0800637d 	.word	0x0800637d

0800637c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <prvTaskExitError+0x54>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d00a      	beq.n	80063a6 <prvTaskExitError+0x2a>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <prvTaskExitError+0x28>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60bb      	str	r3, [r7, #8]
}
 80063b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ba:	bf00      	nop
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0fc      	beq.n	80063bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000010 	.word	0x20000010
	...

080063e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <pxCurrentTCBConst2>)
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	6808      	ldr	r0, [r1, #0]
 80063e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	f380 8809 	msr	PSP, r0
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8811 	msr	BASEPRI, r0
 80063fa:	4770      	bx	lr
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst2>:
 8006400:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006408:	4808      	ldr	r0, [pc, #32]	; (800642c <prvPortStartFirstTask+0x24>)
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f380 8808 	msr	MSP, r0
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8814 	msr	CONTROL, r0
 800641a:	b662      	cpsie	i
 800641c:	b661      	cpsie	f
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	df00      	svc	0
 8006428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800642a:	bf00      	nop
 800642c:	e000ed08 	.word	0xe000ed08

08006430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006436:	4b46      	ldr	r3, [pc, #280]	; (8006550 <xPortStartScheduler+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a46      	ldr	r2, [pc, #280]	; (8006554 <xPortStartScheduler+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10a      	bne.n	8006456 <xPortStartScheduler+0x26>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <xPortStartScheduler+0x120>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <xPortStartScheduler+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10a      	bne.n	8006476 <xPortStartScheduler+0x46>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <xPortStartScheduler+0x12c>)
 8006478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4b31      	ldr	r3, [pc, #196]	; (8006560 <xPortStartScheduler+0x130>)
 800649c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800649e:	4b31      	ldr	r3, [pc, #196]	; (8006564 <xPortStartScheduler+0x134>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a4:	e009      	b.n	80064ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <xPortStartScheduler+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xPortStartScheduler+0x134>)
 80064ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d0ef      	beq.n	80064a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064c6:	4b27      	ldr	r3, [pc, #156]	; (8006564 <xPortStartScheduler+0x134>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1c3 0307 	rsb	r3, r3, #7
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d00a      	beq.n	80064e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <xPortStartScheduler+0x134>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <xPortStartScheduler+0x134>)
 80064f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <xPortStartScheduler+0x134>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064fa:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <xPortStartScheduler+0x134>)
 80064fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006506:	4b18      	ldr	r3, [pc, #96]	; (8006568 <xPortStartScheduler+0x138>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <xPortStartScheduler+0x138>)
 800650c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <xPortStartScheduler+0x138>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a14      	ldr	r2, [pc, #80]	; (8006568 <xPortStartScheduler+0x138>)
 8006518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800651c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800651e:	f000 f8dd 	bl	80066dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <xPortStartScheduler+0x13c>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006528:	f000 f8fc 	bl	8006724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xPortStartScheduler+0x140>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <xPortStartScheduler+0x140>)
 8006532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006538:	f7ff ff66 	bl	8006408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800653c:	f7ff f844 	bl	80055c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006540:	f7ff ff1c 	bl	800637c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000ed00 	.word	0xe000ed00
 8006554:	410fc271 	.word	0x410fc271
 8006558:	410fc270 	.word	0x410fc270
 800655c:	e000e400 	.word	0xe000e400
 8006560:	20001260 	.word	0x20001260
 8006564:	20001264 	.word	0x20001264
 8006568:	e000ed20 	.word	0xe000ed20
 800656c:	20000010 	.word	0x20000010
 8006570:	e000ef34 	.word	0xe000ef34

08006574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	607b      	str	r3, [r7, #4]
}
 800658c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <vPortEnterCritical+0x58>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <vPortEnterCritical+0x58>)
 8006596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <vPortEnterCritical+0x58>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10f      	bne.n	80065c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortEnterCritical+0x5c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	603b      	str	r3, [r7, #0]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <vPortEnterCritical+0x4a>
	}
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000010 	.word	0x20000010
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <vPortExitCritical+0x50>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <vPortExitCritical+0x24>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
 80065f6:	e7fe      	b.n	80065f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <vPortExitCritical+0x50>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <vPortExitCritical+0x50>)
 8006600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <vPortExitCritical+0x50>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <vPortExitCritical+0x42>
 800660a:	2300      	movs	r3, #0
 800660c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f383 8811 	msr	BASEPRI, r3
}
 8006614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000010 	.word	0x20000010
	...

08006630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006630:	f3ef 8009 	mrs	r0, PSP
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <pxCurrentTCBConst>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f01e 0f10 	tst.w	lr, #16
 8006640:	bf08      	it	eq
 8006642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006654:	f380 8811 	msr	BASEPRI, r0
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f7fe ffb2 	bl	80055c8 <vTaskSwitchContext>
 8006664:	f04f 0000 	mov.w	r0, #0
 8006668:	f380 8811 	msr	BASEPRI, r0
 800666c:	bc09      	pop	{r0, r3}
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006676:	f01e 0f10 	tst.w	lr, #16
 800667a:	bf08      	it	eq
 800667c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006680:	f380 8809 	msr	PSP, r0
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst>:
 8006690:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
}
 80066b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066b2:	f7fe fec7 	bl	8005444 <xTaskIncrementTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <xPortSysTickHandler+0x40>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <vPortSetupTimerInterrupt+0x38>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <vPortSetupTimerInterrupt+0x3c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <vPortSetupTimerInterrupt+0x40>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <vPortSetupTimerInterrupt+0x44>)
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	e000e010 	.word	0xe000e010
 8006714:	e000e018 	.word	0xe000e018
 8006718:	20000004 	.word	0x20000004
 800671c:	10624dd3 	.word	0x10624dd3
 8006720:	e000e014 	.word	0xe000e014

08006724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006734 <vPortEnableVFP+0x10>
 8006728:	6801      	ldr	r1, [r0, #0]
 800672a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800672e:	6001      	str	r1, [r0, #0]
 8006730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006732:	bf00      	nop
 8006734:	e000ed88 	.word	0xe000ed88

08006738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800673e:	f3ef 8305 	mrs	r3, IPSR
 8006742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d914      	bls.n	8006774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <vPortValidateInterruptPriority+0x70>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006754:	4b15      	ldr	r3, [pc, #84]	; (80067ac <vPortValidateInterruptPriority+0x74>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	7afa      	ldrb	r2, [r7, #11]
 800675a:	429a      	cmp	r2, r3
 800675c:	d20a      	bcs.n	8006774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <vPortValidateInterruptPriority+0x78>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <vPortValidateInterruptPriority+0x7c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d90a      	bls.n	800679a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	603b      	str	r3, [r7, #0]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <vPortValidateInterruptPriority+0x60>
	}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000e3f0 	.word	0xe000e3f0
 80067ac:	20001260 	.word	0x20001260
 80067b0:	e000ed0c 	.word	0xe000ed0c
 80067b4:	20001264 	.word	0x20001264

080067b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067c4:	f7fe fd82 	bl	80052cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c8:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <pvPortMalloc+0x180>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d0:	f000 f920 	bl	8006a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <pvPortMalloc+0x184>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8093 	bne.w	8006908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01d      	beq.n	8006824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067e8:	2208      	movs	r2, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0x6c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d06e      	beq.n	8006908 <pvPortMalloc+0x150>
 800682a:	4b45      	ldr	r3, [pc, #276]	; (8006940 <pvPortMalloc+0x188>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d869      	bhi.n	8006908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006834:	4b43      	ldr	r3, [pc, #268]	; (8006944 <pvPortMalloc+0x18c>)
 8006836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006838:	4b42      	ldr	r3, [pc, #264]	; (8006944 <pvPortMalloc+0x18c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683e:	e004      	b.n	800684a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <pvPortMalloc+0xa4>
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800685c:	4b36      	ldr	r3, [pc, #216]	; (8006938 <pvPortMalloc+0x180>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d050      	beq.n	8006908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2208      	movs	r2, #8
 800686c:	4413      	add	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	2308      	movs	r3, #8
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d91f      	bls.n	80068c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <pvPortMalloc+0xf8>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	613b      	str	r3, [r7, #16]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f000 f908 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <pvPortMalloc+0x188>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <pvPortMalloc+0x188>)
 80068d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068d6:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <pvPortMalloc+0x188>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <pvPortMalloc+0x190>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d203      	bcs.n	80068ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <pvPortMalloc+0x188>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <pvPortMalloc+0x190>)
 80068e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <pvPortMalloc+0x184>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <pvPortMalloc+0x194>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <pvPortMalloc+0x194>)
 8006906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006908:	f7fe fcee 	bl	80052e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <pvPortMalloc+0x174>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <pvPortMalloc+0x172>
	return pvReturn;
 800692c:	69fb      	ldr	r3, [r7, #28]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20001e70 	.word	0x20001e70
 800693c:	20001e84 	.word	0x20001e84
 8006940:	20001e74 	.word	0x20001e74
 8006944:	20001e68 	.word	0x20001e68
 8006948:	20001e78 	.word	0x20001e78
 800694c:	20001e7c 	.word	0x20001e7c

08006950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04d      	beq.n	80069fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006962:	2308      	movs	r3, #8
 8006964:	425b      	negs	r3, r3
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <vPortFree+0xb8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vPortFree+0x44>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	60fb      	str	r3, [r7, #12]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <vPortFree+0x62>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60bb      	str	r3, [r7, #8]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <vPortFree+0xb8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11a      	bne.n	80069fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <vPortFree+0xb8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069d8:	f7fe fc78 	bl	80052cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <vPortFree+0xbc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4413      	add	r3, r2
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <vPortFree+0xbc>)
 80069e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f000 f874 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <vPortFree+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a06      	ldr	r2, [pc, #24]	; (8006a10 <vPortFree+0xc0>)
 80069f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069fa:	f7fe fc75 	bl	80052e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20001e84 	.word	0x20001e84
 8006a0c:	20001e74 	.word	0x20001e74
 8006a10:	20001e80 	.word	0x20001e80

08006a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <prvHeapInit+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3307      	adds	r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <prvHeapInit+0xac>)
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a60:	2208      	movs	r2, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <prvHeapInit+0xb8>)
 8006aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <prvHeapInit+0xbc>)
 8006aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvHeapInit+0xc0>)
 8006aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20001268 	.word	0x20001268
 8006ac4:	20001e68 	.word	0x20001e68
 8006ac8:	20001e70 	.word	0x20001e70
 8006acc:	20001e78 	.word	0x20001e78
 8006ad0:	20001e74 	.word	0x20001e74
 8006ad4:	20001e84 	.word	0x20001e84

08006ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <prvInsertBlockIntoFreeList+0xac>)
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <prvInsertBlockIntoFreeList+0x14>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d8f7      	bhi.n	8006ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d108      	bne.n	8006b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	441a      	add	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d118      	bne.n	8006b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d00d      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e008      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d002      	beq.n	8006b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20001e68 	.word	0x20001e68
 8006b88:	20001e70 	.word	0x20001e70

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f8f2 	bl	8006d88 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006f50 	.word	0x08006f50
 8006bc8:	08006f50 	.word	0x08006f50
 8006bcc:	08006f50 	.word	0x08006f50
 8006bd0:	08006f54 	.word	0x08006f54

08006bd4 <__retarget_lock_acquire_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_release_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <memcpy>:
 8006bd8:	440a      	add	r2, r1
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be0:	d100      	bne.n	8006be4 <memcpy+0xc>
 8006be2:	4770      	bx	lr
 8006be4:	b510      	push	{r4, lr}
 8006be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	d1f9      	bne.n	8006be6 <memcpy+0xe>
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <memset>:
 8006bf4:	4402      	add	r2, r0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <memset+0xa>
 8006bfc:	4770      	bx	lr
 8006bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006c02:	e7f9      	b.n	8006bf8 <memset+0x4>

08006c04 <cleanup_glue>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	6809      	ldr	r1, [r1, #0]
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	b109      	cbz	r1, 8006c12 <cleanup_glue+0xe>
 8006c0e:	f7ff fff9 	bl	8006c04 <cleanup_glue>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c1a:	f000 b869 	b.w	8006cf0 <_free_r>
	...

08006c20 <_reclaim_reent>:
 8006c20:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <_reclaim_reent+0xb4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4283      	cmp	r3, r0
 8006c26:	b570      	push	{r4, r5, r6, lr}
 8006c28:	4604      	mov	r4, r0
 8006c2a:	d051      	beq.n	8006cd0 <_reclaim_reent+0xb0>
 8006c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c2e:	b143      	cbz	r3, 8006c42 <_reclaim_reent+0x22>
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d14a      	bne.n	8006ccc <_reclaim_reent+0xac>
 8006c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	b111      	cbz	r1, 8006c42 <_reclaim_reent+0x22>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 f857 	bl	8006cf0 <_free_r>
 8006c42:	6961      	ldr	r1, [r4, #20]
 8006c44:	b111      	cbz	r1, 8006c4c <_reclaim_reent+0x2c>
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f852 	bl	8006cf0 <_free_r>
 8006c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c4e:	b111      	cbz	r1, 8006c56 <_reclaim_reent+0x36>
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f84d 	bl	8006cf0 <_free_r>
 8006c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c58:	b111      	cbz	r1, 8006c60 <_reclaim_reent+0x40>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 f848 	bl	8006cf0 <_free_r>
 8006c60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c62:	b111      	cbz	r1, 8006c6a <_reclaim_reent+0x4a>
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 f843 	bl	8006cf0 <_free_r>
 8006c6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c6c:	b111      	cbz	r1, 8006c74 <_reclaim_reent+0x54>
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f83e 	bl	8006cf0 <_free_r>
 8006c74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c76:	b111      	cbz	r1, 8006c7e <_reclaim_reent+0x5e>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 f839 	bl	8006cf0 <_free_r>
 8006c7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c80:	b111      	cbz	r1, 8006c88 <_reclaim_reent+0x68>
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f834 	bl	8006cf0 <_free_r>
 8006c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c8a:	b111      	cbz	r1, 8006c92 <_reclaim_reent+0x72>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 f82f 	bl	8006cf0 <_free_r>
 8006c92:	69a3      	ldr	r3, [r4, #24]
 8006c94:	b1e3      	cbz	r3, 8006cd0 <_reclaim_reent+0xb0>
 8006c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4798      	blx	r3
 8006c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c9e:	b1b9      	cbz	r1, 8006cd0 <_reclaim_reent+0xb0>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ca6:	f7ff bfad 	b.w	8006c04 <cleanup_glue>
 8006caa:	5949      	ldr	r1, [r1, r5]
 8006cac:	b941      	cbnz	r1, 8006cc0 <_reclaim_reent+0xa0>
 8006cae:	3504      	adds	r5, #4
 8006cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb2:	2d80      	cmp	r5, #128	; 0x80
 8006cb4:	68d9      	ldr	r1, [r3, #12]
 8006cb6:	d1f8      	bne.n	8006caa <_reclaim_reent+0x8a>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f819 	bl	8006cf0 <_free_r>
 8006cbe:	e7ba      	b.n	8006c36 <_reclaim_reent+0x16>
 8006cc0:	680e      	ldr	r6, [r1, #0]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f814 	bl	8006cf0 <_free_r>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	e7ef      	b.n	8006cac <_reclaim_reent+0x8c>
 8006ccc:	2500      	movs	r5, #0
 8006cce:	e7ef      	b.n	8006cb0 <_reclaim_reent+0x90>
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000014 	.word	0x20000014

08006cd8 <__malloc_lock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__malloc_lock+0x8>)
 8006cda:	f7ff bf7b 	b.w	8006bd4 <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20001e88 	.word	0x20001e88

08006ce4 <__malloc_unlock>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__malloc_unlock+0x8>)
 8006ce6:	f7ff bf76 	b.w	8006bd6 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	20001e88 	.word	0x20001e88

08006cf0 <_free_r>:
 8006cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	d044      	beq.n	8006d80 <_free_r+0x90>
 8006cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cfa:	9001      	str	r0, [sp, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006d02:	bfb8      	it	lt
 8006d04:	18e4      	addlt	r4, r4, r3
 8006d06:	f7ff ffe7 	bl	8006cd8 <__malloc_lock>
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <_free_r+0x94>)
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	6813      	ldr	r3, [r2, #0]
 8006d10:	b933      	cbnz	r3, 8006d20 <_free_r+0x30>
 8006d12:	6063      	str	r3, [r4, #4]
 8006d14:	6014      	str	r4, [r2, #0]
 8006d16:	b003      	add	sp, #12
 8006d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d1c:	f7ff bfe2 	b.w	8006ce4 <__malloc_unlock>
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d908      	bls.n	8006d36 <_free_r+0x46>
 8006d24:	6825      	ldr	r5, [r4, #0]
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	bf01      	itttt	eq
 8006d2c:	6819      	ldreq	r1, [r3, #0]
 8006d2e:	685b      	ldreq	r3, [r3, #4]
 8006d30:	1949      	addeq	r1, r1, r5
 8006d32:	6021      	streq	r1, [r4, #0]
 8006d34:	e7ed      	b.n	8006d12 <_free_r+0x22>
 8006d36:	461a      	mov	r2, r3
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	b10b      	cbz	r3, 8006d40 <_free_r+0x50>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d9fa      	bls.n	8006d36 <_free_r+0x46>
 8006d40:	6811      	ldr	r1, [r2, #0]
 8006d42:	1855      	adds	r5, r2, r1
 8006d44:	42a5      	cmp	r5, r4
 8006d46:	d10b      	bne.n	8006d60 <_free_r+0x70>
 8006d48:	6824      	ldr	r4, [r4, #0]
 8006d4a:	4421      	add	r1, r4
 8006d4c:	1854      	adds	r4, r2, r1
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	d1e0      	bne.n	8006d16 <_free_r+0x26>
 8006d54:	681c      	ldr	r4, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	6053      	str	r3, [r2, #4]
 8006d5a:	4421      	add	r1, r4
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	e7da      	b.n	8006d16 <_free_r+0x26>
 8006d60:	d902      	bls.n	8006d68 <_free_r+0x78>
 8006d62:	230c      	movs	r3, #12
 8006d64:	6003      	str	r3, [r0, #0]
 8006d66:	e7d6      	b.n	8006d16 <_free_r+0x26>
 8006d68:	6825      	ldr	r5, [r4, #0]
 8006d6a:	1961      	adds	r1, r4, r5
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	bf04      	itt	eq
 8006d70:	6819      	ldreq	r1, [r3, #0]
 8006d72:	685b      	ldreq	r3, [r3, #4]
 8006d74:	6063      	str	r3, [r4, #4]
 8006d76:	bf04      	itt	eq
 8006d78:	1949      	addeq	r1, r1, r5
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	6054      	str	r4, [r2, #4]
 8006d7e:	e7ca      	b.n	8006d16 <_free_r+0x26>
 8006d80:	b003      	add	sp, #12
 8006d82:	bd30      	pop	{r4, r5, pc}
 8006d84:	20001e8c 	.word	0x20001e8c

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
