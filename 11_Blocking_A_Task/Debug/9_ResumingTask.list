
9_ResumingTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e70  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08007168  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e2c  20000078  080071dc  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001ea4  080071dc  00021ea4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000257aa  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000455c  00000000  00000000  00045852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021f0  00000000  00000000  00049db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002078  00000000  00000000  0004bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004ec1  00000000  00000000  0004e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fa5e  00000000  00000000  00052ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee404  00000000  00000000  00072937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00160d3b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093d8  00000000  00000000  00160d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08006f98 	.word	0x08006f98

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08006f98 	.word	0x08006f98

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
void vBlueLedControllerTask (void *pvParameters);
void vRedLedControllerTask (void *pvParameters);
void vGreenLedControllerTask (void *pvParameters);

int main (void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8

	HAL_Init ();
 80004ea:	f000 fc25 	bl	8000d38 <HAL_Init>
	SystemClock_Config ();
 80004ee:	f000 f8b9 	bl	8000664 <SystemClock_Config>
	MX_GPIO_Init ();
 80004f2:	f000 f9a1 	bl	8000838 <MX_GPIO_Init>
	MX_LPUART1_UART_Init ();
 80004f6:	f000 f92b 	bl	8000750 <MX_LPUART1_UART_Init>
	MX_USB_PCD_Init ();
 80004fa:	f000 f975 	bl	80007e8 <MX_USB_PCD_Init>

	xTaskCreate (vBlueLedControllerTask,
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0x5c>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <main+0x60>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <main+0x64>)
 800050e:	f004 fd1e 	bl	8004f4e <xTaskCreate>
	             100,
	             NULL,
	             1,
	             &blueHandle);

	xTaskCreate (vRedLedControllerTask,
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <main+0x68>)
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	490c      	ldr	r1, [pc, #48]	; (8000550 <main+0x6c>)
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x70>)
 8000522:	f004 fd14 	bl	8004f4e <xTaskCreate>
	             100,
	             NULL,
	             1,
	             &redHandle);

	xTaskCreate (vGreenLedControllerTask,
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x74>)
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	490a      	ldr	r1, [pc, #40]	; (800055c <main+0x78>)
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x7c>)
 8000536:	f004 fd0a 	bl	8004f4e <xTaskCreate>
	             100,
	             NULL,
	             1,
	             &greenHandle);

	vTaskStartScheduler ();
 800053a:	f004 ff69 	bl	8005410 <vTaskStartScheduler>

	while (1)
 800053e:	e7fe      	b.n	800053e <main+0x5a>
 8000540:	200000a0 	.word	0x200000a0
 8000544:	08006fb0 	.word	0x08006fb0
 8000548:	08000565 	.word	0x08000565
 800054c:	200000a4 	.word	0x200000a4
 8000550:	08006fc4 	.word	0x08006fc4
 8000554:	08000595 	.word	0x08000595
 8000558:	200000a8 	.word	0x200000a8
 800055c:	08006fd8 	.word	0x08006fd8
 8000560:	080005f9 	.word	0x080005f9

08000564 <vBlueLedControllerTask>:
	{
	}
}

void vBlueLedControllerTask (void *pvParameters)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while (1)
	{
//		printf("Blue LED controller task running.. \n\r");
		BlueTaskProfiler++;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <vBlueLedControllerTask+0x28>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a06      	ldr	r2, [pc, #24]	; (800058c <vBlueLedControllerTask+0x28>)
 8000574:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 100000; i++) {}
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e002      	b.n	8000582 <vBlueLedControllerTask+0x1e>
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4a02      	ldr	r2, [pc, #8]	; (8000590 <vBlueLedControllerTask+0x2c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	ddf8      	ble.n	800057c <vBlueLedControllerTask+0x18>
		BlueTaskProfiler++;
 800058a:	e7ef      	b.n	800056c <vBlueLedControllerTask+0x8>
 800058c:	20000094 	.word	0x20000094
 8000590:	0001869f 	.word	0x0001869f

08000594 <vRedLedControllerTask>:
	}
}


void vRedLedControllerTask (void *pvParameters)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	while (1)
	{
//		printf("Red LED controller task running.. \n\r");
		RedTaskProfiler++;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <vRedLedControllerTask+0x50>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <vRedLedControllerTask+0x50>)
 80005a4:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 100000; i++) {}
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e002      	b.n	80005b2 <vRedLedControllerTask+0x1e>
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <vRedLedControllerTask+0x54>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	ddf8      	ble.n	80005ac <vRedLedControllerTask+0x18>
		suspendMonitor++;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <vRedLedControllerTask+0x58>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <vRedLedControllerTask+0x58>)
 80005c2:	6013      	str	r3, [r2, #0]

		if(suspendMonitor >= 50)
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <vRedLedControllerTask+0x58>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b31      	cmp	r3, #49	; 0x31
 80005ca:	d9e7      	bls.n	800059c <vRedLedControllerTask+0x8>
		{
			isSuspended = true;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <vRedLedControllerTask+0x5c>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
			suspendMonitor = 0;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <vRedLedControllerTask+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
			vTaskSuspend(redHandle);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <vRedLedControllerTask+0x60>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fe11 	bl	8005204 <vTaskSuspend>
		RedTaskProfiler++;
 80005e2:	e7db      	b.n	800059c <vRedLedControllerTask+0x8>
 80005e4:	20000098 	.word	0x20000098
 80005e8:	0001869f 	.word	0x0001869f
 80005ec:	200000ac 	.word	0x200000ac
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	200000a4 	.word	0x200000a4

080005f8 <vGreenLedControllerTask>:
		}
	}
}

void vGreenLedControllerTask (void *pvParameters)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while (1)
	{
//		printf("Green LED controller task running.. \n\r");
		GreenTaskProfiler++;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <vGreenLedControllerTask+0x58>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <vGreenLedControllerTask+0x58>)
 8000608:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 100000; i++) {}
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e002      	b.n	8000616 <vGreenLedControllerTask+0x1e>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <vGreenLedControllerTask+0x5c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	ddf8      	ble.n	8000610 <vGreenLedControllerTask+0x18>
		if(isSuspended)
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <vGreenLedControllerTask+0x60>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0ec      	beq.n	8000600 <vGreenLedControllerTask+0x8>
		{
			resumeMonitor++;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <vGreenLedControllerTask+0x64>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <vGreenLedControllerTask+0x64>)
 800062e:	6013      	str	r3, [r2, #0]
			if(resumeMonitor >= 30)
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <vGreenLedControllerTask+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b1d      	cmp	r3, #29
 8000636:	d9e3      	bls.n	8000600 <vGreenLedControllerTask+0x8>
			{
				vTaskResume(redHandle);
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <vGreenLedControllerTask+0x68>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fe89 	bl	8005354 <vTaskResume>
				resumeMonitor = 0;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <vGreenLedControllerTask+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
				isSuspended = false;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <vGreenLedControllerTask+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		GreenTaskProfiler++;
 800064e:	e7d7      	b.n	8000600 <vGreenLedControllerTask+0x8>
 8000650:	2000009c 	.word	0x2000009c
 8000654:	0001869f 	.word	0x0001869f
 8000658:	200000b4 	.word	0x200000b4
 800065c:	200000b0 	.word	0x200000b0
 8000660:	200000a4 	.word	0x200000a4

08000664 <SystemClock_Config>:
	HAL_UART_Transmit (&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

void SystemClock_Config (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09a      	sub	sp, #104	; 0x68
 8000668:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2248      	movs	r2, #72	; 0x48
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fbc6 	bl	8006e04 <memset>
		{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	619a      	str	r2, [r3, #24]
		{ 0 };

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800068a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000698:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800069a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	f023 0303 	bic.w	r3, r3, #3
 80006a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 80006ae:	f000 ff99 	bl	80015e4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fee6 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <SystemClock_Config+0xe8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <SystemClock_Config+0xe8>)
 80006c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <SystemClock_Config+0xe8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80006d4:	2327      	movs	r3, #39	; 0x27
 80006d6:	623b      	str	r3, [r7, #32]
	        | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
	        | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2340      	movs	r3, #64	; 0x40
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fb61 	bl	8001dc8 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xac>
	{
		Error_Handler ();
 800070c:	f000 f8fe 	bl	800090c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000710:	236f      	movs	r3, #111	; 0x6f
 8000712:	607b      	str	r3, [r7, #4]
	        | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
	        | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2101      	movs	r1, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f001 febd 	bl	80024b0 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xdc>
	{
		Error_Handler ();
 800073c:	f000 f8e6 	bl	800090c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 8000740:	f002 fcaa 	bl	8003098 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000744:	bf00      	nop
 8000746:	3768      	adds	r7, #104	; 0x68
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58000400 	.word	0x58000400

08000750 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init (void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_LPUART1_UART_Init+0x94>)
 8000758:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init (&hlpuart1) != HAL_OK)
 8000798:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 800079a:	f003 f82d 	bl	80037f8 <HAL_UART_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler ();
 80007a4:	f000 f8b2 	bl	800090c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold (&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80007a8:	2100      	movs	r1, #0
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 80007ac:	f003 fc88 	bl	80040c0 <HAL_UARTEx_SetTxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x6a>
	        != HAL_OK)
	{
		Error_Handler ();
 80007b6:	f000 f8a9 	bl	800090c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold (&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 80007be:	f003 fcbd 	bl	800413c <HAL_UARTEx_SetRxFifoThreshold>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_LPUART1_UART_Init+0x7c>
	        != HAL_OK)
	{
		Error_Handler ();
 80007c8:	f000 f8a0 	bl	800090c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode (&hlpuart1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 80007ce:	f003 fc3e 	bl	800404e <HAL_UARTEx_DisableFifoMode>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler ();
 80007d8:	f000 f898 	bl	800090c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000b8 	.word	0x200000b8
 80007e4:	40008000 	.word	0x40008000

080007e8 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init (void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USB_PCD_Init+0x48>)
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <MX_USB_PCD_Init+0x4c>)
 80007f0:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USB_PCD_Init+0x48>)
 80007f4:	2208      	movs	r2, #8
 80007f6:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_USB_PCD_Init+0x48>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USB_PCD_Init+0x48>)
 8000800:	2202      	movs	r2, #2
 8000802:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_USB_PCD_Init+0x48>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USB_PCD_Init+0x48>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_USB_PCD_Init+0x48>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USB_PCD_Init+0x48>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init (&hpcd_USB_FS) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_USB_PCD_Init+0x48>)
 800081e:	f000 fd3f 	bl	80012a0 <HAL_PCD_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USB_PCD_Init+0x44>
	{
		Error_Handler ();
 8000828:	f000 f870 	bl	800090c <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000148 	.word	0x20000148
 8000834:	40006800 	.word	0x40006800

08000838 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
		{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	2004      	movs	r0, #4
 800084e:	f7ff fe2f 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fe2c 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fe29 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2008      	movs	r0, #8
 8000860:	f7ff fe26 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2123      	movs	r1, #35	; 0x23
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <MX_GPIO_Init+0xa4>)
 800086a:	f000 fd01 	bl	8001270 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800086e:	2310      	movs	r3, #16
 8000870:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xa8>)
 8000880:	f000 fb86 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8000884:	2323      	movs	r3, #35	; 0x23
 8000886:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <MX_GPIO_Init+0xa4>)
 800089a:	f000 fb79 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 800089e:	2303      	movs	r3, #3
 80008a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init (GPIOD, &GPIO_InitStruct);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_GPIO_Init+0xac>)
 80008b0:	f000 fb6e 	bl	8000f90 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 80008b4:	23c0      	movs	r3, #192	; 0xc0
 80008b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c4:	2307      	movs	r3, #7
 80008c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_GPIO_Init+0xa4>)
 80008ce:	f000 fb5f 	bl	8000f90 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	48000400 	.word	0x48000400
 80008e0:	48000800 	.word	0x48000800
 80008e4:	48000c00 	.word	0x48000c00

080008e8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick ();
 80008fa:	f000 fa3d 	bl	8000d78 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40012c00 	.word	0x40012c00

0800090c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>

08000916 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800091e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800092e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4313      	orrs	r3, r2
 800095e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800096c:	68fb      	ldr	r3, [r7, #12]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4313      	orrs	r3, r2
 8000990:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	210f      	movs	r1, #15
 80009be:	f06f 0001 	mvn.w	r0, #1
 80009c2:	f000 fabd 	bl	8000f40 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80009ce:	463b      	mov	r3, r7
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fe17 	bl	8001604 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80009d6:	f000 fe57 	bl	8001688 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	; 0x70
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2250      	movs	r2, #80	; 0x50
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f006 f9fd 	bl	8006e04 <memset>
  if(huart->Instance==LPUART1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0x84>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d124      	bne.n	8000a5e <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a14:	2302      	movs	r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 f9c3 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a2c:	f7ff ff6e 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ffa2 	bl	800097a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff ff6d 	bl	8000916 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fa99 	bl	8000f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3770      	adds	r7, #112	; 0x70
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40008000 	.word	0x40008000

08000a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2250      	movs	r2, #80	; 0x50
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 f9b9 	bl	8006e04 <memset>
  if(hpcd->Instance==USB)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_PCD_MspInit+0xa8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d136      	bne.n	8000b0a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aaa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ab2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ab6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000abc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000abe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 f96f 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000ad4:	f7ff ff1a 	bl	800090c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ff1c 	bl	8000916 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ade:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000af0:	230a      	movs	r3, #10
 8000af2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f000 fa47 	bl	8000f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b02:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b06:	f7ff ff1f 	bl	8000948 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3770      	adds	r7, #112	; 0x70
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40006800 	.word	0x40006800

08000b18 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2019      	movs	r0, #25
 8000b62:	f000 f9ed 	bl	8000f40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b66:	2019      	movs	r0, #25
 8000b68:	f000 fa04 	bl	8000f74 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b70:	f7ff ffd2 	bl	8000b18 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0208 	add.w	r2, r7, #8
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fe82 	bl	8002888 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b84:	f001 fe6a 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8000b88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <HAL_InitTick+0x8c>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_InitTick+0x90>)
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <HAL_InitTick+0x94>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_InitTick+0x90>)
 8000ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_InitTick+0x90>)
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_InitTick+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_InitTick+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <HAL_InitTick+0x90>)
 8000bba:	f002 fb84 	bl	80032c6 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_InitTick+0x90>)
 8000bc6:	f002 fbdf 	bl	8003388 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	431bde83 	.word	0x431bde83
 8000bdc:	20000440 	.word	0x20000440
 8000be0:	40012c00 	.word	0x40012c00

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c16:	f002 fc05 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000440 	.word	0x20000440

08000c24 <SystemInit>:
 * @param  None
 * @retval None
 */
void
SystemInit (void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <SystemInit+0x98>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <SystemInit+0x98>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000c50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t) 0xFAF6FEFBU;
 8000c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <SystemInit+0x9c>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t) 0xFFFFFFFAU;
 8000c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c6e:	f023 0305 	bic.w	r3, r3, #5
 8000c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t) 0xFFFFFFFEU;
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <SystemInit+0xa0>)
 8000c90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <SystemInit+0xa0>)
 8000c98:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	faf6fefb 	.word	0xfaf6fefb
 8000cc4:	22041000 	.word	0x22041000

08000cc8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000cc8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ccc:	3304      	adds	r3, #4

08000cce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000cd2:	d3f9      	bcc.n	8000cc8 <CopyDataInit>
  bx lr
 8000cd4:	4770      	bx	lr

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000cd6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000cd8:	3004      	adds	r0, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000cda:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>
  bx lr
 8000cde:	4770      	bx	lr

08000ce0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce4:	f7ff ff9e 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <LoopForever+0x8>)
 8000cea:	490c      	ldr	r1, [pc, #48]	; (8000d1c <LoopForever+0xc>)
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <LoopForever+0x10>)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f7ff ffed 	bl	8000cce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <LoopForever+0x14>)
 8000cf6:	490c      	ldr	r1, [pc, #48]	; (8000d28 <LoopForever+0x18>)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f7ff ffee 	bl	8000cda <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <LoopForever+0x1c>)
 8000d00:	490b      	ldr	r1, [pc, #44]	; (8000d30 <LoopForever+0x20>)
 8000d02:	2300      	movs	r3, #0
 8000d04:	f7ff ffe9 	bl	8000cda <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d08:	f006 f848 	bl	8006d9c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000d0c:	f7ff fbea 	bl	80004e4 <main>

08000d10 <LoopForever>:

LoopForever:
  b LoopForever
 8000d10:	e7fe      	b.n	8000d10 <LoopForever>
 8000d12:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000d14:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	20000078 	.word	0x20000078
 8000d20:	08007168 	.word	0x08007168
  INIT_BSS _sbss, _ebss
 8000d24:	20000078 	.word	0x20000078
 8000d28:	20001ea4 	.word	0x20001ea4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d2c:	20030000 	.word	0x20030000
 8000d30:	20030000 	.word	0x20030000

08000d34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_Init+0x3c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_Init+0x3c>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 f8eb 	bl	8000f2a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d54:	200f      	movs	r0, #15
 8000d56:	f7ff fef9 	bl	8000b4c <HAL_InitTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	e001      	b.n	8000d6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d66:	f7ff fe21 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58004000 	.word	0x58004000

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	2000048c 	.word	0x2000048c

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000048c 	.word	0x2000048c

08000db8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTickPrio+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff4c 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4e:	f7ff ff63 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff ffb3 	bl	8000ec4 <NVIC_EncodePriority>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff82 	bl	8000e70 <__NVIC_SetPriority>
}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff56 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e14c      	b.n	800123a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 813e 	beq.w	8001234 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x40>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0203 	and.w	r2, r3, #3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8098 	beq.w	8001234 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001104:	4a54      	ldr	r2, [pc, #336]	; (8001258 <HAL_GPIO_Init+0x2c8>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800112e:	d019      	beq.n	8001164 <HAL_GPIO_Init+0x1d4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4a      	ldr	r2, [pc, #296]	; (800125c <HAL_GPIO_Init+0x2cc>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x1d0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a49      	ldr	r2, [pc, #292]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1cc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_GPIO_Init+0x2d4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1c8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a47      	ldr	r2, [pc, #284]	; (8001268 <HAL_GPIO_Init+0x2d8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1c4>
 8001150:	2304      	movs	r3, #4
 8001152:	e008      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 8001154:	2307      	movs	r3, #7
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 8001158:	2303      	movs	r3, #3
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1d6>
 8001164:	2300      	movs	r3, #0
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001176:	4938      	ldr	r1, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x2c8>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001184:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_GPIO_Init+0x2dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011a8:	4a30      	ldr	r2, [pc, #192]	; (800126c <HAL_GPIO_Init+0x2dc>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_GPIO_Init+0x2dc>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d2:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_GPIO_Init+0x2dc>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_GPIO_Init+0x2dc>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fe:	4a1b      	ldr	r2, [pc, #108]	; (800126c <HAL_GPIO_Init+0x2dc>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_GPIO_Init+0x2dc>)
 8001208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <HAL_GPIO_Init+0x2dc>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	f47f aeab 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40010000 	.word	0x40010000
 800125c:	48000400 	.word	0x48000400
 8001260:	48000800 	.word	0x48000800
 8001264:	48000c00 	.word	0x48000c00
 8001268:	48001000 	.word	0x48001000
 800126c:	58000800 	.word	0x58000800

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128c:	e002      	b.n	8001294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	b08b      	sub	sp, #44	; 0x2c
 80012a4:	af06      	add	r7, sp, #24
 80012a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0dd      	b.n	800146e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fbd0 	bl	8000a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ffb8 	bl	8004254 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e04d      	b.n	8001386 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	3305      	adds	r3, #5
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	3304      	adds	r3, #4
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	b298      	uxth	r0, r3
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	333a      	adds	r3, #58	; 0x3a
 800132a:	4602      	mov	r2, r0
 800132c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	3307      	adds	r3, #7
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	333c      	adds	r3, #60	; 0x3c
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3340      	adds	r3, #64	; 0x40
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3344      	adds	r3, #68	; 0x44
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3ac      	bcc.n	80012ea <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e044      	b.n	8001420 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	3301      	adds	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	d3b5      	bcc.n	8001396 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	687e      	ldr	r6, [r7, #4]
 8001432:	466d      	mov	r5, sp
 8001434:	f106 0410 	add.w	r4, r6, #16
 8001438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001440:	e885 0003 	stmia.w	r5, {r0, r1}
 8001444:	1d33      	adds	r3, r6, #4
 8001446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f002 ff1e 	bl	800428a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f805 	bl	8001476 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001476 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800149a:	b29b      	uxth	r3, r3
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80014d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014da:	4905      	ldr	r1, [pc, #20]	; (80014f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4313      	orrs	r3, r2
 80014e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58000800 	.word	0x58000800

080014f4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <LL_EXTI_DisableIT_0_31+0x28>)
 80014fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	43db      	mvns	r3, r3
 8001506:	4905      	ldr	r1, [pc, #20]	; (800151c <LL_EXTI_DisableIT_0_31+0x28>)
 8001508:	4013      	ands	r3, r2
 800150a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	58000800 	.word	0x58000800

08001520 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800152a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	43db      	mvns	r3, r3
 8001532:	4905      	ldr	r1, [pc, #20]	; (8001548 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001534:	4013      	ands	r3, r2
 8001536:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	58000800 	.word	0x58000800

0800154c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4904      	ldr	r1, [pc, #16]	; (800156c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]

}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	58000800 	.word	0x58000800

08001570 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	43db      	mvns	r3, r3
 8001580:	4904      	ldr	r1, [pc, #16]	; (8001594 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001582:	4013      	ands	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	58000800 	.word	0x58000800

08001598 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4904      	ldr	r1, [pc, #16]	; (80015b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58000800 	.word	0x58000800

080015bc <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4904      	ldr	r1, [pc, #16]	; (80015e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	58000800 	.word	0x58000800

080015e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	58000400 	.word	0x58000400

08001604 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_PWR_ConfigPVD+0x80>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 020e 	bic.w	r2, r3, #14
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	491a      	ldr	r1, [pc, #104]	; (8001684 <HAL_PWR_ConfigPVD+0x80>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 800161e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001622:	f7ff ff67 	bl	80014f4 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8001626:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800162a:	f7ff ff79 	bl	8001520 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800162e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001632:	f7ff ffc3 	bl	80015bc <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001636:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800163a:	f7ff ff99 	bl	8001570 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800164a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800164e:	f7ff ff3d 	bl	80014cc <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800165e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001662:	f7ff ff73 	bl	800154c <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001672:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001676:	f7ff ff8f 	bl	8001598 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58000400 	.word	0x58000400

08001688 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_PWR_EnablePVD+0x1c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_PWR_EnablePVD+0x1c>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6053      	str	r3, [r2, #4]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	58000400 	.word	0x58000400

080016a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	58000400 	.word	0x58000400

080016c4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016d6:	d101      	bne.n	80016dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001736:	d101      	bne.n	800173c <LL_RCC_HSE_IsReady+0x18>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <LL_RCC_HSE_IsReady+0x1a>
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001796:	d101      	bne.n	800179c <LL_RCC_HSI_IsReady+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_RCC_HSI_IsReady+0x1a>
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b02      	cmp	r3, #2
 8001828:	d101      	bne.n	800182e <LL_RCC_HSI48_IsReady+0x18>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_RCC_HSI48_IsReady+0x1a>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d101      	bne.n	80018da <LL_RCC_LSE_IsReady+0x18>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <LL_RCC_LSE_IsReady+0x1a>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80018ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d101      	bne.n	8001942 <LL_RCC_LSI1_IsReady+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_RCC_LSI1_IsReady+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d101      	bne.n	80019aa <LL_RCC_LSI2_IsReady+0x18>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_RCC_LSI2_IsReady+0x1a>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d2:	4313      	orrs	r3, r2
 80019d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6013      	str	r3, [r2, #0]
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d101      	bne.n	8001a36 <LL_RCC_MSI_IsReady+0x16>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_RCC_MSI_IsReady+0x18>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2bb0      	cmp	r3, #176	; 0xb0
 8001a80:	d901      	bls.n	8001a86 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001a82:	23b0      	movs	r3, #176	; 0xb0
 8001a84:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001a86:	687b      	ldr	r3, [r7, #4]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 0203 	bic.w	r2, r3, #3
 8001ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c60:	6013      	str	r3, [r2, #0]
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c9c:	d101      	bne.n	8001ca2 <LL_RCC_PLL_IsReady+0x18>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <LL_RCC_PLL_IsReady+0x1a>
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d101      	bne.n	8001d28 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d48:	d101      	bne.n	8001d4e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d101      	bne.n	8001d74 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d92:	d101      	bne.n	8001d98 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001db6:	d101      	bne.n	8001dbc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b08d      	sub	sp, #52	; 0x34
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e363      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 808d 	beq.w	8001f02 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de8:	f7ff fe7d 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 8001dec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dee:	f7ff ff83 	bl	8001cf8 <LL_RCC_PLL_GetMainSource>
 8001df2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3e>
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d147      	bne.n	8001e90 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d144      	bne.n	8001e90 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e347      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e16:	f7ff fe28 	bl	8001a6a <LL_RCC_MSI_GetRange>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	d914      	bls.n	8001e4a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fd61 	bl	80028ec <RCC_SetFlashLatencyFromMSIRange>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e336      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe02 	bl	8001a42 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fe26 	bl	8001a94 <LL_RCC_MSI_SetCalibTrimming>
 8001e48:	e013      	b.n	8001e72 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fdf7 	bl	8001a42 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fe1b 	bl	8001a94 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd42 	bl	80028ec <RCC_SetFlashLatencyFromMSIRange>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e317      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e72:	f000 fcc9 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4aa4      	ldr	r2, [pc, #656]	; (800210c <HAL_RCC_OscConfig+0x344>)
 8001e7a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e7c:	4ba4      	ldr	r3, [pc, #656]	; (8002110 <HAL_RCC_OscConfig+0x348>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fe63 	bl	8000b4c <HAL_InitTick>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d039      	beq.n	8001f00 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e308      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01e      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e98:	f7ff fda4 	bl	80019e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe ff80 	bl	8000da0 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea4:	f7fe ff7c 	bl	8000da0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e2f5      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001eb6:	f7ff fdb3 	bl	8001a20 <LL_RCC_MSI_IsReady>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f1      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fdbc 	bl	8001a42 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fde0 	bl	8001a94 <LL_RCC_MSI_SetCalibTrimming>
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ed6:	f7ff fd94 	bl	8001a02 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eda:	f7fe ff61 	bl	8000da0 <HAL_GetTick>
 8001ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee2:	f7fe ff5d 	bl	8000da0 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e2d6      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ef4:	f7ff fd94 	bl	8001a20 <LL_RCC_MSI_IsReady>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f1      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x11a>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f00:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d047      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	f7ff fdea 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 8001f12:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f14:	f7ff fef0 	bl	8001cf8 <LL_RCC_PLL_GetMainSource>
 8001f18:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x164>
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d105      	bne.n	8001f38 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d134      	bne.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e2b4      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_OscConfig+0x180>
 8001f42:	f7ff fbd1 	bl	80016e8 <LL_RCC_HSE_Enable>
 8001f46:	e001      	b.n	8001f4c <HAL_RCC_OscConfig+0x184>
 8001f48:	f7ff fbdd 	bl	8001706 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff24 	bl	8000da0 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff20 	bl	8000da0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e299      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f6e:	f7ff fbd9 	bl	8001724 <LL_RCC_HSE_IsReady>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f1      	beq.n	8001f5c <HAL_RCC_OscConfig+0x194>
 8001f78:	e011      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe ff11 	bl	8000da0 <HAL_GetTick>
 8001f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f82:	f7fe ff0d 	bl	8000da0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e286      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f94:	f7ff fbc6 	bl	8001724 <LL_RCC_HSE_IsReady>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f1      	bne.n	8001f82 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04c      	beq.n	8002044 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	f7ff fd9c 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 8001fae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb0:	f7ff fea2 	bl	8001cf8 <LL_RCC_PLL_GetMainSource>
 8001fb4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x200>
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e266      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fbe5 	bl	80017a8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fde:	e031      	b.n	8002044 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d019      	beq.n	800201c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	f7ff fbae 	bl	8001748 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fed8 	bl	8000da0 <HAL_GetTick>
 8001ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fed4 	bl	8000da0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e24d      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002006:	f7ff fbbd 	bl	8001784 <LL_RCC_HSI_IsReady>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f1      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fbc7 	bl	80017a8 <LL_RCC_HSI_SetCalibTrimming>
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201c:	f7ff fba3 	bl	8001766 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe febe 	bl	8000da0 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7fe feba 	bl	8000da0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e233      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800203a:	f7ff fba3 	bl	8001784 <LL_RCC_HSI_IsReady>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f1      	bne.n	8002028 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a3 	beq.w	80021a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d076      	beq.n	8002154 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d046      	beq.n	8002100 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002072:	f7ff fc5a 	bl	800192a <LL_RCC_LSI1_IsReady>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d113      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800207c:	f7ff fc33 	bl	80018e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002080:	f7fe fe8e 	bl	8000da0 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002088:	f7fe fe8a 	bl	8000da0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e203      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800209a:	f7ff fc46 	bl	800192a <LL_RCC_LSI1_IsReady>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80020a4:	f7ff fc53 	bl	800194e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fe7a 	bl	8000da0 <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020b0:	f7fe fe76 	bl	8000da0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1ef      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020c2:	f7ff fc66 	bl	8001992 <LL_RCC_LSI2_IsReady>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f1      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fc70 	bl	80019b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80020d6:	f7ff fc17 	bl	8001908 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fe61 	bl	8000da0 <HAL_GetTick>
 80020de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020e2:	f7fe fe5d 	bl	8000da0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1d6      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80020f4:	f7ff fc19 	bl	800192a <LL_RCC_LSI1_IsReady>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f1      	bne.n	80020e2 <HAL_RCC_OscConfig+0x31a>
 80020fe:	e051      	b.n	80021a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002100:	f7ff fbf1 	bl	80018e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe fe4c 	bl	8000da0 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800210a:	e00c      	b.n	8002126 <HAL_RCC_OscConfig+0x35e>
 800210c:	20000004 	.word	0x20000004
 8002110:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002114:	f7fe fe44 	bl	8000da0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1bd      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002126:	f7ff fc00 	bl	800192a <LL_RCC_LSI1_IsReady>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f1      	beq.n	8002114 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002130:	f7ff fc1e 	bl	8001970 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002136:	f7fe fe33 	bl	8000da0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1ac      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002148:	f7ff fc23 	bl	8001992 <LL_RCC_LSI2_IsReady>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f1      	bne.n	8002136 <HAL_RCC_OscConfig+0x36e>
 8002152:	e027      	b.n	80021a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002154:	f7ff fc0c 	bl	8001970 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7fe fe22 	bl	8000da0 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002160:	f7fe fe1e 	bl	8000da0 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b03      	cmp	r3, #3
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e197      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002172:	f7ff fc0e 	bl	8001992 <LL_RCC_LSI2_IsReady>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f1      	bne.n	8002160 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800217c:	f7ff fbc4 	bl	8001908 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fe0e 	bl	8000da0 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002188:	f7fe fe0a 	bl	8000da0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e183      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800219a:	f7ff fbc6 	bl	800192a <LL_RCC_LSI1_IsReady>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f1      	bne.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	4ba7      	ldr	r3, [pc, #668]	; (8002450 <HAL_RCC_OscConfig+0x688>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d114      	bne.n	80021e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021bc:	f7ff fa12 	bl	80015e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c0:	f7fe fdee 	bl	8000da0 <HAL_GetTick>
 80021c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c8:	f7fe fdea 	bl	8000da0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e163      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021da:	4b9d      	ldr	r3, [pc, #628]	; (8002450 <HAL_RCC_OscConfig+0x688>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_OscConfig+0x42c>
 80021ee:	f7ff fb24 	bl	800183a <LL_RCC_LSE_Enable>
 80021f2:	e00c      	b.n	800220e <HAL_RCC_OscConfig+0x446>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d104      	bne.n	8002206 <HAL_RCC_OscConfig+0x43e>
 80021fc:	f7ff fb3f 	bl	800187e <LL_RCC_LSE_EnableBypass>
 8002200:	f7ff fb1b 	bl	800183a <LL_RCC_LSE_Enable>
 8002204:	e003      	b.n	800220e <HAL_RCC_OscConfig+0x446>
 8002206:	f7ff fb29 	bl	800185c <LL_RCC_LSE_Disable>
 800220a:	f7ff fb49 	bl	80018a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d014      	beq.n	8002240 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe fdc3 	bl	8000da0 <HAL_GetTick>
 800221a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fdbf 	bl	8000da0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e136      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002234:	f7ff fb45 	bl	80018c2 <LL_RCC_LSE_IsReady>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0ef      	beq.n	800221e <HAL_RCC_OscConfig+0x456>
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe fdae 	bl	8000da0 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe fdaa 	bl	8000da0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e121      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800225e:	f7ff fb30 	bl	80018c2 <LL_RCC_LSE_IsReady>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ef      	bne.n	8002248 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02c      	beq.n	80022ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	d014      	beq.n	80022a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800227c:	f7ff faa9 	bl	80017d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe fd8e 	bl	8000da0 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002288:	f7fe fd8a 	bl	8000da0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e103      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800229a:	f7ff fabc 	bl	8001816 <LL_RCC_HSI48_IsReady>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f1      	beq.n	8002288 <HAL_RCC_OscConfig+0x4c0>
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022a6:	f7ff faa5 	bl	80017f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe fd79 	bl	8000da0 <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b2:	f7fe fd75 	bl	8000da0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0ee      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022c4:	f7ff faa7 	bl	8001816 <LL_RCC_HSI48_IsReady>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f1      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80e4 	beq.w	80024a0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d8:	f7ff fc05 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 80022dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	f040 80b4 	bne.w	8002458 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0203 	and.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d123      	bne.n	8002346 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d11c      	bne.n	8002346 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d114      	bne.n	8002346 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d10d      	bne.n	8002346 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d05d      	beq.n	8002402 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d058      	beq.n	80023fe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0a1      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800235e:	f7ff fc85 	bl	8001c6c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002362:	f7fe fd1d 	bl	8000da0 <HAL_GetTick>
 8002366:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe fd19 	bl	8000da0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e092      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ef      	bne.n	800236a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCC_OscConfig+0x68c>)
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023a2:	0212      	lsls	r2, r2, #8
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023b6:	430a      	orrs	r2, r1
 80023b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023bc:	4313      	orrs	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023c0:	f7ff fc45 	bl	8001c4e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023d4:	f7fe fce4 	bl	8000da0 <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fce0 	bl	8000da0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e059      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	e050      	b.n	80024a0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e04f      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d147      	bne.n	80024a0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002410:	f7ff fc1d 	bl	8001c4e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002424:	f7fe fcbc 	bl	8000da0 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fcb8 	bl	8000da0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e031      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x664>
 800244c:	e028      	b.n	80024a0 <HAL_RCC_OscConfig+0x6d8>
 800244e:	bf00      	nop
 8002450:	58000400 	.word	0x58000400
 8002454:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d01e      	beq.n	800249c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	f7ff fc05 	bl	8001c6c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fc9d 	bl	8000da0 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe fc99 	bl	8000da0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e012      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_OscConfig+0x6e4>)
 8002496:	4013      	ands	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]
 800249a:	e001      	b.n	80024a0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3734      	adds	r7, #52	; 0x34
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	eefefffc 	.word	0xeefefffc

080024b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e12d      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b98      	ldr	r3, [pc, #608]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d91b      	bls.n	800250a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b95      	ldr	r3, [pc, #596]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4993      	ldr	r1, [pc, #588]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e2:	f7fe fc5d 	bl	8000da0 <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024ea:	f7fe fc59 	bl	8000da0 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e111      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d1ef      	bne.n	80024ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff faef 	bl	8001afe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002520:	f7fe fc3e 	bl	8000da0 <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002528:	f7fe fc3a 	bl	8000da0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0f2      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800253a:	f7ff fbe9 	bl	8001d10 <LL_RCC_IsActiveFlag_HPRE>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f1      	beq.n	8002528 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fae6 	bl	8001b26 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800255a:	f7fe fc21 	bl	8000da0 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002562:	f7fe fc1d 	bl	8000da0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0d5      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002574:	f7ff fbde 	bl	8001d34 <LL_RCC_IsActiveFlag_C2HPRE>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f1      	beq.n	8002562 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fadf 	bl	8001b52 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002594:	f7fe fc04 	bl	8000da0 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800259c:	f7fe fc00 	bl	8000da0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0b8      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025ae:	f7ff fbd4 	bl	8001d5a <LL_RCC_IsActiveFlag_SHDHPRE>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f1      	beq.n	800259c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d016      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fad9 	bl	8001b80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025ce:	f7fe fbe7 	bl	8000da0 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025d6:	f7fe fbe3 	bl	8000da0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025e8:	f7ff fbca 	bl	8001d80 <LL_RCC_IsActiveFlag_PPRE1>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f1      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d017      	beq.n	800262e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff facf 	bl	8001ba8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800260a:	f7fe fbc9 	bl	8000da0 <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002612:	f7fe fbc5 	bl	8000da0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e07d      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002624:	f7ff fbbe 	bl	8001da4 <LL_RCC_IsActiveFlag_PPRE2>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f1      	beq.n	8002612 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d043      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d106      	bne.n	8002650 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002642:	f7ff f86f 	bl	8001724 <LL_RCC_HSE_IsReady>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11e      	bne.n	800268a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e067      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d106      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002658:	f7ff fb17 	bl	8001c8a <LL_RCC_PLL_IsReady>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e05c      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800266e:	f7ff f9d7 	bl	8001a20 <LL_RCC_MSI_IsReady>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e051      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800267c:	f7ff f882 	bl	8001784 <LL_RCC_HSI_IsReady>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e04a      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fa15 	bl	8001abe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002694:	f7fe fb84 	bl	8000da0 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe fb80 	bl	8000da0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e036      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	f7ff fa18 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	429a      	cmp	r2, r3
 80026c0:	d1ec      	bne.n	800269c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d21b      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 0207 	bic.w	r2, r3, #7
 80026d8:	4913      	ldr	r1, [pc, #76]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe fb5e 	bl	8000da0 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026e8:	f7fe fb5a 	bl	8000da0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e012      	b.n	8002720 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x278>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d1ef      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002708:	f000 f87e 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 800270c:	4603      	mov	r3, r0
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_RCC_ClockConfig+0x27c>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002712:	f7fe fb51 	bl	8000db8 <HAL_GetTickPrio>
 8002716:	4603      	mov	r3, r0
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fa17 	bl	8000b4c <HAL_InitTick>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	58004000 	.word	0x58004000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	f7ff f9d6 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 800273a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002742:	f7ff f992 	bl	8001a6a <LL_RCC_MSI_GetRange>
 8002746:	4603      	mov	r3, r0
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e04b      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d102      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e045      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d10a      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800276a:	f7fe ffab 	bl	80016c4 <LL_RCC_HSE_IsEnabledDiv2>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e03a      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_GetSysClockFreq+0xd4>)
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e037      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002780:	f7ff faba 	bl	8001cf8 <LL_RCC_PLL_GetMainSource>
 8002784:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d003      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x64>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x6a>
 8002792:	e00d      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002796:	60bb      	str	r3, [r7, #8]
        break;
 8002798:	e015      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800279a:	f7fe ff93 	bl	80016c4 <LL_RCC_HSE_IsEnabledDiv2>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027a6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80027a8:	e00d      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027ac:	60bb      	str	r3, [r7, #8]
        break;
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027b0:	f7ff f95b 	bl	8001a6a <LL_RCC_MSI_GetRange>
 80027b4:	4603      	mov	r3, r0
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	60bb      	str	r3, [r7, #8]
        break;
 80027c4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80027c6:	f7ff fa72 	bl	8001cae <LL_RCC_PLL_GetN>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	fb03 f402 	mul.w	r4, r3, r2
 80027d2:	f7ff fa85 	bl	8001ce0 <LL_RCC_PLL_GetDivider>
 80027d6:	4603      	mov	r3, r0
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	3301      	adds	r3, #1
 80027dc:	fbb4 f4f3 	udiv	r4, r4, r3
 80027e0:	f7ff fa72 	bl	8001cc8 <LL_RCC_PLL_GetR>
 80027e4:	4603      	mov	r3, r0
 80027e6:	0f5b      	lsrs	r3, r3, #29
 80027e8:	3301      	adds	r3, #1
 80027ea:	fbb4 f3f3 	udiv	r3, r4, r3
 80027ee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	08007090 	.word	0x08007090
 8002800:	00f42400 	.word	0x00f42400
 8002804:	01e84800 	.word	0x01e84800

08002808 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b598      	push	{r3, r4, r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800280c:	f7ff ff90 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8002810:	4604      	mov	r4, r0
 8002812:	f7ff f9dd 	bl	8001bd0 <LL_RCC_GetAHBPrescaler>
 8002816:	4603      	mov	r3, r0
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x24>)
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd98      	pop	{r3, r4, r7, pc}
 800282c:	08007030 	.word	0x08007030

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b598      	push	{r3, r4, r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002834:	f7ff ffe8 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002838:	4604      	mov	r4, r0
 800283a:	f7ff f9f0 	bl	8001c1e <LL_RCC_GetAPB1Prescaler>
 800283e:	4603      	mov	r3, r0
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd98      	pop	{r3, r4, r7, pc}
 8002858:	08007070 	.word	0x08007070

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b598      	push	{r3, r4, r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002860:	f7ff ffd2 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002864:	4604      	mov	r4, r0
 8002866:	f7ff f9e6 	bl	8001c36 <LL_RCC_GetAPB2Prescaler>
 800286a:	4603      	mov	r3, r0
 800286c:	0adb      	lsrs	r3, r3, #11
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd98      	pop	{r3, r4, r7, pc}
 8002884:	08007070 	.word	0x08007070

08002888 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	226f      	movs	r2, #111	; 0x6f
 8002896:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002898:	f7ff f925 	bl	8001ae6 <LL_RCC_GetSysClkSource>
 800289c:	4602      	mov	r2, r0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80028a2:	f7ff f995 	bl	8001bd0 <LL_RCC_GetAHBPrescaler>
 80028a6:	4602      	mov	r2, r0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80028ac:	f7ff f9b7 	bl	8001c1e <LL_RCC_GetAPB1Prescaler>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80028b6:	f7ff f9be 	bl	8001c36 <LL_RCC_GetAPB2Prescaler>
 80028ba:	4602      	mov	r2, r0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80028c0:	f7ff f992 	bl	8001be8 <LL_C2_RCC_GetAHBPrescaler>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80028ca:	f7ff f99a 	bl	8001c02 <LL_RCC_GetAHB4Prescaler>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_RCC_GetClockConfig+0x60>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0207 	and.w	r2, r3, #7
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	58004000 	.word	0x58004000

080028ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2bb0      	cmp	r3, #176	; 0xb0
 80028f8:	d903      	bls.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e007      	b.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002912:	f7ff f976 	bl	8001c02 <LL_RCC_GetAHB4Prescaler>
 8002916:	4603      	mov	r3, r0
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	0c9c      	lsrs	r4, r3, #18
 8002936:	f7fe feb7 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 800293a:	4603      	mov	r3, r0
 800293c:	4619      	mov	r1, r3
 800293e:	4620      	mov	r0, r4
 8002940:	f000 f80c 	bl	800295c <RCC_SetFlashLatency>
 8002944:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	08007090 	.word	0x08007090
 8002954:	08007030 	.word	0x08007030
 8002958:	431bde83 	.word	0x431bde83

0800295c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b093      	sub	sp, #76	; 0x4c
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <RCC_SetFlashLatency+0xe8>)
 8002968:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800296c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002972:	4a35      	ldr	r2, [pc, #212]	; (8002a48 <RCC_SetFlashLatency+0xec>)
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	ca07      	ldmia	r2, {r0, r1, r2}
 800297a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <RCC_SetFlashLatency+0xf0>)
 8002980:	f107 040c 	add.w	r4, r7, #12
 8002984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800298a:	2300      	movs	r3, #0
 800298c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002994:	d11a      	bne.n	80029cc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002996:	2300      	movs	r3, #0
 8002998:	643b      	str	r3, [r7, #64]	; 0x40
 800299a:	e013      	b.n	80029c4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800299c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3348      	adds	r3, #72	; 0x48
 80029a2:	443b      	add	r3, r7
 80029a4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d807      	bhi.n	80029be <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3348      	adds	r3, #72	; 0x48
 80029b4:	443b      	add	r3, r7
 80029b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029bc:	e020      	b.n	8002a00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c0:	3301      	adds	r3, #1
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d9e8      	bls.n	800299c <RCC_SetFlashLatency+0x40>
 80029ca:	e019      	b.n	8002a00 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d0:	e013      	b.n	80029fa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	3348      	adds	r3, #72	; 0x48
 80029d8:	443b      	add	r3, r7
 80029da:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d807      	bhi.n	80029f4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	3348      	adds	r3, #72	; 0x48
 80029ea:	443b      	add	r3, r7
 80029ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029f0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029f2:	e005      	b.n	8002a00 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	3301      	adds	r3, #1
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d9e8      	bls.n	80029d2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <RCC_SetFlashLatency+0xf4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0207 	bic.w	r2, r3, #7
 8002a08:	4911      	ldr	r1, [pc, #68]	; (8002a50 <RCC_SetFlashLatency+0xf4>)
 8002a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a10:	f7fe f9c6 	bl	8000da0 <HAL_GetTick>
 8002a14:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a16:	e008      	b.n	8002a2a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a18:	f7fe f9c2 	bl	8000da0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e007      	b.n	8002a3a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <RCC_SetFlashLatency+0xf4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1ef      	bne.n	8002a18 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	374c      	adds	r7, #76	; 0x4c
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	08006fec 	.word	0x08006fec
 8002a48:	08006ffc 	.word	0x08006ffc
 8002a4c:	08007008 	.word	0x08007008
 8002a50:	58004000 	.word	0x58004000

08002a54 <LL_RCC_LSE_IsEnabled>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <LL_RCC_LSE_IsEnabled+0x18>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <LL_RCC_LSE_IsEnabled+0x1a>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_RCC_LSE_IsReady>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d101      	bne.n	8002a90 <LL_RCC_LSE_IsReady+0x18>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <LL_RCC_LSE_IsReady+0x1a>
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_RCC_MSI_EnablePLLMode>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_SetRFWKPClockSource>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_RCC_SetSMPSClockSource>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f023 0203 	bic.w	r2, r3, #3
 8002af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_SetSMPSPrescaler>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_RCC_SetUSARTClockSource>:
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_SetLPUARTClockSource>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_RCC_SetI2CClockSource>:
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_SetLPTIMClockSource>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	43db      	mvns	r3, r3
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_SetSAIClockSource>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_RCC_SetRNGClockSource>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_SetCLK48ClockSource>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_SetUSBClockSource>:
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ffe3 	bl	8002c54 <LL_RCC_SetCLK48ClockSource>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <LL_RCC_SetADCClockSource>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_SetRTCClockSource>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_GetRTCClockSource>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_ForceBackupDomainReset>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_PLLSAI1_Enable>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_PLLSAI1_Disable>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_RCC_PLLSAI1_IsReady>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9a:	d101      	bne.n	8002da0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002db8:	2300      	movs	r3, #0
 8002dba:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d034      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dd0:	d021      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002dd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dd6:	d81b      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ddc:	d01d      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de2:	d815      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dec:	d110      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dfe:	e00d      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f94d 	bl	80030a4 <RCCEx_PLLSAI1_ConfigNP>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e0e:	e005      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	77fb      	strb	r3, [r7, #31]
        break;
 8002e14:	e002      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1c:	7ffb      	ldrb	r3, [r7, #31]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fee8 	bl	8002bfc <LL_RCC_SetSAIClockSource>
 8002e2c:	e001      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d046      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e3e:	f7ff ff56 	bl	8002cee <LL_RCC_GetRTCClockSource>
 8002e42:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d03c      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e4e:	f7fe fbc9 	bl	80015e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff30 	bl	8002cc2 <LL_RCC_SetRTCClockSource>
 8002e62:	e02e      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002e6e:	f7ff ff4b 	bl	8002d08 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002e72:	f7ff ff5a 	bl	8002d2a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e8e:	f7ff fde1 	bl	8002a54 <LL_RCC_LSE_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d114      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fd ff82 	bl	8000da0 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fd ff7e 	bl	8000da0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d902      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	77fb      	strb	r3, [r7, #31]
              break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002eb8:	f7ff fdde 	bl	8002a78 <LL_RCC_LSE_IsReady>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	77bb      	strb	r3, [r7, #30]
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
 8002eca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fe2a 	bl	8002b36 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fe35 	bl	8002b62 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe5d 	bl	8002bc8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fe52 	bl	8002bc8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe2a 	bl	8002b8e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe1f 	bl	8002b8e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d022      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe8d 	bl	8002c80 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f8e3 	bl	800315a <RCCEx_PLLSAI1_ConfigNQ>
 8002f94:	4603      	mov	r3, r0
 8002f96:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02b      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc0:	d003      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fe2a 	bl	8002c28 <LL_RCC_SetRNGClockSource>
 8002fd4:	e00a      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fe21 	bl	8002c28 <LL_RCC_SetRNGClockSource>
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff fe34 	bl	8002c54 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002ff4:	d107      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003004:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d022      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fe3d 	bl	8002c96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003024:	d107      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f8e3 	bl	8003210 <RCCEx_PLLSAI1_ConfigNR>
 800304a:	4603      	mov	r3, r0
 800304c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fd26 	bl	8002aba <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd45 	bl	8002b0e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fd2c 	bl	8002ae6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800308e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800309c:	f7ff fcfe 	bl	8002a9c <LL_RCC_MSI_EnablePLLMode>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030b0:	f7ff fe5b 	bl	8002d6a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030b4:	f7fd fe74 	bl	8000da0 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030ba:	e009      	b.n	80030d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030bc:	f7fd fe70 	bl	8000da0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d902      	bls.n	80030d0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e004      	b.n	80030da <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030d0:	f7ff fe5a 	bl	8002d88 <LL_RCC_PLLSAI1_IsReady>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d137      	bne.n	8003150 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f4:	4313      	orrs	r3, r2
 80030f6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310a:	4313      	orrs	r3, r2
 800310c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800310e:	f7ff fe1d 	bl	8002d4c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003112:	f7fd fe45 	bl	8000da0 <HAL_GetTick>
 8003116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003118:	e009      	b.n	800312e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311a:	f7fd fe41 	bl	8000da0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	73fb      	strb	r3, [r7, #15]
        break;
 800312c:	e004      	b.n	8003138 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800312e:	f7ff fe2b 	bl	8002d88 <LL_RCC_PLLSAI1_IsReady>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d1f0      	bne.n	800311a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800314c:	4313      	orrs	r3, r2
 800314e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003166:	f7ff fe00 	bl	8002d6a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800316a:	f7fd fe19 	bl	8000da0 <HAL_GetTick>
 800316e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003170:	e009      	b.n	8003186 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003172:	f7fd fe15 	bl	8000da0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003186:	f7ff fdff 	bl	8002d88 <LL_RCC_PLLSAI1_IsReady>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d137      	bne.n	8003206 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031aa:	4313      	orrs	r3, r2
 80031ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c0:	4313      	orrs	r3, r2
 80031c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031c4:	f7ff fdc2 	bl	8002d4c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fd fdea 	bl	8000da0 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031ce:	e009      	b.n	80031e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d0:	f7fd fde6 	bl	8000da0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	73fb      	strb	r3, [r7, #15]
        break;
 80031e2:	e004      	b.n	80031ee <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031e4:	f7ff fdd0 	bl	8002d88 <LL_RCC_PLLSAI1_IsReady>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d1f0      	bne.n	80031d0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003202:	4313      	orrs	r3, r2
 8003204:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800321c:	f7ff fda5 	bl	8002d6a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003220:	f7fd fdbe 	bl	8000da0 <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003226:	e009      	b.n	800323c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003228:	f7fd fdba 	bl	8000da0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	73fb      	strb	r3, [r7, #15]
      break;
 800323a:	e004      	b.n	8003246 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800323c:	f7ff fda4 	bl	8002d88 <LL_RCC_PLLSAI1_IsReady>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d137      	bne.n	80032bc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003276:	4313      	orrs	r3, r2
 8003278:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800327a:	f7ff fd67 	bl	8002d4c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327e:	f7fd fd8f 	bl	8000da0 <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003284:	e009      	b.n	800329a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003286:	f7fd fd8b 	bl	8000da0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d902      	bls.n	800329a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	73fb      	strb	r3, [r7, #15]
        break;
 8003298:	e004      	b.n	80032a4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800329a:	f7ff fd75 	bl	8002d88 <LL_RCC_PLLSAI1_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d1f0      	bne.n	8003286 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b8:	4313      	orrs	r3, r2
 80032ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e049      	b.n	800336c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d106      	bne.n	80032f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f841 	bl	8003374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f000 f9d5 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d001      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e036      	b.n	800340e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a17      	ldr	r2, [pc, #92]	; (800341c <HAL_TIM_Base_Start_IT+0x94>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x44>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ca:	d115      	bne.n	80033f8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_TIM_Base_Start_IT+0x98>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d015      	beq.n	800340a <HAL_TIM_Base_Start_IT+0x82>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d011      	beq.n	800340a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	e008      	b.n	800340a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e000      	b.n	800340c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40012c00 	.word	0x40012c00
 8003420:	00010007 	.word	0x00010007

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0202 	mvn.w	r2, #2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f905 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8f7 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f908 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0204 	mvn.w	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8db 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8cd 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8de 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0208 	mvn.w	r2, #8
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8b1 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8a3 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8b4 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b10      	cmp	r3, #16
 8003534:	d122      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d11b      	bne.n	800357c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2208      	movs	r2, #8
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f887 	bl	8003676 <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f879 	bl	8003662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f88a 	bl	800368a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f9a0 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d107      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8de 	bl	8003790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e2:	d10e      	bne.n	8003602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d107      	bne.n	8003602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f8d1 	bl	80037a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d10e      	bne.n	800362e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d107      	bne.n	800362e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f838 	bl	800369e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d10e      	bne.n	800365a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d107      	bne.n	800365a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0220 	mvn.w	r2, #32
 8003652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f891 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x20>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <TIM_Base_SetConfig+0xc0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <TIM_Base_SetConfig+0xc4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <TIM_Base_SetConfig+0xbc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0xa0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <TIM_Base_SetConfig+0xc0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xa0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <TIM_Base_SetConfig+0xc4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_RCC_GetUSARTClockSource>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4013      	ands	r3, r2
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_RCC_GetLPUARTClockSource>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4013      	ands	r3, r2
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e042      	b.n	8003890 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd f8e1 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2224      	movs	r2, #36	; 0x24
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f82c 	bl	8003898 <UART_SetConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa46 	bl	8003ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 facd 	bl	8003e28 <UART_CheckIdleState>
 800388e:	4603      	mov	r3, r0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800389c:	b08c      	sub	sp, #48	; 0x30
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4baf      	ldr	r3, [pc, #700]	; (8003b84 <UART_SetConfig+0x2ec>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4aa4      	ldr	r2, [pc, #656]	; (8003b88 <UART_SetConfig+0x2f0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003900:	4313      	orrs	r3, r2
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800390e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	f023 010f 	bic.w	r1, r3, #15
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a95      	ldr	r2, [pc, #596]	; (8003b8c <UART_SetConfig+0x2f4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d125      	bne.n	8003988 <UART_SetConfig+0xf0>
 800393c:	2003      	movs	r0, #3
 800393e:	f7ff ff3b 	bl	80037b8 <LL_RCC_GetUSARTClockSource>
 8003942:	4603      	mov	r3, r0
 8003944:	2b03      	cmp	r3, #3
 8003946:	d81b      	bhi.n	8003980 <UART_SetConfig+0xe8>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <UART_SetConfig+0xb8>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003971 	.word	0x08003971
 8003958:	08003969 	.word	0x08003969
 800395c:	08003979 	.word	0x08003979
 8003960:	2301      	movs	r3, #1
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003966:	e042      	b.n	80039ee <UART_SetConfig+0x156>
 8003968:	2302      	movs	r3, #2
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396e:	e03e      	b.n	80039ee <UART_SetConfig+0x156>
 8003970:	2304      	movs	r3, #4
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003976:	e03a      	b.n	80039ee <UART_SetConfig+0x156>
 8003978:	2308      	movs	r3, #8
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397e:	e036      	b.n	80039ee <UART_SetConfig+0x156>
 8003980:	2310      	movs	r3, #16
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e032      	b.n	80039ee <UART_SetConfig+0x156>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7e      	ldr	r2, [pc, #504]	; (8003b88 <UART_SetConfig+0x2f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d12a      	bne.n	80039e8 <UART_SetConfig+0x150>
 8003992:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003996:	f7ff ff1f 	bl	80037d8 <LL_RCC_GetLPUARTClockSource>
 800399a:	4603      	mov	r3, r0
 800399c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a0:	d01a      	beq.n	80039d8 <UART_SetConfig+0x140>
 80039a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a6:	d81b      	bhi.n	80039e0 <UART_SetConfig+0x148>
 80039a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ac:	d00c      	beq.n	80039c8 <UART_SetConfig+0x130>
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b2:	d815      	bhi.n	80039e0 <UART_SetConfig+0x148>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x128>
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d008      	beq.n	80039d0 <UART_SetConfig+0x138>
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x148>
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e012      	b.n	80039ee <UART_SetConfig+0x156>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ce:	e00e      	b.n	80039ee <UART_SetConfig+0x156>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d6:	e00a      	b.n	80039ee <UART_SetConfig+0x156>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039de:	e006      	b.n	80039ee <UART_SetConfig+0x156>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e6:	e002      	b.n	80039ee <UART_SetConfig+0x156>
 80039e8:	2310      	movs	r3, #16
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <UART_SetConfig+0x2f0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f040 8097 	bne.w	8003b28 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d823      	bhi.n	8003a4a <UART_SetConfig+0x1b2>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0x170>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a2d 	.word	0x08003a2d
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a3b 	.word	0x08003a3b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a4b 	.word	0x08003a4b
 8003a28:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f7fe ff00 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b56      	ldr	r3, [pc, #344]	; (8003b90 <UART_SetConfig+0x2f8>)
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fe79 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 812a 	beq.w	8003cb2 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <UART_SetConfig+0x2fc>)
 8003a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d305      	bcc.n	8003a8e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d903      	bls.n	8003a96 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a94:	e10d      	b.n	8003cb2 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	60fa      	str	r2, [r7, #12]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <UART_SetConfig+0x2fc>)
 8003aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab8:	f7fc fb62 	bl	8000180 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	020b      	lsls	r3, r1, #8
 8003ace:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ad2:	0202      	lsls	r2, r0, #8
 8003ad4:	6979      	ldr	r1, [r7, #20]
 8003ad6:	6849      	ldr	r1, [r1, #4]
 8003ad8:	0849      	lsrs	r1, r1, #1
 8003ada:	2000      	movs	r0, #0
 8003adc:	460c      	mov	r4, r1
 8003ade:	4605      	mov	r5, r0
 8003ae0:	eb12 0804 	adds.w	r8, r2, r4
 8003ae4:	eb43 0905 	adc.w	r9, r3, r5
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	469a      	mov	sl, r3
 8003af0:	4693      	mov	fp, r2
 8003af2:	4652      	mov	r2, sl
 8003af4:	465b      	mov	r3, fp
 8003af6:	4640      	mov	r0, r8
 8003af8:	4649      	mov	r1, r9
 8003afa:	f7fc fb41 	bl	8000180 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4613      	mov	r3, r2
 8003b04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0c:	d308      	bcc.n	8003b20 <UART_SetConfig+0x288>
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b14:	d204      	bcs.n	8003b20 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a3a      	ldr	r2, [r7, #32]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e0c8      	b.n	8003cb2 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b26:	e0c4      	b.n	8003cb2 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d16d      	bne.n	8003c0e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b36:	3b01      	subs	r3, #1
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d82d      	bhi.n	8003b98 <UART_SetConfig+0x300>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0x2ac>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b65 	.word	0x08003b65
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b99 	.word	0x08003b99
 8003b50:	08003b73 	.word	0x08003b73
 8003b54:	08003b99 	.word	0x08003b99
 8003b58:	08003b99 	.word	0x08003b99
 8003b5c:	08003b99 	.word	0x08003b99
 8003b60:	08003b7b 	.word	0x08003b7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b64:	f7fe fe7a 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b6a:	e01b      	b.n	8003ba4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <UART_SetConfig+0x2f8>)
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b70:	e018      	b.n	8003ba4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b72:	f7fe fddd 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003b76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b78:	e014      	b.n	8003ba4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b80:	e010      	b.n	8003ba4 <UART_SetConfig+0x30c>
 8003b82:	bf00      	nop
 8003b84:	cfff69f3 	.word	0xcfff69f3
 8003b88:	40008000 	.word	0x40008000
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	080070d0 	.word	0x080070d0
      default:
        pclk = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ba2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8083 	beq.w	8003cb2 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <UART_SetConfig+0x444>)
 8003bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bbe:	005a      	lsls	r2, r3, #1
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	441a      	add	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d916      	bls.n	8003c06 <UART_SetConfig+0x36e>
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d212      	bcs.n	8003c06 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f023 030f 	bic.w	r3, r3, #15
 8003be8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	8bfa      	ldrh	r2, [r7, #30]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	e055      	b.n	8003cb2 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c0c:	e051      	b.n	8003cb2 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c12:	3b01      	subs	r3, #1
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d822      	bhi.n	8003c5e <UART_SetConfig+0x3c6>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x388>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c41 	.word	0x08003c41
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c4f 	.word	0x08003c4f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c5f 	.word	0x08003c5f
 8003c38:	08003c5f 	.word	0x08003c5f
 8003c3c:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fe0c 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <UART_SetConfig+0x448>)
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fd6f 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003c52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c68:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <UART_SetConfig+0x444>)
 8003c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	441a      	add	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	d908      	bls.n	8003cac <UART_SetConfig+0x414>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca0:	d204      	bcs.n	8003cac <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	e002      	b.n	8003cb2 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003cce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3730      	adds	r7, #48	; 0x30
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cdc:	080070d0 	.word	0x080070d0
 8003ce0:	00f42400 	.word	0x00f42400

08003ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01a      	beq.n	8003dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de2:	d10a      	bne.n	8003dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e38:	f7fc ffb2 	bl	8000da0 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d10e      	bne.n	8003e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f82f 	bl	8003ebe <UART_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e025      	b.n	8003eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d10e      	bne.n	8003e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f819 	bl	8003ebe <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b09c      	sub	sp, #112	; 0x70
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	e0a9      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	f000 80a5 	beq.w	8004024 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fc ff61 	bl	8000da0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d140      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f04:	667b      	str	r3, [r7, #100]	; 0x64
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e6      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e069      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d051      	beq.n	8004024 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8e:	d149      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	613b      	str	r3, [r7, #16]
   return(result);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fec:	623a      	str	r2, [r7, #32]
 8003fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69f9      	ldr	r1, [r7, #28]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e010      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4013      	ands	r3, r2
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	429a      	cmp	r2, r3
 8004040:	f43f af46 	beq.w	8003ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3770      	adds	r7, #112	; 0x70
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_UARTEx_DisableFifoMode+0x16>
 8004060:	2302      	movs	r3, #2
 8004062:	e027      	b.n	80040b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e02d      	b.n	8004134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f84f 	bl	80041b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004150:	2302      	movs	r3, #2
 8004152:	e02d      	b.n	80041b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f811 	bl	80041b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041d8:	e031      	b.n	800423e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041da:	2308      	movs	r3, #8
 80041dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041de:	2308      	movs	r3, #8
 80041e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	0e5b      	lsrs	r3, r3, #25
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	0f5b      	lsrs	r3, r3, #29
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004202:	7bbb      	ldrb	r3, [r7, #14]
 8004204:	7b3a      	ldrb	r2, [r7, #12]
 8004206:	4911      	ldr	r1, [pc, #68]	; (800424c <UARTEx_SetNbDataToProcess+0x94>)
 8004208:	5c8a      	ldrb	r2, [r1, r2]
 800420a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800420e:	7b3a      	ldrb	r2, [r7, #12]
 8004210:	490f      	ldr	r1, [pc, #60]	; (8004250 <UARTEx_SetNbDataToProcess+0x98>)
 8004212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004214:	fb93 f3f2 	sdiv	r3, r3, r2
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	7b7a      	ldrb	r2, [r7, #13]
 8004224:	4909      	ldr	r1, [pc, #36]	; (800424c <UARTEx_SetNbDataToProcess+0x94>)
 8004226:	5c8a      	ldrb	r2, [r1, r2]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800422c:	7b7a      	ldrb	r2, [r7, #13]
 800422e:	4908      	ldr	r1, [pc, #32]	; (8004250 <UARTEx_SetNbDataToProcess+0x98>)
 8004230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004232:	fb93 f3f2 	sdiv	r3, r3, r2
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	080070e8 	.word	0x080070e8
 8004250:	080070f0 	.word	0x080070f0

08004254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800425c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004260:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	b29b      	uxth	r3, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	b29b      	uxth	r3, r3
 8004272:	4013      	ands	r3, r2
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800428a:	b084      	sub	sp, #16
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	f107 0014 	add.w	r0, r7, #20
 8004298:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	b004      	add	sp, #16
 80042ca:	4770      	bx	lr

080042cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <SysTick_Handler+0x1c>)
 80042d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042d4:	f001 fcf8 	bl	8005cc8 <xTaskGetSchedulerState>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042de:	f002 fae3 	bl	80068a8 <xPortSysTickHandler>
  }
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000e010 	.word	0xe000e010

080042ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a07      	ldr	r2, [pc, #28]	; (8004318 <vApplicationGetIdleTaskMemory+0x2c>)
 80042fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a06      	ldr	r2, [pc, #24]	; (800431c <vApplicationGetIdleTaskMemory+0x30>)
 8004302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2280      	movs	r2, #128	; 0x80
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000490 	.word	0x20000490
 800431c:	2000054c 	.word	0x2000054c

08004320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <vApplicationGetTimerTaskMemory+0x2c>)
 8004330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a06      	ldr	r2, [pc, #24]	; (8004350 <vApplicationGetTimerTaskMemory+0x30>)
 8004336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800433e:	601a      	str	r2, [r3, #0]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	2000074c 	.word	0x2000074c
 8004350:	20000808 	.word	0x20000808

08004354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0208 	add.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f103 0208 	add.w	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f103 0208 	add.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d103      	bne.n	8004416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e00c      	b.n	8004430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3308      	adds	r3, #8
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e002      	b.n	8004424 <vListInsert+0x2e>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d2f6      	bcs.n	800441e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6892      	ldr	r2, [r2, #8]
 800447e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6852      	ldr	r2, [r2, #4]
 8004488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	d103      	bne.n	800449c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044e6:	f002 f94d 	bl	8006784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	441a      	add	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	3b01      	subs	r3, #1
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	22ff      	movs	r2, #255	; 0xff
 800452a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	22ff      	movs	r2, #255	; 0xff
 8004532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d114      	bne.n	8004566 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01a      	beq.n	800457a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3310      	adds	r3, #16
 8004548:	4618      	mov	r0, r3
 800454a:	f001 f9fb 	bl	8005944 <xTaskRemoveFromEventList>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d012      	beq.n	800457a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <xQueueGenericReset+0xcc>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	e009      	b.n	800457a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3310      	adds	r3, #16
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fef2 	bl	8004354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff feed 	bl	8004354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800457a:	f002 f933 	bl	80067e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800457e:	2301      	movs	r3, #1
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08e      	sub	sp, #56	; 0x38
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <xQueueGenericCreateStatic+0x52>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <xQueueGenericCreateStatic+0x56>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <xQueueGenericCreateStatic+0x58>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	623b      	str	r3, [r7, #32]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <xQueueGenericCreateStatic+0x7e>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <xQueueGenericCreateStatic+0x82>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericCreateStatic+0x84>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	61fb      	str	r3, [r7, #28]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800462a:	2350      	movs	r3, #80	; 0x50
 800462c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b50      	cmp	r3, #80	; 0x50
 8004632:	d00a      	beq.n	800464a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	61bb      	str	r3, [r7, #24]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800464a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800465e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f805 	bl	800467c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004674:	4618      	mov	r0, r3
 8004676:	3730      	adds	r7, #48	; 0x30
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e002      	b.n	800469e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046aa:	2101      	movs	r1, #1
 80046ac:	69b8      	ldr	r0, [r7, #24]
 80046ae:	f7ff ff05 	bl	80044bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	; 0x38
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericSend+0x32>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <xQueueGenericSend+0x40>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <xQueueGenericSend+0x44>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <xQueueGenericSend+0x46>
 8004708:	2300      	movs	r3, #0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <xQueueGenericSend+0x60>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x6e>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <xQueueGenericSend+0x72>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericSend+0x74>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueGenericSend+0x8e>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	623b      	str	r3, [r7, #32]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004752:	f001 fab9 	bl	8005cc8 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <xQueueGenericSend+0x9e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueGenericSend+0xa2>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueGenericSend+0xa4>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueGenericSend+0xbe>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61fb      	str	r3, [r7, #28]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004782:	f001 ffff 	bl	8006784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <xQueueGenericSend+0xd4>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d129      	bne.n	80047ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479e:	f000 fa0b 	bl	8004bb8 <prvCopyDataToQueue>
 80047a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	3324      	adds	r3, #36	; 0x24
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f8c7 	bl	8005944 <xTaskRemoveFromEventList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047bc:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <xQueueGenericSend+0x1f8>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	e00a      	b.n	80047e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <xQueueGenericSend+0x1f8>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047e4:	f001 fffe 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e063      	b.n	80048b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047f2:	f001 fff7 	bl	80067e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e05c      	b.n	80048b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	4618      	mov	r0, r3
 8004806:	f001 f901 	bl	8005a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800480a:	2301      	movs	r3, #1
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800480e:	f001 ffe9 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004812:	f000 fe6d 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004816:	f001 ffb5 	bl	8006784 <vPortEnterCritical>
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004820:	b25b      	sxtb	r3, r3
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d103      	bne.n	8004830 <xQueueGenericSend+0x16c>
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004836:	b25b      	sxtb	r3, r3
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x182>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004846:	f001 ffcd 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800484a:	1d3a      	adds	r2, r7, #4
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f8f0 	bl	8005a38 <xTaskCheckForTimeOut>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d124      	bne.n	80048a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800485e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004860:	f000 faa2 	bl	8004da8 <prvIsQueueFull>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	3310      	adds	r3, #16
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f816 	bl	80058a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487a:	f000 fa2d 	bl	8004cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800487e:	f000 fe45 	bl	800550c <xTaskResumeAll>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	f47f af7c 	bne.w	8004782 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <xQueueGenericSend+0x1f8>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	e772      	b.n	8004782 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800489c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489e:	f000 fa1b 	bl	8004cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048a2:	f000 fe33 	bl	800550c <xTaskResumeAll>
 80048a6:	e76c      	b.n	8004782 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048aa:	f000 fa15 	bl	8004cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ae:	f000 fe2d 	bl	800550c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3738      	adds	r7, #56	; 0x38
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b090      	sub	sp, #64	; 0x40
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d103      	bne.n	80048fc <xQueueGenericSendFromISR+0x3c>
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <xQueueGenericSendFromISR+0x40>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <xQueueGenericSendFromISR+0x42>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d103      	bne.n	800492a <xQueueGenericSendFromISR+0x6a>
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <xQueueGenericSendFromISR+0x6e>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueGenericSendFromISR+0x70>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	623b      	str	r3, [r7, #32]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800494a:	f001 fffd 	bl	8006948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800494e:	f3ef 8211 	mrs	r2, BASEPRI
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	61fa      	str	r2, [r7, #28]
 8004964:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004966:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <xQueueGenericSendFromISR+0xbc>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d12f      	bne.n	80049dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004992:	f000 f911 	bl	8004bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004996:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d112      	bne.n	80049c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d016      	beq.n	80049d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	3324      	adds	r3, #36	; 0x24
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 ffc9 	bl	8005944 <xTaskRemoveFromEventList>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00e      	beq.n	80049d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e007      	b.n	80049d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049ca:	3301      	adds	r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	b25a      	sxtb	r2, r3
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049d6:	2301      	movs	r3, #1
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049da:	e001      	b.n	80049e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3740      	adds	r7, #64	; 0x40
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	; 0x30
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <xQueueReceive+0x30>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	623b      	str	r3, [r7, #32]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <xQueueReceive+0x3e>
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xQueueReceive+0x42>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueReceive+0x44>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xQueueReceive+0x5e>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61fb      	str	r3, [r7, #28]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a56:	f001 f937 	bl	8005cc8 <xTaskGetSchedulerState>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <xQueueReceive+0x6e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <xQueueReceive+0x72>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueReceive+0x74>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueReceive+0x8e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61bb      	str	r3, [r7, #24]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a86:	f001 fe7d 	bl	8006784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01f      	beq.n	8004ad6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9a:	f000 f8f7 	bl	8004c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00f      	beq.n	8004ace <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	3310      	adds	r3, #16
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 ff46 	bl	8005944 <xTaskRemoveFromEventList>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004abe:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <xQueueReceive+0x1bc>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ace:	f001 fe89 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e069      	b.n	8004baa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004adc:	f001 fe82 	bl	80067e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e062      	b.n	8004baa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 ff8c 	bl	8005a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004af8:	f001 fe74 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004afc:	f000 fcf8 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b00:	f001 fe40 	bl	8006784 <vPortEnterCritical>
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d103      	bne.n	8004b1a <xQueueReceive+0x122>
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d103      	bne.n	8004b30 <xQueueReceive+0x138>
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b30:	f001 fe58 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b34:	1d3a      	adds	r2, r7, #4
 8004b36:	f107 0310 	add.w	r3, r7, #16
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 ff7b 	bl	8005a38 <xTaskCheckForTimeOut>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d123      	bne.n	8004b90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4a:	f000 f917 	bl	8004d7c <prvIsQueueEmpty>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d017      	beq.n	8004b84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fea1 	bl	80058a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b64:	f000 f8b8 	bl	8004cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b68:	f000 fcd0 	bl	800550c <xTaskResumeAll>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d189      	bne.n	8004a86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <xQueueReceive+0x1bc>)
 8004b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	e780      	b.n	8004a86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b86:	f000 f8a7 	bl	8004cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b8a:	f000 fcbf 	bl	800550c <xTaskResumeAll>
 8004b8e:	e77a      	b.n	8004a86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b92:	f000 f8a1 	bl	8004cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b96:	f000 fcb9 	bl	800550c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9c:	f000 f8ee 	bl	8004d7c <prvIsQueueEmpty>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f43f af6f 	beq.w	8004a86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3730      	adds	r7, #48	; 0x30
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d14d      	bne.n	8004c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f88e 	bl	8005d04 <xTaskPriorityDisinherit>
 8004be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	e043      	b.n	8004c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d119      	bne.n	8004c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6858      	ldr	r0, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	f002 f8f0 	bl	8006de8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d32b      	bcc.n	8004c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e026      	b.n	8004c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68d8      	ldr	r0, [r3, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	461a      	mov	r2, r3
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	f002 f8d6 	bl	8006de8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	425b      	negs	r3, r3
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d207      	bcs.n	8004c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	425b      	negs	r3, r3
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d105      	bne.n	8004c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c82:	697b      	ldr	r3, [r7, #20]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d303      	bcc.n	8004cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6838      	ldr	r0, [r7, #0]
 8004ccc:	f002 f88c 	bl	8006de8 <memcpy>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ce0:	f001 fd50 	bl	8006784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cec:	e011      	b.n	8004d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d012      	beq.n	8004d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3324      	adds	r3, #36	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fe22 	bl	8005944 <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d06:	f000 fef9 	bl	8005afc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dce9      	bgt.n	8004cee <prvUnlockQueue+0x16>
 8004d1a:	e000      	b.n	8004d1e <prvUnlockQueue+0x46>
					break;
 8004d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	22ff      	movs	r2, #255	; 0xff
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d26:	f001 fd5d 	bl	80067e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d2a:	f001 fd2b 	bl	8006784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d36:	e011      	b.n	8004d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d012      	beq.n	8004d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3310      	adds	r3, #16
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fdfd 	bl	8005944 <xTaskRemoveFromEventList>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d50:	f000 fed4 	bl	8005afc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d54:	7bbb      	ldrb	r3, [r7, #14]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dce9      	bgt.n	8004d38 <prvUnlockQueue+0x60>
 8004d64:	e000      	b.n	8004d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d70:	f001 fd38 	bl	80067e4 <vPortExitCritical>
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d84:	f001 fcfe 	bl	8006784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e001      	b.n	8004d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9a:	f001 fd23 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004db0:	f001 fce8 	bl	8006784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d102      	bne.n	8004dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e001      	b.n	8004dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dca:	f001 fd0b 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e014      	b.n	8004e12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004de8:	4a0f      	ldr	r2, [pc, #60]	; (8004e28 <vQueueAddToRegistry+0x50>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004df4:	490c      	ldr	r1, [pc, #48]	; (8004e28 <vQueueAddToRegistry+0x50>)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <vQueueAddToRegistry+0x50>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e0a:	e006      	b.n	8004e1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b07      	cmp	r3, #7
 8004e16:	d9e7      	bls.n	8004de8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000c08 	.word	0x20000c08

08004e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e3c:	f001 fca2 	bl	8006784 <vPortEnterCritical>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d103      	bne.n	8004e56 <vQueueWaitForMessageRestricted+0x2a>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d103      	bne.n	8004e6c <vQueueWaitForMessageRestricted+0x40>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e6c:	f001 fcba 	bl	80067e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3324      	adds	r3, #36	; 0x24
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fd33 	bl	80058ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff ff26 	bl	8004cd8 <prvUnlockQueue>
	}
 8004e8c:	bf00      	nop
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08e      	sub	sp, #56	; 0x38
 8004e98:	af04      	add	r7, sp, #16
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	623b      	str	r3, [r7, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <xTaskCreateStatic+0x46>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61fb      	str	r3, [r7, #28]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eda:	23bc      	movs	r3, #188	; 0xbc
 8004edc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2bbc      	cmp	r3, #188	; 0xbc
 8004ee2:	d00a      	beq.n	8004efa <xTaskCreateStatic+0x66>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	61bb      	str	r3, [r7, #24]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004efa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01e      	beq.n	8004f40 <xTaskCreateStatic+0xac>
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01b      	beq.n	8004f40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9303      	str	r3, [sp, #12]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	9302      	str	r3, [sp, #8]
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f850 	bl	8004fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3a:	f000 f8f3 	bl	8005124 <prvAddNewTaskToReadyList>
 8004f3e:	e001      	b.n	8004f44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f44:	697b      	ldr	r3, [r7, #20]
	}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	; 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08c      	sub	sp, #48	; 0x30
 8004f52:	af04      	add	r7, sp, #16
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 fd30 	bl	80069c8 <pvPortMalloc>
 8004f68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00e      	beq.n	8004f8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f70:	20bc      	movs	r0, #188	; 0xbc
 8004f72:	f001 fd29 	bl	80069c8 <pvPortMalloc>
 8004f76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
 8004f84:	e005      	b.n	8004f92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f86:	6978      	ldr	r0, [r7, #20]
 8004f88:	f001 fdea 	bl	8006b60 <vPortFree>
 8004f8c:	e001      	b.n	8004f92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9303      	str	r3, [sp, #12]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f80e 	bl	8004fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fbc:	69f8      	ldr	r0, [r7, #28]
 8004fbe:	f000 f8b1 	bl	8005124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e002      	b.n	8004fce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fce:	69bb      	ldr	r3, [r7, #24]
	}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	461a      	mov	r2, r3
 8004ff0:	21a5      	movs	r1, #165	; 0xa5
 8004ff2:	f001 ff07 	bl	8006e04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005000:	3b01      	subs	r3, #1
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f023 0307 	bic.w	r3, r3, #7
 800500e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <prvInitialiseNewTask+0x58>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	617b      	str	r3, [r7, #20]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01f      	beq.n	8005076 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	e012      	b.n	8005062 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	7819      	ldrb	r1, [r3, #0]
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	3334      	adds	r3, #52	; 0x34
 800504c:	460a      	mov	r2, r1
 800504e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d006      	beq.n	800506a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	3301      	adds	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	2b0f      	cmp	r3, #15
 8005066:	d9e9      	bls.n	800503c <prvInitialiseNewTask+0x64>
 8005068:	e000      	b.n	800506c <prvInitialiseNewTask+0x94>
			{
				break;
 800506a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005074:	e003      	b.n	800507e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	2b37      	cmp	r3, #55	; 0x37
 8005082:	d901      	bls.n	8005088 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005084:	2337      	movs	r3, #55	; 0x37
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	2200      	movs	r2, #0
 8005098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f978 	bl	8004394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	3318      	adds	r3, #24
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff f973 	bl	8004394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	3354      	adds	r3, #84	; 0x54
 80050d8:	2260      	movs	r2, #96	; 0x60
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 fe91 	bl	8006e04 <memset>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <prvInitialiseNewTask+0x140>)
 80050e6:	659a      	str	r2, [r3, #88]	; 0x58
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <prvInitialiseNewTask+0x144>)
 80050ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	4a0b      	ldr	r2, [pc, #44]	; (8005120 <prvInitialiseNewTask+0x148>)
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	69b8      	ldr	r0, [r7, #24]
 80050fa:	f001 fa13 	bl	8006524 <pxPortInitialiseStack>
 80050fe:	4602      	mov	r2, r0
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005110:	bf00      	nop
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08007118 	.word	0x08007118
 800511c:	08007138 	.word	0x08007138
 8005120:	080070f8 	.word	0x080070f8

08005124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800512c:	f001 fb2a 	bl	8006784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005130:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <prvAddNewTaskToReadyList+0xc4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <prvAddNewTaskToReadyList+0xc4>)
 8005138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800513a:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005142:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005148:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <prvAddNewTaskToReadyList+0xc4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d110      	bne.n	8005172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005150:	f000 fcf8 	bl	8005b44 <prvInitialiseTaskLists>
 8005154:	e00d      	b.n	8005172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <prvAddNewTaskToReadyList+0xcc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800515e:	4b23      	ldr	r3, [pc, #140]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	429a      	cmp	r2, r3
 800516a:	d802      	bhi.n	8005172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800516c:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <prvAddNewTaskToReadyList+0xd0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <prvAddNewTaskToReadyList+0xd0>)
 800517a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <prvAddNewTaskToReadyList+0xd0>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <prvAddNewTaskToReadyList+0xd4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d903      	bls.n	8005198 <prvAddNewTaskToReadyList+0x74>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <prvAddNewTaskToReadyList+0xd4>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4a15      	ldr	r2, [pc, #84]	; (80051fc <prvAddNewTaskToReadyList+0xd8>)
 80051a6:	441a      	add	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f7ff f8fd 	bl	80043ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051b4:	f001 fb16 	bl	80067e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <prvAddNewTaskToReadyList+0xcc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00e      	beq.n	80051de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <prvAddNewTaskToReadyList+0xc8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d207      	bcs.n	80051de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <prvAddNewTaskToReadyList+0xdc>)
 80051d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	2000111c 	.word	0x2000111c
 80051ec:	20000c48 	.word	0x20000c48
 80051f0:	20001128 	.word	0x20001128
 80051f4:	20001138 	.word	0x20001138
 80051f8:	20001124 	.word	0x20001124
 80051fc:	20000c4c 	.word	0x20000c4c
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800520c:	f001 faba 	bl	8006784 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <vTaskSuspend+0x18>
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <vTaskSuspend+0xd4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	e000      	b.n	800521e <vTaskSuspend+0x1a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff f91f 	bl	8004468 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3318      	adds	r3, #24
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff f916 	bl	8004468 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4826      	ldr	r0, [pc, #152]	; (80052dc <vTaskSuspend+0xd8>)
 8005244:	f7ff f8b3 	bl	80043ae <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d103      	bne.n	800525c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800525c:	f001 fac2 	bl	80067e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <vTaskSuspend+0xdc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005268:	f001 fa8c 	bl	8006784 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800526c:	f000 fd0c 	bl	8005c88 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005270:	f001 fab8 	bl	80067e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <vTaskSuspend+0xd4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	429a      	cmp	r2, r3
 800527c:	d127      	bne.n	80052ce <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800527e:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <vTaskSuspend+0xdc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <vTaskSuspend+0xe0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <vTaskSuspend+0xa0>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	60bb      	str	r3, [r7, #8]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <vTaskSuspend+0xe4>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052b4:	e00b      	b.n	80052ce <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <vTaskSuspend+0xd8>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <vTaskSuspend+0xe8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d103      	bne.n	80052ca <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <vTaskSuspend+0xd4>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
	}
 80052c8:	e001      	b.n	80052ce <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80052ca:	f000 fa87 	bl	80057dc <vTaskSwitchContext>
	}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000c48 	.word	0x20000c48
 80052dc:	20001108 	.word	0x20001108
 80052e0:	20001128 	.word	0x20001128
 80052e4:	20001144 	.word	0x20001144
 80052e8:	e000ed04 	.word	0xe000ed04
 80052ec:	2000111c 	.word	0x2000111c

080052f0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60fb      	str	r3, [r7, #12]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <prvTaskIsTaskSuspended+0x5c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10a      	bne.n	800533c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <prvTaskIsTaskSuspended+0x60>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d005      	beq.n	800533c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800533c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800533e:	4618      	mov	r0, r3
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20001108 	.word	0x20001108
 8005350:	200010dc 	.word	0x200010dc

08005354 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10a      	bne.n	800537c <vTaskResume+0x28>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60bb      	str	r3, [r7, #8]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <vTaskResume+0xac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	429a      	cmp	r2, r3
 8005384:	d038      	beq.n	80053f8 <vTaskResume+0xa4>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d035      	beq.n	80053f8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800538c:	f001 f9fa 	bl	8006784 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff ffad 	bl	80052f0 <prvTaskIsTaskSuspended>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d02b      	beq.n	80053f4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3304      	adds	r3, #4
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff f861 	bl	8004468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <vTaskResume+0xb0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d903      	bls.n	80053ba <vTaskResume+0x66>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	4a13      	ldr	r2, [pc, #76]	; (8005404 <vTaskResume+0xb0>)
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <vTaskResume+0xb4>)
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4619      	mov	r1, r3
 80053d0:	4610      	mov	r0, r2
 80053d2:	f7fe ffec 	bl	80043ae <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <vTaskResume+0xac>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d307      	bcc.n	80053f4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <vTaskResume+0xb8>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80053f4:	f001 f9f6 	bl	80067e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000c48 	.word	0x20000c48
 8005404:	20001124 	.word	0x20001124
 8005408:	20000c4c 	.word	0x20000c4c
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	; 0x28
 8005414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800541e:	463a      	mov	r2, r7
 8005420:	1d39      	adds	r1, r7, #4
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe ff60 	bl	80042ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	9202      	str	r2, [sp, #8]
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	460a      	mov	r2, r1
 800543e:	4924      	ldr	r1, [pc, #144]	; (80054d0 <vTaskStartScheduler+0xc0>)
 8005440:	4824      	ldr	r0, [pc, #144]	; (80054d4 <vTaskStartScheduler+0xc4>)
 8005442:	f7ff fd27 	bl	8004e94 <xTaskCreateStatic>
 8005446:	4603      	mov	r3, r0
 8005448:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <vTaskStartScheduler+0xc8>)
 800544a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <vTaskStartScheduler+0xc8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e001      	b.n	800545e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d102      	bne.n	800546a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005464:	f000 fd10 	bl	8005e88 <xTimerCreateTimerTask>
 8005468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d11b      	bne.n	80054a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	613b      	str	r3, [r7, #16]
}
 8005482:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005484:	4b15      	ldr	r3, [pc, #84]	; (80054dc <vTaskStartScheduler+0xcc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3354      	adds	r3, #84	; 0x54
 800548a:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <vTaskStartScheduler+0xd0>)
 800548c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <vTaskStartScheduler+0xd4>)
 8005490:	f04f 32ff 	mov.w	r2, #4294967295
 8005494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <vTaskStartScheduler+0xd8>)
 8005498:	2201      	movs	r2, #1
 800549a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <vTaskStartScheduler+0xdc>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a2:	f001 f8cd 	bl	8006640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a6:	e00e      	b.n	80054c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d10a      	bne.n	80054c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <vTaskStartScheduler+0xb4>
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	08007018 	.word	0x08007018
 80054d4:	08005b15 	.word	0x08005b15
 80054d8:	20001140 	.word	0x20001140
 80054dc:	20000c48 	.word	0x20000c48
 80054e0:	20000014 	.word	0x20000014
 80054e4:	2000113c 	.word	0x2000113c
 80054e8:	20001128 	.word	0x20001128
 80054ec:	20001120 	.word	0x20001120

080054f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <vTaskSuspendAll+0x18>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a03      	ldr	r2, [pc, #12]	; (8005508 <vTaskSuspendAll+0x18>)
 80054fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20001144 	.word	0x20001144

0800550c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800551a:	4b42      	ldr	r3, [pc, #264]	; (8005624 <xTaskResumeAll+0x118>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <xTaskResumeAll+0x2c>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	603b      	str	r3, [r7, #0]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005538:	f001 f924 	bl	8006784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800553c:	4b39      	ldr	r3, [pc, #228]	; (8005624 <xTaskResumeAll+0x118>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	4a38      	ldr	r2, [pc, #224]	; (8005624 <xTaskResumeAll+0x118>)
 8005544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <xTaskResumeAll+0x118>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d162      	bne.n	8005614 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800554e:	4b36      	ldr	r3, [pc, #216]	; (8005628 <xTaskResumeAll+0x11c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d05e      	beq.n	8005614 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005556:	e02f      	b.n	80055b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005558:	4b34      	ldr	r3, [pc, #208]	; (800562c <xTaskResumeAll+0x120>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3318      	adds	r3, #24
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe ff7f 	bl	8004468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe ff7a 	bl	8004468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <xTaskResumeAll+0x124>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d903      	bls.n	8005588 <xTaskResumeAll+0x7c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <xTaskResumeAll+0x124>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <xTaskResumeAll+0x128>)
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe ff05 	bl	80043ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b23      	ldr	r3, [pc, #140]	; (8005638 <xTaskResumeAll+0x12c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055b2:	4b22      	ldr	r3, [pc, #136]	; (800563c <xTaskResumeAll+0x130>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <xTaskResumeAll+0x120>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1cb      	bne.n	8005558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055c6:	f000 fb5f 	bl	8005c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055ca:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <xTaskResumeAll+0x134>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055d6:	f000 f847 	bl	8005668 <xTaskIncrementTick>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055e0:	4b16      	ldr	r3, [pc, #88]	; (800563c <xTaskResumeAll+0x130>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f1      	bne.n	80055d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <xTaskResumeAll+0x134>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <xTaskResumeAll+0x130>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <xTaskResumeAll+0x138>)
 8005606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005614:	f001 f8e6 	bl	80067e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005618:	68bb      	ldr	r3, [r7, #8]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20001144 	.word	0x20001144
 8005628:	2000111c 	.word	0x2000111c
 800562c:	200010dc 	.word	0x200010dc
 8005630:	20001124 	.word	0x20001124
 8005634:	20000c4c 	.word	0x20000c4c
 8005638:	20000c48 	.word	0x20000c48
 800563c:	20001130 	.word	0x20001130
 8005640:	2000112c 	.word	0x2000112c
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800564e:	4b05      	ldr	r3, [pc, #20]	; (8005664 <xTaskGetTickCount+0x1c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005654:	687b      	ldr	r3, [r7, #4]
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20001120 	.word	0x20001120

08005668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005672:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <xTaskIncrementTick+0x148>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 808f 	bne.w	800579a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800567c:	4b4d      	ldr	r3, [pc, #308]	; (80057b4 <xTaskIncrementTick+0x14c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005684:	4a4b      	ldr	r2, [pc, #300]	; (80057b4 <xTaskIncrementTick+0x14c>)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d120      	bne.n	80056d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005690:	4b49      	ldr	r3, [pc, #292]	; (80057b8 <xTaskIncrementTick+0x150>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	603b      	str	r3, [r7, #0]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xTaskIncrementTick+0x46>
 80056b0:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <xTaskIncrementTick+0x150>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	4b41      	ldr	r3, [pc, #260]	; (80057bc <xTaskIncrementTick+0x154>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <xTaskIncrementTick+0x150>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	4a3f      	ldr	r2, [pc, #252]	; (80057bc <xTaskIncrementTick+0x154>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <xTaskIncrementTick+0x158>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	4a3d      	ldr	r2, [pc, #244]	; (80057c0 <xTaskIncrementTick+0x158>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	f000 fadb 	bl	8005c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d2:	4b3c      	ldr	r3, [pc, #240]	; (80057c4 <xTaskIncrementTick+0x15c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d349      	bcc.n	8005770 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056dc:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <xTaskIncrementTick+0x150>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e6:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <xTaskIncrementTick+0x15c>)
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	601a      	str	r2, [r3, #0]
					break;
 80056ee:	e03f      	b.n	8005770 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f0:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <xTaskIncrementTick+0x150>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d203      	bcs.n	8005710 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005708:	4a2e      	ldr	r2, [pc, #184]	; (80057c4 <xTaskIncrementTick+0x15c>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800570e:	e02f      	b.n	8005770 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fea7 	bl	8004468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3318      	adds	r3, #24
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fe9e 	bl	8004468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <xTaskIncrementTick+0x160>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d903      	bls.n	8005740 <xTaskIncrementTick+0xd8>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <xTaskIncrementTick+0x160>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <xTaskIncrementTick+0x164>)
 800574e:	441a      	add	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fe fe29 	bl	80043ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <xTaskIncrementTick+0x168>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	429a      	cmp	r2, r3
 8005768:	d3b8      	bcc.n	80056dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576e:	e7b5      	b.n	80056dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <xTaskIncrementTick+0x168>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005776:	4915      	ldr	r1, [pc, #84]	; (80057cc <xTaskIncrementTick+0x164>)
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d901      	bls.n	800578c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <xTaskIncrementTick+0x16c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e004      	b.n	80057a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <xTaskIncrementTick+0x170>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <xTaskIncrementTick+0x170>)
 80057a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057a4:	697b      	ldr	r3, [r7, #20]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20001144 	.word	0x20001144
 80057b4:	20001120 	.word	0x20001120
 80057b8:	200010d4 	.word	0x200010d4
 80057bc:	200010d8 	.word	0x200010d8
 80057c0:	20001134 	.word	0x20001134
 80057c4:	2000113c 	.word	0x2000113c
 80057c8:	20001124 	.word	0x20001124
 80057cc:	20000c4c 	.word	0x20000c4c
 80057d0:	20000c48 	.word	0x20000c48
 80057d4:	20001130 	.word	0x20001130
 80057d8:	2000112c 	.word	0x2000112c

080057dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e2:	4b2a      	ldr	r3, [pc, #168]	; (800588c <vTaskSwitchContext+0xb0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ea:	4b29      	ldr	r3, [pc, #164]	; (8005890 <vTaskSwitchContext+0xb4>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f0:	e046      	b.n	8005880 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057f2:	4b27      	ldr	r3, [pc, #156]	; (8005890 <vTaskSwitchContext+0xb4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b26      	ldr	r3, [pc, #152]	; (8005894 <vTaskSwitchContext+0xb8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e010      	b.n	8005822 <vTaskSwitchContext+0x46>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <vTaskSwitchContext+0x40>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	607b      	str	r3, [r7, #4]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <vTaskSwitchContext+0x3e>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b01      	subs	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	491d      	ldr	r1, [pc, #116]	; (8005898 <vTaskSwitchContext+0xbc>)
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0e4      	beq.n	8005800 <vTaskSwitchContext+0x24>
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <vTaskSwitchContext+0xbc>)
 8005842:	4413      	add	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3308      	adds	r3, #8
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <vTaskSwitchContext+0x8a>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	605a      	str	r2, [r3, #4]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a0b      	ldr	r2, [pc, #44]	; (800589c <vTaskSwitchContext+0xc0>)
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	4a08      	ldr	r2, [pc, #32]	; (8005894 <vTaskSwitchContext+0xb8>)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <vTaskSwitchContext+0xc0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3354      	adds	r3, #84	; 0x54
 800587c:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <vTaskSwitchContext+0xc4>)
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20001144 	.word	0x20001144
 8005890:	20001130 	.word	0x20001130
 8005894:	20001124 	.word	0x20001124
 8005898:	20000c4c 	.word	0x20000c4c
 800589c:	20000c48 	.word	0x20000c48
 80058a0:	20000014 	.word	0x20000014

080058a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60fb      	str	r3, [r7, #12]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <vTaskPlaceOnEventList+0x44>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3318      	adds	r3, #24
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fe fd8f 	bl	80043f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058d8:	2101      	movs	r1, #1
 80058da:	6838      	ldr	r0, [r7, #0]
 80058dc:	f000 fa80 	bl	8005de0 <prvAddCurrentTaskToDelayedList>
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000c48 	.word	0x20000c48

080058ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	617b      	str	r3, [r7, #20]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <vTaskPlaceOnEventListRestricted+0x54>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3318      	adds	r3, #24
 800591a:	4619      	mov	r1, r3
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7fe fd46 	bl	80043ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	68b8      	ldr	r0, [r7, #8]
 8005932:	f000 fa55 	bl	8005de0 <prvAddCurrentTaskToDelayedList>
	}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000c48 	.word	0x20000c48

08005944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	60fb      	str	r3, [r7, #12]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	3318      	adds	r3, #24
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fd77 	bl	8004468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597a:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <xTaskRemoveFromEventList+0xb0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d11d      	bne.n	80059be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	3304      	adds	r3, #4
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fd6e 	bl	8004468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <xTaskRemoveFromEventList+0xb4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d903      	bls.n	80059a0 <xTaskRemoveFromEventList+0x5c>
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <xTaskRemoveFromEventList+0xb4>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4a13      	ldr	r2, [pc, #76]	; (80059fc <xTaskRemoveFromEventList+0xb8>)
 80059ae:	441a      	add	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7fe fcf9 	bl	80043ae <vListInsertEnd>
 80059bc:	e005      	b.n	80059ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3318      	adds	r3, #24
 80059c2:	4619      	mov	r1, r3
 80059c4:	480e      	ldr	r0, [pc, #56]	; (8005a00 <xTaskRemoveFromEventList+0xbc>)
 80059c6:	f7fe fcf2 	bl	80043ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <xTaskRemoveFromEventList+0xc0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d905      	bls.n	80059e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <xTaskRemoveFromEventList+0xc4>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e001      	b.n	80059e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20001144 	.word	0x20001144
 80059f8:	20001124 	.word	0x20001124
 80059fc:	20000c4c 	.word	0x20000c4c
 8005a00:	200010dc 	.word	0x200010dc
 8005a04:	20000c48 	.word	0x20000c48
 8005a08:	20001130 	.word	0x20001130

08005a0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <vTaskInternalSetTimeOutState+0x24>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <vTaskInternalSetTimeOutState+0x28>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20001134 	.word	0x20001134
 8005a34:	20001120 	.word	0x20001120

08005a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	613b      	str	r3, [r7, #16]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60fb      	str	r3, [r7, #12]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a7a:	f000 fe83 	bl	8006784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <xTaskCheckForTimeOut+0xbc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d102      	bne.n	8005a9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e023      	b.n	8005ae6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <xTaskCheckForTimeOut+0xc0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d007      	beq.n	8005aba <xTaskCheckForTimeOut+0x82>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e015      	b.n	8005ae6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d20b      	bcs.n	8005adc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ff9b 	bl	8005a0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e004      	b.n	8005ae6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ae6:	f000 fe7d 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8005aea:	69fb      	ldr	r3, [r7, #28]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20001120 	.word	0x20001120
 8005af8:	20001134 	.word	0x20001134

08005afc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <vTaskMissedYield+0x14>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
}
 8005b06:	bf00      	nop
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20001130 	.word	0x20001130

08005b14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b1c:	f000 f852 	bl	8005bc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <prvIdleTask+0x28>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d9f9      	bls.n	8005b1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <prvIdleTask+0x2c>)
 8005b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b38:	e7f0      	b.n	8005b1c <prvIdleTask+0x8>
 8005b3a:	bf00      	nop
 8005b3c:	20000c4c 	.word	0x20000c4c
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	e00c      	b.n	8005b6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <prvInitialiseTaskLists+0x60>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fbf8 	bl	8004354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3301      	adds	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b37      	cmp	r3, #55	; 0x37
 8005b6e:	d9ef      	bls.n	8005b50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b70:	480d      	ldr	r0, [pc, #52]	; (8005ba8 <prvInitialiseTaskLists+0x64>)
 8005b72:	f7fe fbef 	bl	8004354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b76:	480d      	ldr	r0, [pc, #52]	; (8005bac <prvInitialiseTaskLists+0x68>)
 8005b78:	f7fe fbec 	bl	8004354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b7c:	480c      	ldr	r0, [pc, #48]	; (8005bb0 <prvInitialiseTaskLists+0x6c>)
 8005b7e:	f7fe fbe9 	bl	8004354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b82:	480c      	ldr	r0, [pc, #48]	; (8005bb4 <prvInitialiseTaskLists+0x70>)
 8005b84:	f7fe fbe6 	bl	8004354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b88:	480b      	ldr	r0, [pc, #44]	; (8005bb8 <prvInitialiseTaskLists+0x74>)
 8005b8a:	f7fe fbe3 	bl	8004354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <prvInitialiseTaskLists+0x78>)
 8005b90:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <prvInitialiseTaskLists+0x64>)
 8005b92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <prvInitialiseTaskLists+0x7c>)
 8005b96:	4a05      	ldr	r2, [pc, #20]	; (8005bac <prvInitialiseTaskLists+0x68>)
 8005b98:	601a      	str	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000c4c 	.word	0x20000c4c
 8005ba8:	200010ac 	.word	0x200010ac
 8005bac:	200010c0 	.word	0x200010c0
 8005bb0:	200010dc 	.word	0x200010dc
 8005bb4:	200010f0 	.word	0x200010f0
 8005bb8:	20001108 	.word	0x20001108
 8005bbc:	200010d4 	.word	0x200010d4
 8005bc0:	200010d8 	.word	0x200010d8

08005bc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bca:	e019      	b.n	8005c00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bcc:	f000 fdda 	bl	8006784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <prvCheckTasksWaitingTermination+0x50>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fc43 	bl	8004468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <prvCheckTasksWaitingTermination+0x54>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <prvCheckTasksWaitingTermination+0x54>)
 8005bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <prvCheckTasksWaitingTermination+0x58>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <prvCheckTasksWaitingTermination+0x58>)
 8005bf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bf6:	f000 fdf5 	bl	80067e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f810 	bl	8005c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <prvCheckTasksWaitingTermination+0x58>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e1      	bne.n	8005bcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200010f0 	.word	0x200010f0
 8005c18:	2000111c 	.word	0x2000111c
 8005c1c:	20001104 	.word	0x20001104

08005c20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3354      	adds	r3, #84	; 0x54
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f8ff 	bl	8006e30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 ff8d 	bl	8006b60 <vPortFree>
				vPortFree( pxTCB );
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 ff8a 	bl	8006b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c4c:	e018      	b.n	8005c80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d103      	bne.n	8005c60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 ff81 	bl	8006b60 <vPortFree>
	}
 8005c5e:	e00f      	b.n	8005c80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d00a      	beq.n	8005c80 <prvDeleteTCB+0x60>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	60fb      	str	r3, [r7, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <prvDeleteTCB+0x5e>
	}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <prvResetNextTaskUnblockTime+0x38>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ca0:	e008      	b.n	8005cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <prvResetNextTaskUnblockTime+0x38>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cb2:	6013      	str	r3, [r2, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	200010d4 	.word	0x200010d4
 8005cc4:	2000113c 	.word	0x2000113c

08005cc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <xTaskGetSchedulerState+0x34>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
 8005cda:	e008      	b.n	8005cee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <xTaskGetSchedulerState+0x38>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	607b      	str	r3, [r7, #4]
 8005ce8:	e001      	b.n	8005cee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cee:	687b      	ldr	r3, [r7, #4]
	}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20001128 	.word	0x20001128
 8005d00:	20001144 	.word	0x20001144

08005d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d056      	beq.n	8005dc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d1a:	4b2e      	ldr	r3, [pc, #184]	; (8005dd4 <xTaskPriorityDisinherit+0xd0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d00a      	beq.n	8005d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	60fb      	str	r3, [r7, #12]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	60bb      	str	r3, [r7, #8]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	1e5a      	subs	r2, r3, #1
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d02c      	beq.n	8005dc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d128      	bne.n	8005dc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe fb74 	bl	8004468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <xTaskPriorityDisinherit+0xd4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d903      	bls.n	8005da8 <xTaskPriorityDisinherit+0xa4>
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	4a0c      	ldr	r2, [pc, #48]	; (8005dd8 <xTaskPriorityDisinherit+0xd4>)
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <xTaskPriorityDisinherit+0xd8>)
 8005db6:	441a      	add	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f7fe faf5 	bl	80043ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dc8:	697b      	ldr	r3, [r7, #20]
	}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000c48 	.word	0x20000c48
 8005dd8:	20001124 	.word	0x20001124
 8005ddc:	20000c4c 	.word	0x20000c4c

08005de0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dea:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fb36 	bl	8004468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d10a      	bne.n	8005e1a <prvAddCurrentTaskToDelayedList+0x3a>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4819      	ldr	r0, [pc, #100]	; (8005e78 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e14:	f7fe facb 	bl	80043ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e18:	e026      	b.n	8005e68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e22:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d209      	bcs.n	8005e46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fe fad9 	bl	80043f6 <vListInsert>
}
 8005e44:	e010      	b.n	8005e68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e46:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe facf 	bl	80043f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d202      	bcs.n	8005e68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6013      	str	r3, [r2, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20001120 	.word	0x20001120
 8005e74:	20000c48 	.word	0x20000c48
 8005e78:	20001108 	.word	0x20001108
 8005e7c:	200010d8 	.word	0x200010d8
 8005e80:	200010d4 	.word	0x200010d4
 8005e84:	2000113c 	.word	0x2000113c

08005e88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e92:	f000 fb07 	bl	80064a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <xTimerCreateTimerTask+0x80>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d021      	beq.n	8005ee2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ea6:	1d3a      	adds	r2, r7, #4
 8005ea8:	f107 0108 	add.w	r1, r7, #8
 8005eac:	f107 030c 	add.w	r3, r7, #12
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fa35 	bl	8004320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	4910      	ldr	r1, [pc, #64]	; (8005f0c <xTimerCreateTimerTask+0x84>)
 8005eca:	4811      	ldr	r0, [pc, #68]	; (8005f10 <xTimerCreateTimerTask+0x88>)
 8005ecc:	f7fe ffe2 	bl	8004e94 <xTaskCreateStatic>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4a10      	ldr	r2, [pc, #64]	; (8005f14 <xTimerCreateTimerTask+0x8c>)
 8005ed4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <xTimerCreateTimerTask+0x8c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	613b      	str	r3, [r7, #16]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20001178 	.word	0x20001178
 8005f0c:	08007020 	.word	0x08007020
 8005f10:	0800604d 	.word	0x0800604d
 8005f14:	2000117c 	.word	0x2000117c

08005f18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	623b      	str	r3, [r7, #32]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <xTimerGenericCommand+0x98>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d02a      	beq.n	8005fa4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	dc18      	bgt.n	8005f92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f60:	f7ff feb2 	bl	8005cc8 <xTaskGetSchedulerState>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d109      	bne.n	8005f7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <xTimerGenericCommand+0x98>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f107 0110 	add.w	r1, r7, #16
 8005f72:	2300      	movs	r3, #0
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	f7fe fba5 	bl	80046c4 <xQueueGenericSend>
 8005f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f7c:	e012      	b.n	8005fa4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <xTimerGenericCommand+0x98>)
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f107 0110 	add.w	r1, r7, #16
 8005f86:	2300      	movs	r3, #0
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f7fe fb9b 	bl	80046c4 <xQueueGenericSend>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f90:	e008      	b.n	8005fa4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <xTimerGenericCommand+0x98>)
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f107 0110 	add.w	r1, r7, #16
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	f7fe fc8f 	bl	80048c0 <xQueueGenericSendFromISR>
 8005fa2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3728      	adds	r7, #40	; 0x28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20001178 	.word	0x20001178

08005fb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	4b22      	ldr	r3, [pc, #136]	; (8006048 <prvProcessExpiredTimer+0x94>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fa4b 	bl	8004468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	18d1      	adds	r1, r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	6978      	ldr	r0, [r7, #20]
 8005fee:	f000 f8d1 	bl	8006194 <prvInsertTimerInActiveList>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01f      	beq.n	8006038 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	2100      	movs	r1, #0
 8006002:	6978      	ldr	r0, [r7, #20]
 8006004:	f7ff ff88 	bl	8005f18 <xTimerGenericCommand>
 8006008:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d113      	bne.n	8006038 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	b2da      	uxtb	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	6978      	ldr	r0, [r7, #20]
 800603e:	4798      	blx	r3
}
 8006040:	bf00      	nop
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20001170 	.word	0x20001170

0800604c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006054:	f107 0308 	add.w	r3, r7, #8
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f857 	bl	800610c <prvGetNextExpireTime>
 800605e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4619      	mov	r1, r3
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f803 	bl	8006070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800606a:	f000 f8d5 	bl	8006218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800606e:	e7f1      	b.n	8006054 <prvTimerTask+0x8>

08006070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800607a:	f7ff fa39 	bl	80054f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f866 	bl	8006154 <prvSampleTimeNow>
 8006088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d130      	bne.n	80060f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <prvProcessTimerOrBlockTask+0x3c>
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	429a      	cmp	r2, r3
 800609c:	d806      	bhi.n	80060ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800609e:	f7ff fa35 	bl	800550c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff85 	bl	8005fb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060aa:	e024      	b.n	80060f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060b2:	4b13      	ldr	r3, [pc, #76]	; (8006100 <prvProcessTimerOrBlockTask+0x90>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <prvProcessTimerOrBlockTask+0x50>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <prvProcessTimerOrBlockTask+0x52>
 80060c0:	2300      	movs	r3, #0
 80060c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <prvProcessTimerOrBlockTask+0x94>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fe feab 	bl	8004e2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060d6:	f7ff fa19 	bl	800550c <xTaskResumeAll>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <prvProcessTimerOrBlockTask+0x98>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
}
 80060f0:	e001      	b.n	80060f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060f2:	f7ff fa0b 	bl	800550c <xTaskResumeAll>
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20001174 	.word	0x20001174
 8006104:	20001178 	.word	0x20001178
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <prvGetNextExpireTime+0x44>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <prvGetNextExpireTime+0x16>
 800611e:	2201      	movs	r2, #1
 8006120:	e000      	b.n	8006124 <prvGetNextExpireTime+0x18>
 8006122:	2200      	movs	r2, #0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <prvGetNextExpireTime+0x44>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e001      	b.n	8006140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006140:	68fb      	ldr	r3, [r7, #12]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20001170 	.word	0x20001170

08006154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800615c:	f7ff fa74 	bl	8005648 <xTaskGetTickCount>
 8006160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <prvSampleTimeNow+0x3c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d205      	bcs.n	8006178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800616c:	f000 f936 	bl	80063dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e002      	b.n	800617e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800617e:	4a04      	ldr	r2, [pc, #16]	; (8006190 <prvSampleTimeNow+0x3c>)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20001180 	.word	0x20001180

08006194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d812      	bhi.n	80061e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d302      	bcc.n	80061ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e01b      	b.n	8006206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <prvInsertTimerInActiveList+0x7c>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fe f90c 	bl	80043f6 <vListInsert>
 80061de:	e012      	b.n	8006206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d206      	bcs.n	80061f6 <prvInsertTimerInActiveList+0x62>
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061f0:	2301      	movs	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e007      	b.n	8006206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061f6:	4b07      	ldr	r3, [pc, #28]	; (8006214 <prvInsertTimerInActiveList+0x80>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7fe f8f8 	bl	80043f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006206:	697b      	ldr	r3, [r7, #20]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20001174 	.word	0x20001174
 8006214:	20001170 	.word	0x20001170

08006218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	; 0x38
 800621c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800621e:	e0ca      	b.n	80063b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	da18      	bge.n	8006258 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	3304      	adds	r3, #4
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	61fb      	str	r3, [r7, #28]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624e:	6850      	ldr	r0, [r2, #4]
 8006250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006252:	6892      	ldr	r2, [r2, #8]
 8006254:	4611      	mov	r1, r2
 8006256:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f2c0 80aa 	blt.w	80063b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	3304      	adds	r3, #4
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe f8f9 	bl	8004468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006276:	463b      	mov	r3, r7
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff ff6b 	bl	8006154 <prvSampleTimeNow>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b09      	cmp	r3, #9
 8006284:	f200 8097 	bhi.w	80063b6 <prvProcessReceivedCommands+0x19e>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <prvProcessReceivedCommands+0x78>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062b9 	.word	0x080062b9
 800629c:	0800632d 	.word	0x0800632d
 80062a0:	08006341 	.word	0x08006341
 80062a4:	0800638b 	.word	0x0800638b
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	080062b9 	.word	0x080062b9
 80062b0:	0800632d 	.word	0x0800632d
 80062b4:	08006341 	.word	0x08006341
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	18d1      	adds	r1, r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d8:	f7ff ff5c 	bl	8006194 <prvInsertTimerInActiveList>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d069      	beq.n	80063b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d05e      	beq.n	80063b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	441a      	add	r2, r3
 8006300:	2300      	movs	r3, #0
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630a:	f7ff fe05 	bl	8005f18 <xTimerGenericCommand>
 800630e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d14f      	bne.n	80063b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61bb      	str	r3, [r7, #24]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800633e:	e03a      	b.n	80063b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	617b      	str	r3, [r7, #20]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006384:	f7ff ff06 	bl	8006194 <prvInsertTimerInActiveList>
					break;
 8006388:	e015      	b.n	80063b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639a:	f000 fbe1 	bl	8006b60 <vPortFree>
 800639e:	e00a      	b.n	80063b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063b2:	e000      	b.n	80063b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <prvProcessReceivedCommands+0x1c0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1d39      	adds	r1, r7, #4
 80063bc:	2200      	movs	r2, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fb1a 	bl	80049f8 <xQueueReceive>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f47f af2a 	bne.w	8006220 <prvProcessReceivedCommands+0x8>
	}
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	3730      	adds	r7, #48	; 0x30
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20001178 	.word	0x20001178

080063dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063e2:	e048      	b.n	8006476 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063e4:	4b2d      	ldr	r3, [pc, #180]	; (800649c <prvSwitchTimerLists+0xc0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ee:	4b2b      	ldr	r3, [pc, #172]	; (800649c <prvSwitchTimerLists+0xc0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe f833 	bl	8004468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d02e      	beq.n	8006476 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	d90e      	bls.n	8006448 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006436:	4b19      	ldr	r3, [pc, #100]	; (800649c <prvSwitchTimerLists+0xc0>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f7fd ffd8 	bl	80043f6 <vListInsert>
 8006446:	e016      	b.n	8006476 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006448:	2300      	movs	r3, #0
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	2300      	movs	r3, #0
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	2100      	movs	r1, #0
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fd60 	bl	8005f18 <xTimerGenericCommand>
 8006458:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	603b      	str	r3, [r7, #0]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006476:	4b09      	ldr	r3, [pc, #36]	; (800649c <prvSwitchTimerLists+0xc0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1b1      	bne.n	80063e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <prvSwitchTimerLists+0xc0>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006486:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <prvSwitchTimerLists+0xc4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a04      	ldr	r2, [pc, #16]	; (800649c <prvSwitchTimerLists+0xc0>)
 800648c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800648e:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <prvSwitchTimerLists+0xc4>)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6013      	str	r3, [r2, #0]
}
 8006494:	bf00      	nop
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20001170 	.word	0x20001170
 80064a0:	20001174 	.word	0x20001174

080064a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064aa:	f000 f96b 	bl	8006784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064ae:	4b15      	ldr	r3, [pc, #84]	; (8006504 <prvCheckForValidListAndQueue+0x60>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d120      	bne.n	80064f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064b6:	4814      	ldr	r0, [pc, #80]	; (8006508 <prvCheckForValidListAndQueue+0x64>)
 80064b8:	f7fd ff4c 	bl	8004354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064bc:	4813      	ldr	r0, [pc, #76]	; (800650c <prvCheckForValidListAndQueue+0x68>)
 80064be:	f7fd ff49 	bl	8004354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064c2:	4b13      	ldr	r3, [pc, #76]	; (8006510 <prvCheckForValidListAndQueue+0x6c>)
 80064c4:	4a10      	ldr	r2, [pc, #64]	; (8006508 <prvCheckForValidListAndQueue+0x64>)
 80064c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <prvCheckForValidListAndQueue+0x70>)
 80064ca:	4a10      	ldr	r2, [pc, #64]	; (800650c <prvCheckForValidListAndQueue+0x68>)
 80064cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	4b11      	ldr	r3, [pc, #68]	; (8006518 <prvCheckForValidListAndQueue+0x74>)
 80064d4:	4a11      	ldr	r2, [pc, #68]	; (800651c <prvCheckForValidListAndQueue+0x78>)
 80064d6:	2110      	movs	r1, #16
 80064d8:	200a      	movs	r0, #10
 80064da:	f7fe f857 	bl	800458c <xQueueGenericCreateStatic>
 80064de:	4603      	mov	r3, r0
 80064e0:	4a08      	ldr	r2, [pc, #32]	; (8006504 <prvCheckForValidListAndQueue+0x60>)
 80064e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064e4:	4b07      	ldr	r3, [pc, #28]	; (8006504 <prvCheckForValidListAndQueue+0x60>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <prvCheckForValidListAndQueue+0x60>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	490b      	ldr	r1, [pc, #44]	; (8006520 <prvCheckForValidListAndQueue+0x7c>)
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fc70 	bl	8004dd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064f8:	f000 f974 	bl	80067e4 <vPortExitCritical>
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20001178 	.word	0x20001178
 8006508:	20001148 	.word	0x20001148
 800650c:	2000115c 	.word	0x2000115c
 8006510:	20001170 	.word	0x20001170
 8006514:	20001174 	.word	0x20001174
 8006518:	20001224 	.word	0x20001224
 800651c:	20001184 	.word	0x20001184
 8006520:	08007028 	.word	0x08007028

08006524 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3b04      	subs	r3, #4
 8006534:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800653c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b04      	subs	r3, #4
 8006542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f023 0201 	bic.w	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3b04      	subs	r3, #4
 8006552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006554:	4a0c      	ldr	r2, [pc, #48]	; (8006588 <pxPortInitialiseStack+0x64>)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b14      	subs	r3, #20
 800655e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b04      	subs	r3, #4
 800656a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f06f 0202 	mvn.w	r2, #2
 8006572:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3b20      	subs	r3, #32
 8006578:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800657a:	68fb      	ldr	r3, [r7, #12]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	0800658d 	.word	0x0800658d

0800658c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <prvTaskExitError+0x54>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d00a      	beq.n	80065b6 <prvTaskExitError+0x2a>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <prvTaskExitError+0x28>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	60bb      	str	r3, [r7, #8]
}
 80065c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ca:	bf00      	nop
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0fc      	beq.n	80065cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000010 	.word	0x20000010
	...

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006618:	4808      	ldr	r0, [pc, #32]	; (800663c <prvPortStartFirstTask+0x24>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8814 	msr	CONTROL, r0
 800662a:	b662      	cpsie	i
 800662c:	b661      	cpsie	f
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	df00      	svc	0
 8006638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800663a:	bf00      	nop
 800663c:	e000ed08 	.word	0xe000ed08

08006640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006646:	4b46      	ldr	r3, [pc, #280]	; (8006760 <xPortStartScheduler+0x120>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a46      	ldr	r2, [pc, #280]	; (8006764 <xPortStartScheduler+0x124>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10a      	bne.n	8006666 <xPortStartScheduler+0x26>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006666:	4b3e      	ldr	r3, [pc, #248]	; (8006760 <xPortStartScheduler+0x120>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a3f      	ldr	r2, [pc, #252]	; (8006768 <xPortStartScheduler+0x128>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10a      	bne.n	8006686 <xPortStartScheduler+0x46>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006686:	4b39      	ldr	r3, [pc, #228]	; (800676c <xPortStartScheduler+0x12c>)
 8006688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	22ff      	movs	r2, #255	; 0xff
 8006696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <xPortStartScheduler+0x130>)
 80066ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ae:	4b31      	ldr	r3, [pc, #196]	; (8006774 <xPortStartScheduler+0x134>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b4:	e009      	b.n	80066ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066b6:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <xPortStartScheduler+0x134>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <xPortStartScheduler+0x134>)
 80066be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d0ef      	beq.n	80066b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066d6:	4b27      	ldr	r3, [pc, #156]	; (8006774 <xPortStartScheduler+0x134>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1c3 0307 	rsb	r3, r3, #7
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00a      	beq.n	80066f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066f8:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <xPortStartScheduler+0x134>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <xPortStartScheduler+0x134>)
 8006700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <xPortStartScheduler+0x134>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800670a:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <xPortStartScheduler+0x134>)
 800670c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <xPortStartScheduler+0x138>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <xPortStartScheduler+0x138>)
 800671c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <xPortStartScheduler+0x138>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a14      	ldr	r2, [pc, #80]	; (8006778 <xPortStartScheduler+0x138>)
 8006728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800672c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800672e:	f000 f8dd 	bl	80068ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <xPortStartScheduler+0x13c>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006738:	f000 f8fc 	bl	8006934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <xPortStartScheduler+0x140>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0f      	ldr	r2, [pc, #60]	; (8006780 <xPortStartScheduler+0x140>)
 8006742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006748:	f7ff ff66 	bl	8006618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800674c:	f7ff f846 	bl	80057dc <vTaskSwitchContext>
	prvTaskExitError();
 8006750:	f7ff ff1c 	bl	800658c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	e000ed00 	.word	0xe000ed00
 8006764:	410fc271 	.word	0x410fc271
 8006768:	410fc270 	.word	0x410fc270
 800676c:	e000e400 	.word	0xe000e400
 8006770:	20001274 	.word	0x20001274
 8006774:	20001278 	.word	0x20001278
 8006778:	e000ed20 	.word	0xe000ed20
 800677c:	20000010 	.word	0x20000010
 8006780:	e000ef34 	.word	0xe000ef34

08006784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	607b      	str	r3, [r7, #4]
}
 800679c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800679e:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <vPortEnterCritical+0x58>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a0d      	ldr	r2, [pc, #52]	; (80067dc <vPortEnterCritical+0x58>)
 80067a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <vPortEnterCritical+0x58>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d10f      	bne.n	80067d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <vPortEnterCritical+0x5c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	603b      	str	r3, [r7, #0]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vPortEnterCritical+0x4a>
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	20000010 	.word	0x20000010
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <vPortExitCritical+0x50>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <vPortExitCritical+0x24>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	607b      	str	r3, [r7, #4]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <vPortExitCritical+0x50>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3b01      	subs	r3, #1
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <vPortExitCritical+0x50>)
 8006810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <vPortExitCritical+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <vPortExitCritical+0x42>
 800681a:	2300      	movs	r3, #0
 800681c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f383 8811 	msr	BASEPRI, r3
}
 8006824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000010 	.word	0x20000010
	...

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006864:	f380 8811 	msr	BASEPRI, r0
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f7fe ffb4 	bl	80057dc <vTaskSwitchContext>
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f380 8811 	msr	BASEPRI, r0
 800687c:	bc09      	pop	{r0, r3}
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006886:	f01e 0f10 	tst.w	lr, #16
 800688a:	bf08      	it	eq
 800688c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006890:	f380 8809 	msr	PSP, r0
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst>:
 80068a0:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c2:	f7fe fed1 	bl	8005668 <xTaskIncrementTick>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <xPortSysTickHandler+0x40>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	2300      	movs	r3, #0
 80068d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <vPortSetupTimerInterrupt+0x34>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <vPortSetupTimerInterrupt+0x38>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <vPortSetupTimerInterrupt+0x3c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <vPortSetupTimerInterrupt+0x40>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <vPortSetupTimerInterrupt+0x44>)
 800690a:	3b01      	subs	r3, #1
 800690c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800690e:	4b04      	ldr	r3, [pc, #16]	; (8006920 <vPortSetupTimerInterrupt+0x34>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	e000e010 	.word	0xe000e010
 8006924:	e000e018 	.word	0xe000e018
 8006928:	20000004 	.word	0x20000004
 800692c:	10624dd3 	.word	0x10624dd3
 8006930:	e000e014 	.word	0xe000e014

08006934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006944 <vPortEnableVFP+0x10>
 8006938:	6801      	ldr	r1, [r0, #0]
 800693a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800693e:	6001      	str	r1, [r0, #0]
 8006940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006942:	bf00      	nop
 8006944:	e000ed88 	.word	0xe000ed88

08006948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800694e:	f3ef 8305 	mrs	r3, IPSR
 8006952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d914      	bls.n	8006984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800695a:	4a17      	ldr	r2, [pc, #92]	; (80069b8 <vPortValidateInterruptPriority+0x70>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006964:	4b15      	ldr	r3, [pc, #84]	; (80069bc <vPortValidateInterruptPriority+0x74>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	7afa      	ldrb	r2, [r7, #11]
 800696a:	429a      	cmp	r2, r3
 800696c:	d20a      	bcs.n	8006984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <vPortValidateInterruptPriority+0x78>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <vPortValidateInterruptPriority+0x7c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d90a      	bls.n	80069aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	603b      	str	r3, [r7, #0]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <vPortValidateInterruptPriority+0x60>
	}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	e000e3f0 	.word	0xe000e3f0
 80069bc:	20001274 	.word	0x20001274
 80069c0:	e000ed0c 	.word	0xe000ed0c
 80069c4:	20001278 	.word	0x20001278

080069c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069d4:	f7fe fd8c 	bl	80054f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069d8:	4b5b      	ldr	r3, [pc, #364]	; (8006b48 <pvPortMalloc+0x180>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069e0:	f000 f920 	bl	8006c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069e4:	4b59      	ldr	r3, [pc, #356]	; (8006b4c <pvPortMalloc+0x184>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8093 	bne.w	8006b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01d      	beq.n	8006a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069f8:	2208      	movs	r2, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d014      	beq.n	8006a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	3308      	adds	r3, #8
 8006a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <pvPortMalloc+0x6c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	617b      	str	r3, [r7, #20]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d06e      	beq.n	8006b18 <pvPortMalloc+0x150>
 8006a3a:	4b45      	ldr	r3, [pc, #276]	; (8006b50 <pvPortMalloc+0x188>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d869      	bhi.n	8006b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a44:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <pvPortMalloc+0x18c>)
 8006a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a48:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <pvPortMalloc+0x18c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a4e:	e004      	b.n	8006a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d903      	bls.n	8006a6c <pvPortMalloc+0xa4>
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f1      	bne.n	8006a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a6c:	4b36      	ldr	r3, [pc, #216]	; (8006b48 <pvPortMalloc+0x180>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d050      	beq.n	8006b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	2308      	movs	r3, #8
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d91f      	bls.n	8006ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	613b      	str	r3, [r7, #16]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ad2:	69b8      	ldr	r0, [r7, #24]
 8006ad4:	f000 f908 	bl	8006ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <pvPortMalloc+0x188>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <pvPortMalloc+0x188>)
 8006ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ae6:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <pvPortMalloc+0x188>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <pvPortMalloc+0x190>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d203      	bcs.n	8006afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <pvPortMalloc+0x188>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <pvPortMalloc+0x190>)
 8006af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <pvPortMalloc+0x184>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <pvPortMalloc+0x194>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <pvPortMalloc+0x194>)
 8006b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b18:	f7fe fcf8 	bl	800550c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <pvPortMalloc+0x174>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60fb      	str	r3, [r7, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <pvPortMalloc+0x172>
	return pvReturn;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3728      	adds	r7, #40	; 0x28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20001e84 	.word	0x20001e84
 8006b4c:	20001e98 	.word	0x20001e98
 8006b50:	20001e88 	.word	0x20001e88
 8006b54:	20001e7c 	.word	0x20001e7c
 8006b58:	20001e8c 	.word	0x20001e8c
 8006b5c:	20001e90 	.word	0x20001e90

08006b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d04d      	beq.n	8006c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b72:	2308      	movs	r3, #8
 8006b74:	425b      	negs	r3, r3
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <vPortFree+0xb8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <vPortFree+0x44>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <vPortFree+0x62>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60bb      	str	r3, [r7, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <vPortFree+0xb8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01e      	beq.n	8006c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d11a      	bne.n	8006c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <vPortFree+0xb8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006be8:	f7fe fc82 	bl	80054f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <vPortFree+0xbc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <vPortFree+0xbc>)
 8006bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f874 	bl	8006ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <vPortFree+0xc0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	4a06      	ldr	r2, [pc, #24]	; (8006c20 <vPortFree+0xc0>)
 8006c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c0a:	f7fe fc7f 	bl	800550c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20001e98 	.word	0x20001e98
 8006c1c:	20001e88 	.word	0x20001e88
 8006c20:	20001e94 	.word	0x20001e94

08006c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c30:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <prvHeapInit+0xac>)
 8006c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00c      	beq.n	8006c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3307      	adds	r3, #7
 8006c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <prvHeapInit+0xac>)
 8006c54:	4413      	add	r3, r2
 8006c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <prvHeapInit+0xb0>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c62:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <prvHeapInit+0xb0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c70:	2208      	movs	r2, #8
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <prvHeapInit+0xb4>)
 8006c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <prvHeapInit+0xb4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c8e:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <prvHeapInit+0xb4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <prvHeapInit+0xb4>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <prvHeapInit+0xb8>)
 8006cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <prvHeapInit+0xbc>)
 8006cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <prvHeapInit+0xc0>)
 8006cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	2000127c 	.word	0x2000127c
 8006cd4:	20001e7c 	.word	0x20001e7c
 8006cd8:	20001e84 	.word	0x20001e84
 8006cdc:	20001e8c 	.word	0x20001e8c
 8006ce0:	20001e88 	.word	0x20001e88
 8006ce4:	20001e98 	.word	0x20001e98

08006ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cf0:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <prvInsertBlockIntoFreeList+0xac>)
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e002      	b.n	8006cfc <prvInsertBlockIntoFreeList+0x14>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d8f7      	bhi.n	8006cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d108      	bne.n	8006d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	441a      	add	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d118      	bne.n	8006d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <prvInsertBlockIntoFreeList+0xb0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d00d      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e008      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <prvInsertBlockIntoFreeList+0xb0>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e003      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d002      	beq.n	8006d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20001e7c 	.word	0x20001e7c
 8006d98:	20001e84 	.word	0x20001e84

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4d0d      	ldr	r5, [pc, #52]	; (8006dd4 <__libc_init_array+0x38>)
 8006da0:	4c0d      	ldr	r4, [pc, #52]	; (8006dd8 <__libc_init_array+0x3c>)
 8006da2:	1b64      	subs	r4, r4, r5
 8006da4:	10a4      	asrs	r4, r4, #2
 8006da6:	2600      	movs	r6, #0
 8006da8:	42a6      	cmp	r6, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	4d0b      	ldr	r5, [pc, #44]	; (8006ddc <__libc_init_array+0x40>)
 8006dae:	4c0c      	ldr	r4, [pc, #48]	; (8006de0 <__libc_init_array+0x44>)
 8006db0:	f000 f8f2 	bl	8006f98 <_init>
 8006db4:	1b64      	subs	r4, r4, r5
 8006db6:	10a4      	asrs	r4, r4, #2
 8006db8:	2600      	movs	r6, #0
 8006dba:	42a6      	cmp	r6, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc4:	4798      	blx	r3
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dce:	4798      	blx	r3
 8006dd0:	3601      	adds	r6, #1
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	08007160 	.word	0x08007160
 8006dd8:	08007160 	.word	0x08007160
 8006ddc:	08007160 	.word	0x08007160
 8006de0:	08007164 	.word	0x08007164

08006de4 <__retarget_lock_acquire_recursive>:
 8006de4:	4770      	bx	lr

08006de6 <__retarget_lock_release_recursive>:
 8006de6:	4770      	bx	lr

08006de8 <memcpy>:
 8006de8:	440a      	add	r2, r1
 8006dea:	4291      	cmp	r1, r2
 8006dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006df0:	d100      	bne.n	8006df4 <memcpy+0xc>
 8006df2:	4770      	bx	lr
 8006df4:	b510      	push	{r4, lr}
 8006df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dfe:	4291      	cmp	r1, r2
 8006e00:	d1f9      	bne.n	8006df6 <memcpy+0xe>
 8006e02:	bd10      	pop	{r4, pc}

08006e04 <memset>:
 8006e04:	4402      	add	r2, r0
 8006e06:	4603      	mov	r3, r0
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d100      	bne.n	8006e0e <memset+0xa>
 8006e0c:	4770      	bx	lr
 8006e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e12:	e7f9      	b.n	8006e08 <memset+0x4>

08006e14 <cleanup_glue>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	460c      	mov	r4, r1
 8006e18:	6809      	ldr	r1, [r1, #0]
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	b109      	cbz	r1, 8006e22 <cleanup_glue+0xe>
 8006e1e:	f7ff fff9 	bl	8006e14 <cleanup_glue>
 8006e22:	4621      	mov	r1, r4
 8006e24:	4628      	mov	r0, r5
 8006e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e2a:	f000 b869 	b.w	8006f00 <_free_r>
	...

08006e30 <_reclaim_reent>:
 8006e30:	4b2c      	ldr	r3, [pc, #176]	; (8006ee4 <_reclaim_reent+0xb4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4283      	cmp	r3, r0
 8006e36:	b570      	push	{r4, r5, r6, lr}
 8006e38:	4604      	mov	r4, r0
 8006e3a:	d051      	beq.n	8006ee0 <_reclaim_reent+0xb0>
 8006e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e3e:	b143      	cbz	r3, 8006e52 <_reclaim_reent+0x22>
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d14a      	bne.n	8006edc <_reclaim_reent+0xac>
 8006e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	b111      	cbz	r1, 8006e52 <_reclaim_reent+0x22>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 f857 	bl	8006f00 <_free_r>
 8006e52:	6961      	ldr	r1, [r4, #20]
 8006e54:	b111      	cbz	r1, 8006e5c <_reclaim_reent+0x2c>
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 f852 	bl	8006f00 <_free_r>
 8006e5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e5e:	b111      	cbz	r1, 8006e66 <_reclaim_reent+0x36>
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f84d 	bl	8006f00 <_free_r>
 8006e66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e68:	b111      	cbz	r1, 8006e70 <_reclaim_reent+0x40>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f848 	bl	8006f00 <_free_r>
 8006e70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006e72:	b111      	cbz	r1, 8006e7a <_reclaim_reent+0x4a>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 f843 	bl	8006f00 <_free_r>
 8006e7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e7c:	b111      	cbz	r1, 8006e84 <_reclaim_reent+0x54>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 f83e 	bl	8006f00 <_free_r>
 8006e84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e86:	b111      	cbz	r1, 8006e8e <_reclaim_reent+0x5e>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 f839 	bl	8006f00 <_free_r>
 8006e8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e90:	b111      	cbz	r1, 8006e98 <_reclaim_reent+0x68>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f834 	bl	8006f00 <_free_r>
 8006e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e9a:	b111      	cbz	r1, 8006ea2 <_reclaim_reent+0x72>
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 f82f 	bl	8006f00 <_free_r>
 8006ea2:	69a3      	ldr	r3, [r4, #24]
 8006ea4:	b1e3      	cbz	r3, 8006ee0 <_reclaim_reent+0xb0>
 8006ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4798      	blx	r3
 8006eac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006eae:	b1b9      	cbz	r1, 8006ee0 <_reclaim_reent+0xb0>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006eb6:	f7ff bfad 	b.w	8006e14 <cleanup_glue>
 8006eba:	5949      	ldr	r1, [r1, r5]
 8006ebc:	b941      	cbnz	r1, 8006ed0 <_reclaim_reent+0xa0>
 8006ebe:	3504      	adds	r5, #4
 8006ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec2:	2d80      	cmp	r5, #128	; 0x80
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	d1f8      	bne.n	8006eba <_reclaim_reent+0x8a>
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 f819 	bl	8006f00 <_free_r>
 8006ece:	e7ba      	b.n	8006e46 <_reclaim_reent+0x16>
 8006ed0:	680e      	ldr	r6, [r1, #0]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f814 	bl	8006f00 <_free_r>
 8006ed8:	4631      	mov	r1, r6
 8006eda:	e7ef      	b.n	8006ebc <_reclaim_reent+0x8c>
 8006edc:	2500      	movs	r5, #0
 8006ede:	e7ef      	b.n	8006ec0 <_reclaim_reent+0x90>
 8006ee0:	bd70      	pop	{r4, r5, r6, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000014 	.word	0x20000014

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f7ff bf7b 	b.w	8006de4 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20001e9c 	.word	0x20001e9c

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f7ff bf76 	b.w	8006de6 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	20001e9c 	.word	0x20001e9c

08006f00 <_free_r>:
 8006f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f02:	2900      	cmp	r1, #0
 8006f04:	d044      	beq.n	8006f90 <_free_r+0x90>
 8006f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f0a:	9001      	str	r0, [sp, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f12:	bfb8      	it	lt
 8006f14:	18e4      	addlt	r4, r4, r3
 8006f16:	f7ff ffe7 	bl	8006ee8 <__malloc_lock>
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <_free_r+0x94>)
 8006f1c:	9801      	ldr	r0, [sp, #4]
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	b933      	cbnz	r3, 8006f30 <_free_r+0x30>
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	6014      	str	r4, [r2, #0]
 8006f26:	b003      	add	sp, #12
 8006f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f2c:	f7ff bfe2 	b.w	8006ef4 <__malloc_unlock>
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	d908      	bls.n	8006f46 <_free_r+0x46>
 8006f34:	6825      	ldr	r5, [r4, #0]
 8006f36:	1961      	adds	r1, r4, r5
 8006f38:	428b      	cmp	r3, r1
 8006f3a:	bf01      	itttt	eq
 8006f3c:	6819      	ldreq	r1, [r3, #0]
 8006f3e:	685b      	ldreq	r3, [r3, #4]
 8006f40:	1949      	addeq	r1, r1, r5
 8006f42:	6021      	streq	r1, [r4, #0]
 8006f44:	e7ed      	b.n	8006f22 <_free_r+0x22>
 8006f46:	461a      	mov	r2, r3
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b10b      	cbz	r3, 8006f50 <_free_r+0x50>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d9fa      	bls.n	8006f46 <_free_r+0x46>
 8006f50:	6811      	ldr	r1, [r2, #0]
 8006f52:	1855      	adds	r5, r2, r1
 8006f54:	42a5      	cmp	r5, r4
 8006f56:	d10b      	bne.n	8006f70 <_free_r+0x70>
 8006f58:	6824      	ldr	r4, [r4, #0]
 8006f5a:	4421      	add	r1, r4
 8006f5c:	1854      	adds	r4, r2, r1
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	d1e0      	bne.n	8006f26 <_free_r+0x26>
 8006f64:	681c      	ldr	r4, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	6053      	str	r3, [r2, #4]
 8006f6a:	4421      	add	r1, r4
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	e7da      	b.n	8006f26 <_free_r+0x26>
 8006f70:	d902      	bls.n	8006f78 <_free_r+0x78>
 8006f72:	230c      	movs	r3, #12
 8006f74:	6003      	str	r3, [r0, #0]
 8006f76:	e7d6      	b.n	8006f26 <_free_r+0x26>
 8006f78:	6825      	ldr	r5, [r4, #0]
 8006f7a:	1961      	adds	r1, r4, r5
 8006f7c:	428b      	cmp	r3, r1
 8006f7e:	bf04      	itt	eq
 8006f80:	6819      	ldreq	r1, [r3, #0]
 8006f82:	685b      	ldreq	r3, [r3, #4]
 8006f84:	6063      	str	r3, [r4, #4]
 8006f86:	bf04      	itt	eq
 8006f88:	1949      	addeq	r1, r1, r5
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	6054      	str	r4, [r2, #4]
 8006f8e:	e7ca      	b.n	8006f26 <_free_r+0x26>
 8006f90:	b003      	add	sp, #12
 8006f92:	bd30      	pop	{r4, r5, pc}
 8006f94:	20001ea0 	.word	0x20001ea0

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
