
41_Cmsis-RTOS_osMutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08008a18  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e4c  20000078  08008a8c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001ec4  08008a8c  00021ec4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026427  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047cf  00000000  00000000  000464cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  0004aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002130  00000000  00000000  0004cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c38  00000000  00000000  0004f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020796  00000000  00000000  00054cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ef998  00000000  00000000  00075466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00164dfe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a94  00000000  00000000  00164e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080087d0 	.word	0x080087d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080087d0 	.word	0x080087d0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b974 	b.w	8000480 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9d08      	ldr	r5, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	468e      	mov	lr, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14d      	bne.n	800025a <__udivmoddi4+0xaa>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4694      	mov	ip, r2
 80001c2:	d969      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b152      	cbz	r2, 80001e0 <__udivmoddi4+0x30>
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	f1c2 0120 	rsb	r1, r2, #32
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80001da:	ea41 0e03 	orr.w	lr, r1, r3
 80001de:	4094      	lsls	r4, r2
 80001e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e4:	0c21      	lsrs	r1, r4, #16
 80001e6:	fbbe f6f8 	udiv	r6, lr, r8
 80001ea:	fa1f f78c 	uxth.w	r7, ip
 80001ee:	fb08 e316 	mls	r3, r8, r6, lr
 80001f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f6:	fb06 f107 	mul.w	r1, r6, r7
 80001fa:	4299      	cmp	r1, r3
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x64>
 80001fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000202:	f106 30ff 	add.w	r0, r6, #4294967295
 8000206:	f080 811f 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020a:	4299      	cmp	r1, r3
 800020c:	f240 811c 	bls.w	8000448 <__udivmoddi4+0x298>
 8000210:	3e02      	subs	r6, #2
 8000212:	4463      	add	r3, ip
 8000214:	1a5b      	subs	r3, r3, r1
 8000216:	b2a4      	uxth	r4, r4
 8000218:	fbb3 f0f8 	udiv	r0, r3, r8
 800021c:	fb08 3310 	mls	r3, r8, r0, r3
 8000220:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000224:	fb00 f707 	mul.w	r7, r0, r7
 8000228:	42a7      	cmp	r7, r4
 800022a:	d90a      	bls.n	8000242 <__udivmoddi4+0x92>
 800022c:	eb1c 0404 	adds.w	r4, ip, r4
 8000230:	f100 33ff 	add.w	r3, r0, #4294967295
 8000234:	f080 810a 	bcs.w	800044c <__udivmoddi4+0x29c>
 8000238:	42a7      	cmp	r7, r4
 800023a:	f240 8107 	bls.w	800044c <__udivmoddi4+0x29c>
 800023e:	4464      	add	r4, ip
 8000240:	3802      	subs	r0, #2
 8000242:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000246:	1be4      	subs	r4, r4, r7
 8000248:	2600      	movs	r6, #0
 800024a:	b11d      	cbz	r5, 8000254 <__udivmoddi4+0xa4>
 800024c:	40d4      	lsrs	r4, r2
 800024e:	2300      	movs	r3, #0
 8000250:	e9c5 4300 	strd	r4, r3, [r5]
 8000254:	4631      	mov	r1, r6
 8000256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025a:	428b      	cmp	r3, r1
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0xc2>
 800025e:	2d00      	cmp	r5, #0
 8000260:	f000 80ef 	beq.w	8000442 <__udivmoddi4+0x292>
 8000264:	2600      	movs	r6, #0
 8000266:	e9c5 0100 	strd	r0, r1, [r5]
 800026a:	4630      	mov	r0, r6
 800026c:	4631      	mov	r1, r6
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f683 	clz	r6, r3
 8000276:	2e00      	cmp	r6, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80f9 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb61 0303 	sbc.w	r3, r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	469e      	mov	lr, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d0e0      	beq.n	8000254 <__udivmoddi4+0xa4>
 8000292:	e9c5 4e00 	strd	r4, lr, [r5]
 8000296:	e7dd      	b.n	8000254 <__udivmoddi4+0xa4>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8092 	bne.w	80003ca <__udivmoddi4+0x21a>
 80002a6:	eba1 010c 	sub.w	r1, r1, ip
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2601      	movs	r6, #1
 80002b4:	0c20      	lsrs	r0, r4, #16
 80002b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80002ba:	fb07 1113 	mls	r1, r7, r3, r1
 80002be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0101 	adds.w	r1, ip, r1
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	f200 80cb 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a09      	subs	r1, r1, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e4:	fb07 1110 	mls	r1, r7, r0, r1
 80002e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80bb 	bhi.w	800047a <__udivmoddi4+0x2ca>
 8000304:	4608      	mov	r0, r1
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79c      	b.n	800024a <__udivmoddi4+0x9a>
 8000310:	f1c6 0720 	rsb	r7, r6, #32
 8000314:	40b3      	lsls	r3, r6
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa20 f407 	lsr.w	r4, r0, r7
 8000322:	fa01 f306 	lsl.w	r3, r1, r6
 8000326:	431c      	orrs	r4, r3
 8000328:	40f9      	lsrs	r1, r7
 800032a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032e:	fa00 f306 	lsl.w	r3, r0, r6
 8000332:	fbb1 f8f9 	udiv	r8, r1, r9
 8000336:	0c20      	lsrs	r0, r4, #16
 8000338:	fa1f fe8c 	uxth.w	lr, ip
 800033c:	fb09 1118 	mls	r1, r9, r8, r1
 8000340:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	4288      	cmp	r0, r1
 800034a:	fa02 f206 	lsl.w	r2, r2, r6
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0101 	adds.w	r1, ip, r1
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	4288      	cmp	r0, r1
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4461      	add	r1, ip
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000370:	fb09 1110 	mls	r1, r9, r0, r1
 8000374:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	458e      	cmp	lr, r1
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0101 	adds.w	r1, ip, r1
 8000384:	f100 34ff 	add.w	r4, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	458e      	cmp	lr, r1
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4461      	add	r1, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9402 	umull	r9, r4, r0, r2
 800039a:	eba1 010e 	sub.w	r1, r1, lr
 800039e:	42a1      	cmp	r1, r4
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46a6      	mov	lr, r4
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	b15d      	cbz	r5, 80003c2 <__udivmoddi4+0x212>
 80003aa:	ebb3 0208 	subs.w	r2, r3, r8
 80003ae:	eb61 010e 	sbc.w	r1, r1, lr
 80003b2:	fa01 f707 	lsl.w	r7, r1, r7
 80003b6:	fa22 f306 	lsr.w	r3, r2, r6
 80003ba:	40f1      	lsrs	r1, r6
 80003bc:	431f      	orrs	r7, r3
 80003be:	e9c5 7100 	strd	r7, r1, [r5]
 80003c2:	2600      	movs	r6, #0
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	40d8      	lsrs	r0, r3
 80003d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d4:	fa21 f303 	lsr.w	r3, r1, r3
 80003d8:	4091      	lsls	r1, r2
 80003da:	4301      	orrs	r1, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e8:	fb07 3610 	mls	r6, r7, r0, r3
 80003ec:	0c0b      	lsrs	r3, r1, #16
 80003ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f2:	fb00 f60e 	mul.w	r6, r0, lr
 80003f6:	429e      	cmp	r6, r3
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 38ff 	add.w	r8, r0, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	429e      	cmp	r6, r3
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3802      	subs	r0, #2
 800040e:	4463      	add	r3, ip
 8000410:	1b9b      	subs	r3, r3, r6
 8000412:	b289      	uxth	r1, r1
 8000414:	fbb3 f6f7 	udiv	r6, r3, r7
 8000418:	fb07 3316 	mls	r3, r7, r6, r3
 800041c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000420:	fb06 f30e 	mul.w	r3, r6, lr
 8000424:	428b      	cmp	r3, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	428b      	cmp	r3, r1
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3e02      	subs	r6, #2
 8000438:	4461      	add	r1, ip
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	462e      	mov	r6, r5
 8000444:	4628      	mov	r0, r5
 8000446:	e705      	b.n	8000254 <__udivmoddi4+0xa4>
 8000448:	4606      	mov	r6, r0
 800044a:	e6e3      	b.n	8000214 <__udivmoddi4+0x64>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f8      	b.n	8000242 <__udivmoddi4+0x92>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb64 0e0c 	sbc.w	lr, r4, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4646      	mov	r6, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4620      	mov	r0, r4
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4640      	mov	r0, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	3b02      	subs	r3, #2
 8000472:	4461      	add	r1, ip
 8000474:	e732      	b.n	80002dc <__udivmoddi4+0x12c>
 8000476:	4630      	mov	r0, r6
 8000478:	e709      	b.n	800028e <__udivmoddi4+0xde>
 800047a:	4464      	add	r4, ip
 800047c:	3802      	subs	r0, #2
 800047e:	e742      	b.n	8000306 <__udivmoddi4+0x156>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f023 0218 	bic.w	r2, r3, #24
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
};

osMutexId_t uart_mutex_id;

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a4      	sub	sp, #144	; 0x90
 80004e8:	af00      	add	r7, sp, #0

  HAL_Init();
 80004ea:	f000 fd97 	bl	800101c <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f987 	bl	8000800 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 fa6f 	bl	80009d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004f6:	f000 f9f9 	bl	80008ec <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 80004fa:	f000 fa43 	bl	8000984 <MX_USB_PCD_Init>

  // Initialize the kernel
  osKernelInitialize();
 80004fe:	f004 f89b 	bl	8004638 <osKernelInitialize>

  // Creating Timers
  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
 8000502:	2300      	movs	r3, #0
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	483b      	ldr	r0, [pc, #236]	; (80005f8 <main+0x114>)
 800050a:	f004 f9a1 	bl	8004850 <osTimerNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a3a      	ldr	r2, [pc, #232]	; (80005fc <main+0x118>)
 8000512:	6013      	str	r3, [r2, #0]
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);
 8000514:	2300      	movs	r3, #0
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	4839      	ldr	r0, [pc, #228]	; (8000600 <main+0x11c>)
 800051c:	f004 f998 	bl	8004850 <osTimerNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a38      	ldr	r2, [pc, #224]	; (8000604 <main+0x120>)
 8000524:	6013      	str	r3, [r2, #0]

  // Create Threads
  osThreadAttr_t greenThreadAttribs = {
 8000526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800052a:	2224      	movs	r2, #36	; 0x24
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fcd5 	bl	8007ede <memset>
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <main+0x124>)
 8000536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000540:	2318      	movs	r3, #24
 8000542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  .name = "Green Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal
  };

  osThreadAttr_t redThreadAttribs = {
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	2224      	movs	r2, #36	; 0x24
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 fcc5 	bl	8007ede <memset>
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <main+0x128>)
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
 8000558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800055e:	2319      	movs	r3, #25
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
		  .name = "Red Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal1
  };

  osThreadAttr_t orangeThreadAttribs = {
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	2224      	movs	r2, #36	; 0x24
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fcb7 	bl	8007ede <memset>
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <main+0x12c>)
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
 8000574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
 800057a:	231a      	movs	r3, #26
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  .name = "Orange Task",
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal2
  };

  osThreadAttr_t blueThreadAttribs = {
 800057e:	463b      	mov	r3, r7
 8000580:	2224      	movs	r2, #36	; 0x24
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f007 fcaa 	bl	8007ede <memset>
 800058a:	4b22      	ldr	r3, [pc, #136]	; (8000614 <main+0x130>)
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	231b      	movs	r3, #27
 8000596:	61bb      	str	r3, [r7, #24]
		  .stack_size = STACK_SIZE,
		  .priority	= osPriorityNormal3
  };

  // Created Threads
  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	461a      	mov	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	481d      	ldr	r0, [pc, #116]	; (8000618 <main+0x134>)
 80005a2:	f004 f893 	bl	80046cc <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1c      	ldr	r2, [pc, #112]	; (800061c <main+0x138>)
 80005aa:	6013      	str	r3, [r2, #0]
  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 80005ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b0:	461a      	mov	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	481a      	ldr	r0, [pc, #104]	; (8000620 <main+0x13c>)
 80005b6:	f004 f889 	bl	80046cc <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <main+0x140>)
 80005be:	6013      	str	r3, [r2, #0]
  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	461a      	mov	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <main+0x144>)
 80005ca:	f004 f87f 	bl	80046cc <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <main+0x148>)
 80005d2:	6013      	str	r3, [r2, #0]
  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005d4:	463b      	mov	r3, r7
 80005d6:	461a      	mov	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0x14c>)
 80005dc:	f004 f876 	bl	80046cc <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <main+0x150>)
 80005e4:	6013      	str	r3, [r2, #0]

  uart_mutex_id = osMutexNew(&uartMutexAttribs);
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0x154>)
 80005e8:	f004 f9dc 	bl	80049a4 <osMutexNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <main+0x158>)
 80005f0:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005f2:	f004 f845 	bl	8004680 <osKernelStart>

  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x112>
 80005f8:	080007b9 	.word	0x080007b9
 80005fc:	20000444 	.word	0x20000444
 8000600:	080007dd 	.word	0x080007dd
 8000604:	20000448 	.word	0x20000448
 8000608:	080087f4 	.word	0x080087f4
 800060c:	08008800 	.word	0x08008800
 8000610:	0800880c 	.word	0x0800880c
 8000614:	08008818 	.word	0x08008818
 8000618:	08000641 	.word	0x08000641
 800061c:	20000438 	.word	0x20000438
 8000620:	0800069d 	.word	0x0800069d
 8000624:	20000434 	.word	0x20000434
 8000628:	080006f9 	.word	0x080006f9
 800062c:	20000440 	.word	0x20000440
 8000630:	08000755 	.word	0x08000755
 8000634:	2000043c 	.word	0x2000043c
 8000638:	080088cc 	.word	0x080088cc
 800063c:	2000044c 	.word	0x2000044c

08000640 <vGreenLedControllerTask>:
  }
  /* USER CODE END 3 */
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Green_TaskProfiler;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <vGreenLedControllerTask+0x50>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <vGreenLedControllerTask+0x50>)
 8000650:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e002      	b.n	800065e <vGreenLedControllerTask+0x1e>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000664:	4293      	cmp	r3, r2
 8000666:	d9f7      	bls.n	8000658 <vGreenLedControllerTask+0x18>
		osMutexAcquire(uart_mutex_id, osWaitForever);
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <vGreenLedControllerTask+0x54>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f04f 31ff 	mov.w	r1, #4294967295
 8000670:	4618      	mov	r0, r3
 8000672:	f004 fa1d 	bl	8004ab0 <osMutexAcquire>
		printf("This is the Green Task\r\n");
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <vGreenLedControllerTask+0x58>)
 8000678:	f007 fd3c 	bl	80080f4 <puts>
		osMutexRelease(uart_mutex_id);
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <vGreenLedControllerTask+0x54>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fa60 	bl	8004b46 <osMutexRelease>
		osDelay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f004 f8b2 	bl	80047f0 <osDelay>
		++Green_TaskProfiler;
 800068c:	e7dc      	b.n	8000648 <vGreenLedControllerTask+0x8>
 800068e:	bf00      	nop
 8000690:	20000424 	.word	0x20000424
 8000694:	2000044c 	.word	0x2000044c
 8000698:	08008824 	.word	0x08008824

0800069c <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Red_TaskProfiler;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <vRedLedControllerTask+0x50>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <vRedLedControllerTask+0x50>)
 80006ac:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e002      	b.n	80006ba <vRedLedControllerTask+0x1e>
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d9f7      	bls.n	80006b4 <vRedLedControllerTask+0x18>
		osMutexAcquire(uart_mutex_id, osWaitForever);
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <vRedLedControllerTask+0x54>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 f9ef 	bl	8004ab0 <osMutexAcquire>
		printf("This is the Red Task\r\n");
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <vRedLedControllerTask+0x58>)
 80006d4:	f007 fd0e 	bl	80080f4 <puts>
		osMutexRelease(uart_mutex_id);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <vRedLedControllerTask+0x54>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 fa32 	bl	8004b46 <osMutexRelease>
		osDelay(100);
 80006e2:	2064      	movs	r0, #100	; 0x64
 80006e4:	f004 f884 	bl	80047f0 <osDelay>
		++Red_TaskProfiler;
 80006e8:	e7dc      	b.n	80006a4 <vRedLedControllerTask+0x8>
 80006ea:	bf00      	nop
 80006ec:	20000420 	.word	0x20000420
 80006f0:	2000044c 	.word	0x2000044c
 80006f4:	0800883c 	.word	0x0800883c

080006f8 <vOrangeLedControllerTask>:
	}
}


void vOrangeLedControllerTask(void *pvParameters)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		++Orange_TaskProfiler;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <vOrangeLedControllerTask+0x50>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a10      	ldr	r2, [pc, #64]	; (8000748 <vOrangeLedControllerTask+0x50>)
 8000708:	6013      	str	r3, [r2, #0]
		for(uint32_t i = 0; i < 7000; ++i) {}
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e002      	b.n	8000716 <vOrangeLedControllerTask+0x1e>
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f641 3257 	movw	r2, #6999	; 0x1b57
 800071c:	4293      	cmp	r3, r2
 800071e:	d9f7      	bls.n	8000710 <vOrangeLedControllerTask+0x18>
		osMutexAcquire(uart_mutex_id, osWaitForever);
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <vOrangeLedControllerTask+0x54>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	4618      	mov	r0, r3
 800072a:	f004 f9c1 	bl	8004ab0 <osMutexAcquire>
		printf("This is the Orange Task\r\n");
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <vOrangeLedControllerTask+0x58>)
 8000730:	f007 fce0 	bl	80080f4 <puts>
		osMutexRelease(uart_mutex_id);
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <vOrangeLedControllerTask+0x54>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f004 fa04 	bl	8004b46 <osMutexRelease>
		osDelay(100);
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f004 f856 	bl	80047f0 <osDelay>
		++Orange_TaskProfiler;
 8000744:	e7dc      	b.n	8000700 <vOrangeLedControllerTask+0x8>
 8000746:	bf00      	nop
 8000748:	2000041c 	.word	0x2000041c
 800074c:	2000044c 	.word	0x2000044c
 8000750:	08008854 	.word	0x08008854

08000754 <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

	osTimerStart(timer_1_id, 5000);			// Set timer 1 period to 5000 ticks
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <vBlueLedControllerTask+0x50>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f241 3188 	movw	r1, #5000	; 0x1388
 8000764:	4618      	mov	r0, r3
 8000766:	f004 f8ef 	bl	8004948 <osTimerStart>
	osTimerStart(timer_2_id, 1000);			// Set timer 2 period to 1000 ticks
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <vBlueLedControllerTask+0x54>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000772:	4618      	mov	r0, r3
 8000774:	f004 f8e8 	bl	8004948 <osTimerStart>

	while(1)
	{
		++Blue_TaskProfiler;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <vBlueLedControllerTask+0x58>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <vBlueLedControllerTask+0x58>)
 8000780:	6013      	str	r3, [r2, #0]
		osMutexAcquire(uart_mutex_id, osWaitForever);
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <vBlueLedControllerTask+0x5c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f04f 31ff 	mov.w	r1, #4294967295
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f990 	bl	8004ab0 <osMutexAcquire>
		printf("This is the Blue Task\r\n");
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <vBlueLedControllerTask+0x60>)
 8000792:	f007 fcaf 	bl	80080f4 <puts>
		osMutexRelease(uart_mutex_id);
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <vBlueLedControllerTask+0x5c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f004 f9d3 	bl	8004b46 <osMutexRelease>
		++Blue_TaskProfiler;
 80007a0:	e7ea      	b.n	8000778 <vBlueLedControllerTask+0x24>
 80007a2:	bf00      	nop
 80007a4:	20000444 	.word	0x20000444
 80007a8:	20000448 	.word	0x20000448
 80007ac:	20000428 	.word	0x20000428
 80007b0:	2000044c 	.word	0x2000044c
 80007b4:	08008870 	.word	0x08008870

080007b8 <Timer1_Callback>:
	}
}

void Timer1_Callback(void *arg)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	timer_1_TaskProfiler++;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <Timer1_Callback+0x20>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <Timer1_Callback+0x20>)
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000042c 	.word	0x2000042c

080007dc <Timer2_Callback>:

void Timer2_Callback(void *arg)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	timer_2_TaskProfiler++;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <Timer2_Callback+0x20>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <Timer2_Callback+0x20>)
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000430 	.word	0x20000430

08000800 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09a      	sub	sp, #104	; 0x68
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2248      	movs	r2, #72	; 0x48
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f007 fb65 	bl	8007ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000834:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	f023 0303 	bic.w	r3, r3, #3
 8000840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800084a:	f001 f83d 	bl	80018c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fe18 	bl	8000484 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xe8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <SystemClock_Config+0xe8>)
 800085e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <SystemClock_Config+0xe8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000870:	2327      	movs	r3, #39	; 0x27
 8000872:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000890:	2360      	movs	r3, #96	; 0x60
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000894:	2300      	movs	r3, #0
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fc05 	bl	80020ac <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008a8:	f000 f8fe 	bl	8000aa8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008ac:	236f      	movs	r3, #111	; 0x6f
 80008ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008b0:	2302      	movs	r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 ff61 	bl	8002794 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008d8:	f000 f8e6 	bl	8000aa8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008dc:	f002 fd4e 	bl	800337c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e0:	bf00      	nop
 80008e2:	3768      	adds	r7, #104	; 0x68
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58000400 	.word	0x58000400

080008ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <MX_LPUART1_UART_Init+0x94>)
 80008f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000936:	f003 f8d1 	bl	8003adc <HAL_UART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000940:	f000 f8b2 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 8000948:	f003 fd2c 	bl	80043a4 <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000952:	f000 f8a9 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 800095a:	f003 fd61 	bl	8004420 <HAL_UARTEx_SetRxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 f8a0 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_LPUART1_UART_Init+0x90>)
 800096a:	f003 fce2 	bl	8004332 <HAL_UARTEx_DisableFifoMode>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f898 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000094 	.word	0x20000094
 8000980:	40008000 	.word	0x40008000

08000984 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USB_PCD_Init+0x48>)
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <MX_USB_PCD_Init+0x4c>)
 800098c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USB_PCD_Init+0x48>)
 8000990:	2208      	movs	r2, #8
 8000992:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_USB_PCD_Init+0x48>)
 8000996:	2202      	movs	r2, #2
 8000998:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USB_PCD_Init+0x48>)
 800099c:	2202      	movs	r2, #2
 800099e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_USB_PCD_Init+0x48>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USB_PCD_Init+0x48>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_USB_PCD_Init+0x48>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USB_PCD_Init+0x48>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_USB_PCD_Init+0x48>)
 80009ba:	f000 fde3 	bl	8001584 <HAL_PCD_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80009c4:	f000 f870 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000124 	.word	0x20000124
 80009d0:	40006800 	.word	0x40006800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e8:	2004      	movs	r0, #4
 80009ea:	f7ff fd61 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fd5e 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	2002      	movs	r0, #2
 80009f6:	f7ff fd5b 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2008      	movs	r0, #8
 80009fc:	f7ff fd58 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2123      	movs	r1, #35	; 0x23
 8000a04:	481c      	ldr	r0, [pc, #112]	; (8000a78 <MX_GPIO_Init+0xa4>)
 8000a06:	f000 fda5 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_GPIO_Init+0xa8>)
 8000a1c:	f000 fc2a 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a20:	2323      	movs	r3, #35	; 0x23
 8000a22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4810      	ldr	r0, [pc, #64]	; (8000a78 <MX_GPIO_Init+0xa4>)
 8000a36:	f000 fc1d 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_GPIO_Init+0xac>)
 8000a4c:	f000 fc12 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a50:	23c0      	movs	r3, #192	; 0xc0
 8000a52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a60:	2307      	movs	r3, #7
 8000a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <MX_GPIO_Init+0xa4>)
 8000a6a:	f000 fc03 	bl	8001274 <HAL_GPIO_Init>

}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000c00 	.word	0x48000c00

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 fae1 	bl	800105c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>

08000ab2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b08:	68fb      	ldr	r3, [r7, #12]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4013      	ands	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f000 fb61 	bl	8001224 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 febb 	bl	80018e8 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000b72:	f000 fefb 	bl	800196c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09c      	sub	sp, #112	; 0x70
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2250      	movs	r2, #80	; 0x50
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f007 f99c 	bl	8007ede <memset>
  if(huart->Instance==LPUART1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d124      	bne.n	8000bfa <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 fa67 	bl	8003090 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc8:	f7ff ff6e 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff ffa2 	bl	8000b16 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff ff6d 	bl	8000ab2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000be8:	2308      	movs	r3, #8
 8000bea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 fb3d 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3770      	adds	r7, #112	; 0x70
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40008000 	.word	0x40008000

08000c08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09c      	sub	sp, #112	; 0x70
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2250      	movs	r2, #80	; 0x50
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 f958 	bl	8007ede <memset>
  if(hpcd->Instance==USB)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <HAL_PCD_MspInit+0xa8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d136      	bne.n	8000ca6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c3e:	2318      	movs	r3, #24
 8000c40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c52:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c58:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c5e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fa13 	bl	8003090 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c70:	f7ff ff1a 	bl	8000aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ff1c 	bl	8000ab2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f000 faeb 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c9e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ca2:	f7ff ff1f 	bl	8000ae4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3770      	adds	r7, #112	; 0x70
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40006800 	.word	0x40006800

08000cb4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2019      	movs	r0, #25
 8000cfe:	f000 fa91 	bl	8001224 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d02:	2019      	movs	r0, #25
 8000d04:	f000 faa8 	bl	8001258 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d0c:	f7ff ffd2 	bl	8000cb4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d10:	f107 0208 	add.w	r2, r7, #8
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 ff26 	bl	8002b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d20:	f001 ff0e 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8000d24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <HAL_InitTick+0x8c>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	3b01      	subs	r3, #1
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_InitTick+0x90>)
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_InitTick+0x94>)
 8000d38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_InitTick+0x90>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_InitTick+0x90>)
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_InitTick+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_InitTick+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <HAL_InitTick+0x90>)
 8000d56:	f002 fc28 	bl	80035aa <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d104      	bne.n	8000d6a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_InitTick+0x90>)
 8000d62:	f002 fc83 	bl	800366c <HAL_TIM_Base_Start_IT>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	20000450 	.word	0x20000450
 8000d7c:	40012c00 	.word	0x40012c00

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000db2:	f002 fca9 	bl	8003708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000450 	.word	0x20000450

08000dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f006 fed6 	bl	8007c7c <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20030000 	.word	0x20030000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	2000049c 	.word	0x2000049c
 8000f04:	20001ec8 	.word	0x20001ec8

08000f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <SystemInit+0x98>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <SystemInit+0x98>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f34:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <SystemInit+0x9c>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f52:	f023 0305 	bic.w	r3, r3, #5
 8000f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <SystemInit+0xa0>)
 8000f74:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <SystemInit+0xa0>)
 8000f7c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	faf6fefb 	.word	0xfaf6fefb
 8000fa8:	22041000 	.word	0x22041000

08000fac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb0:	3304      	adds	r3, #4

08000fb2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fb6:	d3f9      	bcc.n	8000fac <CopyDataInit>
  bx lr
 8000fb8:	4770      	bx	lr

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fbc:	3004      	adds	r0, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fbe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>
  bx lr
 8000fc2:	4770      	bx	lr

08000fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000fc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc8:	f7ff ff9e 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopForever+0x8>)
 8000fce:	490c      	ldr	r1, [pc, #48]	; (8001000 <LoopForever+0xc>)
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <LoopForever+0x10>)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f7ff ffed 	bl	8000fb2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopForever+0x14>)
 8000fda:	490c      	ldr	r1, [pc, #48]	; (800100c <LoopForever+0x18>)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f7ff ffee 	bl	8000fbe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopForever+0x1c>)
 8000fe4:	490b      	ldr	r1, [pc, #44]	; (8001014 <LoopForever+0x20>)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f7ff ffe9 	bl	8000fbe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fec:	f006 ff42 	bl	8007e74 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ff0:	f7ff fa78 	bl	80004e4 <main>

08000ff4 <LoopForever>:

LoopForever:
  b LoopForever
 8000ff4:	e7fe      	b.n	8000ff4 <LoopForever>
 8000ff6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ff8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000078 	.word	0x20000078
 8001004:	08008a18 	.word	0x08008a18
  INIT_BSS _sbss, _ebss
 8001008:	20000078 	.word	0x20000078
 800100c:	20001ec4 	.word	0x20001ec4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001010:	20030000 	.word	0x20030000
 8001014:	20030000 	.word	0x20030000

08001018 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_Init+0x3c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_Init+0x3c>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f8eb 	bl	800120e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001038:	200f      	movs	r0, #15
 800103a:	f7ff fe55 	bl	8000ce8 <HAL_InitTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104a:	f7ff fd7d 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58004000 	.word	0x58004000

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000000c 	.word	0x2000000c
 8001080:	200004a0 	.word	0x200004a0

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200004a0 	.word	0x200004a0

0800109c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTickPrio+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff4c 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff63 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ffb3 	bl	80011a8 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff82 	bl	8001154 <__NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff56 	bl	8001118 <__NVIC_EnableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e14c      	b.n	800151e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 813e 	beq.w	8001518 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <HAL_GPIO_Init+0x40>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d017      	beq.n	8001352 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d123      	bne.n	80013a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	6939      	ldr	r1, [r7, #16]
 80013a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0203 	and.w	r2, r3, #3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8098 	beq.w	8001518 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <HAL_GPIO_Init+0x2c8>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001412:	d019      	beq.n	8001448 <HAL_GPIO_Init+0x1d4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d013      	beq.n	8001444 <HAL_GPIO_Init+0x1d0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a49      	ldr	r2, [pc, #292]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00d      	beq.n	8001440 <HAL_GPIO_Init+0x1cc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2d4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d007      	beq.n	800143c <HAL_GPIO_Init+0x1c8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_GPIO_Init+0x2d8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_GPIO_Init+0x1c4>
 8001434:	2304      	movs	r3, #4
 8001436:	e008      	b.n	800144a <HAL_GPIO_Init+0x1d6>
 8001438:	2307      	movs	r3, #7
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x1d6>
 800143c:	2303      	movs	r3, #3
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x1d6>
 8001440:	2302      	movs	r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x1d6>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x1d6>
 8001448:	2300      	movs	r3, #0
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800145a:	4938      	ldr	r1, [pc, #224]	; (800153c <HAL_GPIO_Init+0x2c8>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 80014ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f aeab 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40010000 	.word	0x40010000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000800 	.word	0x48000800
 8001548:	48000c00 	.word	0x48000c00
 800154c:	48001000 	.word	0x48001000
 8001550:	58000800 	.word	0x58000800

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001570:	e002      	b.n	8001578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	b08b      	sub	sp, #44	; 0x2c
 8001588:	af06      	add	r7, sp, #24
 800158a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0dd      	b.n	8001752 <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fb2c 	bl	8000c08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 ffb8 	bl	8004538 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e04d      	b.n	800166a <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3305      	adds	r3, #5
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	3304      	adds	r3, #4
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	b298      	uxth	r0, r3
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	333a      	adds	r3, #58	; 0x3a
 800160e:	4602      	mov	r2, r0
 8001610:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3307      	adds	r3, #7
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	333c      	adds	r3, #60	; 0x3c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	3340      	adds	r3, #64	; 0x40
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3344      	adds	r3, #68	; 0x44
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	3301      	adds	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3ac      	bcc.n	80015ce <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e044      	b.n	8001704 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3301      	adds	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3b5      	bcc.n	800167a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	687e      	ldr	r6, [r7, #4]
 8001716:	466d      	mov	r5, sp
 8001718:	f106 0410 	add.w	r4, r6, #16
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001724:	e885 0003 	stmia.w	r5, {r0, r1}
 8001728:	1d33      	adds	r3, r6, #4
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f002 ff1e 	bl	800456e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d102      	bne.n	8001750 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f805 	bl	800175a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800175a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800177e:	b29b      	uxth	r3, r3
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001792:	b29b      	uxth	r3, r3
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <LL_EXTI_EnableIT_0_31+0x24>)
 80017ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017be:	4905      	ldr	r1, [pc, #20]	; (80017d4 <LL_EXTI_EnableIT_0_31+0x24>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	58000800 	.word	0x58000800

080017d8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <LL_EXTI_DisableIT_0_31+0x28>)
 80017e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4905      	ldr	r1, [pc, #20]	; (8001800 <LL_EXTI_DisableIT_0_31+0x28>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	58000800 	.word	0x58000800

08001804 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800180e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	43db      	mvns	r3, r3
 8001816:	4905      	ldr	r1, [pc, #20]	; (800182c <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8001818:	4013      	ands	r3, r2
 800181a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	58000800 	.word	0x58000800

08001830 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]

}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	58000800 	.word	0x58000800

08001854 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	43db      	mvns	r3, r3
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001866:	4013      	ands	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	58000800 	.word	0x58000800

0800187c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	58000800 	.word	0x58000800

080018a0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	4904      	ldr	r1, [pc, #16]	; (80018c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	58000800 	.word	0x58000800

080018c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	58000400 	.word	0x58000400

080018e8 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_PWR_ConfigPVD+0x80>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 020e 	bic.w	r2, r3, #14
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	491a      	ldr	r1, [pc, #104]	; (8001968 <HAL_PWR_ConfigPVD+0x80>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8001902:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001906:	f7ff ff67 	bl	80017d8 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800190a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800190e:	f7ff ff79 	bl	8001804 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001912:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001916:	f7ff ffc3 	bl	80018a0 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800191a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800191e:	f7ff ff99 	bl	8001854 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800192e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001932:	f7ff ff3d 	bl	80017b0 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001942:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001946:	f7ff ff73 	bl	8001830 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001956:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800195a:	f7ff ff8f 	bl	800187c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	58000400 	.word	0x58000400

0800196c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_PWR_EnablePVD+0x1c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_PWR_EnablePVD+0x1c>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6053      	str	r3, [r2, #4]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	58000400 	.word	0x58000400

0800198c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	58000400 	.word	0x58000400

080019a8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ba:	d101      	bne.n	80019c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a1a:	d101      	bne.n	8001a20 <LL_RCC_HSE_IsReady+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_RCC_HSE_IsReady+0x1a>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a5c:	6013      	str	r3, [r2, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7a:	d101      	bne.n	8001a80 <LL_RCC_HSI_IsReady+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_RCC_HSI_IsReady+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d101      	bne.n	8001b12 <LL_RCC_HSI48_IsReady+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_RCC_HSI48_IsReady+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d101      	bne.n	8001bbe <LL_RCC_LSE_IsReady+0x18>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_RCC_LSE_IsReady+0x1a>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d101      	bne.n	8001c26 <LL_RCC_LSI1_IsReady+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_RCC_LSI1_IsReady+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d101      	bne.n	8001c8e <LL_RCC_LSI2_IsReady+0x18>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_RCC_LSI2_IsReady+0x1a>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d101      	bne.n	8001d1a <LL_RCC_MSI_IsReady+0x16>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_RCC_MSI_IsReady+0x18>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2bb0      	cmp	r3, #176	; 0xb0
 8001d64:	d901      	bls.n	8001d6a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001d66:	23b0      	movs	r3, #176	; 0xb0
 8001d68:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 0203 	bic.w	r2, r3, #3
 8001db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e46:	f023 020f 	bic.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f80:	d101      	bne.n	8001f86 <LL_RCC_PLL_IsReady+0x18>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_RCC_PLL_IsReady+0x1a>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002006:	d101      	bne.n	800200c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800202c:	d101      	bne.n	8002032 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d101      	bne.n	8002058 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002076:	d101      	bne.n	800207c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800209a:	d101      	bne.n	80020a0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b08d      	sub	sp, #52	; 0x34
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e363      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 808d 	beq.w	80021e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020cc:	f7ff fe7d 	bl	8001dca <LL_RCC_GetSysClkSource>
 80020d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d2:	f7ff ff83 	bl	8001fdc <LL_RCC_PLL_GetMainSource>
 80020d6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x3e>
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d147      	bne.n	8002174 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d144      	bne.n	8002174 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e347      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020fa:	f7ff fe28 	bl	8001d4e <LL_RCC_MSI_GetRange>
 80020fe:	4603      	mov	r3, r0
 8002100:	429c      	cmp	r4, r3
 8002102:	d914      	bls.n	800212e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fd61 	bl	8002bd0 <RCC_SetFlashLatencyFromMSIRange>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e336      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fe02 	bl	8001d26 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe26 	bl	8001d78 <LL_RCC_MSI_SetCalibTrimming>
 800212c:	e013      	b.n	8002156 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fdf7 	bl	8001d26 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe1b 	bl	8001d78 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fd42 	bl	8002bd0 <RCC_SetFlashLatencyFromMSIRange>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e317      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002156:	f000 fcc9 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 800215a:	4603      	mov	r3, r0
 800215c:	4aa4      	ldr	r2, [pc, #656]	; (80023f0 <HAL_RCC_OscConfig+0x344>)
 800215e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002160:	4ba4      	ldr	r3, [pc, #656]	; (80023f4 <HAL_RCC_OscConfig+0x348>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fdbf 	bl	8000ce8 <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d039      	beq.n	80021e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e308      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01e      	beq.n	80021ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800217c:	f7ff fda4 	bl	8001cc8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002180:	f7fe ff80 	bl	8001084 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002188:	f7fe ff7c 	bl	8001084 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e2f5      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800219a:	f7ff fdb3 	bl	8001d04 <LL_RCC_MSI_IsReady>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f1      	beq.n	8002188 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdbc 	bl	8001d26 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fde0 	bl	8001d78 <LL_RCC_MSI_SetCalibTrimming>
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ba:	f7ff fd94 	bl	8001ce6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021be:	f7fe ff61 	bl	8001084 <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c6:	f7fe ff5d 	bl	8001084 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e2d6      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021d8:	f7ff fd94 	bl	8001d04 <LL_RCC_MSI_IsReady>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f1      	bne.n	80021c6 <HAL_RCC_OscConfig+0x11a>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d047      	beq.n	8002282 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f2:	f7ff fdea 	bl	8001dca <LL_RCC_GetSysClkSource>
 80021f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	f7ff fef0 	bl	8001fdc <LL_RCC_PLL_GetMainSource>
 80021fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x164>
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d108      	bne.n	800221c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d134      	bne.n	8002282 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e2b4      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d102      	bne.n	800222c <HAL_RCC_OscConfig+0x180>
 8002226:	f7ff fbd1 	bl	80019cc <LL_RCC_HSE_Enable>
 800222a:	e001      	b.n	8002230 <HAL_RCC_OscConfig+0x184>
 800222c:	f7ff fbdd 	bl	80019ea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ff24 	bl	8001084 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe ff20 	bl	8001084 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e299      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002252:	f7ff fbd9 	bl	8001a08 <LL_RCC_HSE_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0x194>
 800225c:	e011      	b.n	8002282 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe ff11 	bl	8001084 <HAL_GetTick>
 8002262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002266:	f7fe ff0d 	bl	8001084 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e286      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002278:	f7ff fbc6 	bl	8001a08 <LL_RCC_HSE_IsReady>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f1      	bne.n	8002266 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04c      	beq.n	8002328 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228e:	f7ff fd9c 	bl	8001dca <LL_RCC_GetSysClkSource>
 8002292:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	f7ff fea2 	bl	8001fdc <LL_RCC_PLL_GetMainSource>
 8002298:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d10e      	bne.n	80022c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e266      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fbe5 	bl	8001a8c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022c2:	e031      	b.n	8002328 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d019      	beq.n	8002300 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	f7ff fbae 	bl	8001a2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fed8 	bl	8001084 <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe fed4 	bl	8001084 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e24d      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80022ea:	f7ff fbbd 	bl	8001a68 <LL_RCC_HSI_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f1      	beq.n	80022d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fbc7 	bl	8001a8c <LL_RCC_HSI_SetCalibTrimming>
 80022fe:	e013      	b.n	8002328 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002300:	f7ff fba3 	bl	8001a4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe febe 	bl	8001084 <HAL_GetTick>
 8002308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7fe feba 	bl	8001084 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e233      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800231e:	f7ff fba3 	bl	8001a68 <LL_RCC_HSI_IsReady>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f1      	bne.n	800230c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a3 	beq.w	8002488 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d076      	beq.n	8002438 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d046      	beq.n	80023e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002356:	f7ff fc5a 	bl	8001c0e <LL_RCC_LSI1_IsReady>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d113      	bne.n	8002388 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002360:	f7ff fc33 	bl	8001bca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002364:	f7fe fe8e 	bl	8001084 <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800236c:	f7fe fe8a 	bl	8001084 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e203      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800237e:	f7ff fc46 	bl	8001c0e <LL_RCC_LSI1_IsReady>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f1      	beq.n	800236c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002388:	f7ff fc53 	bl	8001c32 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fe7a 	bl	8001084 <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002394:	f7fe fe76 	bl	8001084 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1ef      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80023a6:	f7ff fc66 	bl	8001c76 <LL_RCC_LSI2_IsReady>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fc70 	bl	8001c9a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80023ba:	f7ff fc17 	bl	8001bec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fe61 	bl	8001084 <HAL_GetTick>
 80023c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023c6:	f7fe fe5d 	bl	8001084 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1d6      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80023d8:	f7ff fc19 	bl	8001c0e <LL_RCC_LSI1_IsReady>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f1      	bne.n	80023c6 <HAL_RCC_OscConfig+0x31a>
 80023e2:	e051      	b.n	8002488 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80023e4:	f7ff fbf1 	bl	8001bca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fe4c 	bl	8001084 <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80023ee:	e00c      	b.n	800240a <HAL_RCC_OscConfig+0x35e>
 80023f0:	20000004 	.word	0x20000004
 80023f4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023f8:	f7fe fe44 	bl	8001084 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1bd      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800240a:	f7ff fc00 	bl	8001c0e <LL_RCC_LSI1_IsReady>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f1      	beq.n	80023f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002414:	f7ff fc1e 	bl	8001c54 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800241a:	f7fe fe33 	bl	8001084 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1ac      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800242c:	f7ff fc23 	bl	8001c76 <LL_RCC_LSI2_IsReady>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f1      	bne.n	800241a <HAL_RCC_OscConfig+0x36e>
 8002436:	e027      	b.n	8002488 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002438:	f7ff fc0c 	bl	8001c54 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fe22 	bl	8001084 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002444:	f7fe fe1e 	bl	8001084 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b03      	cmp	r3, #3
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e197      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002456:	f7ff fc0e 	bl	8001c76 <LL_RCC_LSI2_IsReady>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f1      	bne.n	8002444 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002460:	f7ff fbc4 	bl	8001bec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fe0e 	bl	8001084 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800246c:	f7fe fe0a 	bl	8001084 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e183      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800247e:	f7ff fbc6 	bl	8001c0e <LL_RCC_LSI1_IsReady>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f1      	bne.n	800246c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05b      	beq.n	800254c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002494:	4ba7      	ldr	r3, [pc, #668]	; (8002734 <HAL_RCC_OscConfig+0x688>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d114      	bne.n	80024ca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024a0:	f7ff fa12 	bl	80018c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a4:	f7fe fdee 	bl	8001084 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ac:	f7fe fdea 	bl	8001084 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e163      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024be:	4b9d      	ldr	r3, [pc, #628]	; (8002734 <HAL_RCC_OscConfig+0x688>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x42c>
 80024d2:	f7ff fb24 	bl	8001b1e <LL_RCC_LSE_Enable>
 80024d6:	e00c      	b.n	80024f2 <HAL_RCC_OscConfig+0x446>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d104      	bne.n	80024ea <HAL_RCC_OscConfig+0x43e>
 80024e0:	f7ff fb3f 	bl	8001b62 <LL_RCC_LSE_EnableBypass>
 80024e4:	f7ff fb1b 	bl	8001b1e <LL_RCC_LSE_Enable>
 80024e8:	e003      	b.n	80024f2 <HAL_RCC_OscConfig+0x446>
 80024ea:	f7ff fb29 	bl	8001b40 <LL_RCC_LSE_Disable>
 80024ee:	f7ff fb49 	bl	8001b84 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d014      	beq.n	8002524 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fdc3 	bl	8001084 <HAL_GetTick>
 80024fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fdbf 	bl	8001084 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e136      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002518:	f7ff fb45 	bl	8001ba6 <LL_RCC_LSE_IsReady>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ef      	beq.n	8002502 <HAL_RCC_OscConfig+0x456>
 8002522:	e013      	b.n	800254c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe fdae 	bl	8001084 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7fe fdaa 	bl	8001084 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e121      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002542:	f7ff fb30 	bl	8001ba6 <LL_RCC_LSE_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d02c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d014      	beq.n	800258a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002560:	f7ff faa9 	bl	8001ab6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fd8e 	bl	8001084 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256c:	f7fe fd8a 	bl	8001084 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e103      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800257e:	f7ff fabc 	bl	8001afa <LL_RCC_HSI48_IsReady>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f1      	beq.n	800256c <HAL_RCC_OscConfig+0x4c0>
 8002588:	e013      	b.n	80025b2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258a:	f7ff faa5 	bl	8001ad8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fd79 	bl	8001084 <HAL_GetTick>
 8002592:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002596:	f7fe fd75 	bl	8001084 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0ee      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80025a8:	f7ff faa7 	bl	8001afa <LL_RCC_HSI48_IsReady>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f1      	bne.n	8002596 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80e4 	beq.w	8002784 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025bc:	f7ff fc05 	bl	8001dca <LL_RCC_GetSysClkSource>
 80025c0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f040 80b4 	bne.w	800273c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	429a      	cmp	r2, r3
 80025e0:	d123      	bne.n	800262a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d11c      	bne.n	800262a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d114      	bne.n	800262a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d05d      	beq.n	80026e6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d058      	beq.n	80026e2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0a1      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002642:	f7ff fc85 	bl	8001f50 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002646:	f7fe fd1d 	bl	8001084 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fd19 	bl	8001084 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e092      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ef      	bne.n	800264e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x68c>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002686:	0212      	lsls	r2, r2, #8
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800269a:	430a      	orrs	r2, r1
 800269c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026a4:	f7ff fc45 	bl	8001f32 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026b8:	f7fe fce4 	bl	8001084 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fce0 	bl	8001084 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e059      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e0:	e050      	b.n	8002784 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e04f      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d147      	bne.n	8002784 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026f4:	f7ff fc1d 	bl	8001f32 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002708:	f7fe fcbc 	bl	8001084 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe fcb8 	bl	8001084 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e031      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ef      	beq.n	8002710 <HAL_RCC_OscConfig+0x664>
 8002730:	e028      	b.n	8002784 <HAL_RCC_OscConfig+0x6d8>
 8002732:	bf00      	nop
 8002734:	58000400 	.word	0x58000400
 8002738:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d01e      	beq.n	8002780 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	f7ff fc05 	bl	8001f50 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fc9d 	bl	8001084 <HAL_GetTick>
 800274a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7fe fc99 	bl	8001084 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e012      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ef      	bne.n	800274e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_OscConfig+0x6e4>)
 800277a:	4013      	ands	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]
 800277e:	e001      	b.n	8002784 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3734      	adds	r7, #52	; 0x34
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}
 800278e:	bf00      	nop
 8002790:	eefefffc 	.word	0xeefefffc

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e12d      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d91b      	bls.n	80027ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b95      	ldr	r3, [pc, #596]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4993      	ldr	r1, [pc, #588]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c6:	f7fe fc5d 	bl	8001084 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ce:	f7fe fc59 	bl	8001084 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e111      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff faef 	bl	8001de2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002804:	f7fe fc3e 	bl	8001084 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800280c:	f7fe fc3a 	bl	8001084 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0f2      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800281e:	f7ff fbe9 	bl	8001ff4 <LL_RCC_IsActiveFlag_HPRE>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f1      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fae6 	bl	8001e0a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800283e:	f7fe fc21 	bl	8001084 <HAL_GetTick>
 8002842:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002846:	f7fe fc1d 	bl	8001084 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0d5      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002858:	f7ff fbde 	bl	8002018 <LL_RCC_IsActiveFlag_C2HPRE>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f1      	beq.n	8002846 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fadf 	bl	8001e36 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002878:	f7fe fc04 	bl	8001084 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002880:	f7fe fc00 	bl	8001084 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0b8      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002892:	f7ff fbd4 	bl	800203e <LL_RCC_IsActiveFlag_SHDHPRE>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f1      	beq.n	8002880 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fad9 	bl	8001e64 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fbe7 	bl	8001084 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028ba:	f7fe fbe3 	bl	8001084 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e09b      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028cc:	f7ff fbca 	bl	8002064 <LL_RCC_IsActiveFlag_PPRE1>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f1      	beq.n	80028ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d017      	beq.n	8002912 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff facf 	bl	8001e8c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ee:	f7fe fbc9 	bl	8001084 <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028f6:	f7fe fbc5 	bl	8001084 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e07d      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002908:	f7ff fbbe 	bl	8002088 <LL_RCC_IsActiveFlag_PPRE2>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f1      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d043      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d106      	bne.n	8002934 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002926:	f7ff f86f 	bl	8001a08 <LL_RCC_HSE_IsReady>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11e      	bne.n	800296e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e067      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d106      	bne.n	800294a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800293c:	f7ff fb17 	bl	8001f6e <LL_RCC_PLL_IsReady>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d113      	bne.n	800296e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e05c      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002952:	f7ff f9d7 	bl	8001d04 <LL_RCC_MSI_IsReady>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d108      	bne.n	800296e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e051      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002960:	f7ff f882 	bl	8001a68 <LL_RCC_HSI_IsReady>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e04a      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fa15 	bl	8001da2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002978:	f7fe fb84 	bl	8001084 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7fe fb80 	bl	8001084 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	; 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e036      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	f7ff fa18 	bl	8001dca <LL_RCC_GetSysClkSource>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d1ec      	bne.n	8002980 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d21b      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 0207 	bic.w	r2, r3, #7
 80029bc:	4913      	ldr	r1, [pc, #76]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7fe fb5e 	bl	8001084 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	e008      	b.n	80029de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029cc:	f7fe fb5a 	bl	8001084 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e012      	b.n	8002a04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1ef      	bne.n	80029cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029ec:	f000 f87e 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_RCC_ClockConfig+0x27c>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80029f6:	f7fe fb51 	bl	800109c <HAL_GetTickPrio>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe f973 	bl	8000ce8 <HAL_InitTick>
 8002a02:	4603      	mov	r3, r0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	58004000 	.word	0x58004000
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1a:	f7ff f9d6 	bl	8001dca <LL_RCC_GetSysClkSource>
 8002a1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a26:	f7ff f992 	bl	8001d4e <LL_RCC_MSI_GetRange>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e04b      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a42:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e045      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d10a      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a4e:	f7fe ffab 	bl	80019a8 <LL_RCC_HSE_IsEnabledDiv2>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e03a      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e037      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002a64:	f7ff faba 	bl	8001fdc <LL_RCC_PLL_GetMainSource>
 8002a68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d003      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x64>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x6a>
 8002a76:	e00d      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a7a:	60bb      	str	r3, [r7, #8]
        break;
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002a7e:	f7fe ff93 	bl	80019a8 <LL_RCC_HSE_IsEnabledDiv2>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a8a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002a8c:	e00d      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a90:	60bb      	str	r3, [r7, #8]
        break;
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a94:	f7ff f95b 	bl	8001d4e <LL_RCC_MSI_GetRange>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	60bb      	str	r3, [r7, #8]
        break;
 8002aa8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002aaa:	f7ff fa72 	bl	8001f92 <LL_RCC_PLL_GetN>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	fb03 f402 	mul.w	r4, r3, r2
 8002ab6:	f7ff fa85 	bl	8001fc4 <LL_RCC_PLL_GetDivider>
 8002aba:	4603      	mov	r3, r0
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	3301      	adds	r3, #1
 8002ac0:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ac4:	f7ff fa72 	bl	8001fac <LL_RCC_PLL_GetR>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	0f5b      	lsrs	r3, r3, #29
 8002acc:	3301      	adds	r3, #1
 8002ace:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	0800893c 	.word	0x0800893c
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	01e84800 	.word	0x01e84800

08002aec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b598      	push	{r3, r4, r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002af0:	f7ff ff90 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8002af4:	4604      	mov	r4, r0
 8002af6:	f7ff f9dd 	bl	8001eb4 <LL_RCC_GetAHBPrescaler>
 8002afa:	4603      	mov	r3, r0
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd98      	pop	{r3, r4, r7, pc}
 8002b10:	080088dc 	.word	0x080088dc

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b598      	push	{r3, r4, r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b18:	f7ff ffe8 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	f7ff f9f0 	bl	8001f02 <LL_RCC_GetAPB1Prescaler>
 8002b22:	4603      	mov	r3, r0
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd98      	pop	{r3, r4, r7, pc}
 8002b3c:	0800891c 	.word	0x0800891c

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b598      	push	{r3, r4, r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b44:	f7ff ffd2 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	f7ff f9e6 	bl	8001f1a <LL_RCC_GetAPB2Prescaler>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	0adb      	lsrs	r3, r3, #11
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd98      	pop	{r3, r4, r7, pc}
 8002b68:	0800891c 	.word	0x0800891c

08002b6c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	226f      	movs	r2, #111	; 0x6f
 8002b7a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002b7c:	f7ff f925 	bl	8001dca <LL_RCC_GetSysClkSource>
 8002b80:	4602      	mov	r2, r0
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002b86:	f7ff f995 	bl	8001eb4 <LL_RCC_GetAHBPrescaler>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002b90:	f7ff f9b7 	bl	8001f02 <LL_RCC_GetAPB1Prescaler>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002b9a:	f7ff f9be 	bl	8001f1a <LL_RCC_GetAPB2Prescaler>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002ba4:	f7ff f992 	bl	8001ecc <LL_C2_RCC_GetAHBPrescaler>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002bae:	f7ff f99a 	bl	8001ee6 <LL_RCC_GetAHB4Prescaler>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <HAL_RCC_GetClockConfig+0x60>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0207 	and.w	r2, r3, #7
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58004000 	.word	0x58004000

08002bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2bb0      	cmp	r3, #176	; 0xb0
 8002bdc:	d903      	bls.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e007      	b.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002bf6:	f7ff f976 	bl	8001ee6 <LL_RCC_GetAHB4Prescaler>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0c9c      	lsrs	r4, r3, #18
 8002c1a:	f7fe feb7 	bl	800198c <HAL_PWREx_GetVoltageRange>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4619      	mov	r1, r3
 8002c22:	4620      	mov	r0, r4
 8002c24:	f000 f80c 	bl	8002c40 <RCC_SetFlashLatency>
 8002c28:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	0800893c 	.word	0x0800893c
 8002c38:	080088dc 	.word	0x080088dc
 8002c3c:	431bde83 	.word	0x431bde83

08002c40 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b093      	sub	sp, #76	; 0x4c
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <RCC_SetFlashLatency+0xe8>)
 8002c4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002c56:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <RCC_SetFlashLatency+0xec>)
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <RCC_SetFlashLatency+0xf0>)
 8002c64:	f107 040c 	add.w	r4, r7, #12
 8002c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c6e:	2300      	movs	r3, #0
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c78:	d11a      	bne.n	8002cb0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c7e:	e013      	b.n	8002ca8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3348      	adds	r3, #72	; 0x48
 8002c86:	443b      	add	r3, r7
 8002c88:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d807      	bhi.n	8002ca2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3348      	adds	r3, #72	; 0x48
 8002c98:	443b      	add	r3, r7
 8002c9a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002c9e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ca0:	e020      	b.n	8002ce4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d9e8      	bls.n	8002c80 <RCC_SetFlashLatency+0x40>
 8002cae:	e019      	b.n	8002ce4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb4:	e013      	b.n	8002cde <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3348      	adds	r3, #72	; 0x48
 8002cbc:	443b      	add	r3, r7
 8002cbe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d807      	bhi.n	8002cd8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	3348      	adds	r3, #72	; 0x48
 8002cce:	443b      	add	r3, r7
 8002cd0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002cd4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002cd6:	e005      	b.n	8002ce4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cda:	3301      	adds	r3, #1
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d9e8      	bls.n	8002cb6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <RCC_SetFlashLatency+0xf4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 0207 	bic.w	r2, r3, #7
 8002cec:	4911      	ldr	r1, [pc, #68]	; (8002d34 <RCC_SetFlashLatency+0xf4>)
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cf4:	f7fe f9c6 	bl	8001084 <HAL_GetTick>
 8002cf8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cfa:	e008      	b.n	8002d0e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cfc:	f7fe f9c2 	bl	8001084 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e007      	b.n	8002d1e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <RCC_SetFlashLatency+0xf4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1ef      	bne.n	8002cfc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	374c      	adds	r7, #76	; 0x4c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	08008888 	.word	0x08008888
 8002d2c:	08008898 	.word	0x08008898
 8002d30:	080088a4 	.word	0x080088a4
 8002d34:	58004000 	.word	0x58004000

08002d38 <LL_RCC_LSE_IsEnabled>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <LL_RCC_LSE_IsEnabled+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_RCC_LSE_IsEnabled+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_RCC_LSE_IsReady>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d101      	bne.n	8002d74 <LL_RCC_LSE_IsReady+0x18>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <LL_RCC_LSE_IsReady+0x1a>
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_MSI_EnablePLLMode>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_SetRFWKPClockSource>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_SetSMPSClockSource>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_SetSMPSPrescaler>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_SetUSARTClockSource>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_SetLPUARTClockSource>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_RCC_SetI2CClockSource>:
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_SetLPTIMClockSource>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_SetSAIClockSource>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_SetRNGClockSource>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_SetCLK48ClockSource>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_SetUSBClockSource>:
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffe3 	bl	8002f38 <LL_RCC_SetCLK48ClockSource>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <LL_RCC_SetADCClockSource>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_SetRTCClockSource>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_RCC_GetRTCClockSource>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_ForceBackupDomainReset>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_RCC_ReleaseBackupDomainReset>:
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_RCC_PLLSAI1_Enable>:
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_PLLSAI1_Disable>:
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003060:	6013      	str	r3, [r2, #0]
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_PLLSAI1_IsReady>:
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800307a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800307e:	d101      	bne.n	8003084 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003098:	2300      	movs	r3, #0
 800309a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800309c:	2300      	movs	r3, #0
 800309e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d034      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030b4:	d021      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80030b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ba:	d81b      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030c0:	d01d      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80030c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030c6:	d815      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d0:	d110      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80030e2:	e00d      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f94d 	bl	8003388 <RCCEx_PLLSAI1_ConfigNP>
 80030ee:	4603      	mov	r3, r0
 80030f0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030f2:	e005      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
        break;
 80030f8:	e002      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80030fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003100:	7ffb      	ldrb	r3, [r7, #31]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fee8 	bl	8002ee0 <LL_RCC_SetSAIClockSource>
 8003110:	e001      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	7ffb      	ldrb	r3, [r7, #31]
 8003114:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311e:	2b00      	cmp	r3, #0
 8003120:	d046      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003122:	f7ff ff56 	bl	8002fd2 <LL_RCC_GetRTCClockSource>
 8003126:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	429a      	cmp	r2, r3
 8003130:	d03c      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003132:	f7fe fbc9 	bl	80018c8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff30 	bl	8002fa6 <LL_RCC_SetRTCClockSource>
 8003146:	e02e      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003152:	f7ff ff4b 	bl	8002fec <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003156:	f7ff ff5a 	bl	800300e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003172:	f7ff fde1 	bl	8002d38 <LL_RCC_LSE_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d114      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800317c:	f7fd ff82 	bl	8001084 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003182:	e00b      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fd ff7e 	bl	8001084 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d902      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	77fb      	strb	r3, [r7, #31]
              break;
 800319a:	e004      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800319c:	f7ff fdde 	bl	8002d5c <LL_RCC_LSE_IsReady>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	77bb      	strb	r3, [r7, #30]
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
 80031ae:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe2a 	bl	8002e1a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe35 	bl	8002e46 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fe5d 	bl	8002eac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe52 	bl	8002eac <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe2a 	bl	8002e72 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe1f 	bl	8002e72 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d022      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fe8d 	bl	8002f64 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003252:	d107      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003262:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326c:	d10b      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f8e3 	bl	800343e <RCCEx_PLLSAI1_ConfigNQ>
 8003278:	4603      	mov	r3, r0
 800327a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328e:	2b00      	cmp	r3, #0
 8003290:	d02b      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a4:	d003      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fe2a 	bl	8002f0c <LL_RCC_SetRNGClockSource>
 80032b8:	e00a      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7ff fe21 	bl	8002f0c <LL_RCC_SetRNGClockSource>
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fe34 	bl	8002f38 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80032d8:	d107      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d022      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fe3d 	bl	8002f7a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003308:	d107      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003322:	d10b      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f8e3 	bl	80034f4 <RCCEx_PLLSAI1_ConfigNR>
 800332e:	4603      	mov	r3, r0
 8003330:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003338:	7ffb      	ldrb	r3, [r7, #31]
 800333a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fd26 	bl	8002d9e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fd45 	bl	8002df2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fd2c 	bl	8002dca <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003372:	7fbb      	ldrb	r3, [r7, #30]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003380:	f7ff fcfe 	bl	8002d80 <LL_RCC_MSI_EnablePLLMode>
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}

08003388 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003394:	f7ff fe5b 	bl	800304e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003398:	f7fd fe74 	bl	8001084 <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800339e:	e009      	b.n	80033b4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a0:	f7fd fe70 	bl	8001084 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	73fb      	strb	r3, [r7, #15]
      break;
 80033b2:	e004      	b.n	80033be <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033b4:	f7ff fe5a 	bl	800306c <LL_RCC_PLLSAI1_IsReady>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d137      	bne.n	8003434 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033f2:	f7ff fe1d 	bl	8003030 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f6:	f7fd fe45 	bl	8001084 <HAL_GetTick>
 80033fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033fc:	e009      	b.n	8003412 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033fe:	f7fd fe41 	bl	8001084 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d902      	bls.n	8003412 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	73fb      	strb	r3, [r7, #15]
        break;
 8003410:	e004      	b.n	800341c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003412:	f7ff fe2b 	bl	800306c <LL_RCC_PLLSAI1_IsReady>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	d1f0      	bne.n	80033fe <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003430:	4313      	orrs	r3, r2
 8003432:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800344a:	f7ff fe00 	bl	800304e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800344e:	f7fd fe19 	bl	8001084 <HAL_GetTick>
 8003452:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003454:	e009      	b.n	800346a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003456:	f7fd fe15 	bl	8001084 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e004      	b.n	8003474 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800346a:	f7ff fdff 	bl	800306c <LL_RCC_PLLSAI1_IsReady>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d137      	bne.n	80034ea <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a4:	4313      	orrs	r3, r2
 80034a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034a8:	f7ff fdc2 	bl	8003030 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd fdea 	bl	8001084 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b4:	f7fd fde6 	bl	8001084 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e004      	b.n	80034d2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034c8:	f7ff fdd0 	bl	800306c <LL_RCC_PLLSAI1_IsReady>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d1f0      	bne.n	80034b4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e6:	4313      	orrs	r3, r2
 80034e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003500:	f7ff fda5 	bl	800304e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003504:	f7fd fdbe 	bl	8001084 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800350a:	e009      	b.n	8003520 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350c:	f7fd fdba 	bl	8001084 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
      break;
 800351e:	e004      	b.n	800352a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003520:	f7ff fda4 	bl	800306c <LL_RCC_PLLSAI1_IsReady>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d137      	bne.n	80035a0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003544:	4313      	orrs	r3, r2
 8003546:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800355a:	4313      	orrs	r3, r2
 800355c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800355e:	f7ff fd67 	bl	8003030 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003562:	f7fd fd8f 	bl	8001084 <HAL_GetTick>
 8003566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003568:	e009      	b.n	800357e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356a:	f7fd fd8b 	bl	8001084 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d902      	bls.n	800357e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	73fb      	strb	r3, [r7, #15]
        break;
 800357c:	e004      	b.n	8003588 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800357e:	f7ff fd75 	bl	800306c <LL_RCC_PLLSAI1_IsReady>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d1f0      	bne.n	800356a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d108      	bne.n	80035a0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800359c:	4313      	orrs	r3, r2
 800359e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e049      	b.n	8003650 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f841 	bl	8003658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f000 f9d5 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d001      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e036      	b.n	80036f2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a17      	ldr	r2, [pc, #92]	; (8003700 <HAL_TIM_Base_Start_IT+0x94>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x44>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ae:	d115      	bne.n	80036dc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_TIM_Base_Start_IT+0x98>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d015      	beq.n	80036ee <HAL_TIM_Base_Start_IT+0x82>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d011      	beq.n	80036ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	e008      	b.n	80036ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e000      	b.n	80036f0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00
 8003704:	00010007 	.word	0x00010007

08003708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f905 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8f7 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f908 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0204 	mvn.w	r2, #4
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8db 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8cd 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8de 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0208 	mvn.w	r2, #8
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2204      	movs	r2, #4
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8b1 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8a3 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8b4 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b10      	cmp	r3, #16
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b10      	cmp	r3, #16
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0210 	mvn.w	r2, #16
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2208      	movs	r2, #8
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f887 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f879 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f88a 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10e      	bne.n	800388c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd f8fc 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b80      	cmp	r3, #128	; 0x80
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8de 	bl	8003a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d10e      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8d1 	bl	8003a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f838 	bl	8003982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b20      	cmp	r3, #32
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0220 	mvn.w	r2, #32
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f891 	bl	8003a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0x20>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d108      	bne.n	80039ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00b      	beq.n	80039ea <TIM_Base_SetConfig+0x52>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d007      	beq.n	80039ea <TIM_Base_SetConfig+0x52>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <TIM_Base_SetConfig+0xc0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <TIM_Base_SetConfig+0x52>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <TIM_Base_SetConfig+0xc4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d108      	bne.n	80039fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0xa0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <TIM_Base_SetConfig+0xc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0xa0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <TIM_Base_SetConfig+0xc4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_RCC_GetUSARTClockSource>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4013      	ands	r3, r2
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_RCC_GetLPUARTClockSource>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4013      	ands	r3, r2
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e042      	b.n	8003b74 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fd f83d 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2224      	movs	r2, #36	; 0x24
 8003b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f82c 	bl	8003b7c <UART_SetConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa46 	bl	8003fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 facd 	bl	800410c <UART_CheckIdleState>
 8003b72:	4603      	mov	r3, r0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b08c      	sub	sp, #48	; 0x30
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4baf      	ldr	r3, [pc, #700]	; (8003e68 <UART_SetConfig+0x2ec>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4aa4      	ldr	r2, [pc, #656]	; (8003e6c <UART_SetConfig+0x2f0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	4313      	orrs	r3, r2
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bf2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f023 010f 	bic.w	r1, r3, #15
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a95      	ldr	r2, [pc, #596]	; (8003e70 <UART_SetConfig+0x2f4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d125      	bne.n	8003c6c <UART_SetConfig+0xf0>
 8003c20:	2003      	movs	r0, #3
 8003c22:	f7ff ff3b 	bl	8003a9c <LL_RCC_GetUSARTClockSource>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d81b      	bhi.n	8003c64 <UART_SetConfig+0xe8>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0xb8>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c5d 	.word	0x08003c5d
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4a:	e042      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c52:	e03e      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e03a      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e036      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6a:	e032      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7e      	ldr	r2, [pc, #504]	; (8003e6c <UART_SetConfig+0x2f0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d12a      	bne.n	8003ccc <UART_SetConfig+0x150>
 8003c76:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003c7a:	f7ff ff1f 	bl	8003abc <LL_RCC_GetLPUARTClockSource>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c84:	d01a      	beq.n	8003cbc <UART_SetConfig+0x140>
 8003c86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c8a:	d81b      	bhi.n	8003cc4 <UART_SetConfig+0x148>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c90:	d00c      	beq.n	8003cac <UART_SetConfig+0x130>
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c96:	d815      	bhi.n	8003cc4 <UART_SetConfig+0x148>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x128>
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x138>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x148>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e012      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e00e      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e00a      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	e006      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cca:	e002      	b.n	8003cd2 <UART_SetConfig+0x156>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <UART_SetConfig+0x2f0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	f040 8097 	bne.w	8003e0c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d823      	bhi.n	8003d2e <UART_SetConfig+0x1b2>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0x170>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d2f 	.word	0x08003d2f
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d1f 	.word	0x08003d1f
 8003d00:	08003d2f 	.word	0x08003d2f
 8003d04:	08003d2f 	.word	0x08003d2f
 8003d08:	08003d2f 	.word	0x08003d2f
 8003d0c:	08003d27 	.word	0x08003d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7fe ff00 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d16:	e010      	b.n	8003d3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d18:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <UART_SetConfig+0x2f8>)
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d1c:	e00d      	b.n	8003d3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1e:	f7fe fe79 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d24:	e009      	b.n	8003d3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d2c:	e005      	b.n	8003d3a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 812a 	beq.w	8003f96 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	4a4c      	ldr	r2, [pc, #304]	; (8003e78 <UART_SetConfig+0x2fc>)
 8003d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d305      	bcc.n	8003d72 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d903      	bls.n	8003d7a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d78:	e10d      	b.n	8003f96 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	60fa      	str	r2, [r7, #12]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	4a3c      	ldr	r2, [pc, #240]	; (8003e78 <UART_SetConfig+0x2fc>)
 8003d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d9c:	f7fc f9f0 	bl	8000180 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	020b      	lsls	r3, r1, #8
 8003db2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003db6:	0202      	lsls	r2, r0, #8
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	6849      	ldr	r1, [r1, #4]
 8003dbc:	0849      	lsrs	r1, r1, #1
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	eb12 0804 	adds.w	r8, r2, r4
 8003dc8:	eb43 0905 	adc.w	r9, r3, r5
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	469a      	mov	sl, r3
 8003dd4:	4693      	mov	fp, r2
 8003dd6:	4652      	mov	r2, sl
 8003dd8:	465b      	mov	r3, fp
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	f7fc f9cf 	bl	8000180 <__aeabi_uldivmod>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4613      	mov	r3, r2
 8003de8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df0:	d308      	bcc.n	8003e04 <UART_SetConfig+0x288>
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df8:	d204      	bcs.n	8003e04 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a3a      	ldr	r2, [r7, #32]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	e0c8      	b.n	8003f96 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e0a:	e0c4      	b.n	8003f96 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e14:	d16d      	bne.n	8003ef2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	2b07      	cmp	r3, #7
 8003e1e:	d82d      	bhi.n	8003e7c <UART_SetConfig+0x300>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0x2ac>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e7d 	.word	0x08003e7d
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e7d 	.word	0x08003e7d
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e7d 	.word	0x08003e7d
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe fe7a 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e4e:	e01b      	b.n	8003e88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <UART_SetConfig+0x2f8>)
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e54:	e018      	b.n	8003e88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fddd 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e5c:	e014      	b.n	8003e88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e64:	e010      	b.n	8003e88 <UART_SetConfig+0x30c>
 8003e66:	bf00      	nop
 8003e68:	cfff69f3 	.word	0xcfff69f3
 8003e6c:	40008000 	.word	0x40008000
 8003e70:	40013800 	.word	0x40013800
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	0800897c 	.word	0x0800897c
      default:
        pclk = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8083 	beq.w	8003f96 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <UART_SetConfig+0x444>)
 8003e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ea2:	005a      	lsls	r2, r3, #1
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	441a      	add	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	d916      	bls.n	8003eea <UART_SetConfig+0x36e>
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d212      	bcs.n	8003eea <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f023 030f 	bic.w	r3, r3, #15
 8003ecc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	8bfb      	ldrh	r3, [r7, #30]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	8bfa      	ldrh	r2, [r7, #30]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	e055      	b.n	8003f96 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ef0:	e051      	b.n	8003f96 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d822      	bhi.n	8003f42 <UART_SetConfig+0x3c6>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x388>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f25 	.word	0x08003f25
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f33 	.word	0x08003f33
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f43 	.word	0x08003f43
 8003f1c:	08003f43 	.word	0x08003f43
 8003f20:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7fe fe0c 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f2a:	e010      	b.n	8003f4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <UART_SetConfig+0x448>)
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f30:	e00d      	b.n	8003f4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe fd6f 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 8003f36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f38:	e009      	b.n	8003f4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f40:	e005      	b.n	8003f4e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f4c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <UART_SetConfig+0x444>)
 8003f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	441a      	add	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	d908      	bls.n	8003f90 <UART_SetConfig+0x414>
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d204      	bcs.n	8003f90 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	e002      	b.n	8003f96 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003fb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3730      	adds	r7, #48	; 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc0:	0800897c 	.word	0x0800897c
 8003fc4:	00f42400 	.word	0x00f42400

08003fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01a      	beq.n	80040de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c6:	d10a      	bne.n	80040de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800411c:	f7fc ffb2 	bl	8001084 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d10e      	bne.n	800414e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f82f 	bl	80041a2 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e025      	b.n	800419a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d10e      	bne.n	800417a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f819 	bl	80041a2 <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e00f      	b.n	800419a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b09c      	sub	sp, #112	; 0x70
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	e0a9      	b.n	8004308 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	f000 80a5 	beq.w	8004308 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fc ff61 	bl	8001084 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d140      	bne.n	8004256 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e8:	667b      	str	r3, [r7, #100]	; 0x64
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	663b      	str	r3, [r7, #96]	; 0x60
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004226:	64ba      	str	r2, [r7, #72]	; 0x48
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800422c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e069      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d051      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004272:	d149      	bne.n	8004308 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800427c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
 800429e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	613b      	str	r3, [r7, #16]
   return(result);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042d0:	623a      	str	r2, [r7, #32]
 80042d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	69f9      	ldr	r1, [r7, #28]
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e010      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	429a      	cmp	r2, r3
 8004324:	f43f af46 	beq.w	80041b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3770      	adds	r7, #112	; 0x70
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_UARTEx_DisableFifoMode+0x16>
 8004344:	2302      	movs	r3, #2
 8004346:	e027      	b.n	8004398 <HAL_UARTEx_DisableFifoMode+0x66>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004376:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e02d      	b.n	8004418 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f84f 	bl	800449c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004434:	2302      	movs	r3, #2
 8004436:	e02d      	b.n	8004494 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f811 	bl	800449c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044bc:	e031      	b.n	8004522 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044be:	2308      	movs	r3, #8
 80044c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044c2:	2308      	movs	r3, #8
 80044c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	0e5b      	lsrs	r3, r3, #25
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	0f5b      	lsrs	r3, r3, #29
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044e6:	7bbb      	ldrb	r3, [r7, #14]
 80044e8:	7b3a      	ldrb	r2, [r7, #12]
 80044ea:	4911      	ldr	r1, [pc, #68]	; (8004530 <UARTEx_SetNbDataToProcess+0x94>)
 80044ec:	5c8a      	ldrb	r2, [r1, r2]
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044f2:	7b3a      	ldrb	r2, [r7, #12]
 80044f4:	490f      	ldr	r1, [pc, #60]	; (8004534 <UARTEx_SetNbDataToProcess+0x98>)
 80044f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	7b7a      	ldrb	r2, [r7, #13]
 8004508:	4909      	ldr	r1, [pc, #36]	; (8004530 <UARTEx_SetNbDataToProcess+0x94>)
 800450a:	5c8a      	ldrb	r2, [r1, r2]
 800450c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004510:	7b7a      	ldrb	r2, [r7, #13]
 8004512:	4908      	ldr	r1, [pc, #32]	; (8004534 <UARTEx_SetNbDataToProcess+0x98>)
 8004514:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004516:	fb93 f3f2 	sdiv	r3, r3, r2
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	08008994 	.word	0x08008994
 8004534:	0800899c 	.word	0x0800899c

08004538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004540:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004544:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	b29b      	uxth	r3, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	4013      	ands	r3, r2
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800456e:	b084      	sub	sp, #16
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	f107 0014 	add.w	r0, r7, #20
 800457c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	b004      	add	sp, #16
 80045ae:	4770      	bx	lr

080045b0 <__NVIC_SetPriority>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db0a      	blt.n	80045da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	490c      	ldr	r1, [pc, #48]	; (80045fc <__NVIC_SetPriority+0x4c>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045d8:	e00a      	b.n	80045f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4908      	ldr	r1, [pc, #32]	; (8004600 <__NVIC_SetPriority+0x50>)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	3b04      	subs	r3, #4
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	761a      	strb	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <SysTick_Handler+0x1c>)
 800460a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800460c:	f002 f918 	bl	8006840 <xTaskGetSchedulerState>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004616:	f003 f8b7 	bl	8007788 <xPortSysTickHandler>
  }
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010

08004624 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004628:	2100      	movs	r1, #0
 800462a:	f06f 0004 	mvn.w	r0, #4
 800462e:	f7ff ffbf 	bl	80045b0 <__NVIC_SetPriority>
#endif
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463e:	f3ef 8305 	mrs	r3, IPSR
 8004642:	603b      	str	r3, [r7, #0]
  return(result);
 8004644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800464a:	f06f 0305 	mvn.w	r3, #5
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	e00c      	b.n	800466c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <osKernelInitialize+0x44>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <osKernelInitialize+0x44>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004660:	2300      	movs	r3, #0
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	e002      	b.n	800466c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800466c:	687b      	ldr	r3, [r7, #4]
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	200004a4 	.word	0x200004a4

08004680 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004686:	f3ef 8305 	mrs	r3, IPSR
 800468a:	603b      	str	r3, [r7, #0]
  return(result);
 800468c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004692:	f06f 0305 	mvn.w	r3, #5
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	e010      	b.n	80046bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <osKernelStart+0x48>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d109      	bne.n	80046b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046a2:	f7ff ffbf 	bl	8004624 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <osKernelStart+0x48>)
 80046a8:	2202      	movs	r2, #2
 80046aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046ac:	f001 fc5c 	bl	8005f68 <vTaskStartScheduler>
      stat = osOK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e002      	b.n	80046bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046bc:	687b      	ldr	r3, [r7, #4]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200004a4 	.word	0x200004a4

080046cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08e      	sub	sp, #56	; 0x38
 80046d0:	af04      	add	r7, sp, #16
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046dc:	f3ef 8305 	mrs	r3, IPSR
 80046e0:	617b      	str	r3, [r7, #20]
  return(result);
 80046e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d17e      	bne.n	80047e6 <osThreadNew+0x11a>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d07b      	beq.n	80047e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046f2:	2318      	movs	r3, #24
 80046f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d045      	beq.n	8004792 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <osThreadNew+0x48>
        name = attr->name;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <osThreadNew+0x6e>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b38      	cmp	r3, #56	; 0x38
 800472c:	d805      	bhi.n	800473a <osThreadNew+0x6e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <osThreadNew+0x72>
        return (NULL);
 800473a:	2300      	movs	r3, #0
 800473c:	e054      	b.n	80047e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00e      	beq.n	8004774 <osThreadNew+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2bbb      	cmp	r3, #187	; 0xbb
 800475c:	d90a      	bls.n	8004774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <osThreadNew+0xa8>
        mem = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e010      	b.n	8004796 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10c      	bne.n	8004796 <osThreadNew+0xca>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <osThreadNew+0xca>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <osThreadNew+0xca>
          mem = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e001      	b.n	8004796 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d110      	bne.n	80047be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047a4:	9202      	str	r2, [sp, #8]
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 f9ec 	bl	8005b90 <xTaskCreateStatic>
 80047b8:	4603      	mov	r3, r0
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e013      	b.n	80047e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d110      	bne.n	80047e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f001 fa37 	bl	8005c4a <xTaskCreate>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <osThreadNew+0x11a>
            hTask = NULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047e6:	693b      	ldr	r3, [r7, #16]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3728      	adds	r7, #40	; 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f8:	f3ef 8305 	mrs	r3, IPSR
 80047fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <osDelay+0x1c>
    stat = osErrorISR;
 8004804:	f06f 0305 	mvn.w	r3, #5
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e007      	b.n	800481c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 fb72 	bl	8005f00 <vTaskDelay>
    }
  }

  return (stat);
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f002 fdcc 	bl	80073cc <pvTimerGetTimerID>
 8004834:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <TimerCallback+0x22>
    callb->func (callb->arg);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	6852      	ldr	r2, [r2, #4]
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
  }
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	; 0x30
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	460b      	mov	r3, r1
 800485e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004864:	f3ef 8305 	mrs	r3, IPSR
 8004868:	613b      	str	r3, [r7, #16]
  return(result);
 800486a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800486c:	2b00      	cmp	r3, #0
 800486e:	d163      	bne.n	8004938 <osTimerNew+0xe8>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d060      	beq.n	8004938 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004876:	2008      	movs	r0, #8
 8004878:	f003 f816 	bl	80078a8 <pvPortMalloc>
 800487c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d059      	beq.n	8004938 <osTimerNew+0xe8>
      callb->func = func;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004890:	7afb      	ldrb	r3, [r7, #11]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <osTimerNew+0x4c>
        reload = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e001      	b.n	80048a0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
 80048a4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <osTimerNew+0x6e>
          name = attr->name;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <osTimerNew+0x84>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b2b      	cmp	r3, #43	; 0x2b
 80048cc:	d902      	bls.n	80048d4 <osTimerNew+0x84>
          mem = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e00c      	b.n	80048ee <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d108      	bne.n	80048ee <osTimerNew+0x9e>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <osTimerNew+0x9e>
            mem = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e001      	b.n	80048ee <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10c      	bne.n	800490e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <osTimerNew+0xf4>)
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	2101      	movs	r1, #1
 8004904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004906:	f002 f9e2 	bl	8006cce <xTimerCreateStatic>
 800490a:	6238      	str	r0, [r7, #32]
 800490c:	e00b      	b.n	8004926 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <osTimerNew+0xf4>)
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	2101      	movs	r1, #1
 800491e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004920:	f002 f9b4 	bl	8006c8c <xTimerCreate>
 8004924:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <osTimerNew+0xe8>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <osTimerNew+0xe8>
        vPortFree (callb);
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f003 f884 	bl	8007a40 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004938:	6a3b      	ldr	r3, [r7, #32]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	08004827 	.word	0x08004827

08004948 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004956:	f3ef 8305 	mrs	r3, IPSR
 800495a:	60fb      	str	r3, [r7, #12]
  return(result);
 800495c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <osTimerStart+0x22>
    stat = osErrorISR;
 8004962:	f06f 0305 	mvn.w	r3, #5
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e017      	b.n	800499a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004970:	f06f 0303 	mvn.w	r3, #3
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e010      	b.n	800499a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004978:	2300      	movs	r3, #0
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2300      	movs	r3, #0
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	2104      	movs	r1, #4
 8004982:	6938      	ldr	r0, [r7, #16]
 8004984:	f002 fa1c 	bl	8006dc0 <xTimerGenericCommand>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <osTimerStart+0x4c>
      stat = osOK;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e002      	b.n	800499a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004994:	f06f 0302 	mvn.w	r3, #2
 8004998:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b0:	f3ef 8305 	mrs	r3, IPSR
 80049b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d174      	bne.n	8004aa6 <osMutexNew+0x102>
    if (attr != NULL) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <osMutexNew+0x26>
      type = attr->attr_bits;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	e001      	b.n	80049ce <osMutexNew+0x2a>
    } else {
      type = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <osMutexNew+0x3a>
      rmtx = 1U;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e001      	b.n	80049e2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d15c      	bne.n	8004aa6 <osMutexNew+0x102>
      mem = -1;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <osMutexNew+0x6a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b4f      	cmp	r3, #79	; 0x4f
 8004a06:	d902      	bls.n	8004a0e <osMutexNew+0x6a>
          mem = 1;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e00c      	b.n	8004a28 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <osMutexNew+0x84>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <osMutexNew+0x84>
            mem = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e001      	b.n	8004a28 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d112      	bne.n	8004a54 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	2004      	movs	r0, #4
 8004a3c:	f000 fb17 	bl	800506e <xQueueCreateMutexStatic>
 8004a40:	61f8      	str	r0, [r7, #28]
 8004a42:	e016      	b.n	8004a72 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f000 fb0f 	bl	800506e <xQueueCreateMutexStatic>
 8004a50:	61f8      	str	r0, [r7, #28]
 8004a52:	e00e      	b.n	8004a72 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004a60:	2004      	movs	r0, #4
 8004a62:	f000 faec 	bl	800503e <xQueueCreateMutex>
 8004a66:	61f8      	str	r0, [r7, #28]
 8004a68:	e003      	b.n	8004a72 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f000 fae7 	bl	800503e <xQueueCreateMutex>
 8004a70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00c      	beq.n	8004a92 <osMutexNew+0xee>
        if (attr != NULL) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <osMutexNew+0xe2>
          name = attr->name;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e001      	b.n	8004a8a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	69f8      	ldr	r0, [r7, #28]
 8004a8e:	f001 f821 	bl	8005ad4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <osMutexNew+0x102>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ace:	f3ef 8305 	mrs	r3, IPSR
 8004ad2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ad4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004ada:	f06f 0305 	mvn.w	r3, #5
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e02c      	b.n	8004b3c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004ae8:	f06f 0303 	mvn.w	r3, #3
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e025      	b.n	8004b3c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d011      	beq.n	8004b1a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6938      	ldr	r0, [r7, #16]
 8004afa:	f000 fb07 	bl	800510c <xQueueTakeMutexRecursive>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d01b      	beq.n	8004b3c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004b0a:	f06f 0301 	mvn.w	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e014      	b.n	8004b3c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b12:	f06f 0302 	mvn.w	r3, #2
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e010      	b.n	8004b3c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	6938      	ldr	r0, [r7, #16]
 8004b1e:	f000 fda5 	bl	800566c <xQueueSemaphoreTake>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d009      	beq.n	8004b3c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004b2e:	f06f 0301 	mvn.w	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e002      	b.n	8004b3c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b36:	f06f 0302 	mvn.w	r3, #2
 8004b3a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004b3c:	697b      	ldr	r3, [r7, #20]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b62:	f3ef 8305 	mrs	r3, IPSR
 8004b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b68:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004b6e:	f06f 0305 	mvn.w	r3, #5
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e01f      	b.n	8004bb6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004b7c:	f06f 0303 	mvn.w	r3, #3
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e018      	b.n	8004bb6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004b8a:	6938      	ldr	r0, [r7, #16]
 8004b8c:	f000 fa8a 	bl	80050a4 <xQueueGiveMutexRecursive>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d00f      	beq.n	8004bb6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004b96:	f06f 0302 	mvn.w	r3, #2
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e00b      	b.n	8004bb6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	6938      	ldr	r0, [r7, #16]
 8004ba6:	f000 fae7 	bl	8005178 <xQueueGenericSend>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d002      	beq.n	8004bb6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004bb0:	f06f 0302 	mvn.w	r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004bb6:	697b      	ldr	r3, [r7, #20]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a07      	ldr	r2, [pc, #28]	; (8004bec <vApplicationGetIdleTaskMemory+0x2c>)
 8004bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8004bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2280      	movs	r2, #128	; 0x80
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	200004a8 	.word	0x200004a8
 8004bf0:	20000564 	.word	0x20000564

08004bf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <vApplicationGetTimerTaskMemory+0x30>)
 8004c0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000764 	.word	0x20000764
 8004c24:	20000820 	.word	0x20000820

08004c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f103 0208 	add.w	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f103 0208 	add.w	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f103 0208 	add.w	r2, r3, #8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d103      	bne.n	8004cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e00c      	b.n	8004d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3308      	adds	r3, #8
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e002      	b.n	8004cf8 <vListInsert+0x2e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d2f6      	bcs.n	8004cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6892      	ldr	r2, [r2, #8]
 8004d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6852      	ldr	r2, [r2, #4]
 8004d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d103      	bne.n	8004d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dba:	f002 fc53 	bl	8007664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	441a      	add	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	3b01      	subs	r3, #1
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	441a      	add	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	22ff      	movs	r2, #255	; 0xff
 8004dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	22ff      	movs	r2, #255	; 0xff
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d114      	bne.n	8004e3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01a      	beq.n	8004e4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 fb3d 	bl	800649c <xTaskRemoveFromEventList>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d012      	beq.n	8004e4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <xQueueGenericReset+0xcc>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	e009      	b.n	8004e4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3310      	adds	r3, #16
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fef2 	bl	8004c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3324      	adds	r3, #36	; 0x24
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff feed 	bl	8004c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e4e:	f002 fc39 	bl	80076c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e52:	2301      	movs	r3, #1
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	; 0x38
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <xQueueGenericCreateStatic+0x52>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <xQueueGenericCreateStatic+0x56>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericCreateStatic+0x58>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	623b      	str	r3, [r7, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <xQueueGenericCreateStatic+0x7e>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <xQueueGenericCreateStatic+0x82>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <xQueueGenericCreateStatic+0x84>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61fb      	str	r3, [r7, #28]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004efe:	2350      	movs	r3, #80	; 0x50
 8004f00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b50      	cmp	r3, #80	; 0x50
 8004f06:	d00a      	beq.n	8004f1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	61bb      	str	r3, [r7, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f83f 	bl	8004fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	; 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	613b      	str	r3, [r7, #16]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	3350      	adds	r3, #80	; 0x50
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 fc8d 	bl	80078a8 <pvPortMalloc>
 8004f8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3350      	adds	r3, #80	; 0x50
 8004f9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f805 	bl	8004fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fba:	69bb      	ldr	r3, [r7, #24]
	}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	69b8      	ldr	r0, [r7, #24]
 8004ff6:	f7ff fecb 	bl	8004d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00e      	beq.n	8005036 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800502a:	2300      	movs	r3, #0
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8a1 	bl	8005178 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	4603      	mov	r3, r0
 8005046:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	461a      	mov	r2, r3
 8005054:	6939      	ldr	r1, [r7, #16]
 8005056:	6978      	ldr	r0, [r7, #20]
 8005058:	f7ff ff7a 	bl	8004f50 <xQueueGenericCreate>
 800505c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff ffd3 	bl	800500a <prvInitialiseMutex>

		return xNewQueue;
 8005064:	68fb      	ldr	r3, [r7, #12]
	}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800506e:	b580      	push	{r7, lr}
 8005070:	b088      	sub	sp, #32
 8005072:	af02      	add	r7, sp, #8
 8005074:	4603      	mov	r3, r0
 8005076:	6039      	str	r1, [r7, #0]
 8005078:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800507a:	2301      	movs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2200      	movs	r2, #0
 800508a:	6939      	ldr	r1, [r7, #16]
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7ff fee7 	bl	8004e60 <xQueueGenericCreateStatic>
 8005092:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff ffb8 	bl	800500a <prvInitialiseMutex>

		return xNewQueue;
 800509a:	68fb      	ldr	r3, [r7, #12]
	}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	689c      	ldr	r4, [r3, #8]
 80050d0:	f001 fba6 	bl	8006820 <xTaskGetCurrentTaskHandle>
 80050d4:	4603      	mov	r3, r0
 80050d6:	429c      	cmp	r4, r3
 80050d8:	d111      	bne.n	80050fe <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80050ec:	2300      	movs	r3, #0
 80050ee:	2200      	movs	r2, #0
 80050f0:	2100      	movs	r1, #0
 80050f2:	6938      	ldr	r0, [r7, #16]
 80050f4:	f000 f840 	bl	8005178 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e001      	b.n	8005102 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005102:	697b      	ldr	r3, [r7, #20]
	}
 8005104:	4618      	mov	r0, r3
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd90      	pop	{r4, r7, pc}

0800510c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60fb      	str	r3, [r7, #12]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	689c      	ldr	r4, [r3, #8]
 800513a:	f001 fb71 	bl	8006820 <xTaskGetCurrentTaskHandle>
 800513e:	4603      	mov	r3, r0
 8005140:	429c      	cmp	r4, r3
 8005142:	d107      	bne.n	8005154 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e00c      	b.n	800516e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	6938      	ldr	r0, [r7, #16]
 8005158:	f000 fa88 	bl	800566c <xQueueSemaphoreTake>
 800515c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800516e:	697b      	ldr	r3, [r7, #20]
	}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005186:	2300      	movs	r3, #0
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xQueueGenericSend+0x32>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <xQueueGenericSend+0x40>
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <xQueueGenericSend+0x44>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <xQueueGenericSend+0x46>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <xQueueGenericSend+0x60>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d103      	bne.n	80051e6 <xQueueGenericSend+0x6e>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <xQueueGenericSend+0x72>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueGenericSend+0x74>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xQueueGenericSend+0x8e>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	623b      	str	r3, [r7, #32]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005206:	f001 fb1b 	bl	8006840 <xTaskGetSchedulerState>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <xQueueGenericSend+0x9e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <xQueueGenericSend+0xa2>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericSend+0xa4>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueGenericSend+0xbe>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61fb      	str	r3, [r7, #28]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005236:	f002 fa15 	bl	8007664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <xQueueGenericSend+0xd4>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d129      	bne.n	80052a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005252:	f000 fb2f 	bl	80058b4 <prvCopyDataToQueue>
 8005256:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	3324      	adds	r3, #36	; 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f001 f919 	bl	800649c <xTaskRemoveFromEventList>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d013      	beq.n	8005298 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005270:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <xQueueGenericSend+0x1f8>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	e00a      	b.n	8005298 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005288:	4b39      	ldr	r3, [pc, #228]	; (8005370 <xQueueGenericSend+0x1f8>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005298:	f002 fa14 	bl	80076c4 <vPortExitCritical>
				return pdPASS;
 800529c:	2301      	movs	r3, #1
 800529e:	e063      	b.n	8005368 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052a6:	f002 fa0d 	bl	80076c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e05c      	b.n	8005368 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 f953 	bl	8006564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052c2:	f002 f9ff 	bl	80076c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052c6:	f000 febf 	bl	8006048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052ca:	f002 f9cb 	bl	8007664 <vPortEnterCritical>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d4:	b25b      	sxtb	r3, r3
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d103      	bne.n	80052e4 <xQueueGenericSend+0x16c>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ea:	b25b      	sxtb	r3, r3
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d103      	bne.n	80052fa <xQueueGenericSend+0x182>
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fa:	f002 f9e3 	bl	80076c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052fe:	1d3a      	adds	r2, r7, #4
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f001 f942 	bl	8006590 <xTaskCheckForTimeOut>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d124      	bne.n	800535c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005314:	f000 fbc6 	bl	8005aa4 <prvIsQueueFull>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	3310      	adds	r3, #16
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f868 	bl	80063fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800532c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800532e:	f000 fb51 	bl	80059d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005332:	f000 fe97 	bl	8006064 <xTaskResumeAll>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af7c 	bne.w	8005236 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800533e:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <xQueueGenericSend+0x1f8>)
 8005340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	e772      	b.n	8005236 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005352:	f000 fb3f 	bl	80059d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005356:	f000 fe85 	bl	8006064 <xTaskResumeAll>
 800535a:	e76c      	b.n	8005236 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800535c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800535e:	f000 fb39 	bl	80059d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005362:	f000 fe7f 	bl	8006064 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005368:	4618      	mov	r0, r3
 800536a:	3738      	adds	r7, #56	; 0x38
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	e000ed04 	.word	0xe000ed04

08005374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b090      	sub	sp, #64	; 0x40
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d103      	bne.n	80053b0 <xQueueGenericSendFromISR+0x3c>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <xQueueGenericSendFromISR+0x40>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <xQueueGenericSendFromISR+0x42>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <xQueueGenericSendFromISR+0x6a>
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSendFromISR+0x6e>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSendFromISR+0x70>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053fe:	f002 fa13 	bl	8007828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005402:	f3ef 8211 	mrs	r2, BASEPRI
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	61fa      	str	r2, [r7, #28]
 8005418:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800541a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <xQueueGenericSendFromISR+0xbc>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d12f      	bne.n	8005490 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005446:	f000 fa35 	bl	80058b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800544a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d112      	bne.n	800547a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d016      	beq.n	800548a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	3324      	adds	r3, #36	; 0x24
 8005460:	4618      	mov	r0, r3
 8005462:	f001 f81b 	bl	800649c <xTaskRemoveFromEventList>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e007      	b.n	800548a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800547a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800547e:	3301      	adds	r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	b25a      	sxtb	r2, r3
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800548e:	e001      	b.n	8005494 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005490:	2300      	movs	r3, #0
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005496:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800549e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3740      	adds	r7, #64	; 0x40
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08c      	sub	sp, #48	; 0x30
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <xQueueReceive+0x30>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	623b      	str	r3, [r7, #32]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <xQueueReceive+0x3e>
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <xQueueReceive+0x42>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueReceive+0x44>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueReceive+0x5e>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	61fb      	str	r3, [r7, #28]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800550a:	f001 f999 	bl	8006840 <xTaskGetSchedulerState>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <xQueueReceive+0x6e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <xQueueReceive+0x72>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <xQueueReceive+0x74>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xQueueReceive+0x8e>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	61bb      	str	r3, [r7, #24]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800553a:	f002 f893 	bl	8007664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01f      	beq.n	800558a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800554e:	f000 fa1b 	bl	8005988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00f      	beq.n	8005582 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	3310      	adds	r3, #16
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff98 	bl	800649c <xTaskRemoveFromEventList>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005572:	4b3d      	ldr	r3, [pc, #244]	; (8005668 <xQueueReceive+0x1bc>)
 8005574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005582:	f002 f89f 	bl	80076c4 <vPortExitCritical>
				return pdPASS;
 8005586:	2301      	movs	r3, #1
 8005588:	e069      	b.n	800565e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005590:	f002 f898 	bl	80076c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005594:	2300      	movs	r3, #0
 8005596:	e062      	b.n	800565e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800559e:	f107 0310 	add.w	r3, r7, #16
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 ffde 	bl	8006564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ac:	f002 f88a 	bl	80076c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b0:	f000 fd4a 	bl	8006048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055b4:	f002 f856 	bl	8007664 <vPortEnterCritical>
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d103      	bne.n	80055ce <xQueueReceive+0x122>
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d4:	b25b      	sxtb	r3, r3
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d103      	bne.n	80055e4 <xQueueReceive+0x138>
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055e4:	f002 f86e 	bl	80076c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e8:	1d3a      	adds	r2, r7, #4
 80055ea:	f107 0310 	add.w	r3, r7, #16
 80055ee:	4611      	mov	r1, r2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 ffcd 	bl	8006590 <xTaskCheckForTimeOut>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d123      	bne.n	8005644 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055fe:	f000 fa3b 	bl	8005a78 <prvIsQueueEmpty>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fef3 	bl	80063fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005618:	f000 f9dc 	bl	80059d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800561c:	f000 fd22 	bl	8006064 <xTaskResumeAll>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d189      	bne.n	800553a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <xQueueReceive+0x1bc>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	e780      	b.n	800553a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563a:	f000 f9cb 	bl	80059d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563e:	f000 fd11 	bl	8006064 <xTaskResumeAll>
 8005642:	e77a      	b.n	800553a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f000 f9c5 	bl	80059d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800564a:	f000 fd0b 	bl	8006064 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800564e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005650:	f000 fa12 	bl	8005a78 <prvIsQueueEmpty>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	f43f af6f 	beq.w	800553a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800565c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800565e:	4618      	mov	r0, r3
 8005660:	3730      	adds	r7, #48	; 0x30
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	623b      	str	r3, [r7, #32]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	61fb      	str	r3, [r7, #28]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056bc:	f001 f8c0 	bl	8006840 <xTaskGetSchedulerState>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <xQueueSemaphoreTake+0x60>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <xQueueSemaphoreTake+0x64>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <xQueueSemaphoreTake+0x66>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	61bb      	str	r3, [r7, #24]
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ec:	f001 ffba 	bl	8007664 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d024      	beq.n	8005746 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	1e5a      	subs	r2, r3, #1
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800570c:	f001 fa0e 	bl	8006b2c <pvTaskIncrementMutexHeldCount>
 8005710:	4602      	mov	r2, r0
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	3310      	adds	r3, #16
 8005722:	4618      	mov	r0, r3
 8005724:	f000 feba 	bl	800649c <xTaskRemoveFromEventList>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800572e:	4b54      	ldr	r3, [pc, #336]	; (8005880 <xQueueSemaphoreTake+0x214>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800573e:	f001 ffc1 	bl	80076c4 <vPortExitCritical>
				return pdPASS;
 8005742:	2301      	movs	r3, #1
 8005744:	e097      	b.n	8005876 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d111      	bne.n	8005770 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	617b      	str	r3, [r7, #20]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005768:	f001 ffac 	bl	80076c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800576c:	2300      	movs	r3, #0
 800576e:	e082      	b.n	8005876 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005776:	f107 030c 	add.w	r3, r7, #12
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fef2 	bl	8006564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005784:	f001 ff9e 	bl	80076c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005788:	f000 fc5e 	bl	8006048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800578c:	f001 ff6a 	bl	8007664 <vPortEnterCritical>
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005796:	b25b      	sxtb	r3, r3
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d103      	bne.n	80057a6 <xQueueSemaphoreTake+0x13a>
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d103      	bne.n	80057bc <xQueueSemaphoreTake+0x150>
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057bc:	f001 ff82 	bl	80076c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057c0:	463a      	mov	r2, r7
 80057c2:	f107 030c 	add.w	r3, r7, #12
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fee1 	bl	8006590 <xTaskCheckForTimeOut>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d132      	bne.n	800583a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057d6:	f000 f94f 	bl	8005a78 <prvIsQueueEmpty>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d026      	beq.n	800582e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80057e8:	f001 ff3c 	bl	8007664 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f843 	bl	800687c <xTaskPriorityInherit>
 80057f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057f8:	f001 ff64 	bl	80076c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fdf9 	bl	80063fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800580a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800580c:	f000 f8e2 	bl	80059d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005810:	f000 fc28 	bl	8006064 <xTaskResumeAll>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	f47f af68 	bne.w	80056ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <xQueueSemaphoreTake+0x214>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	e75e      	b.n	80056ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800582e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005830:	f000 f8d0 	bl	80059d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005834:	f000 fc16 	bl	8006064 <xTaskResumeAll>
 8005838:	e758      	b.n	80056ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800583a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800583c:	f000 f8ca 	bl	80059d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005840:	f000 fc10 	bl	8006064 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005846:	f000 f917 	bl	8005a78 <prvIsQueueEmpty>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	f43f af4d 	beq.w	80056ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005858:	f001 ff04 	bl	8007664 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800585c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800585e:	f000 f811 	bl	8005884 <prvGetDisinheritPriorityAfterTimeout>
 8005862:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f8dc 	bl	8006a28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005870:	f001 ff28 	bl	80076c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005876:	4618      	mov	r0, r3
 8005878:	3738      	adds	r7, #56	; 0x38
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e001      	b.n	80058a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80058a6:	68fb      	ldr	r3, [r7, #12]
	}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10d      	bne.n	80058ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d14d      	bne.n	8005976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 f834 	bl	800694c <xTaskPriorityDisinherit>
 80058e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	e043      	b.n	8005976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d119      	bne.n	8005928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6858      	ldr	r0, [r3, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	461a      	mov	r2, r3
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	f002 fadf 	bl	8007ec2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	441a      	add	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d32b      	bcc.n	8005976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	e026      	b.n	8005976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68d8      	ldr	r0, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	461a      	mov	r2, r3
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	f002 fac5 	bl	8007ec2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	425b      	negs	r3, r3
 8005942:	441a      	add	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d207      	bcs.n	8005964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	425b      	negs	r3, r3
 800595e:	441a      	add	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d105      	bne.n	8005976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	3b01      	subs	r3, #1
 8005974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800597e:	697b      	ldr	r3, [r7, #20]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	441a      	add	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d303      	bcc.n	80059bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68d9      	ldr	r1, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	461a      	mov	r2, r3
 80059c6:	6838      	ldr	r0, [r7, #0]
 80059c8:	f002 fa7b 	bl	8007ec2 <memcpy>
	}
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059dc:	f001 fe42 	bl	8007664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059e8:	e011      	b.n	8005a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d012      	beq.n	8005a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fd50 	bl	800649c <xTaskRemoveFromEventList>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a02:	f000 fe27 	bl	8006654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	dce9      	bgt.n	80059ea <prvUnlockQueue+0x16>
 8005a16:	e000      	b.n	8005a1a <prvUnlockQueue+0x46>
					break;
 8005a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a22:	f001 fe4f 	bl	80076c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a26:	f001 fe1d 	bl	8007664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a32:	e011      	b.n	8005a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d012      	beq.n	8005a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3310      	adds	r3, #16
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fd2b 	bl	800649c <xTaskRemoveFromEventList>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a4c:	f000 fe02 	bl	8006654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dce9      	bgt.n	8005a34 <prvUnlockQueue+0x60>
 8005a60:	e000      	b.n	8005a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	22ff      	movs	r2, #255	; 0xff
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a6c:	f001 fe2a 	bl	80076c4 <vPortExitCritical>
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a80:	f001 fdf0 	bl	8007664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d102      	bne.n	8005a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e001      	b.n	8005a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a96:	f001 fe15 	bl	80076c4 <vPortExitCritical>

	return xReturn;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aac:	f001 fdda 	bl	8007664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d102      	bne.n	8005ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e001      	b.n	8005ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ac6:	f001 fdfd 	bl	80076c4 <vPortExitCritical>

	return xReturn;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e014      	b.n	8005b0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ae4:	4a0f      	ldr	r2, [pc, #60]	; (8005b24 <vQueueAddToRegistry+0x50>)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005af0:	490c      	ldr	r1, [pc, #48]	; (8005b24 <vQueueAddToRegistry+0x50>)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <vQueueAddToRegistry+0x50>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b06:	e006      	b.n	8005b16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b07      	cmp	r3, #7
 8005b12:	d9e7      	bls.n	8005ae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000c20 	.word	0x20000c20

08005b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b38:	f001 fd94 	bl	8007664 <vPortEnterCritical>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d103      	bne.n	8005b52 <vQueueWaitForMessageRestricted+0x2a>
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d103      	bne.n	8005b68 <vQueueWaitForMessageRestricted+0x40>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b68:	f001 fdac 	bl	80076c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fc61 	bl	8006444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f7ff ff26 	bl	80059d4 <prvUnlockQueue>
	}
 8005b88:	bf00      	nop
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af04      	add	r7, sp, #16
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	623b      	str	r3, [r7, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	61fb      	str	r3, [r7, #28]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bd6:	23bc      	movs	r3, #188	; 0xbc
 8005bd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2bbc      	cmp	r3, #188	; 0xbc
 8005bde:	d00a      	beq.n	8005bf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61bb      	str	r3, [r7, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01e      	beq.n	8005c3c <xTaskCreateStatic+0xac>
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01b      	beq.n	8005c3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c16:	2300      	movs	r3, #0
 8005c18:	9303      	str	r3, [sp, #12]
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	9302      	str	r3, [sp, #8]
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f850 	bl	8005cd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c36:	f000 f8f3 	bl	8005e20 <prvAddNewTaskToReadyList>
 8005c3a:	e001      	b.n	8005c40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c40:	697b      	ldr	r3, [r7, #20]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3728      	adds	r7, #40	; 0x28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b08c      	sub	sp, #48	; 0x30
 8005c4e:	af04      	add	r7, sp, #16
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 fe22 	bl	80078a8 <pvPortMalloc>
 8005c64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c6c:	20bc      	movs	r0, #188	; 0xbc
 8005c6e:	f001 fe1b 	bl	80078a8 <pvPortMalloc>
 8005c72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c80:	e005      	b.n	8005c8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c82:	6978      	ldr	r0, [r7, #20]
 8005c84:	f001 fedc 	bl	8007a40 <vPortFree>
 8005c88:	e001      	b.n	8005c8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c9c:	88fa      	ldrh	r2, [r7, #6]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9303      	str	r3, [sp, #12]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f80e 	bl	8005cd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cb8:	69f8      	ldr	r0, [r7, #28]
 8005cba:	f000 f8b1 	bl	8005e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e002      	b.n	8005cca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cca:	69bb      	ldr	r3, [r7, #24]
	}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	461a      	mov	r2, r3
 8005cec:	21a5      	movs	r1, #165	; 0xa5
 8005cee:	f002 f8f6 	bl	8007ede <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f023 0307 	bic.w	r3, r3, #7
 8005d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	617b      	str	r3, [r7, #20]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01f      	beq.n	8005d72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e012      	b.n	8005d5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	7819      	ldrb	r1, [r3, #0]
 8005d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	3334      	adds	r3, #52	; 0x34
 8005d48:	460a      	mov	r2, r1
 8005d4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d006      	beq.n	8005d66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b0f      	cmp	r3, #15
 8005d62:	d9e9      	bls.n	8005d38 <prvInitialiseNewTask+0x64>
 8005d64:	e000      	b.n	8005d68 <prvInitialiseNewTask+0x94>
			{
				break;
 8005d66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d70:	e003      	b.n	8005d7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	2b37      	cmp	r3, #55	; 0x37
 8005d7e:	d901      	bls.n	8005d84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d80:	2337      	movs	r3, #55	; 0x37
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	2200      	movs	r2, #0
 8005d94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe ff64 	bl	8004c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	3318      	adds	r3, #24
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe ff5f 	bl	8004c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	3354      	adds	r3, #84	; 0x54
 8005dd4:	2260      	movs	r2, #96	; 0x60
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f002 f880 	bl	8007ede <memset>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <prvInitialiseNewTask+0x140>)
 8005de2:	659a      	str	r2, [r3, #88]	; 0x58
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <prvInitialiseNewTask+0x144>)
 8005de8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	4a0b      	ldr	r2, [pc, #44]	; (8005e1c <prvInitialiseNewTask+0x148>)
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	69b8      	ldr	r0, [r7, #24]
 8005df6:	f001 fb09 	bl	800740c <pxPortInitialiseStack>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e0c:	bf00      	nop
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	080089c4 	.word	0x080089c4
 8005e18:	080089e4 	.word	0x080089e4
 8005e1c:	080089a4 	.word	0x080089a4

08005e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e28:	f001 fc1c 	bl	8007664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <prvAddNewTaskToReadyList+0xc4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <prvAddNewTaskToReadyList+0xc4>)
 8005e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e36:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <prvAddNewTaskToReadyList+0xc4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d110      	bne.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e4c:	f000 fc26 	bl	800669c <prvInitialiseTaskLists>
 8005e50:	e00d      	b.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <prvAddNewTaskToReadyList+0xcc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d802      	bhi.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e68:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <prvAddNewTaskToReadyList+0xd0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <prvAddNewTaskToReadyList+0xd0>)
 8005e76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e78:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <prvAddNewTaskToReadyList+0xd0>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <prvAddNewTaskToReadyList+0xd4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d903      	bls.n	8005e94 <prvAddNewTaskToReadyList+0x74>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <prvAddNewTaskToReadyList+0xd4>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <prvAddNewTaskToReadyList+0xd8>)
 8005ea2:	441a      	add	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7fe fee9 	bl	8004c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005eb0:	f001 fc08 	bl	80076c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <prvAddNewTaskToReadyList+0xcc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00e      	beq.n	8005eda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d207      	bcs.n	8005eda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005eca:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <prvAddNewTaskToReadyList+0xdc>)
 8005ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20001134 	.word	0x20001134
 8005ee8:	20000c60 	.word	0x20000c60
 8005eec:	20001140 	.word	0x20001140
 8005ef0:	20001150 	.word	0x20001150
 8005ef4:	2000113c 	.word	0x2000113c
 8005ef8:	20000c64 	.word	0x20000c64
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <vTaskDelay+0x60>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <vTaskDelay+0x30>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60bb      	str	r3, [r7, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f30:	f000 f88a 	bl	8006048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f34:	2100      	movs	r1, #0
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fe0c 	bl	8006b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f3c:	f000 f892 	bl	8006064 <xTaskResumeAll>
 8005f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <vTaskDelay+0x64>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	2000115c 	.word	0x2000115c
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f76:	463a      	mov	r2, r7
 8005f78:	1d39      	adds	r1, r7, #4
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fe1e 	bl	8004bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	9202      	str	r2, [sp, #8]
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	2300      	movs	r3, #0
 8005f94:	460a      	mov	r2, r1
 8005f96:	4924      	ldr	r1, [pc, #144]	; (8006028 <vTaskStartScheduler+0xc0>)
 8005f98:	4824      	ldr	r0, [pc, #144]	; (800602c <vTaskStartScheduler+0xc4>)
 8005f9a:	f7ff fdf9 	bl	8005b90 <xTaskCreateStatic>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <vTaskStartScheduler+0xc8>)
 8005fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fa4:	4b22      	ldr	r3, [pc, #136]	; (8006030 <vTaskStartScheduler+0xc8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fac:	2301      	movs	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e001      	b.n	8005fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d102      	bne.n	8005fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fbc:	f000 fe1e 	bl	8006bfc <xTimerCreateTimerTask>
 8005fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d11b      	bne.n	8006000 <vTaskStartScheduler+0x98>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	613b      	str	r3, [r7, #16]
}
 8005fda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fdc:	4b15      	ldr	r3, [pc, #84]	; (8006034 <vTaskStartScheduler+0xcc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3354      	adds	r3, #84	; 0x54
 8005fe2:	4a15      	ldr	r2, [pc, #84]	; (8006038 <vTaskStartScheduler+0xd0>)
 8005fe4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fe6:	4b15      	ldr	r3, [pc, #84]	; (800603c <vTaskStartScheduler+0xd4>)
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fee:	4b14      	ldr	r3, [pc, #80]	; (8006040 <vTaskStartScheduler+0xd8>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <vTaskStartScheduler+0xdc>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ffa:	f001 fa91 	bl	8007520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ffe:	e00e      	b.n	800601e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d10a      	bne.n	800601e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <vTaskStartScheduler+0xb4>
}
 800601e:	bf00      	nop
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	080088b4 	.word	0x080088b4
 800602c:	0800666d 	.word	0x0800666d
 8006030:	20001158 	.word	0x20001158
 8006034:	20000c60 	.word	0x20000c60
 8006038:	20000014 	.word	0x20000014
 800603c:	20001154 	.word	0x20001154
 8006040:	20001140 	.word	0x20001140
 8006044:	20001138 	.word	0x20001138

08006048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800604c:	4b04      	ldr	r3, [pc, #16]	; (8006060 <vTaskSuspendAll+0x18>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	4a03      	ldr	r2, [pc, #12]	; (8006060 <vTaskSuspendAll+0x18>)
 8006054:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006056:	bf00      	nop
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	2000115c 	.word	0x2000115c

08006064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006072:	4b42      	ldr	r3, [pc, #264]	; (800617c <xTaskResumeAll+0x118>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <xTaskResumeAll+0x2c>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	603b      	str	r3, [r7, #0]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006090:	f001 fae8 	bl	8007664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006094:	4b39      	ldr	r3, [pc, #228]	; (800617c <xTaskResumeAll+0x118>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3b01      	subs	r3, #1
 800609a:	4a38      	ldr	r2, [pc, #224]	; (800617c <xTaskResumeAll+0x118>)
 800609c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609e:	4b37      	ldr	r3, [pc, #220]	; (800617c <xTaskResumeAll+0x118>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d162      	bne.n	800616c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060a6:	4b36      	ldr	r3, [pc, #216]	; (8006180 <xTaskResumeAll+0x11c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d05e      	beq.n	800616c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060ae:	e02f      	b.n	8006110 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060b0:	4b34      	ldr	r3, [pc, #208]	; (8006184 <xTaskResumeAll+0x120>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3318      	adds	r3, #24
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe fe3d 	bl	8004d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fe38 	bl	8004d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4b2d      	ldr	r3, [pc, #180]	; (8006188 <xTaskResumeAll+0x124>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d903      	bls.n	80060e0 <xTaskResumeAll+0x7c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	4a2a      	ldr	r2, [pc, #168]	; (8006188 <xTaskResumeAll+0x124>)
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4a27      	ldr	r2, [pc, #156]	; (800618c <xTaskResumeAll+0x128>)
 80060ee:	441a      	add	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7fe fdc3 	bl	8004c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4b23      	ldr	r3, [pc, #140]	; (8006190 <xTaskResumeAll+0x12c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800610a:	4b22      	ldr	r3, [pc, #136]	; (8006194 <xTaskResumeAll+0x130>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006110:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <xTaskResumeAll+0x120>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1cb      	bne.n	80060b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800611e:	f000 fb5f 	bl	80067e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006122:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <xTaskResumeAll+0x134>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800612e:	f000 f847 	bl	80061c0 <xTaskIncrementTick>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <xTaskResumeAll+0x130>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3b01      	subs	r3, #1
 8006142:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f1      	bne.n	800612e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <xTaskResumeAll+0x134>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006150:	4b10      	ldr	r3, [pc, #64]	; (8006194 <xTaskResumeAll+0x130>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800615c:	4b0f      	ldr	r3, [pc, #60]	; (800619c <xTaskResumeAll+0x138>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800616c:	f001 faaa 	bl	80076c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006170:	68bb      	ldr	r3, [r7, #8]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	2000115c 	.word	0x2000115c
 8006180:	20001134 	.word	0x20001134
 8006184:	200010f4 	.word	0x200010f4
 8006188:	2000113c 	.word	0x2000113c
 800618c:	20000c64 	.word	0x20000c64
 8006190:	20000c60 	.word	0x20000c60
 8006194:	20001148 	.word	0x20001148
 8006198:	20001144 	.word	0x20001144
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <xTaskGetTickCount+0x1c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061ac:	687b      	ldr	r3, [r7, #4]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20001138 	.word	0x20001138

080061c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ca:	4b4f      	ldr	r3, [pc, #316]	; (8006308 <xTaskIncrementTick+0x148>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 808f 	bne.w	80062f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061d4:	4b4d      	ldr	r3, [pc, #308]	; (800630c <xTaskIncrementTick+0x14c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061dc:	4a4b      	ldr	r2, [pc, #300]	; (800630c <xTaskIncrementTick+0x14c>)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d120      	bne.n	800622a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061e8:	4b49      	ldr	r3, [pc, #292]	; (8006310 <xTaskIncrementTick+0x150>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <xTaskIncrementTick+0x48>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	603b      	str	r3, [r7, #0]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <xTaskIncrementTick+0x46>
 8006208:	4b41      	ldr	r3, [pc, #260]	; (8006310 <xTaskIncrementTick+0x150>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	4b41      	ldr	r3, [pc, #260]	; (8006314 <xTaskIncrementTick+0x154>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3f      	ldr	r2, [pc, #252]	; (8006310 <xTaskIncrementTick+0x150>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4a3f      	ldr	r2, [pc, #252]	; (8006314 <xTaskIncrementTick+0x154>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <xTaskIncrementTick+0x158>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	4a3d      	ldr	r2, [pc, #244]	; (8006318 <xTaskIncrementTick+0x158>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	f000 fadb 	bl	80067e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800622a:	4b3c      	ldr	r3, [pc, #240]	; (800631c <xTaskIncrementTick+0x15c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d349      	bcc.n	80062c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006234:	4b36      	ldr	r3, [pc, #216]	; (8006310 <xTaskIncrementTick+0x150>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623e:	4b37      	ldr	r3, [pc, #220]	; (800631c <xTaskIncrementTick+0x15c>)
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	601a      	str	r2, [r3, #0]
					break;
 8006246:	e03f      	b.n	80062c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006248:	4b31      	ldr	r3, [pc, #196]	; (8006310 <xTaskIncrementTick+0x150>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d203      	bcs.n	8006268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <xTaskIncrementTick+0x15c>)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006266:	e02f      	b.n	80062c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fd65 	bl	8004d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	3318      	adds	r3, #24
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fd5c 	bl	8004d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	4b25      	ldr	r3, [pc, #148]	; (8006320 <xTaskIncrementTick+0x160>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d903      	bls.n	8006298 <xTaskIncrementTick+0xd8>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4a22      	ldr	r2, [pc, #136]	; (8006320 <xTaskIncrementTick+0x160>)
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4a1f      	ldr	r2, [pc, #124]	; (8006324 <xTaskIncrementTick+0x164>)
 80062a6:	441a      	add	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f7fe fce7 	bl	8004c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <xTaskIncrementTick+0x168>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3b8      	bcc.n	8006234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062c2:	2301      	movs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c6:	e7b5      	b.n	8006234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062c8:	4b17      	ldr	r3, [pc, #92]	; (8006328 <xTaskIncrementTick+0x168>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	4915      	ldr	r1, [pc, #84]	; (8006324 <xTaskIncrementTick+0x164>)
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d901      	bls.n	80062e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062e4:	4b11      	ldr	r3, [pc, #68]	; (800632c <xTaskIncrementTick+0x16c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80062ec:	2301      	movs	r3, #1
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e004      	b.n	80062fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062f2:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <xTaskIncrementTick+0x170>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <xTaskIncrementTick+0x170>)
 80062fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062fc:	697b      	ldr	r3, [r7, #20]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2000115c 	.word	0x2000115c
 800630c:	20001138 	.word	0x20001138
 8006310:	200010ec 	.word	0x200010ec
 8006314:	200010f0 	.word	0x200010f0
 8006318:	2000114c 	.word	0x2000114c
 800631c:	20001154 	.word	0x20001154
 8006320:	2000113c 	.word	0x2000113c
 8006324:	20000c64 	.word	0x20000c64
 8006328:	20000c60 	.word	0x20000c60
 800632c:	20001148 	.word	0x20001148
 8006330:	20001144 	.word	0x20001144

08006334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800633a:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <vTaskSwitchContext+0xb0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006342:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <vTaskSwitchContext+0xb4>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006348:	e046      	b.n	80063d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800634a:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <vTaskSwitchContext+0xb4>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	4b26      	ldr	r3, [pc, #152]	; (80063ec <vTaskSwitchContext+0xb8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	e010      	b.n	800637a <vTaskSwitchContext+0x46>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <vTaskSwitchContext+0x40>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <vTaskSwitchContext+0x3e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3b01      	subs	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	491d      	ldr	r1, [pc, #116]	; (80063f0 <vTaskSwitchContext+0xbc>)
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0e4      	beq.n	8006358 <vTaskSwitchContext+0x24>
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <vTaskSwitchContext+0xbc>)
 800639a:	4413      	add	r3, r2
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3308      	adds	r3, #8
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d104      	bne.n	80063be <vTaskSwitchContext+0x8a>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4a0b      	ldr	r2, [pc, #44]	; (80063f4 <vTaskSwitchContext+0xc0>)
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4a08      	ldr	r2, [pc, #32]	; (80063ec <vTaskSwitchContext+0xb8>)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <vTaskSwitchContext+0xc0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3354      	adds	r3, #84	; 0x54
 80063d4:	4a08      	ldr	r2, [pc, #32]	; (80063f8 <vTaskSwitchContext+0xc4>)
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	2000115c 	.word	0x2000115c
 80063e8:	20001148 	.word	0x20001148
 80063ec:	2000113c 	.word	0x2000113c
 80063f0:	20000c64 	.word	0x20000c64
 80063f4:	20000c60 	.word	0x20000c60
 80063f8:	20000014 	.word	0x20000014

080063fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006422:	4b07      	ldr	r3, [pc, #28]	; (8006440 <vTaskPlaceOnEventList+0x44>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3318      	adds	r3, #24
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fe fc4d 	bl	8004cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006430:	2101      	movs	r1, #1
 8006432:	6838      	ldr	r0, [r7, #0]
 8006434:	f000 fb8e 	bl	8006b54 <prvAddCurrentTaskToDelayedList>
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20000c60 	.word	0x20000c60

08006444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	617b      	str	r3, [r7, #20]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <vTaskPlaceOnEventListRestricted+0x54>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3318      	adds	r3, #24
 8006472:	4619      	mov	r1, r3
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7fe fc04 	bl	8004c82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006480:	f04f 33ff 	mov.w	r3, #4294967295
 8006484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	68b8      	ldr	r0, [r7, #8]
 800648a:	f000 fb63 	bl	8006b54 <prvAddCurrentTaskToDelayedList>
	}
 800648e:	bf00      	nop
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000c60 	.word	0x20000c60

0800649c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60fb      	str	r3, [r7, #12]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3318      	adds	r3, #24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe fc35 	bl	8004d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d2:	4b1e      	ldr	r3, [pc, #120]	; (800654c <xTaskRemoveFromEventList+0xb0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11d      	bne.n	8006516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fc2c 	bl	8004d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <xTaskRemoveFromEventList+0xb4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d903      	bls.n	80064f8 <xTaskRemoveFromEventList+0x5c>
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	4a16      	ldr	r2, [pc, #88]	; (8006550 <xTaskRemoveFromEventList+0xb4>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <xTaskRemoveFromEventList+0xb8>)
 8006506:	441a      	add	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fe fbb7 	bl	8004c82 <vListInsertEnd>
 8006514:	e005      	b.n	8006522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3318      	adds	r3, #24
 800651a:	4619      	mov	r1, r3
 800651c:	480e      	ldr	r0, [pc, #56]	; (8006558 <xTaskRemoveFromEventList+0xbc>)
 800651e:	f7fe fbb0 	bl	8004c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <xTaskRemoveFromEventList+0xc0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	429a      	cmp	r2, r3
 800652e:	d905      	bls.n	800653c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <xTaskRemoveFromEventList+0xc4>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e001      	b.n	8006540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006540:	697b      	ldr	r3, [r7, #20]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	2000115c 	.word	0x2000115c
 8006550:	2000113c 	.word	0x2000113c
 8006554:	20000c64 	.word	0x20000c64
 8006558:	200010f4 	.word	0x200010f4
 800655c:	20000c60 	.word	0x20000c60
 8006560:	20001148 	.word	0x20001148

08006564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <vTaskInternalSetTimeOutState+0x24>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <vTaskInternalSetTimeOutState+0x28>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	605a      	str	r2, [r3, #4]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	2000114c 	.word	0x2000114c
 800658c:	20001138 	.word	0x20001138

08006590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	613b      	str	r3, [r7, #16]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60fb      	str	r3, [r7, #12]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80065d2:	f001 f847 	bl	8007664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065d6:	4b1d      	ldr	r3, [pc, #116]	; (800664c <xTaskCheckForTimeOut+0xbc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d102      	bne.n	80065f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	e023      	b.n	800663e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b15      	ldr	r3, [pc, #84]	; (8006650 <xTaskCheckForTimeOut+0xc0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d007      	beq.n	8006612 <xTaskCheckForTimeOut+0x82>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	429a      	cmp	r2, r3
 800660a:	d302      	bcc.n	8006612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800660c:	2301      	movs	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	e015      	b.n	800663e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	429a      	cmp	r2, r3
 800661a:	d20b      	bcs.n	8006634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ff9b 	bl	8006564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	e004      	b.n	800663e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800663a:	2301      	movs	r3, #1
 800663c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800663e:	f001 f841 	bl	80076c4 <vPortExitCritical>

	return xReturn;
 8006642:	69fb      	ldr	r3, [r7, #28]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3720      	adds	r7, #32
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20001138 	.word	0x20001138
 8006650:	2000114c 	.word	0x2000114c

08006654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006658:	4b03      	ldr	r3, [pc, #12]	; (8006668 <vTaskMissedYield+0x14>)
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
}
 800665e:	bf00      	nop
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	20001148 	.word	0x20001148

0800666c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006674:	f000 f852 	bl	800671c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <prvIdleTask+0x28>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d9f9      	bls.n	8006674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <prvIdleTask+0x2c>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006690:	e7f0      	b.n	8006674 <prvIdleTask+0x8>
 8006692:	bf00      	nop
 8006694:	20000c64 	.word	0x20000c64
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066a2:	2300      	movs	r3, #0
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	e00c      	b.n	80066c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4a12      	ldr	r2, [pc, #72]	; (80066fc <prvInitialiseTaskLists+0x60>)
 80066b4:	4413      	add	r3, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fab6 	bl	8004c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3301      	adds	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b37      	cmp	r3, #55	; 0x37
 80066c6:	d9ef      	bls.n	80066a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066c8:	480d      	ldr	r0, [pc, #52]	; (8006700 <prvInitialiseTaskLists+0x64>)
 80066ca:	f7fe faad 	bl	8004c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ce:	480d      	ldr	r0, [pc, #52]	; (8006704 <prvInitialiseTaskLists+0x68>)
 80066d0:	f7fe faaa 	bl	8004c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066d4:	480c      	ldr	r0, [pc, #48]	; (8006708 <prvInitialiseTaskLists+0x6c>)
 80066d6:	f7fe faa7 	bl	8004c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066da:	480c      	ldr	r0, [pc, #48]	; (800670c <prvInitialiseTaskLists+0x70>)
 80066dc:	f7fe faa4 	bl	8004c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066e0:	480b      	ldr	r0, [pc, #44]	; (8006710 <prvInitialiseTaskLists+0x74>)
 80066e2:	f7fe faa1 	bl	8004c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <prvInitialiseTaskLists+0x78>)
 80066e8:	4a05      	ldr	r2, [pc, #20]	; (8006700 <prvInitialiseTaskLists+0x64>)
 80066ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <prvInitialiseTaskLists+0x7c>)
 80066ee:	4a05      	ldr	r2, [pc, #20]	; (8006704 <prvInitialiseTaskLists+0x68>)
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000c64 	.word	0x20000c64
 8006700:	200010c4 	.word	0x200010c4
 8006704:	200010d8 	.word	0x200010d8
 8006708:	200010f4 	.word	0x200010f4
 800670c:	20001108 	.word	0x20001108
 8006710:	20001120 	.word	0x20001120
 8006714:	200010ec 	.word	0x200010ec
 8006718:	200010f0 	.word	0x200010f0

0800671c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006722:	e019      	b.n	8006758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006724:	f000 ff9e 	bl	8007664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <prvCheckTasksWaitingTermination+0x50>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe fb01 	bl	8004d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <prvCheckTasksWaitingTermination+0x54>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <prvCheckTasksWaitingTermination+0x54>)
 8006742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <prvCheckTasksWaitingTermination+0x58>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	4a0a      	ldr	r2, [pc, #40]	; (8006774 <prvCheckTasksWaitingTermination+0x58>)
 800674c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800674e:	f000 ffb9 	bl	80076c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f810 	bl	8006778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <prvCheckTasksWaitingTermination+0x58>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e1      	bne.n	8006724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20001108 	.word	0x20001108
 8006770:	20001134 	.word	0x20001134
 8006774:	2000111c 	.word	0x2000111c

08006778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3354      	adds	r3, #84	; 0x54
 8006784:	4618      	mov	r0, r3
 8006786:	f001 fccb 	bl	8008120 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006790:	2b00      	cmp	r3, #0
 8006792:	d108      	bne.n	80067a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	4618      	mov	r0, r3
 800679a:	f001 f951 	bl	8007a40 <vPortFree>
				vPortFree( pxTCB );
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f94e 	bl	8007a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067a4:	e018      	b.n	80067d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d103      	bne.n	80067b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f945 	bl	8007a40 <vPortFree>
	}
 80067b6:	e00f      	b.n	80067d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d00a      	beq.n	80067d8 <prvDeleteTCB+0x60>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60fb      	str	r3, [r7, #12]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <prvDeleteTCB+0x5e>
	}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvResetNextTaskUnblockTime+0x38>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <prvResetNextTaskUnblockTime+0x3c>)
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295
 80067f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067f8:	e008      	b.n	800680c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <prvResetNextTaskUnblockTime+0x38>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4a04      	ldr	r2, [pc, #16]	; (800681c <prvResetNextTaskUnblockTime+0x3c>)
 800680a:	6013      	str	r3, [r2, #0]
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	200010ec 	.word	0x200010ec
 800681c:	20001154 	.word	0x20001154

08006820 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <xTaskGetCurrentTaskHandle+0x1c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800682c:	687b      	ldr	r3, [r7, #4]
	}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000c60 	.word	0x20000c60

08006840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <xTaskGetSchedulerState+0x34>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800684e:	2301      	movs	r3, #1
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	e008      	b.n	8006866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <xTaskGetSchedulerState+0x38>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800685c:	2302      	movs	r3, #2
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	e001      	b.n	8006866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006866:	687b      	ldr	r3, [r7, #4]
	}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	20001140 	.word	0x20001140
 8006878:	2000115c 	.word	0x2000115c

0800687c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d051      	beq.n	8006936 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <xTaskPriorityInherit+0xc4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	429a      	cmp	r2, r3
 800689e:	d241      	bcs.n	8006924 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	db06      	blt.n	80068b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <xTaskPriorityInherit+0xc4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6959      	ldr	r1, [r3, #20]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <xTaskPriorityInherit+0xc8>)
 80068c8:	4413      	add	r3, r2
 80068ca:	4299      	cmp	r1, r3
 80068cc:	d122      	bne.n	8006914 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fa32 	bl	8004d3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <xTaskPriorityInherit+0xc4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <xTaskPriorityInherit+0xcc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d903      	bls.n	80068f6 <xTaskPriorityInherit+0x7a>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	4a15      	ldr	r2, [pc, #84]	; (8006948 <xTaskPriorityInherit+0xcc>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4a10      	ldr	r2, [pc, #64]	; (8006944 <xTaskPriorityInherit+0xc8>)
 8006904:	441a      	add	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7fe f9b8 	bl	8004c82 <vListInsertEnd>
 8006912:	e004      	b.n	800691e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <xTaskPriorityInherit+0xc4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e008      	b.n	8006936 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <xTaskPriorityInherit+0xc4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d201      	bcs.n	8006936 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006936:	68fb      	ldr	r3, [r7, #12]
	}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000c60 	.word	0x20000c60
 8006944:	20000c64 	.word	0x20000c64
 8006948:	2000113c 	.word	0x2000113c

0800694c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d056      	beq.n	8006a10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006962:	4b2e      	ldr	r3, [pc, #184]	; (8006a1c <xTaskPriorityDisinherit+0xd0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	429a      	cmp	r2, r3
 800696a:	d00a      	beq.n	8006982 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60bb      	str	r3, [r7, #8]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a4:	1e5a      	subs	r2, r3, #1
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d02c      	beq.n	8006a10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d128      	bne.n	8006a10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe f9ba 	bl	8004d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <xTaskPriorityDisinherit+0xd4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d903      	bls.n	80069f0 <xTaskPriorityDisinherit+0xa4>
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <xTaskPriorityDisinherit+0xd4>)
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <xTaskPriorityDisinherit+0xd8>)
 80069fe:	441a      	add	r2, r3
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7fe f93b 	bl	8004c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a10:	697b      	ldr	r3, [r7, #20]
	}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000c60 	.word	0x20000c60
 8006a20:	2000113c 	.word	0x2000113c
 8006a24:	20000c64 	.word	0x20000c64

08006a28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d06a      	beq.n	8006b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d902      	bls.n	8006a6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	e002      	b.n	8006a74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d04b      	beq.n	8006b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d146      	bne.n	8006b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d10a      	bne.n	8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60bb      	str	r3, [r7, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db04      	blt.n	8006ac6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	6959      	ldr	r1, [r3, #20]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ad6:	4413      	add	r3, r2
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d11c      	bne.n	8006b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe f92b 	bl	8004d3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d903      	bls.n	8006afa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	4a0c      	ldr	r2, [pc, #48]	; (8006b28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006b08:	441a      	add	r2, r3
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fe f8b6 	bl	8004c82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b16:	bf00      	nop
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000c60 	.word	0x20000c60
 8006b24:	20000c64 	.word	0x20000c64
 8006b28:	2000113c 	.word	0x2000113c

08006b2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b3e:	3201      	adds	r2, #1
 8006b40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006b42:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b44:	681b      	ldr	r3, [r3, #0]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	20000c60 	.word	0x20000c60

08006b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b5e:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b64:	4b20      	ldr	r3, [pc, #128]	; (8006be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe f8e6 	bl	8004d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d10a      	bne.n	8006b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4619      	mov	r1, r3
 8006b86:	4819      	ldr	r0, [pc, #100]	; (8006bec <prvAddCurrentTaskToDelayedList+0x98>)
 8006b88:	f7fe f87b 	bl	8004c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b8c:	e026      	b.n	8006bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4413      	add	r3, r2
 8006b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d209      	bcs.n	8006bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7fe f889 	bl	8004cca <vListInsert>
}
 8006bb8:	e010      	b.n	8006bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bba:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7fe f87f 	bl	8004cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d202      	bcs.n	8006bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bd6:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6013      	str	r3, [r2, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20001138 	.word	0x20001138
 8006be8:	20000c60 	.word	0x20000c60
 8006bec:	20001120 	.word	0x20001120
 8006bf0:	200010f0 	.word	0x200010f0
 8006bf4:	200010ec 	.word	0x200010ec
 8006bf8:	20001154 	.word	0x20001154

08006bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c06:	f000 fba1 	bl	800734c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <xTimerCreateTimerTask+0x80>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d021      	beq.n	8006c56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c1a:	1d3a      	adds	r2, r7, #4
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd ffe5 	bl	8004bf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	9202      	str	r2, [sp, #8]
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	2302      	movs	r3, #2
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	460a      	mov	r2, r1
 8006c3c:	4910      	ldr	r1, [pc, #64]	; (8006c80 <xTimerCreateTimerTask+0x84>)
 8006c3e:	4811      	ldr	r0, [pc, #68]	; (8006c84 <xTimerCreateTimerTask+0x88>)
 8006c40:	f7fe ffa6 	bl	8005b90 <xTaskCreateStatic>
 8006c44:	4603      	mov	r3, r0
 8006c46:	4a10      	ldr	r2, [pc, #64]	; (8006c88 <xTimerCreateTimerTask+0x8c>)
 8006c48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c4a:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <xTimerCreateTimerTask+0x8c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c52:	2301      	movs	r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c72:	697b      	ldr	r3, [r7, #20]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20001190 	.word	0x20001190
 8006c80:	080088bc 	.word	0x080088bc
 8006c84:	08006ef5 	.word	0x08006ef5
 8006c88:	20001194 	.word	0x20001194

08006c8c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006c9a:	202c      	movs	r0, #44	; 0x2c
 8006c9c:	f000 fe04 	bl	80078a8 <pvPortMalloc>
 8006ca0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00d      	beq.n	8006cc4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f843 	bl	8006d4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006cc4:	697b      	ldr	r3, [r7, #20]
	}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b08a      	sub	sp, #40	; 0x28
 8006cd2:	af02      	add	r7, sp, #8
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006cdc:	232c      	movs	r3, #44	; 0x2c
 8006cde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b2c      	cmp	r3, #44	; 0x2c
 8006ce4:	d00a      	beq.n	8006cfc <xTimerCreateStatic+0x2e>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	61bb      	str	r3, [r7, #24]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <xTimerCreateStatic+0x4c>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	617b      	str	r3, [r7, #20]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 f805 	bl	8006d4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006d40:	69fb      	ldr	r3, [r7, #28]
	}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	617b      	str	r3, [r7, #20]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01e      	beq.n	8006db8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006d7a:	f000 fae7 	bl	800734c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd ff64 	bl	8004c68 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dac:	f043 0304 	orr.w	r3, r3, #4
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006db8:	bf00      	nop
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <xTimerGenericCommand+0x2e>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	623b      	str	r3, [r7, #32]
}
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dee:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <xTimerGenericCommand+0x98>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d02a      	beq.n	8006e4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	dc18      	bgt.n	8006e3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e08:	f7ff fd1a 	bl	8006840 <xTaskGetSchedulerState>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d109      	bne.n	8006e26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <xTimerGenericCommand+0x98>)
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f107 0110 	add.w	r1, r7, #16
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1e:	f7fe f9ab 	bl	8005178 <xQueueGenericSend>
 8006e22:	6278      	str	r0, [r7, #36]	; 0x24
 8006e24:	e012      	b.n	8006e4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <xTimerGenericCommand+0x98>)
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f107 0110 	add.w	r1, r7, #16
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	f7fe f9a1 	bl	8005178 <xQueueGenericSend>
 8006e36:	6278      	str	r0, [r7, #36]	; 0x24
 8006e38:	e008      	b.n	8006e4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <xTimerGenericCommand+0x98>)
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f107 0110 	add.w	r1, r7, #16
 8006e42:	2300      	movs	r3, #0
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	f7fe fa95 	bl	8005374 <xQueueGenericSendFromISR>
 8006e4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3728      	adds	r7, #40	; 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20001190 	.word	0x20001190

08006e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e66:	4b22      	ldr	r3, [pc, #136]	; (8006ef0 <prvProcessExpiredTimer+0x94>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd ff61 	bl	8004d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d022      	beq.n	8006ece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	18d1      	adds	r1, r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	6978      	ldr	r0, [r7, #20]
 8006e96:	f000 f8d1 	bl	800703c <prvInsertTimerInActiveList>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01f      	beq.n	8006ee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6978      	ldr	r0, [r7, #20]
 8006eac:	f7ff ff88 	bl	8006dc0 <xTimerGenericCommand>
 8006eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d113      	bne.n	8006ee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	6978      	ldr	r0, [r7, #20]
 8006ee6:	4798      	blx	r3
}
 8006ee8:	bf00      	nop
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20001188 	.word	0x20001188

08006ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006efc:	f107 0308 	add.w	r3, r7, #8
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f857 	bl	8006fb4 <prvGetNextExpireTime>
 8006f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f803 	bl	8006f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f12:	f000 f8d5 	bl	80070c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f16:	e7f1      	b.n	8006efc <prvTimerTask+0x8>

08006f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f22:	f7ff f891 	bl	8006048 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f26:	f107 0308 	add.w	r3, r7, #8
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f866 	bl	8006ffc <prvSampleTimeNow>
 8006f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d130      	bne.n	8006f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <prvProcessTimerOrBlockTask+0x3c>
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d806      	bhi.n	8006f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f46:	f7ff f88d 	bl	8006064 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff ff85 	bl	8006e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f52:	e024      	b.n	8006f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d008      	beq.n	8006f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <prvProcessTimerOrBlockTask+0x90>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <prvProcessTimerOrBlockTask+0x50>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <prvProcessTimerOrBlockTask+0x52>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <prvProcessTimerOrBlockTask+0x94>)
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7fe fdd5 	bl	8005b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f7e:	f7ff f871 	bl	8006064 <xTaskResumeAll>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <prvProcessTimerOrBlockTask+0x98>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
}
 8006f98:	e001      	b.n	8006f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f9a:	f7ff f863 	bl	8006064 <xTaskResumeAll>
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000118c 	.word	0x2000118c
 8006fac:	20001190 	.word	0x20001190
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <prvGetNextExpireTime+0x44>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <prvGetNextExpireTime+0x16>
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	e000      	b.n	8006fcc <prvGetNextExpireTime+0x18>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fd8:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <prvGetNextExpireTime+0x44>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e001      	b.n	8006fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20001188 	.word	0x20001188

08006ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007004:	f7ff f8cc 	bl	80061a0 <xTaskGetTickCount>
 8007008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <prvSampleTimeNow+0x3c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	429a      	cmp	r2, r3
 8007012:	d205      	bcs.n	8007020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007014:	f000 f936 	bl	8007284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e002      	b.n	8007026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007026:	4a04      	ldr	r2, [pc, #16]	; (8007038 <prvSampleTimeNow+0x3c>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800702c:	68fb      	ldr	r3, [r7, #12]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20001198 	.word	0x20001198

0800703c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d812      	bhi.n	8007088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007070:	2301      	movs	r3, #1
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	e01b      	b.n	80070ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007076:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <prvInsertTimerInActiveList+0x7c>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3304      	adds	r3, #4
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7fd fe22 	bl	8004cca <vListInsert>
 8007086:	e012      	b.n	80070ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d206      	bcs.n	800709e <prvInsertTimerInActiveList+0x62>
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e007      	b.n	80070ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <prvInsertTimerInActiveList+0x80>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fd fe0e 	bl	8004cca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070ae:	697b      	ldr	r3, [r7, #20]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	2000118c 	.word	0x2000118c
 80070bc:	20001188 	.word	0x20001188

080070c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08e      	sub	sp, #56	; 0x38
 80070c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070c6:	e0ca      	b.n	800725e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da18      	bge.n	8007100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	3304      	adds	r3, #4
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61fb      	str	r3, [r7, #28]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f6:	6850      	ldr	r0, [r2, #4]
 80070f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070fa:	6892      	ldr	r2, [r2, #8]
 80070fc:	4611      	mov	r1, r2
 80070fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f2c0 80aa 	blt.w	800725c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	3304      	adds	r3, #4
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fe0f 	bl	8004d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711e:	463b      	mov	r3, r7
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff ff6b 	bl	8006ffc <prvSampleTimeNow>
 8007126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b09      	cmp	r3, #9
 800712c:	f200 8097 	bhi.w	800725e <prvProcessReceivedCommands+0x19e>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <prvProcessReceivedCommands+0x78>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007161 	.word	0x08007161
 800713c:	08007161 	.word	0x08007161
 8007140:	08007161 	.word	0x08007161
 8007144:	080071d5 	.word	0x080071d5
 8007148:	080071e9 	.word	0x080071e9
 800714c:	08007233 	.word	0x08007233
 8007150:	08007161 	.word	0x08007161
 8007154:	08007161 	.word	0x08007161
 8007158:	080071d5 	.word	0x080071d5
 800715c:	080071e9 	.word	0x080071e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007166:	f043 0301 	orr.w	r3, r3, #1
 800716a:	b2da      	uxtb	r2, r3
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	18d1      	adds	r1, r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007180:	f7ff ff5c 	bl	800703c <prvInsertTimerInActiveList>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d069      	beq.n	800725e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d05e      	beq.n	800725e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	441a      	add	r2, r3
 80071a8:	2300      	movs	r3, #0
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2300      	movs	r3, #0
 80071ae:	2100      	movs	r1, #0
 80071b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b2:	f7ff fe05 	bl	8006dc0 <xTimerGenericCommand>
 80071b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d14f      	bne.n	800725e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	61bb      	str	r3, [r7, #24]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071da:	f023 0301 	bic.w	r3, r3, #1
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071e6:	e03a      	b.n	800725e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	617b      	str	r3, [r7, #20]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	18d1      	adds	r1, r2, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722c:	f7ff ff06 	bl	800703c <prvInsertTimerInActiveList>
					break;
 8007230:	e015      	b.n	800725e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007242:	f000 fbfd 	bl	8007a40 <vPortFree>
 8007246:	e00a      	b.n	800725e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	b2da      	uxtb	r2, r3
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800725a:	e000      	b.n	800725e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800725c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <prvProcessReceivedCommands+0x1c0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	1d39      	adds	r1, r7, #4
 8007264:	2200      	movs	r2, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe f920 	bl	80054ac <xQueueReceive>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	f47f af2a 	bne.w	80070c8 <prvProcessReceivedCommands+0x8>
	}
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	3730      	adds	r7, #48	; 0x30
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20001190 	.word	0x20001190

08007284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800728a:	e048      	b.n	800731e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800728c:	4b2d      	ldr	r3, [pc, #180]	; (8007344 <prvSwitchTimerLists+0xc0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007296:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <prvSwitchTimerLists+0xc0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fd fd49 	bl	8004d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02e      	beq.n	800731e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d90e      	bls.n	80072f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072de:	4b19      	ldr	r3, [pc, #100]	; (8007344 <prvSwitchTimerLists+0xc0>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f7fd fcee 	bl	8004cca <vListInsert>
 80072ee:	e016      	b.n	800731e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072f0:	2300      	movs	r3, #0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	2100      	movs	r1, #0
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f7ff fd60 	bl	8006dc0 <xTimerGenericCommand>
 8007300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	603b      	str	r3, [r7, #0]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <prvSwitchTimerLists+0xc0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1b1      	bne.n	800728c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <prvSwitchTimerLists+0xc0>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <prvSwitchTimerLists+0xc4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a04      	ldr	r2, [pc, #16]	; (8007344 <prvSwitchTimerLists+0xc0>)
 8007334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007336:	4a04      	ldr	r2, [pc, #16]	; (8007348 <prvSwitchTimerLists+0xc4>)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	6013      	str	r3, [r2, #0]
}
 800733c:	bf00      	nop
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20001188 	.word	0x20001188
 8007348:	2000118c 	.word	0x2000118c

0800734c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007352:	f000 f987 	bl	8007664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007356:	4b15      	ldr	r3, [pc, #84]	; (80073ac <prvCheckForValidListAndQueue+0x60>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d120      	bne.n	80073a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800735e:	4814      	ldr	r0, [pc, #80]	; (80073b0 <prvCheckForValidListAndQueue+0x64>)
 8007360:	f7fd fc62 	bl	8004c28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007364:	4813      	ldr	r0, [pc, #76]	; (80073b4 <prvCheckForValidListAndQueue+0x68>)
 8007366:	f7fd fc5f 	bl	8004c28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800736a:	4b13      	ldr	r3, [pc, #76]	; (80073b8 <prvCheckForValidListAndQueue+0x6c>)
 800736c:	4a10      	ldr	r2, [pc, #64]	; (80073b0 <prvCheckForValidListAndQueue+0x64>)
 800736e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <prvCheckForValidListAndQueue+0x70>)
 8007372:	4a10      	ldr	r2, [pc, #64]	; (80073b4 <prvCheckForValidListAndQueue+0x68>)
 8007374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007376:	2300      	movs	r3, #0
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <prvCheckForValidListAndQueue+0x74>)
 800737c:	4a11      	ldr	r2, [pc, #68]	; (80073c4 <prvCheckForValidListAndQueue+0x78>)
 800737e:	2110      	movs	r1, #16
 8007380:	200a      	movs	r0, #10
 8007382:	f7fd fd6d 	bl	8004e60 <xQueueGenericCreateStatic>
 8007386:	4603      	mov	r3, r0
 8007388:	4a08      	ldr	r2, [pc, #32]	; (80073ac <prvCheckForValidListAndQueue+0x60>)
 800738a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <prvCheckForValidListAndQueue+0x60>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <prvCheckForValidListAndQueue+0x60>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	490b      	ldr	r1, [pc, #44]	; (80073c8 <prvCheckForValidListAndQueue+0x7c>)
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fb9a 	bl	8005ad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073a0:	f000 f990 	bl	80076c4 <vPortExitCritical>
}
 80073a4:	bf00      	nop
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20001190 	.word	0x20001190
 80073b0:	20001160 	.word	0x20001160
 80073b4:	20001174 	.word	0x20001174
 80073b8:	20001188 	.word	0x20001188
 80073bc:	2000118c 	.word	0x2000118c
 80073c0:	2000123c 	.word	0x2000123c
 80073c4:	2000119c 	.word	0x2000119c
 80073c8:	080088c4 	.word	0x080088c4

080073cc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80073f4:	f000 f936 	bl	8007664 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80073fe:	f000 f961 	bl	80076c4 <vPortExitCritical>

	return pvReturn;
 8007402:	693b      	ldr	r3, [r7, #16]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3b04      	subs	r3, #4
 800741c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b04      	subs	r3, #4
 800742a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b04      	subs	r3, #4
 800743a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800743c:	4a0c      	ldr	r2, [pc, #48]	; (8007470 <pxPortInitialiseStack+0x64>)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b14      	subs	r3, #20
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b04      	subs	r3, #4
 8007452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f06f 0202 	mvn.w	r2, #2
 800745a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3b20      	subs	r3, #32
 8007460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007462:	68fb      	ldr	r3, [r7, #12]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	08007475 	.word	0x08007475

08007474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <prvTaskExitError+0x54>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d00a      	beq.n	800749e <prvTaskExitError+0x2a>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60fb      	str	r3, [r7, #12]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <prvTaskExitError+0x28>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60bb      	str	r3, [r7, #8]
}
 80074b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074b2:	bf00      	nop
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0fc      	beq.n	80074b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000010 	.word	0x20000010
 80074cc:	00000000 	.word	0x00000000

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	20000c60 	.word	0x20000c60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074f8:	4808      	ldr	r0, [pc, #32]	; (800751c <prvPortStartFirstTask+0x24>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8814 	msr	CONTROL, r0
 800750a:	b662      	cpsie	i
 800750c:	b661      	cpsie	f
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	df00      	svc	0
 8007518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800751a:	bf00      	nop
 800751c:	e000ed08 	.word	0xe000ed08

08007520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007526:	4b46      	ldr	r3, [pc, #280]	; (8007640 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a46      	ldr	r2, [pc, #280]	; (8007644 <xPortStartScheduler+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x26>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007546:	4b3e      	ldr	r3, [pc, #248]	; (8007640 <xPortStartScheduler+0x120>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a3f      	ldr	r2, [pc, #252]	; (8007648 <xPortStartScheduler+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10a      	bne.n	8007566 <xPortStartScheduler+0x46>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007566:	4b39      	ldr	r3, [pc, #228]	; (800764c <xPortStartScheduler+0x12c>)
 8007568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	22ff      	movs	r2, #255	; 0xff
 8007576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007588:	b2da      	uxtb	r2, r3
 800758a:	4b31      	ldr	r3, [pc, #196]	; (8007650 <xPortStartScheduler+0x130>)
 800758c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800758e:	4b31      	ldr	r3, [pc, #196]	; (8007654 <xPortStartScheduler+0x134>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007594:	e009      	b.n	80075aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007596:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3b01      	subs	r3, #1
 800759c:	4a2d      	ldr	r2, [pc, #180]	; (8007654 <xPortStartScheduler+0x134>)
 800759e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d0ef      	beq.n	8007596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075b6:	4b27      	ldr	r3, [pc, #156]	; (8007654 <xPortStartScheduler+0x134>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1c3 0307 	rsb	r3, r3, #7
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d00a      	beq.n	80075d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60bb      	str	r3, [r7, #8]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075d8:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <xPortStartScheduler+0x134>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <xPortStartScheduler+0x134>)
 80075e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <xPortStartScheduler+0x134>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ea:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <xPortStartScheduler+0x134>)
 80075ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075f6:	4b18      	ldr	r3, [pc, #96]	; (8007658 <xPortStartScheduler+0x138>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a17      	ldr	r2, [pc, #92]	; (8007658 <xPortStartScheduler+0x138>)
 80075fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <xPortStartScheduler+0x138>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <xPortStartScheduler+0x138>)
 8007608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800760e:	f000 f8dd 	bl	80077cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <xPortStartScheduler+0x13c>)
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007618:	f000 f8fc 	bl	8007814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <xPortStartScheduler+0x140>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0f      	ldr	r2, [pc, #60]	; (8007660 <xPortStartScheduler+0x140>)
 8007622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007628:	f7ff ff66 	bl	80074f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800762c:	f7fe fe82 	bl	8006334 <vTaskSwitchContext>
	prvTaskExitError();
 8007630:	f7ff ff20 	bl	8007474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	e000ed00 	.word	0xe000ed00
 8007644:	410fc271 	.word	0x410fc271
 8007648:	410fc270 	.word	0x410fc270
 800764c:	e000e400 	.word	0xe000e400
 8007650:	2000128c 	.word	0x2000128c
 8007654:	20001290 	.word	0x20001290
 8007658:	e000ed20 	.word	0xe000ed20
 800765c:	20000010 	.word	0x20000010
 8007660:	e000ef34 	.word	0xe000ef34

08007664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	607b      	str	r3, [r7, #4]
}
 800767c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800767e:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <vPortEnterCritical+0x58>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <vPortEnterCritical+0x58>)
 8007686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <vPortEnterCritical+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10f      	bne.n	80076b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <vPortEnterCritical+0x5c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vPortEnterCritical+0x4a>
	}
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	20000010 	.word	0x20000010
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <vPortExitCritical+0x50>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <vPortExitCritical+0x24>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	607b      	str	r3, [r7, #4]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <vPortExitCritical+0x50>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	4a09      	ldr	r2, [pc, #36]	; (8007714 <vPortExitCritical+0x50>)
 80076f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <vPortExitCritical+0x50>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <vPortExitCritical+0x42>
 80076fa:	2300      	movs	r3, #0
 80076fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	f383 8811 	msr	BASEPRI, r3
}
 8007704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000010 	.word	0x20000010
	...

08007720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007720:	f3ef 8009 	mrs	r0, PSP
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4b15      	ldr	r3, [pc, #84]	; (8007780 <pxCurrentTCBConst>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	f01e 0f10 	tst.w	lr, #16
 8007730:	bf08      	it	eq
 8007732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	6010      	str	r0, [r2, #0]
 800773c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007744:	f380 8811 	msr	BASEPRI, r0
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f7fe fdf0 	bl	8006334 <vTaskSwitchContext>
 8007754:	f04f 0000 	mov.w	r0, #0
 8007758:	f380 8811 	msr	BASEPRI, r0
 800775c:	bc09      	pop	{r0, r3}
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	6808      	ldr	r0, [r1, #0]
 8007762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007766:	f01e 0f10 	tst.w	lr, #16
 800776a:	bf08      	it	eq
 800776c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007770:	f380 8809 	msr	PSP, r0
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst>:
 8007780:	20000c60 	.word	0x20000c60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077a2:	f7fe fd0d 	bl	80061c0 <xTaskIncrementTick>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <xPortSysTickHandler+0x40>)
 80077ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f383 8811 	msr	BASEPRI, r3
}
 80077be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <vPortSetupTimerInterrupt+0x38>)
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <vPortSetupTimerInterrupt+0x3c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <vPortSetupTimerInterrupt+0x40>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	4a09      	ldr	r2, [pc, #36]	; (8007810 <vPortSetupTimerInterrupt+0x44>)
 80077ea:	3b01      	subs	r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	e000e010 	.word	0xe000e010
 8007804:	e000e018 	.word	0xe000e018
 8007808:	20000004 	.word	0x20000004
 800780c:	10624dd3 	.word	0x10624dd3
 8007810:	e000e014 	.word	0xe000e014

08007814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007824 <vPortEnableVFP+0x10>
 8007818:	6801      	ldr	r1, [r0, #0]
 800781a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800781e:	6001      	str	r1, [r0, #0]
 8007820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007822:	bf00      	nop
 8007824:	e000ed88 	.word	0xe000ed88

08007828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800782e:	f3ef 8305 	mrs	r3, IPSR
 8007832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b0f      	cmp	r3, #15
 8007838:	d914      	bls.n	8007864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800783a:	4a17      	ldr	r2, [pc, #92]	; (8007898 <vPortValidateInterruptPriority+0x70>)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007844:	4b15      	ldr	r3, [pc, #84]	; (800789c <vPortValidateInterruptPriority+0x74>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	7afa      	ldrb	r2, [r7, #11]
 800784a:	429a      	cmp	r2, r3
 800784c:	d20a      	bcs.n	8007864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	607b      	str	r3, [r7, #4]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <vPortValidateInterruptPriority+0x78>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800786c:	4b0d      	ldr	r3, [pc, #52]	; (80078a4 <vPortValidateInterruptPriority+0x7c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d90a      	bls.n	800788a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	603b      	str	r3, [r7, #0]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <vPortValidateInterruptPriority+0x60>
	}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	e000e3f0 	.word	0xe000e3f0
 800789c:	2000128c 	.word	0x2000128c
 80078a0:	e000ed0c 	.word	0xe000ed0c
 80078a4:	20001290 	.word	0x20001290

080078a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078b4:	f7fe fbc8 	bl	8006048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078b8:	4b5b      	ldr	r3, [pc, #364]	; (8007a28 <pvPortMalloc+0x180>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078c0:	f000 f920 	bl	8007b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078c4:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <pvPortMalloc+0x184>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8093 	bne.w	80079f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01d      	beq.n	8007914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078d8:	2208      	movs	r2, #8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <pvPortMalloc+0x6c>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	617b      	str	r3, [r7, #20]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d06e      	beq.n	80079f8 <pvPortMalloc+0x150>
 800791a:	4b45      	ldr	r3, [pc, #276]	; (8007a30 <pvPortMalloc+0x188>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d869      	bhi.n	80079f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007924:	4b43      	ldr	r3, [pc, #268]	; (8007a34 <pvPortMalloc+0x18c>)
 8007926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <pvPortMalloc+0x18c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792e:	e004      	b.n	800793a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <pvPortMalloc+0xa4>
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f1      	bne.n	8007930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <pvPortMalloc+0x180>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007952:	429a      	cmp	r2, r3
 8007954:	d050      	beq.n	80079f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2208      	movs	r2, #8
 800795c:	4413      	add	r3, r2
 800795e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	2308      	movs	r3, #8
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	429a      	cmp	r2, r3
 8007976:	d91f      	bls.n	80079b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <pvPortMalloc+0xf8>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	613b      	str	r3, [r7, #16]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079b2:	69b8      	ldr	r0, [r7, #24]
 80079b4:	f000 f908 	bl	8007bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <pvPortMalloc+0x188>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1b      	ldr	r2, [pc, #108]	; (8007a30 <pvPortMalloc+0x188>)
 80079c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <pvPortMalloc+0x188>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <pvPortMalloc+0x190>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d203      	bcs.n	80079da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079d2:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <pvPortMalloc+0x188>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <pvPortMalloc+0x190>)
 80079d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <pvPortMalloc+0x184>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <pvPortMalloc+0x194>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a11      	ldr	r2, [pc, #68]	; (8007a3c <pvPortMalloc+0x194>)
 80079f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079f8:	f7fe fb34 	bl	8006064 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <pvPortMalloc+0x174>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	60fb      	str	r3, [r7, #12]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <pvPortMalloc+0x172>
	return pvReturn;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20001e9c 	.word	0x20001e9c
 8007a2c:	20001eb0 	.word	0x20001eb0
 8007a30:	20001ea0 	.word	0x20001ea0
 8007a34:	20001e94 	.word	0x20001e94
 8007a38:	20001ea4 	.word	0x20001ea4
 8007a3c:	20001ea8 	.word	0x20001ea8

08007a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04d      	beq.n	8007aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a52:	2308      	movs	r3, #8
 8007a54:	425b      	negs	r3, r3
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4413      	add	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <vPortFree+0xb8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <vPortFree+0x44>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60fb      	str	r3, [r7, #12]
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <vPortFree+0x62>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60bb      	str	r3, [r7, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <vPortFree+0xb8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01e      	beq.n	8007aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11a      	bne.n	8007aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0e      	ldr	r3, [pc, #56]	; (8007af8 <vPortFree+0xb8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac8:	f7fe fabe 	bl	8006048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <vPortFree+0xbc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4a09      	ldr	r2, [pc, #36]	; (8007afc <vPortFree+0xbc>)
 8007ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f000 f874 	bl	8007bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <vPortFree+0xc0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	4a06      	ldr	r2, [pc, #24]	; (8007b00 <vPortFree+0xc0>)
 8007ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aea:	f7fe fabb 	bl	8006064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aee:	bf00      	nop
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20001eb0 	.word	0x20001eb0
 8007afc:	20001ea0 	.word	0x20001ea0
 8007b00:	20001eac 	.word	0x20001eac

08007b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b10:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <prvHeapInit+0xac>)
 8007b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3307      	adds	r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <prvHeapInit+0xac>)
 8007b34:	4413      	add	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <prvHeapInit+0xb0>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b42:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <prvHeapInit+0xb0>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b50:	2208      	movs	r2, #8
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b66:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b84:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <prvHeapInit+0xb8>)
 8007b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <prvHeapInit+0xbc>)
 8007b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <prvHeapInit+0xc0>)
 8007b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20001294 	.word	0x20001294
 8007bb4:	20001e94 	.word	0x20001e94
 8007bb8:	20001e9c 	.word	0x20001e9c
 8007bbc:	20001ea4 	.word	0x20001ea4
 8007bc0:	20001ea0 	.word	0x20001ea0
 8007bc4:	20001eb0 	.word	0x20001eb0

08007bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bd0:	4b28      	ldr	r3, [pc, #160]	; (8007c74 <prvInsertBlockIntoFreeList+0xac>)
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e002      	b.n	8007bdc <prvInsertBlockIntoFreeList+0x14>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d8f7      	bhi.n	8007bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d108      	bne.n	8007c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d118      	bne.n	8007c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d00d      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e008      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c46:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e003      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d002      	beq.n	8007c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20001e94 	.word	0x20001e94
 8007c78:	20001e9c 	.word	0x20001e9c

08007c7c <__errno>:
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <__errno+0x8>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20000014 	.word	0x20000014

08007c88 <std>:
 8007c88:	2300      	movs	r3, #0
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c96:	6083      	str	r3, [r0, #8]
 8007c98:	8181      	strh	r1, [r0, #12]
 8007c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c9c:	81c2      	strh	r2, [r0, #14]
 8007c9e:	6183      	str	r3, [r0, #24]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	2208      	movs	r2, #8
 8007ca4:	305c      	adds	r0, #92	; 0x5c
 8007ca6:	f000 f91a 	bl	8007ede <memset>
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <std+0x38>)
 8007cac:	6263      	str	r3, [r4, #36]	; 0x24
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <std+0x3c>)
 8007cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <std+0x40>)
 8007cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <std+0x44>)
 8007cb8:	6224      	str	r4, [r4, #32]
 8007cba:	6323      	str	r3, [r4, #48]	; 0x30
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop
 8007cc0:	080081f9 	.word	0x080081f9
 8007cc4:	0800821b 	.word	0x0800821b
 8007cc8:	08008253 	.word	0x08008253
 8007ccc:	08008277 	.word	0x08008277

08007cd0 <_cleanup_r>:
 8007cd0:	4901      	ldr	r1, [pc, #4]	; (8007cd8 <_cleanup_r+0x8>)
 8007cd2:	f000 b8af 	b.w	8007e34 <_fwalk_reent>
 8007cd6:	bf00      	nop
 8007cd8:	08008551 	.word	0x08008551

08007cdc <__sfmoreglue>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	2268      	movs	r2, #104	; 0x68
 8007ce0:	1e4d      	subs	r5, r1, #1
 8007ce2:	4355      	muls	r5, r2
 8007ce4:	460e      	mov	r6, r1
 8007ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cea:	f000 f921 	bl	8007f30 <_malloc_r>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	b140      	cbz	r0, 8007d04 <__sfmoreglue+0x28>
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8007cf8:	300c      	adds	r0, #12
 8007cfa:	60a0      	str	r0, [r4, #8]
 8007cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d00:	f000 f8ed 	bl	8007ede <memset>
 8007d04:	4620      	mov	r0, r4
 8007d06:	bd70      	pop	{r4, r5, r6, pc}

08007d08 <__sfp_lock_acquire>:
 8007d08:	4801      	ldr	r0, [pc, #4]	; (8007d10 <__sfp_lock_acquire+0x8>)
 8007d0a:	f000 b8d8 	b.w	8007ebe <__retarget_lock_acquire_recursive>
 8007d0e:	bf00      	nop
 8007d10:	20001eb5 	.word	0x20001eb5

08007d14 <__sfp_lock_release>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__sfp_lock_release+0x8>)
 8007d16:	f000 b8d3 	b.w	8007ec0 <__retarget_lock_release_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	20001eb5 	.word	0x20001eb5

08007d20 <__sinit_lock_acquire>:
 8007d20:	4801      	ldr	r0, [pc, #4]	; (8007d28 <__sinit_lock_acquire+0x8>)
 8007d22:	f000 b8cc 	b.w	8007ebe <__retarget_lock_acquire_recursive>
 8007d26:	bf00      	nop
 8007d28:	20001eb6 	.word	0x20001eb6

08007d2c <__sinit_lock_release>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	; (8007d34 <__sinit_lock_release+0x8>)
 8007d2e:	f000 b8c7 	b.w	8007ec0 <__retarget_lock_release_recursive>
 8007d32:	bf00      	nop
 8007d34:	20001eb6 	.word	0x20001eb6

08007d38 <__sinit>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	f7ff fff0 	bl	8007d20 <__sinit_lock_acquire>
 8007d40:	69a3      	ldr	r3, [r4, #24]
 8007d42:	b11b      	cbz	r3, 8007d4c <__sinit+0x14>
 8007d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d48:	f7ff bff0 	b.w	8007d2c <__sinit_lock_release>
 8007d4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d50:	6523      	str	r3, [r4, #80]	; 0x50
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <__sinit+0x68>)
 8007d54:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <__sinit+0x6c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	bf04      	itt	eq
 8007d5e:	2301      	moveq	r3, #1
 8007d60:	61a3      	streq	r3, [r4, #24]
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 f820 	bl	8007da8 <__sfp>
 8007d68:	6060      	str	r0, [r4, #4]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 f81c 	bl	8007da8 <__sfp>
 8007d70:	60a0      	str	r0, [r4, #8]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 f818 	bl	8007da8 <__sfp>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	60e0      	str	r0, [r4, #12]
 8007d7c:	2104      	movs	r1, #4
 8007d7e:	6860      	ldr	r0, [r4, #4]
 8007d80:	f7ff ff82 	bl	8007c88 <std>
 8007d84:	68a0      	ldr	r0, [r4, #8]
 8007d86:	2201      	movs	r2, #1
 8007d88:	2109      	movs	r1, #9
 8007d8a:	f7ff ff7d 	bl	8007c88 <std>
 8007d8e:	68e0      	ldr	r0, [r4, #12]
 8007d90:	2202      	movs	r2, #2
 8007d92:	2112      	movs	r1, #18
 8007d94:	f7ff ff78 	bl	8007c88 <std>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	61a3      	str	r3, [r4, #24]
 8007d9c:	e7d2      	b.n	8007d44 <__sinit+0xc>
 8007d9e:	bf00      	nop
 8007da0:	08008a04 	.word	0x08008a04
 8007da4:	08007cd1 	.word	0x08007cd1

08007da8 <__sfp>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	4607      	mov	r7, r0
 8007dac:	f7ff ffac 	bl	8007d08 <__sfp_lock_acquire>
 8007db0:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <__sfp+0x84>)
 8007db2:	681e      	ldr	r6, [r3, #0]
 8007db4:	69b3      	ldr	r3, [r6, #24]
 8007db6:	b913      	cbnz	r3, 8007dbe <__sfp+0x16>
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff ffbd 	bl	8007d38 <__sinit>
 8007dbe:	3648      	adds	r6, #72	; 0x48
 8007dc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	d503      	bpl.n	8007dd0 <__sfp+0x28>
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	b30b      	cbz	r3, 8007e10 <__sfp+0x68>
 8007dcc:	6836      	ldr	r6, [r6, #0]
 8007dce:	e7f7      	b.n	8007dc0 <__sfp+0x18>
 8007dd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dd4:	b9d5      	cbnz	r5, 8007e0c <__sfp+0x64>
 8007dd6:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <__sfp+0x88>)
 8007dd8:	60e3      	str	r3, [r4, #12]
 8007dda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dde:	6665      	str	r5, [r4, #100]	; 0x64
 8007de0:	f000 f86c 	bl	8007ebc <__retarget_lock_init_recursive>
 8007de4:	f7ff ff96 	bl	8007d14 <__sfp_lock_release>
 8007de8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007df0:	6025      	str	r5, [r4, #0]
 8007df2:	61a5      	str	r5, [r4, #24]
 8007df4:	2208      	movs	r2, #8
 8007df6:	4629      	mov	r1, r5
 8007df8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dfc:	f000 f86f 	bl	8007ede <memset>
 8007e00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e08:	4620      	mov	r0, r4
 8007e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e0c:	3468      	adds	r4, #104	; 0x68
 8007e0e:	e7d9      	b.n	8007dc4 <__sfp+0x1c>
 8007e10:	2104      	movs	r1, #4
 8007e12:	4638      	mov	r0, r7
 8007e14:	f7ff ff62 	bl	8007cdc <__sfmoreglue>
 8007e18:	4604      	mov	r4, r0
 8007e1a:	6030      	str	r0, [r6, #0]
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1d5      	bne.n	8007dcc <__sfp+0x24>
 8007e20:	f7ff ff78 	bl	8007d14 <__sfp_lock_release>
 8007e24:	230c      	movs	r3, #12
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	e7ee      	b.n	8007e08 <__sfp+0x60>
 8007e2a:	bf00      	nop
 8007e2c:	08008a04 	.word	0x08008a04
 8007e30:	ffff0001 	.word	0xffff0001

08007e34 <_fwalk_reent>:
 8007e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	4606      	mov	r6, r0
 8007e3a:	4688      	mov	r8, r1
 8007e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e40:	2700      	movs	r7, #0
 8007e42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e46:	f1b9 0901 	subs.w	r9, r9, #1
 8007e4a:	d505      	bpl.n	8007e58 <_fwalk_reent+0x24>
 8007e4c:	6824      	ldr	r4, [r4, #0]
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	d1f7      	bne.n	8007e42 <_fwalk_reent+0xe>
 8007e52:	4638      	mov	r0, r7
 8007e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e58:	89ab      	ldrh	r3, [r5, #12]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d907      	bls.n	8007e6e <_fwalk_reent+0x3a>
 8007e5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e62:	3301      	adds	r3, #1
 8007e64:	d003      	beq.n	8007e6e <_fwalk_reent+0x3a>
 8007e66:	4629      	mov	r1, r5
 8007e68:	4630      	mov	r0, r6
 8007e6a:	47c0      	blx	r8
 8007e6c:	4307      	orrs	r7, r0
 8007e6e:	3568      	adds	r5, #104	; 0x68
 8007e70:	e7e9      	b.n	8007e46 <_fwalk_reent+0x12>
	...

08007e74 <__libc_init_array>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4d0d      	ldr	r5, [pc, #52]	; (8007eac <__libc_init_array+0x38>)
 8007e78:	4c0d      	ldr	r4, [pc, #52]	; (8007eb0 <__libc_init_array+0x3c>)
 8007e7a:	1b64      	subs	r4, r4, r5
 8007e7c:	10a4      	asrs	r4, r4, #2
 8007e7e:	2600      	movs	r6, #0
 8007e80:	42a6      	cmp	r6, r4
 8007e82:	d109      	bne.n	8007e98 <__libc_init_array+0x24>
 8007e84:	4d0b      	ldr	r5, [pc, #44]	; (8007eb4 <__libc_init_array+0x40>)
 8007e86:	4c0c      	ldr	r4, [pc, #48]	; (8007eb8 <__libc_init_array+0x44>)
 8007e88:	f000 fca2 	bl	80087d0 <_init>
 8007e8c:	1b64      	subs	r4, r4, r5
 8007e8e:	10a4      	asrs	r4, r4, #2
 8007e90:	2600      	movs	r6, #0
 8007e92:	42a6      	cmp	r6, r4
 8007e94:	d105      	bne.n	8007ea2 <__libc_init_array+0x2e>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9c:	4798      	blx	r3
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7ee      	b.n	8007e80 <__libc_init_array+0xc>
 8007ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea6:	4798      	blx	r3
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	e7f2      	b.n	8007e92 <__libc_init_array+0x1e>
 8007eac:	08008a10 	.word	0x08008a10
 8007eb0:	08008a10 	.word	0x08008a10
 8007eb4:	08008a10 	.word	0x08008a10
 8007eb8:	08008a14 	.word	0x08008a14

08007ebc <__retarget_lock_init_recursive>:
 8007ebc:	4770      	bx	lr

08007ebe <__retarget_lock_acquire_recursive>:
 8007ebe:	4770      	bx	lr

08007ec0 <__retarget_lock_release_recursive>:
 8007ec0:	4770      	bx	lr

08007ec2 <memcpy>:
 8007ec2:	440a      	add	r2, r1
 8007ec4:	4291      	cmp	r1, r2
 8007ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eca:	d100      	bne.n	8007ece <memcpy+0xc>
 8007ecc:	4770      	bx	lr
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed8:	4291      	cmp	r1, r2
 8007eda:	d1f9      	bne.n	8007ed0 <memcpy+0xe>
 8007edc:	bd10      	pop	{r4, pc}

08007ede <memset>:
 8007ede:	4402      	add	r2, r0
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d100      	bne.n	8007ee8 <memset+0xa>
 8007ee6:	4770      	bx	lr
 8007ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8007eec:	e7f9      	b.n	8007ee2 <memset+0x4>
	...

08007ef0 <sbrk_aligned>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4e0e      	ldr	r6, [pc, #56]	; (8007f2c <sbrk_aligned+0x3c>)
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	6831      	ldr	r1, [r6, #0]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	b911      	cbnz	r1, 8007f02 <sbrk_aligned+0x12>
 8007efc:	f000 f96c 	bl	80081d8 <_sbrk_r>
 8007f00:	6030      	str	r0, [r6, #0]
 8007f02:	4621      	mov	r1, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	f000 f967 	bl	80081d8 <_sbrk_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d00a      	beq.n	8007f24 <sbrk_aligned+0x34>
 8007f0e:	1cc4      	adds	r4, r0, #3
 8007f10:	f024 0403 	bic.w	r4, r4, #3
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d007      	beq.n	8007f28 <sbrk_aligned+0x38>
 8007f18:	1a21      	subs	r1, r4, r0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 f95c 	bl	80081d8 <_sbrk_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d101      	bne.n	8007f28 <sbrk_aligned+0x38>
 8007f24:	f04f 34ff 	mov.w	r4, #4294967295
 8007f28:	4620      	mov	r0, r4
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	20001ebc 	.word	0x20001ebc

08007f30 <_malloc_r>:
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	1ccd      	adds	r5, r1, #3
 8007f36:	f025 0503 	bic.w	r5, r5, #3
 8007f3a:	3508      	adds	r5, #8
 8007f3c:	2d0c      	cmp	r5, #12
 8007f3e:	bf38      	it	cc
 8007f40:	250c      	movcc	r5, #12
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	4607      	mov	r7, r0
 8007f46:	db01      	blt.n	8007f4c <_malloc_r+0x1c>
 8007f48:	42a9      	cmp	r1, r5
 8007f4a:	d905      	bls.n	8007f58 <_malloc_r+0x28>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	2600      	movs	r6, #0
 8007f52:	4630      	mov	r0, r6
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	4e2e      	ldr	r6, [pc, #184]	; (8008014 <_malloc_r+0xe4>)
 8007f5a:	f000 fbad 	bl	80086b8 <__malloc_lock>
 8007f5e:	6833      	ldr	r3, [r6, #0]
 8007f60:	461c      	mov	r4, r3
 8007f62:	bb34      	cbnz	r4, 8007fb2 <_malloc_r+0x82>
 8007f64:	4629      	mov	r1, r5
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7ff ffc2 	bl	8007ef0 <sbrk_aligned>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	4604      	mov	r4, r0
 8007f70:	d14d      	bne.n	800800e <_malloc_r+0xde>
 8007f72:	6834      	ldr	r4, [r6, #0]
 8007f74:	4626      	mov	r6, r4
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	d140      	bne.n	8007ffc <_malloc_r+0xcc>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4638      	mov	r0, r7
 8007f80:	eb04 0803 	add.w	r8, r4, r3
 8007f84:	f000 f928 	bl	80081d8 <_sbrk_r>
 8007f88:	4580      	cmp	r8, r0
 8007f8a:	d13a      	bne.n	8008002 <_malloc_r+0xd2>
 8007f8c:	6821      	ldr	r1, [r4, #0]
 8007f8e:	3503      	adds	r5, #3
 8007f90:	1a6d      	subs	r5, r5, r1
 8007f92:	f025 0503 	bic.w	r5, r5, #3
 8007f96:	3508      	adds	r5, #8
 8007f98:	2d0c      	cmp	r5, #12
 8007f9a:	bf38      	it	cc
 8007f9c:	250c      	movcc	r5, #12
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff ffa5 	bl	8007ef0 <sbrk_aligned>
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d02b      	beq.n	8008002 <_malloc_r+0xd2>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	442b      	add	r3, r5
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	e00e      	b.n	8007fd0 <_malloc_r+0xa0>
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	1b52      	subs	r2, r2, r5
 8007fb6:	d41e      	bmi.n	8007ff6 <_malloc_r+0xc6>
 8007fb8:	2a0b      	cmp	r2, #11
 8007fba:	d916      	bls.n	8007fea <_malloc_r+0xba>
 8007fbc:	1961      	adds	r1, r4, r5
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	6025      	str	r5, [r4, #0]
 8007fc2:	bf18      	it	ne
 8007fc4:	6059      	strne	r1, [r3, #4]
 8007fc6:	6863      	ldr	r3, [r4, #4]
 8007fc8:	bf08      	it	eq
 8007fca:	6031      	streq	r1, [r6, #0]
 8007fcc:	5162      	str	r2, [r4, r5]
 8007fce:	604b      	str	r3, [r1, #4]
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f104 060b 	add.w	r6, r4, #11
 8007fd6:	f000 fb75 	bl	80086c4 <__malloc_unlock>
 8007fda:	f026 0607 	bic.w	r6, r6, #7
 8007fde:	1d23      	adds	r3, r4, #4
 8007fe0:	1af2      	subs	r2, r6, r3
 8007fe2:	d0b6      	beq.n	8007f52 <_malloc_r+0x22>
 8007fe4:	1b9b      	subs	r3, r3, r6
 8007fe6:	50a3      	str	r3, [r4, r2]
 8007fe8:	e7b3      	b.n	8007f52 <_malloc_r+0x22>
 8007fea:	6862      	ldr	r2, [r4, #4]
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	bf0c      	ite	eq
 8007ff0:	6032      	streq	r2, [r6, #0]
 8007ff2:	605a      	strne	r2, [r3, #4]
 8007ff4:	e7ec      	b.n	8007fd0 <_malloc_r+0xa0>
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	6864      	ldr	r4, [r4, #4]
 8007ffa:	e7b2      	b.n	8007f62 <_malloc_r+0x32>
 8007ffc:	4634      	mov	r4, r6
 8007ffe:	6876      	ldr	r6, [r6, #4]
 8008000:	e7b9      	b.n	8007f76 <_malloc_r+0x46>
 8008002:	230c      	movs	r3, #12
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	4638      	mov	r0, r7
 8008008:	f000 fb5c 	bl	80086c4 <__malloc_unlock>
 800800c:	e7a1      	b.n	8007f52 <_malloc_r+0x22>
 800800e:	6025      	str	r5, [r4, #0]
 8008010:	e7de      	b.n	8007fd0 <_malloc_r+0xa0>
 8008012:	bf00      	nop
 8008014:	20001eb8 	.word	0x20001eb8

08008018 <_puts_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460e      	mov	r6, r1
 800801c:	4605      	mov	r5, r0
 800801e:	b118      	cbz	r0, 8008028 <_puts_r+0x10>
 8008020:	6983      	ldr	r3, [r0, #24]
 8008022:	b90b      	cbnz	r3, 8008028 <_puts_r+0x10>
 8008024:	f7ff fe88 	bl	8007d38 <__sinit>
 8008028:	69ab      	ldr	r3, [r5, #24]
 800802a:	68ac      	ldr	r4, [r5, #8]
 800802c:	b913      	cbnz	r3, 8008034 <_puts_r+0x1c>
 800802e:	4628      	mov	r0, r5
 8008030:	f7ff fe82 	bl	8007d38 <__sinit>
 8008034:	4b2c      	ldr	r3, [pc, #176]	; (80080e8 <_puts_r+0xd0>)
 8008036:	429c      	cmp	r4, r3
 8008038:	d120      	bne.n	800807c <_puts_r+0x64>
 800803a:	686c      	ldr	r4, [r5, #4]
 800803c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800803e:	07db      	lsls	r3, r3, #31
 8008040:	d405      	bmi.n	800804e <_puts_r+0x36>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	0598      	lsls	r0, r3, #22
 8008046:	d402      	bmi.n	800804e <_puts_r+0x36>
 8008048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800804a:	f7ff ff38 	bl	8007ebe <__retarget_lock_acquire_recursive>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	0719      	lsls	r1, r3, #28
 8008052:	d51d      	bpl.n	8008090 <_puts_r+0x78>
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	b1db      	cbz	r3, 8008090 <_puts_r+0x78>
 8008058:	3e01      	subs	r6, #1
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008060:	3b01      	subs	r3, #1
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	bb39      	cbnz	r1, 80080b6 <_puts_r+0x9e>
 8008066:	2b00      	cmp	r3, #0
 8008068:	da38      	bge.n	80080dc <_puts_r+0xc4>
 800806a:	4622      	mov	r2, r4
 800806c:	210a      	movs	r1, #10
 800806e:	4628      	mov	r0, r5
 8008070:	f000 f906 	bl	8008280 <__swbuf_r>
 8008074:	3001      	adds	r0, #1
 8008076:	d011      	beq.n	800809c <_puts_r+0x84>
 8008078:	250a      	movs	r5, #10
 800807a:	e011      	b.n	80080a0 <_puts_r+0x88>
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <_puts_r+0xd4>)
 800807e:	429c      	cmp	r4, r3
 8008080:	d101      	bne.n	8008086 <_puts_r+0x6e>
 8008082:	68ac      	ldr	r4, [r5, #8]
 8008084:	e7da      	b.n	800803c <_puts_r+0x24>
 8008086:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <_puts_r+0xd8>)
 8008088:	429c      	cmp	r4, r3
 800808a:	bf08      	it	eq
 800808c:	68ec      	ldreq	r4, [r5, #12]
 800808e:	e7d5      	b.n	800803c <_puts_r+0x24>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 f958 	bl	8008348 <__swsetup_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	d0dd      	beq.n	8008058 <_puts_r+0x40>
 800809c:	f04f 35ff 	mov.w	r5, #4294967295
 80080a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080a2:	07da      	lsls	r2, r3, #31
 80080a4:	d405      	bmi.n	80080b2 <_puts_r+0x9a>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	059b      	lsls	r3, r3, #22
 80080aa:	d402      	bmi.n	80080b2 <_puts_r+0x9a>
 80080ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ae:	f7ff ff07 	bl	8007ec0 <__retarget_lock_release_recursive>
 80080b2:	4628      	mov	r0, r5
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da04      	bge.n	80080c4 <_puts_r+0xac>
 80080ba:	69a2      	ldr	r2, [r4, #24]
 80080bc:	429a      	cmp	r2, r3
 80080be:	dc06      	bgt.n	80080ce <_puts_r+0xb6>
 80080c0:	290a      	cmp	r1, #10
 80080c2:	d004      	beq.n	80080ce <_puts_r+0xb6>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	7019      	strb	r1, [r3, #0]
 80080cc:	e7c5      	b.n	800805a <_puts_r+0x42>
 80080ce:	4622      	mov	r2, r4
 80080d0:	4628      	mov	r0, r5
 80080d2:	f000 f8d5 	bl	8008280 <__swbuf_r>
 80080d6:	3001      	adds	r0, #1
 80080d8:	d1bf      	bne.n	800805a <_puts_r+0x42>
 80080da:	e7df      	b.n	800809c <_puts_r+0x84>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	250a      	movs	r5, #10
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	6022      	str	r2, [r4, #0]
 80080e4:	701d      	strb	r5, [r3, #0]
 80080e6:	e7db      	b.n	80080a0 <_puts_r+0x88>
 80080e8:	080089c4 	.word	0x080089c4
 80080ec:	080089e4 	.word	0x080089e4
 80080f0:	080089a4 	.word	0x080089a4

080080f4 <puts>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <puts+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f7ff bf8d 	b.w	8008018 <_puts_r>
 80080fe:	bf00      	nop
 8008100:	20000014 	.word	0x20000014

08008104 <cleanup_glue>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	460c      	mov	r4, r1
 8008108:	6809      	ldr	r1, [r1, #0]
 800810a:	4605      	mov	r5, r0
 800810c:	b109      	cbz	r1, 8008112 <cleanup_glue+0xe>
 800810e:	f7ff fff9 	bl	8008104 <cleanup_glue>
 8008112:	4621      	mov	r1, r4
 8008114:	4628      	mov	r0, r5
 8008116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800811a:	f000 bad9 	b.w	80086d0 <_free_r>
	...

08008120 <_reclaim_reent>:
 8008120:	4b2c      	ldr	r3, [pc, #176]	; (80081d4 <_reclaim_reent+0xb4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4283      	cmp	r3, r0
 8008126:	b570      	push	{r4, r5, r6, lr}
 8008128:	4604      	mov	r4, r0
 800812a:	d051      	beq.n	80081d0 <_reclaim_reent+0xb0>
 800812c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800812e:	b143      	cbz	r3, 8008142 <_reclaim_reent+0x22>
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d14a      	bne.n	80081cc <_reclaim_reent+0xac>
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	6819      	ldr	r1, [r3, #0]
 800813a:	b111      	cbz	r1, 8008142 <_reclaim_reent+0x22>
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fac7 	bl	80086d0 <_free_r>
 8008142:	6961      	ldr	r1, [r4, #20]
 8008144:	b111      	cbz	r1, 800814c <_reclaim_reent+0x2c>
 8008146:	4620      	mov	r0, r4
 8008148:	f000 fac2 	bl	80086d0 <_free_r>
 800814c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800814e:	b111      	cbz	r1, 8008156 <_reclaim_reent+0x36>
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fabd 	bl	80086d0 <_free_r>
 8008156:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008158:	b111      	cbz	r1, 8008160 <_reclaim_reent+0x40>
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fab8 	bl	80086d0 <_free_r>
 8008160:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008162:	b111      	cbz	r1, 800816a <_reclaim_reent+0x4a>
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fab3 	bl	80086d0 <_free_r>
 800816a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800816c:	b111      	cbz	r1, 8008174 <_reclaim_reent+0x54>
 800816e:	4620      	mov	r0, r4
 8008170:	f000 faae 	bl	80086d0 <_free_r>
 8008174:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008176:	b111      	cbz	r1, 800817e <_reclaim_reent+0x5e>
 8008178:	4620      	mov	r0, r4
 800817a:	f000 faa9 	bl	80086d0 <_free_r>
 800817e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008180:	b111      	cbz	r1, 8008188 <_reclaim_reent+0x68>
 8008182:	4620      	mov	r0, r4
 8008184:	f000 faa4 	bl	80086d0 <_free_r>
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	b111      	cbz	r1, 8008192 <_reclaim_reent+0x72>
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fa9f 	bl	80086d0 <_free_r>
 8008192:	69a3      	ldr	r3, [r4, #24]
 8008194:	b1e3      	cbz	r3, 80081d0 <_reclaim_reent+0xb0>
 8008196:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008198:	4620      	mov	r0, r4
 800819a:	4798      	blx	r3
 800819c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800819e:	b1b9      	cbz	r1, 80081d0 <_reclaim_reent+0xb0>
 80081a0:	4620      	mov	r0, r4
 80081a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081a6:	f7ff bfad 	b.w	8008104 <cleanup_glue>
 80081aa:	5949      	ldr	r1, [r1, r5]
 80081ac:	b941      	cbnz	r1, 80081c0 <_reclaim_reent+0xa0>
 80081ae:	3504      	adds	r5, #4
 80081b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b2:	2d80      	cmp	r5, #128	; 0x80
 80081b4:	68d9      	ldr	r1, [r3, #12]
 80081b6:	d1f8      	bne.n	80081aa <_reclaim_reent+0x8a>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fa89 	bl	80086d0 <_free_r>
 80081be:	e7ba      	b.n	8008136 <_reclaim_reent+0x16>
 80081c0:	680e      	ldr	r6, [r1, #0]
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fa84 	bl	80086d0 <_free_r>
 80081c8:	4631      	mov	r1, r6
 80081ca:	e7ef      	b.n	80081ac <_reclaim_reent+0x8c>
 80081cc:	2500      	movs	r5, #0
 80081ce:	e7ef      	b.n	80081b0 <_reclaim_reent+0x90>
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	bf00      	nop
 80081d4:	20000014 	.word	0x20000014

080081d8 <_sbrk_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_sbrk_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f8 fe5a 	bl	8000e9c <_sbrk>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_sbrk_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_sbrk_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20001ec0 	.word	0x20001ec0

080081f8 <__sread>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008200:	f000 fab2 	bl	8008768 <_read_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	bfab      	itete	ge
 8008208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800820a:	89a3      	ldrhlt	r3, [r4, #12]
 800820c:	181b      	addge	r3, r3, r0
 800820e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008212:	bfac      	ite	ge
 8008214:	6563      	strge	r3, [r4, #84]	; 0x54
 8008216:	81a3      	strhlt	r3, [r4, #12]
 8008218:	bd10      	pop	{r4, pc}

0800821a <__swrite>:
 800821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821e:	461f      	mov	r7, r3
 8008220:	898b      	ldrh	r3, [r1, #12]
 8008222:	05db      	lsls	r3, r3, #23
 8008224:	4605      	mov	r5, r0
 8008226:	460c      	mov	r4, r1
 8008228:	4616      	mov	r6, r2
 800822a:	d505      	bpl.n	8008238 <__swrite+0x1e>
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	2302      	movs	r3, #2
 8008232:	2200      	movs	r2, #0
 8008234:	f000 f9c8 	bl	80085c8 <_lseek_r>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	4628      	mov	r0, r5
 800824a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	f000 b869 	b.w	8008324 <_write_r>

08008252 <__sseek>:
 8008252:	b510      	push	{r4, lr}
 8008254:	460c      	mov	r4, r1
 8008256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825a:	f000 f9b5 	bl	80085c8 <_lseek_r>
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	bf15      	itete	ne
 8008264:	6560      	strne	r0, [r4, #84]	; 0x54
 8008266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800826a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800826e:	81a3      	strheq	r3, [r4, #12]
 8008270:	bf18      	it	ne
 8008272:	81a3      	strhne	r3, [r4, #12]
 8008274:	bd10      	pop	{r4, pc}

08008276 <__sclose>:
 8008276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827a:	f000 b8d3 	b.w	8008424 <_close_r>
	...

08008280 <__swbuf_r>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	460e      	mov	r6, r1
 8008284:	4614      	mov	r4, r2
 8008286:	4605      	mov	r5, r0
 8008288:	b118      	cbz	r0, 8008292 <__swbuf_r+0x12>
 800828a:	6983      	ldr	r3, [r0, #24]
 800828c:	b90b      	cbnz	r3, 8008292 <__swbuf_r+0x12>
 800828e:	f7ff fd53 	bl	8007d38 <__sinit>
 8008292:	4b21      	ldr	r3, [pc, #132]	; (8008318 <__swbuf_r+0x98>)
 8008294:	429c      	cmp	r4, r3
 8008296:	d12b      	bne.n	80082f0 <__swbuf_r+0x70>
 8008298:	686c      	ldr	r4, [r5, #4]
 800829a:	69a3      	ldr	r3, [r4, #24]
 800829c:	60a3      	str	r3, [r4, #8]
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	071a      	lsls	r2, r3, #28
 80082a2:	d52f      	bpl.n	8008304 <__swbuf_r+0x84>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	b36b      	cbz	r3, 8008304 <__swbuf_r+0x84>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6820      	ldr	r0, [r4, #0]
 80082ac:	1ac0      	subs	r0, r0, r3
 80082ae:	6963      	ldr	r3, [r4, #20]
 80082b0:	b2f6      	uxtb	r6, r6
 80082b2:	4283      	cmp	r3, r0
 80082b4:	4637      	mov	r7, r6
 80082b6:	dc04      	bgt.n	80082c2 <__swbuf_r+0x42>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 f948 	bl	8008550 <_fflush_r>
 80082c0:	bb30      	cbnz	r0, 8008310 <__swbuf_r+0x90>
 80082c2:	68a3      	ldr	r3, [r4, #8]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	60a3      	str	r3, [r4, #8]
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	701e      	strb	r6, [r3, #0]
 80082d0:	6963      	ldr	r3, [r4, #20]
 80082d2:	3001      	adds	r0, #1
 80082d4:	4283      	cmp	r3, r0
 80082d6:	d004      	beq.n	80082e2 <__swbuf_r+0x62>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	07db      	lsls	r3, r3, #31
 80082dc:	d506      	bpl.n	80082ec <__swbuf_r+0x6c>
 80082de:	2e0a      	cmp	r6, #10
 80082e0:	d104      	bne.n	80082ec <__swbuf_r+0x6c>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f933 	bl	8008550 <_fflush_r>
 80082ea:	b988      	cbnz	r0, 8008310 <__swbuf_r+0x90>
 80082ec:	4638      	mov	r0, r7
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <__swbuf_r+0x9c>)
 80082f2:	429c      	cmp	r4, r3
 80082f4:	d101      	bne.n	80082fa <__swbuf_r+0x7a>
 80082f6:	68ac      	ldr	r4, [r5, #8]
 80082f8:	e7cf      	b.n	800829a <__swbuf_r+0x1a>
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <__swbuf_r+0xa0>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	bf08      	it	eq
 8008300:	68ec      	ldreq	r4, [r5, #12]
 8008302:	e7ca      	b.n	800829a <__swbuf_r+0x1a>
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 f81e 	bl	8008348 <__swsetup_r>
 800830c:	2800      	cmp	r0, #0
 800830e:	d0cb      	beq.n	80082a8 <__swbuf_r+0x28>
 8008310:	f04f 37ff 	mov.w	r7, #4294967295
 8008314:	e7ea      	b.n	80082ec <__swbuf_r+0x6c>
 8008316:	bf00      	nop
 8008318:	080089c4 	.word	0x080089c4
 800831c:	080089e4 	.word	0x080089e4
 8008320:	080089a4 	.word	0x080089a4

08008324 <_write_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	; (8008344 <_write_r+0x20>)
 8008328:	4604      	mov	r4, r0
 800832a:	4608      	mov	r0, r1
 800832c:	4611      	mov	r1, r2
 800832e:	2200      	movs	r2, #0
 8008330:	602a      	str	r2, [r5, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f7f8 fd61 	bl	8000dfa <_write>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_write_r+0x1e>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b103      	cbz	r3, 8008342 <_write_r+0x1e>
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	20001ec0 	.word	0x20001ec0

08008348 <__swsetup_r>:
 8008348:	4b32      	ldr	r3, [pc, #200]	; (8008414 <__swsetup_r+0xcc>)
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	681d      	ldr	r5, [r3, #0]
 800834e:	4606      	mov	r6, r0
 8008350:	460c      	mov	r4, r1
 8008352:	b125      	cbz	r5, 800835e <__swsetup_r+0x16>
 8008354:	69ab      	ldr	r3, [r5, #24]
 8008356:	b913      	cbnz	r3, 800835e <__swsetup_r+0x16>
 8008358:	4628      	mov	r0, r5
 800835a:	f7ff fced 	bl	8007d38 <__sinit>
 800835e:	4b2e      	ldr	r3, [pc, #184]	; (8008418 <__swsetup_r+0xd0>)
 8008360:	429c      	cmp	r4, r3
 8008362:	d10f      	bne.n	8008384 <__swsetup_r+0x3c>
 8008364:	686c      	ldr	r4, [r5, #4]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800836c:	0719      	lsls	r1, r3, #28
 800836e:	d42c      	bmi.n	80083ca <__swsetup_r+0x82>
 8008370:	06dd      	lsls	r5, r3, #27
 8008372:	d411      	bmi.n	8008398 <__swsetup_r+0x50>
 8008374:	2309      	movs	r3, #9
 8008376:	6033      	str	r3, [r6, #0]
 8008378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800837c:	81a3      	strh	r3, [r4, #12]
 800837e:	f04f 30ff 	mov.w	r0, #4294967295
 8008382:	e03e      	b.n	8008402 <__swsetup_r+0xba>
 8008384:	4b25      	ldr	r3, [pc, #148]	; (800841c <__swsetup_r+0xd4>)
 8008386:	429c      	cmp	r4, r3
 8008388:	d101      	bne.n	800838e <__swsetup_r+0x46>
 800838a:	68ac      	ldr	r4, [r5, #8]
 800838c:	e7eb      	b.n	8008366 <__swsetup_r+0x1e>
 800838e:	4b24      	ldr	r3, [pc, #144]	; (8008420 <__swsetup_r+0xd8>)
 8008390:	429c      	cmp	r4, r3
 8008392:	bf08      	it	eq
 8008394:	68ec      	ldreq	r4, [r5, #12]
 8008396:	e7e6      	b.n	8008366 <__swsetup_r+0x1e>
 8008398:	0758      	lsls	r0, r3, #29
 800839a:	d512      	bpl.n	80083c2 <__swsetup_r+0x7a>
 800839c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800839e:	b141      	cbz	r1, 80083b2 <__swsetup_r+0x6a>
 80083a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083a4:	4299      	cmp	r1, r3
 80083a6:	d002      	beq.n	80083ae <__swsetup_r+0x66>
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 f991 	bl	80086d0 <_free_r>
 80083ae:	2300      	movs	r3, #0
 80083b0:	6363      	str	r3, [r4, #52]	; 0x34
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	2300      	movs	r3, #0
 80083bc:	6063      	str	r3, [r4, #4]
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f043 0308 	orr.w	r3, r3, #8
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	b94b      	cbnz	r3, 80083e2 <__swsetup_r+0x9a>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d8:	d003      	beq.n	80083e2 <__swsetup_r+0x9a>
 80083da:	4621      	mov	r1, r4
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 f92b 	bl	8008638 <__smakebuf_r>
 80083e2:	89a0      	ldrh	r0, [r4, #12]
 80083e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e8:	f010 0301 	ands.w	r3, r0, #1
 80083ec:	d00a      	beq.n	8008404 <__swsetup_r+0xbc>
 80083ee:	2300      	movs	r3, #0
 80083f0:	60a3      	str	r3, [r4, #8]
 80083f2:	6963      	ldr	r3, [r4, #20]
 80083f4:	425b      	negs	r3, r3
 80083f6:	61a3      	str	r3, [r4, #24]
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	b943      	cbnz	r3, 800840e <__swsetup_r+0xc6>
 80083fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008400:	d1ba      	bne.n	8008378 <__swsetup_r+0x30>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	0781      	lsls	r1, r0, #30
 8008406:	bf58      	it	pl
 8008408:	6963      	ldrpl	r3, [r4, #20]
 800840a:	60a3      	str	r3, [r4, #8]
 800840c:	e7f4      	b.n	80083f8 <__swsetup_r+0xb0>
 800840e:	2000      	movs	r0, #0
 8008410:	e7f7      	b.n	8008402 <__swsetup_r+0xba>
 8008412:	bf00      	nop
 8008414:	20000014 	.word	0x20000014
 8008418:	080089c4 	.word	0x080089c4
 800841c:	080089e4 	.word	0x080089e4
 8008420:	080089a4 	.word	0x080089a4

08008424 <_close_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d06      	ldr	r5, [pc, #24]	; (8008440 <_close_r+0x1c>)
 8008428:	2300      	movs	r3, #0
 800842a:	4604      	mov	r4, r0
 800842c:	4608      	mov	r0, r1
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	f7f8 fcff 	bl	8000e32 <_close>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_close_r+0x1a>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_close_r+0x1a>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	20001ec0 	.word	0x20001ec0

08008444 <__sflush_r>:
 8008444:	898a      	ldrh	r2, [r1, #12]
 8008446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	4605      	mov	r5, r0
 800844c:	0710      	lsls	r0, r2, #28
 800844e:	460c      	mov	r4, r1
 8008450:	d458      	bmi.n	8008504 <__sflush_r+0xc0>
 8008452:	684b      	ldr	r3, [r1, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	dc05      	bgt.n	8008464 <__sflush_r+0x20>
 8008458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	dc02      	bgt.n	8008464 <__sflush_r+0x20>
 800845e:	2000      	movs	r0, #0
 8008460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008466:	2e00      	cmp	r6, #0
 8008468:	d0f9      	beq.n	800845e <__sflush_r+0x1a>
 800846a:	2300      	movs	r3, #0
 800846c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008470:	682f      	ldr	r7, [r5, #0]
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	d032      	beq.n	80084dc <__sflush_r+0x98>
 8008476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	075a      	lsls	r2, r3, #29
 800847c:	d505      	bpl.n	800848a <__sflush_r+0x46>
 800847e:	6863      	ldr	r3, [r4, #4]
 8008480:	1ac0      	subs	r0, r0, r3
 8008482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008484:	b10b      	cbz	r3, 800848a <__sflush_r+0x46>
 8008486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008488:	1ac0      	subs	r0, r0, r3
 800848a:	2300      	movs	r3, #0
 800848c:	4602      	mov	r2, r0
 800848e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008490:	6a21      	ldr	r1, [r4, #32]
 8008492:	4628      	mov	r0, r5
 8008494:	47b0      	blx	r6
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	d106      	bne.n	80084aa <__sflush_r+0x66>
 800849c:	6829      	ldr	r1, [r5, #0]
 800849e:	291d      	cmp	r1, #29
 80084a0:	d82c      	bhi.n	80084fc <__sflush_r+0xb8>
 80084a2:	4a2a      	ldr	r2, [pc, #168]	; (800854c <__sflush_r+0x108>)
 80084a4:	40ca      	lsrs	r2, r1
 80084a6:	07d6      	lsls	r6, r2, #31
 80084a8:	d528      	bpl.n	80084fc <__sflush_r+0xb8>
 80084aa:	2200      	movs	r2, #0
 80084ac:	6062      	str	r2, [r4, #4]
 80084ae:	04d9      	lsls	r1, r3, #19
 80084b0:	6922      	ldr	r2, [r4, #16]
 80084b2:	6022      	str	r2, [r4, #0]
 80084b4:	d504      	bpl.n	80084c0 <__sflush_r+0x7c>
 80084b6:	1c42      	adds	r2, r0, #1
 80084b8:	d101      	bne.n	80084be <__sflush_r+0x7a>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	b903      	cbnz	r3, 80084c0 <__sflush_r+0x7c>
 80084be:	6560      	str	r0, [r4, #84]	; 0x54
 80084c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084c2:	602f      	str	r7, [r5, #0]
 80084c4:	2900      	cmp	r1, #0
 80084c6:	d0ca      	beq.n	800845e <__sflush_r+0x1a>
 80084c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d002      	beq.n	80084d6 <__sflush_r+0x92>
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 f8fd 	bl	80086d0 <_free_r>
 80084d6:	2000      	movs	r0, #0
 80084d8:	6360      	str	r0, [r4, #52]	; 0x34
 80084da:	e7c1      	b.n	8008460 <__sflush_r+0x1c>
 80084dc:	6a21      	ldr	r1, [r4, #32]
 80084de:	2301      	movs	r3, #1
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b0      	blx	r6
 80084e4:	1c41      	adds	r1, r0, #1
 80084e6:	d1c7      	bne.n	8008478 <__sflush_r+0x34>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0c4      	beq.n	8008478 <__sflush_r+0x34>
 80084ee:	2b1d      	cmp	r3, #29
 80084f0:	d001      	beq.n	80084f6 <__sflush_r+0xb2>
 80084f2:	2b16      	cmp	r3, #22
 80084f4:	d101      	bne.n	80084fa <__sflush_r+0xb6>
 80084f6:	602f      	str	r7, [r5, #0]
 80084f8:	e7b1      	b.n	800845e <__sflush_r+0x1a>
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	e7ad      	b.n	8008460 <__sflush_r+0x1c>
 8008504:	690f      	ldr	r7, [r1, #16]
 8008506:	2f00      	cmp	r7, #0
 8008508:	d0a9      	beq.n	800845e <__sflush_r+0x1a>
 800850a:	0793      	lsls	r3, r2, #30
 800850c:	680e      	ldr	r6, [r1, #0]
 800850e:	bf08      	it	eq
 8008510:	694b      	ldreq	r3, [r1, #20]
 8008512:	600f      	str	r7, [r1, #0]
 8008514:	bf18      	it	ne
 8008516:	2300      	movne	r3, #0
 8008518:	eba6 0807 	sub.w	r8, r6, r7
 800851c:	608b      	str	r3, [r1, #8]
 800851e:	f1b8 0f00 	cmp.w	r8, #0
 8008522:	dd9c      	ble.n	800845e <__sflush_r+0x1a>
 8008524:	6a21      	ldr	r1, [r4, #32]
 8008526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008528:	4643      	mov	r3, r8
 800852a:	463a      	mov	r2, r7
 800852c:	4628      	mov	r0, r5
 800852e:	47b0      	blx	r6
 8008530:	2800      	cmp	r0, #0
 8008532:	dc06      	bgt.n	8008542 <__sflush_r+0xfe>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	e78e      	b.n	8008460 <__sflush_r+0x1c>
 8008542:	4407      	add	r7, r0
 8008544:	eba8 0800 	sub.w	r8, r8, r0
 8008548:	e7e9      	b.n	800851e <__sflush_r+0xda>
 800854a:	bf00      	nop
 800854c:	20400001 	.word	0x20400001

08008550 <_fflush_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	690b      	ldr	r3, [r1, #16]
 8008554:	4605      	mov	r5, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b913      	cbnz	r3, 8008560 <_fflush_r+0x10>
 800855a:	2500      	movs	r5, #0
 800855c:	4628      	mov	r0, r5
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	b118      	cbz	r0, 800856a <_fflush_r+0x1a>
 8008562:	6983      	ldr	r3, [r0, #24]
 8008564:	b90b      	cbnz	r3, 800856a <_fflush_r+0x1a>
 8008566:	f7ff fbe7 	bl	8007d38 <__sinit>
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <_fflush_r+0x6c>)
 800856c:	429c      	cmp	r4, r3
 800856e:	d11b      	bne.n	80085a8 <_fflush_r+0x58>
 8008570:	686c      	ldr	r4, [r5, #4]
 8008572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0ef      	beq.n	800855a <_fflush_r+0xa>
 800857a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800857c:	07d0      	lsls	r0, r2, #31
 800857e:	d404      	bmi.n	800858a <_fflush_r+0x3a>
 8008580:	0599      	lsls	r1, r3, #22
 8008582:	d402      	bmi.n	800858a <_fflush_r+0x3a>
 8008584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008586:	f7ff fc9a 	bl	8007ebe <__retarget_lock_acquire_recursive>
 800858a:	4628      	mov	r0, r5
 800858c:	4621      	mov	r1, r4
 800858e:	f7ff ff59 	bl	8008444 <__sflush_r>
 8008592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008594:	07da      	lsls	r2, r3, #31
 8008596:	4605      	mov	r5, r0
 8008598:	d4e0      	bmi.n	800855c <_fflush_r+0xc>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	059b      	lsls	r3, r3, #22
 800859e:	d4dd      	bmi.n	800855c <_fflush_r+0xc>
 80085a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085a2:	f7ff fc8d 	bl	8007ec0 <__retarget_lock_release_recursive>
 80085a6:	e7d9      	b.n	800855c <_fflush_r+0xc>
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <_fflush_r+0x70>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d101      	bne.n	80085b2 <_fflush_r+0x62>
 80085ae:	68ac      	ldr	r4, [r5, #8]
 80085b0:	e7df      	b.n	8008572 <_fflush_r+0x22>
 80085b2:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <_fflush_r+0x74>)
 80085b4:	429c      	cmp	r4, r3
 80085b6:	bf08      	it	eq
 80085b8:	68ec      	ldreq	r4, [r5, #12]
 80085ba:	e7da      	b.n	8008572 <_fflush_r+0x22>
 80085bc:	080089c4 	.word	0x080089c4
 80085c0:	080089e4 	.word	0x080089e4
 80085c4:	080089a4 	.word	0x080089a4

080085c8 <_lseek_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_lseek_r+0x20>)
 80085cc:	4604      	mov	r4, r0
 80085ce:	4608      	mov	r0, r1
 80085d0:	4611      	mov	r1, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	602a      	str	r2, [r5, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f7f8 fc52 	bl	8000e80 <_lseek>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d102      	bne.n	80085e6 <_lseek_r+0x1e>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	b103      	cbz	r3, 80085e6 <_lseek_r+0x1e>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	20001ec0 	.word	0x20001ec0

080085ec <__swhatbuf_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	460e      	mov	r6, r1
 80085f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f4:	2900      	cmp	r1, #0
 80085f6:	b096      	sub	sp, #88	; 0x58
 80085f8:	4614      	mov	r4, r2
 80085fa:	461d      	mov	r5, r3
 80085fc:	da08      	bge.n	8008610 <__swhatbuf_r+0x24>
 80085fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	061a      	lsls	r2, r3, #24
 8008608:	d410      	bmi.n	800862c <__swhatbuf_r+0x40>
 800860a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860e:	e00e      	b.n	800862e <__swhatbuf_r+0x42>
 8008610:	466a      	mov	r2, sp
 8008612:	f000 f8bb 	bl	800878c <_fstat_r>
 8008616:	2800      	cmp	r0, #0
 8008618:	dbf1      	blt.n	80085fe <__swhatbuf_r+0x12>
 800861a:	9a01      	ldr	r2, [sp, #4]
 800861c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008620:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008624:	425a      	negs	r2, r3
 8008626:	415a      	adcs	r2, r3
 8008628:	602a      	str	r2, [r5, #0]
 800862a:	e7ee      	b.n	800860a <__swhatbuf_r+0x1e>
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	2000      	movs	r0, #0
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	b016      	add	sp, #88	; 0x58
 8008634:	bd70      	pop	{r4, r5, r6, pc}
	...

08008638 <__smakebuf_r>:
 8008638:	898b      	ldrh	r3, [r1, #12]
 800863a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800863c:	079d      	lsls	r5, r3, #30
 800863e:	4606      	mov	r6, r0
 8008640:	460c      	mov	r4, r1
 8008642:	d507      	bpl.n	8008654 <__smakebuf_r+0x1c>
 8008644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	6123      	str	r3, [r4, #16]
 800864c:	2301      	movs	r3, #1
 800864e:	6163      	str	r3, [r4, #20]
 8008650:	b002      	add	sp, #8
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	ab01      	add	r3, sp, #4
 8008656:	466a      	mov	r2, sp
 8008658:	f7ff ffc8 	bl	80085ec <__swhatbuf_r>
 800865c:	9900      	ldr	r1, [sp, #0]
 800865e:	4605      	mov	r5, r0
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff fc65 	bl	8007f30 <_malloc_r>
 8008666:	b948      	cbnz	r0, 800867c <__smakebuf_r+0x44>
 8008668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800866c:	059a      	lsls	r2, r3, #22
 800866e:	d4ef      	bmi.n	8008650 <__smakebuf_r+0x18>
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	f043 0302 	orr.w	r3, r3, #2
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	e7e3      	b.n	8008644 <__smakebuf_r+0xc>
 800867c:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <__smakebuf_r+0x7c>)
 800867e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	6020      	str	r0, [r4, #0]
 8008684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	9b00      	ldr	r3, [sp, #0]
 800868c:	6163      	str	r3, [r4, #20]
 800868e:	9b01      	ldr	r3, [sp, #4]
 8008690:	6120      	str	r0, [r4, #16]
 8008692:	b15b      	cbz	r3, 80086ac <__smakebuf_r+0x74>
 8008694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008698:	4630      	mov	r0, r6
 800869a:	f000 f889 	bl	80087b0 <_isatty_r>
 800869e:	b128      	cbz	r0, 80086ac <__smakebuf_r+0x74>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	89a0      	ldrh	r0, [r4, #12]
 80086ae:	4305      	orrs	r5, r0
 80086b0:	81a5      	strh	r5, [r4, #12]
 80086b2:	e7cd      	b.n	8008650 <__smakebuf_r+0x18>
 80086b4:	08007cd1 	.word	0x08007cd1

080086b8 <__malloc_lock>:
 80086b8:	4801      	ldr	r0, [pc, #4]	; (80086c0 <__malloc_lock+0x8>)
 80086ba:	f7ff bc00 	b.w	8007ebe <__retarget_lock_acquire_recursive>
 80086be:	bf00      	nop
 80086c0:	20001eb4 	.word	0x20001eb4

080086c4 <__malloc_unlock>:
 80086c4:	4801      	ldr	r0, [pc, #4]	; (80086cc <__malloc_unlock+0x8>)
 80086c6:	f7ff bbfb 	b.w	8007ec0 <__retarget_lock_release_recursive>
 80086ca:	bf00      	nop
 80086cc:	20001eb4 	.word	0x20001eb4

080086d0 <_free_r>:
 80086d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086d2:	2900      	cmp	r1, #0
 80086d4:	d044      	beq.n	8008760 <_free_r+0x90>
 80086d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086da:	9001      	str	r0, [sp, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f1a1 0404 	sub.w	r4, r1, #4
 80086e2:	bfb8      	it	lt
 80086e4:	18e4      	addlt	r4, r4, r3
 80086e6:	f7ff ffe7 	bl	80086b8 <__malloc_lock>
 80086ea:	4a1e      	ldr	r2, [pc, #120]	; (8008764 <_free_r+0x94>)
 80086ec:	9801      	ldr	r0, [sp, #4]
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	b933      	cbnz	r3, 8008700 <_free_r+0x30>
 80086f2:	6063      	str	r3, [r4, #4]
 80086f4:	6014      	str	r4, [r2, #0]
 80086f6:	b003      	add	sp, #12
 80086f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086fc:	f7ff bfe2 	b.w	80086c4 <__malloc_unlock>
 8008700:	42a3      	cmp	r3, r4
 8008702:	d908      	bls.n	8008716 <_free_r+0x46>
 8008704:	6825      	ldr	r5, [r4, #0]
 8008706:	1961      	adds	r1, r4, r5
 8008708:	428b      	cmp	r3, r1
 800870a:	bf01      	itttt	eq
 800870c:	6819      	ldreq	r1, [r3, #0]
 800870e:	685b      	ldreq	r3, [r3, #4]
 8008710:	1949      	addeq	r1, r1, r5
 8008712:	6021      	streq	r1, [r4, #0]
 8008714:	e7ed      	b.n	80086f2 <_free_r+0x22>
 8008716:	461a      	mov	r2, r3
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	b10b      	cbz	r3, 8008720 <_free_r+0x50>
 800871c:	42a3      	cmp	r3, r4
 800871e:	d9fa      	bls.n	8008716 <_free_r+0x46>
 8008720:	6811      	ldr	r1, [r2, #0]
 8008722:	1855      	adds	r5, r2, r1
 8008724:	42a5      	cmp	r5, r4
 8008726:	d10b      	bne.n	8008740 <_free_r+0x70>
 8008728:	6824      	ldr	r4, [r4, #0]
 800872a:	4421      	add	r1, r4
 800872c:	1854      	adds	r4, r2, r1
 800872e:	42a3      	cmp	r3, r4
 8008730:	6011      	str	r1, [r2, #0]
 8008732:	d1e0      	bne.n	80086f6 <_free_r+0x26>
 8008734:	681c      	ldr	r4, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	6053      	str	r3, [r2, #4]
 800873a:	4421      	add	r1, r4
 800873c:	6011      	str	r1, [r2, #0]
 800873e:	e7da      	b.n	80086f6 <_free_r+0x26>
 8008740:	d902      	bls.n	8008748 <_free_r+0x78>
 8008742:	230c      	movs	r3, #12
 8008744:	6003      	str	r3, [r0, #0]
 8008746:	e7d6      	b.n	80086f6 <_free_r+0x26>
 8008748:	6825      	ldr	r5, [r4, #0]
 800874a:	1961      	adds	r1, r4, r5
 800874c:	428b      	cmp	r3, r1
 800874e:	bf04      	itt	eq
 8008750:	6819      	ldreq	r1, [r3, #0]
 8008752:	685b      	ldreq	r3, [r3, #4]
 8008754:	6063      	str	r3, [r4, #4]
 8008756:	bf04      	itt	eq
 8008758:	1949      	addeq	r1, r1, r5
 800875a:	6021      	streq	r1, [r4, #0]
 800875c:	6054      	str	r4, [r2, #4]
 800875e:	e7ca      	b.n	80086f6 <_free_r+0x26>
 8008760:	b003      	add	sp, #12
 8008762:	bd30      	pop	{r4, r5, pc}
 8008764:	20001eb8 	.word	0x20001eb8

08008768 <_read_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_read_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7f8 fb22 	bl	8000dc0 <_read>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_read_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_read_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20001ec0 	.word	0x20001ec0

0800878c <_fstat_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d07      	ldr	r5, [pc, #28]	; (80087ac <_fstat_r+0x20>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	f7f8 fb56 	bl	8000e4a <_fstat>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d102      	bne.n	80087a8 <_fstat_r+0x1c>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	b103      	cbz	r3, 80087a8 <_fstat_r+0x1c>
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	20001ec0 	.word	0x20001ec0

080087b0 <_isatty_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d06      	ldr	r5, [pc, #24]	; (80087cc <_isatty_r+0x1c>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	f7f8 fb55 	bl	8000e6a <_isatty>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_isatty_r+0x1a>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_isatty_r+0x1a>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	20001ec0 	.word	0x20001ec0

080087d0 <_init>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr

080087dc <_fini>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr
